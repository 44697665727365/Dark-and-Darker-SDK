#pragma once 
#include <SDK_Engine_Objects.h> 
 
 
// Function Engine.HUD.ReceiveHitBoxClick
struct FReceiveHitBoxClick
{
	struct FName BoxName;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.MaterialInput
struct FMaterialInput
{
	struct UMaterialExpression* Expression;  // 0x0 (0x0)
	int32_t OutputIndex;  // 0x8 (0x8)
	struct FName InputName;  // 0xC (0xC)
	int32_t Mask;  // 0x14 (0x14)
	int32_t MaskR;  // 0x18 (0x18)
	int32_t MaskG;  // 0x1C (0x1C)
	int32_t MaskB;  // 0x20 (0x20)
	int32_t MaskA;  // 0x24 (0x24)


}; 
 
 // ScriptStruct Engine.AnimNode_ConvertLocalToComponentSpace
// Size: 0x20(Inherited: 0x10)
struct FAnimNode_ConvertLocalToComponentSpace : FAnimNode_Base
{
	struct FPoseLink LocalPose;  // 0x10 (0x10)


}; 
 
 // Function Engine.Character.K2_OnMovementModeChanged
struct FK2_OnMovementModeChanged
{
	enum class EMovementMode PrevMovementMode;  // 0x0 (0x0)
	enum class EMovementMode NewMovementMode;  // 0x1 (0x1)
	char PrevCustomMode;  // 0x2 (0x2)
	char NewCustomMode;  // 0x3 (0x3)


}; 
 
 // Function Engine.CheatManager.BugItGo
struct FBugItGo
{
	float X;  // 0x0 (0x0)
	float Y;  // 0x4 (0x4)
	float Z;  // 0x8 (0x8)
	float Pitch;  // 0xC (0xC)
	float Yaw;  // 0x10 (0x10)
	float Roll;  // 0x14 (0x14)


}; 
 
 // Function Engine.GameplayStatics.DoesSaveGameExist
struct FDoesSaveGameExist
{
	struct FString SlotName;  // 0x0 (0x0)
	int32_t UserIndex;  // 0x10 (0x10)
	char pad_20_1 : 7;  // 0x14 (0x14)
	bool ReturnValue : 1;  // 0x14 (0x14)
	char pad_21[3];  // 0x15 (0x15)


}; 
 
 // Function Engine.AnimationDataController.RemoveAllAttributesForBone
struct FRemoveAllAttributesForBone
{
	struct FName BoneName;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bShouldTransact : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)
	int32_t ReturnValue;  // 0xC (0xC)


}; 
 
 // ScriptStruct Engine.AnimNode_SequencePlayerBase
// Size: 0x40(Inherited: 0x38)
struct FAnimNode_SequencePlayerBase : FAnimNode_AssetPlayerBase
{
	struct FInputScaleBiasClampState PlayRateScaleBiasClampState;  // 0x38 (0x38)


}; 
 
 // ScriptStruct Engine.CompositeReroute
struct FCompositeReroute
{
	struct FName Name;  // 0x0 (0x0)
	struct UMaterialExpressionReroute* Expression;  // 0x8 (0x8)


}; 
 
 // DelegateFunction Engine.OnPossessedPawnChanged__DelegateSignature
struct FOnPossessedPawnChanged__DelegateSignature
{
	struct APawn* OldPawn;  // 0x0 (0x0)
	struct APawn* NewPawn;  // 0x8 (0x8)


}; 
 
 // Function Engine.ForceFeedbackComponent.AdjustAttenuation
struct FAdjustAttenuation
{
	struct FForceFeedbackAttenuationSettings InAttenuationSettings;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_Left
struct FVector_Left
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // DelegateFunction Engine.LandedSignature__DelegateSignature
struct FLandedSignature__DelegateSignature
{
	struct FHitResult Hit;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Multiply_VectorInt
struct FMultiply_VectorInt
{
	struct FVector A;  // 0x0 (0x0)
	int32_t B;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)
	struct FVector ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.GameplayStatics.SetActiveSpatialPluginByName
struct FSetActiveSpatialPluginByName
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FName InPluginName;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // ScriptStruct Engine.ExpressionOutput
struct FExpressionOutput
{
	struct FName OutputName;  // 0x0 (0x0)
	int32_t Mask;  // 0x8 (0x8)
	int32_t MaskR;  // 0xC (0xC)
	int32_t MaskG;  // 0x10 (0x10)
	int32_t MaskB;  // 0x14 (0x14)
	int32_t MaskA;  // 0x18 (0x18)


}; 
 
 // ScriptStruct Engine.ColorMaterialInput
// Size: 0x30(Inherited: 0x28)
struct FColorMaterialInput : FMaterialInput
{
	char UseConstant : 1;  // 0x28 (0x28)
	char pad_40_1 : 7;  // 0x28 (0x28)
	char pad_41[4];  // 0x29 (0x29)
	struct FColor Constant;  // 0x2C (0x2C)


}; 
 
 // Function Engine.KismetRenderingLibrary.ReadRenderTargetRaw
struct FReadRenderTargetRaw
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct UTextureRenderTarget2D* TextureRenderTarget;  // 0x8 (0x8)
	struct TArray<struct FLinearColor> OutLinearSamples;  // 0x10 (0x10)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool bNormalize : 1;  // 0x20 (0x20)
	char pad_33_1 : 7;  // 0x21 (0x21)
	bool ReturnValue : 1;  // 0x21 (0x21)
	char pad_34[6];  // 0x22 (0x22)


}; 
 
 // Function Engine.KismetMathLibrary.Matrix_GetFrustumRightPlane
struct FMatrix_GetFrustumRightPlane
{
	struct FMatrix M;  // 0x0 (0x0)
	struct FPlane OutPlane;  // 0x80 (0x80)
	char pad_160_1 : 7;  // 0xA0 (0xA0)
	bool ReturnValue : 1;  // 0xA0 (0xA0)
	char pad_161[15];  // 0xA1 (0xA1)


}; 
 
 // Function Engine.KismetSystemLibrary.K2_InvalidateTimerHandle
struct FK2_InvalidateTimerHandle
{
	struct FTimerHandle Handle;  // 0x0 (0x0)
	struct FTimerHandle ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetSystemLibrary.ParseCommandLine
struct FParseCommandLine
{
	struct FString InCmdLine;  // 0x0 (0x0)
	struct TArray<struct FString> OutTokens;  // 0x10 (0x10)
	struct TArray<struct FString> OutSwitches;  // 0x20 (0x20)
	struct TMap<struct FString, struct FString> OutParams;  // 0x30 (0x30)


}; 
 
 // ScriptStruct Engine.A2Pose
struct FA2Pose
{
	struct TArray<struct FTransform> Bones;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.DistributionLookupTable
struct FDistributionLookupTable
{
	float TimeScale;  // 0x0 (0x0)
	float TimeBias;  // 0x4 (0x4)
	struct TArray<float> Values;  // 0x8 (0x8)
	char Op;  // 0x18 (0x18)
	char EntryCount;  // 0x19 (0x19)
	char EntryStride;  // 0x1A (0x1A)
	char SubEntryStride;  // 0x1B (0x1B)
	char LockFlag;  // 0x1C (0x1C)
	char pad_29[3];  // 0x1D (0x1D)


}; 
 
 // Function Engine.PrimitiveComponent.SetEmissiveLightSource
struct FSetEmissiveLightSource
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool NewEmissiveLightSource : 1;  // 0x0 (0x0)


}; 
 
 // DelegateFunction Engine.OnSubmixEnvelope__DelegateSignature
struct FOnSubmixEnvelope__DelegateSignature
{
	struct TArray<float> Envelope;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameplayStatics.GetIntOption
struct FGetIntOption
{
	struct FString Options;  // 0x0 (0x0)
	struct FString Key;  // 0x10 (0x10)
	int32_t DefaultValue;  // 0x20 (0x20)
	int32_t ReturnValue;  // 0x24 (0x24)


}; 
 
 // ScriptStruct Engine.LatentActionInfo
struct FLatentActionInfo
{
	int32_t Linkage;  // 0x0 (0x0)
	int32_t UUID;  // 0x4 (0x4)
	struct FName ExecutionFunction;  // 0x8 (0x8)
	struct UObject* CallbackTarget;  // 0x10 (0x10)


}; 
 
 // Function Engine.GameViewportClient.SetConsoleTarget
struct FSetConsoleTarget
{
	int32_t PlayerIndex;  // 0x0 (0x0)


}; 
 
 // Function Engine.InstancedStaticMeshComponent.SetCullDistances
struct FSetCullDistances
{
	int32_t StartCullDistance;  // 0x0 (0x0)
	int32_t EndCullDistance;  // 0x4 (0x4)


}; 
 
 // DelegateFunction Engine.OnQueueSubtitles__DelegateSignature
struct FOnQueueSubtitles__DelegateSignature
{
	struct TArray<struct FSubtitleCue> Subtitles;  // 0x0 (0x0)
	float CueDuration;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)


}; 
 
 // ScriptStruct Engine.SoundWaveSpectralData
struct FSoundWaveSpectralData
{
	float FrequencyHz;  // 0x0 (0x0)
	float Magnitude;  // 0x4 (0x4)
	float NormalizedMagnitude;  // 0x8 (0x8)


}; 
 
 // Function Engine.ActorComponent.SetAutoActivate
struct FSetAutoActivate
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewAutoActivate : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.GetDistanceTo
struct FGetDistanceTo
{
	struct AActor* OtherActor;  // 0x0 (0x0)
	float ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // DelegateFunction Engine.OnActorReady__DelegateSignature
struct FOnActorReady__DelegateSignature
{
	struct FActorInstanceHandle InHandle;  // 0x0 (0x0)
	struct FActorInstanceHandle ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetInputLibrary.InputEvent_IsLeftShiftDown
struct FInputEvent_IsLeftShiftDown
{
	struct FInputEvent Input;  // 0x0 (0x0)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.Actor.GetActorRelativeScale3D
struct FGetActorRelativeScale3D
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SoundSubmix.AddSpectralAnalysisDelegate
struct FAddSpectralAnalysisDelegate
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct TArray<struct FSoundSubmixSpectralAnalysisBandSettings> InBandSettings;  // 0x8 (0x8)
	struct FDelegate OnSubmixSpectralAnalysisBP;  // 0x18 (0x18)
	float UpdateRate;  // 0x28 (0x28)
	float DecibelNoiseFloor;  // 0x2C (0x2C)
	char pad_48_1 : 7;  // 0x30 (0x30)
	bool bDoNormalize : 1;  // 0x30 (0x30)
	char pad_49_1 : 7;  // 0x31 (0x31)
	bool bDoAutoRange : 1;  // 0x31 (0x31)
	char pad_50[2];  // 0x32 (0x32)
	float AutoRangeAttackTime;  // 0x34 (0x34)
	float AutoRangeReleaseTime;  // 0x38 (0x38)
	char pad_60[4];  // 0x3C (0x3C)


}; 
 
 // ScriptStruct Engine.ExpressionInput
struct FExpressionInput
{
	struct UMaterialExpression* Expression;  // 0x0 (0x0)
	int32_t OutputIndex;  // 0x8 (0x8)
	struct FName InputName;  // 0xC (0xC)
	int32_t Mask;  // 0x14 (0x14)
	int32_t MaskR;  // 0x18 (0x18)
	int32_t MaskG;  // 0x1C (0x1C)
	int32_t MaskB;  // 0x20 (0x20)
	int32_t MaskA;  // 0x24 (0x24)


}; 
 
 // Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceStationaryLight
struct FSetDynamicShadowDistanceStationaryLight
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.SetObjectPropertyByName
struct FSetObjectPropertyByName
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FName PropertyName;  // 0x8 (0x8)
	struct UObject* Value;  // 0x10 (0x10)


}; 
 
 // DelegateFunction Engine.OnSubmixEnvelopeBP__DelegateSignature
struct FOnSubmixEnvelopeBP__DelegateSignature
{
	struct TArray<float> Envelope;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameModeBase.K2_OnSwapPlayerControllers
struct FK2_OnSwapPlayerControllers
{
	struct APlayerController* OldPC;  // 0x0 (0x0)
	struct APlayerController* NewPC;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.HitResult
struct FHitResult
{
	int32_t FaceIndex;  // 0x0 (0x0)
	float Time;  // 0x4 (0x4)
	float Distance;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)
	struct FVector_NetQuantize Location;  // 0x10 (0x10)
	struct FVector_NetQuantize ImpactPoint;  // 0x28 (0x28)
	struct FVector_NetQuantizeNormal Normal;  // 0x40 (0x40)
	struct FVector_NetQuantizeNormal ImpactNormal;  // 0x58 (0x58)
	struct FVector_NetQuantize TraceStart;  // 0x70 (0x70)
	struct FVector_NetQuantize TraceEnd;  // 0x88 (0x88)
	float PenetrationDepth;  // 0xA0 (0xA0)
	int32_t MyItem;  // 0xA4 (0xA4)
	int32_t Item;  // 0xA8 (0xA8)
	char ElementIndex;  // 0xAC (0xAC)
	char bBlockingHit : 1;  // 0xAD (0xAD)
	char bStartPenetrating : 1;  // 0xAD (0xAD)
	char pad_173_1 : 6;  // 0xAD (0xAD)
	char pad_174[3];  // 0xAE (0xAE)
	struct TWeakObjectPtr<UPhysicalMaterial> PhysMaterial;  // 0xB0 (0xB0)
	struct FActorInstanceHandle HitObjectHandle;  // 0xB8 (0xB8)
	struct TWeakObjectPtr<UPrimitiveComponent> Component;  // 0xD0 (0xD0)
	struct FName BoneName;  // 0xD8 (0xD8)
	struct FName MyBoneName;  // 0xE0 (0xE0)


}; 
 
 // Function Engine.KismetSystemLibrary.ResetGamepadAssignmentToController
struct FResetGamepadAssignmentToController
{
	int32_t ControllerId;  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.GetMassScale
struct FGetMassScale
{
	struct FName BoneName;  // 0x0 (0x0)
	float ReturnValue;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.FloatDistribution
struct FFloatDistribution
{
	struct FDistributionLookupTable Table;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineComponent.GetTransformAtSplineInputKey
struct FGetTransformAtSplineInputKey
{
	float InKey;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x4 (0x4)
	char pad_5_1 : 7;  // 0x5 (0x5)
	bool bUseScale : 1;  // 0x5 (0x5)
	char pad_6[10];  // 0x6 (0x6)
	struct FTransform ReturnValue;  // 0x10 (0x10)


}; 
 
 // DelegateFunction Engine.MovementModeChangedSignature__DelegateSignature
struct FMovementModeChangedSignature__DelegateSignature
{
	struct ACharacter* Character;  // 0x0 (0x0)
	enum class EMovementMode PrevMovementMode;  // 0x8 (0x8)
	char PreviousCustomMode;  // 0x9 (0x9)
	char pad_10[6];  // 0xA (0xA)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_ByteToInt64
struct FConv_ByteToInt64
{
	char InByte;  // 0x0 (0x0)
	char pad_1[7];  // 0x1 (0x1)
	int64_t ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.PrimitiveComponent.SetVisibleInRayTracing
struct FSetVisibleInRayTracing
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewVisibleInRayTracing : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.CameraComponent.SetAspectRatio
struct FSetAspectRatio
{
	float InAspectRatio;  // 0x0 (0x0)


}; 
 
 // Function Engine.SceneComponent.K2_SetWorldLocation
struct FK2_SetWorldLocation
{
	struct FVector NewLocation;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bSweep : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)
	struct FHitResult SweepHitResult;  // 0x20 (0x20)
	char pad_264_1 : 7;  // 0x108 (0x108)
	bool bTeleport : 1;  // 0x108 (0x108)
	char pad_265[7];  // 0x109 (0x109)


}; 
 
 // Function Engine.KismetMathLibrary.BooleanNOR
struct FBooleanNOR
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool A : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool B : 1;  // 0x1 (0x1)
	char pad_2_1 : 7;  // 0x2 (0x2)
	bool ReturnValue : 1;  // 0x2 (0x2)


}; 
 
 // ScriptStruct Engine.FloatRK4SpringInterpolator
struct FFloatRK4SpringInterpolator
{
	float StiffnessConstant;  // 0x0 (0x0)
	float DampeningRatio;  // 0x4 (0x4)


}; 
 
 // Function Engine.ImportanceSamplingLibrary.ImportanceSample
struct FImportanceSample
{
	struct FImportanceTexture Texture;  // 0x0 (0x0)
	struct FVector2D Rand;  // 0x50 (0x50)
	int32_t Samples;  // 0x60 (0x60)
	float Intensity;  // 0x64 (0x64)
	struct FVector2D SamplePosition;  // 0x68 (0x68)
	struct FLinearColor SampleColor;  // 0x78 (0x78)
	float SampleIntensity;  // 0x88 (0x88)
	float SampleSize;  // 0x8C (0x8C)


}; 
 
 // DelegateFunction Engine.OnQuartzCommandEvent__DelegateSignature
struct FOnQuartzCommandEvent__DelegateSignature
{
	uint8_t EventType;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	struct FName Name;  // 0x4 (0x4)


}; 
 
 // ScriptStruct Engine.Vector_NetQuantizeNormal
// Size: 0x18(Inherited: 0x18)
struct FVector_NetQuantizeNormal : FVector
{


}; 
 
 // Function Engine.Texture2D.Blueprint_GetSizeY
struct FBlueprint_GetSizeY
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.PropertyAccessLibrary
struct FPropertyAccessLibrary
{
	struct TArray<struct FPropertyAccessSegment> PathSegments;  // 0x0 (0x0)
	struct TArray<struct FPropertyAccessPath> SrcPaths;  // 0x10 (0x10)
	struct TArray<struct FPropertyAccessPath> DestPaths;  // 0x20 (0x20)
	struct TArray<struct FPropertyAccessCopyBatch> CopyBatchArray;  // 0x30 (0x30)
	char pad_64[56];  // 0x40 (0x40)


}; 
 
 // DelegateFunction Engine.OnAudioMultiEnvelopeValue__DelegateSignature
struct FOnAudioMultiEnvelopeValue__DelegateSignature
{
	float AverageEnvelopeValue;  // 0x0 (0x0)
	float MaxEnvelope;  // 0x4 (0x4)
	int32_t NumWaveInstances;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.BreakTimespan2
struct FBreakTimespan2
{
	struct FTimespan InTimespan;  // 0x0 (0x0)
	int32_t Days;  // 0x8 (0x8)
	int32_t Hours;  // 0xC (0xC)
	int32_t Minutes;  // 0x10 (0x10)
	int32_t Seconds;  // 0x14 (0x14)
	int32_t FractionNano;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)


}; 
 
 // DelegateFunction Engine.OnMontageEndedMCDelegate__DelegateSignature
struct FOnMontageEndedMCDelegate__DelegateSignature
{
	struct UAnimMontage* Montage;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bInterrupted : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.AnimInstance.GetPropagateNotifiesToLinkedInstances
struct FGetPropagateNotifiesToLinkedInstances
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // DelegateFunction Engine.OnAudioPlaybackPercent__DelegateSignature
struct FOnAudioPlaybackPercent__DelegateSignature
{
	struct USoundWave* PlayingSoundWave;  // 0x0 (0x0)
	float PlaybackPercent;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.KismetSystemLibrary.SetUserActivity
struct FSetUserActivity
{
	struct FUserActivity UserActivity;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameplayStatics.FindNearestActor
struct FFindNearestActor
{
	struct FVector Origin;  // 0x0 (0x0)
	struct TArray<struct AActor*> ActorsToCheck;  // 0x18 (0x18)
	float Distance;  // 0x28 (0x28)
	char pad_44[4];  // 0x2C (0x2C)
	struct AActor* ReturnValue;  // 0x30 (0x30)


}; 
 
 // ScriptStruct Engine.FormatArgumentData
struct FFormatArgumentData
{
	struct FString ArgumentName;  // 0x0 (0x0)
	enum class EFormatArgumentType ArgumentValueType;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)
	struct FText ArgumentValue;  // 0x18 (0x18)
	int64_t ArgumentValueInt;  // 0x30 (0x30)
	float ArgumentValueFloat;  // 0x38 (0x38)
	char pad_60[4];  // 0x3C (0x3C)
	double ArgumentValueDouble;  // 0x40 (0x40)
	uint8_t ArgumentValueGender;  // 0x48 (0x48)
	char pad_73[7];  // 0x49 (0x49)


}; 
 
 // ScriptStruct Engine.DataCacheDuplicatedObjectData
struct FDataCacheDuplicatedObjectData
{
	char pad_0[16];  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.GetActorEnableCollision
struct FGetActorEnableCollision
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.DataTableRowHandle
struct FDataTableRowHandle
{
	struct UDataTable* DataTable;  // 0x0 (0x0)
	struct FName RowName;  // 0x8 (0x8)


}; 
 
 // DelegateFunction Engine.OnMontageBlendingOutStartedMCDelegate__DelegateSignature
struct FOnMontageBlendingOutStartedMCDelegate__DelegateSignature
{
	struct UAnimMontage* Montage;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bInterrupted : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.KismetMathLibrary.VSizeXY
struct FVSizeXY
{
	struct FVector A;  // 0x0 (0x0)
	double ReturnValue;  // 0x18 (0x18)


}; 
 
 // ScriptStruct Engine.MaterialParameterCollectionInfo
struct FMaterialParameterCollectionInfo
{
	struct FGuid StateId;  // 0x0 (0x0)
	struct UMaterialParameterCollection* ParameterCollection;  // 0x10 (0x10)


}; 
 
 // Function Engine.GameplayStatics.AreSubtitlesEnabled
struct FAreSubtitlesEnabled
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.CollisionProfileName
struct FCollisionProfileName
{
	struct FName Name;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.PerPlatformFloat
struct FPerPlatformFloat
{
	float Default;  // 0x0 (0x0)


}; 
 
 // Function Engine.FXSystemComponent.SetUseAutoManageAttachment
struct FSetUseAutoManageAttachment
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bAutoManage : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.AtmosphericFogComponent.SetPrecomputeParams
struct FSetPrecomputeParams
{
	float DensityHeight;  // 0x0 (0x0)
	int32_t MaxScatteringOrder;  // 0x4 (0x4)
	int32_t InscatterAltitudeSampleNum;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.PhysicalAnimationProfile
struct FPhysicalAnimationProfile
{
	struct FName ProfileName;  // 0x0 (0x0)
	struct FPhysicalAnimationData PhysicalAnimationData;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.MaterialAttributesInput
// Size: 0x30(Inherited: 0x28)
struct FMaterialAttributesInput : FExpressionInput
{
	int32_t PropertyConnectedBitmask;  // 0x28 (0x28)
	char pad_44[4];  // 0x2C (0x2C)


}; 
 
 // Function Engine.PlayerState.GetPlayerId
struct FGetPlayerId
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.ConstrainComponentPropName
struct FConstrainComponentPropName
{
	struct FName ComponentName;  // 0x0 (0x0)


}; 
 
 // Function Engine.InputSettings.GetActionMappingByName
struct FGetActionMappingByName
{
	struct FName InActionName;  // 0x0 (0x0)
	struct TArray<struct FInputActionKeyMapping> OutMappings;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.NonBlendableQuaternionAnimationAttribute
// Size: 0x20(Inherited: 0x20)
struct FNonBlendableQuaternionAnimationAttribute : FQuaternionAnimationAttribute
{


}; 
 
 // Function Engine.Actor.ReceiveTick
struct FReceiveTick
{
	float DeltaSeconds;  // 0x0 (0x0)


}; 
 
 // DelegateFunction Engine.OnQuartzCommandEventBP__DelegateSignature
struct FOnQuartzCommandEventBP__DelegateSignature
{
	uint8_t EventType;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	struct FName Name;  // 0x4 (0x4)


}; 
 
 // Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInRadiansFromStream
struct FRandomUnitVectorInEllipticalConeInRadiansFromStream
{
	struct FVector ConeDir;  // 0x0 (0x0)
	float MaxYawInRadians;  // 0x18 (0x18)
	float MaxPitchInRadians;  // 0x1C (0x1C)
	struct FRandomStream Stream;  // 0x20 (0x20)
	struct FVector ReturnValue;  // 0x28 (0x28)


}; 
 
 // Function Engine.BlueprintPlatformLibrary.GetLaunchNotification
struct FGetLaunchNotification
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool NotificationLaunchedApp : 1;  // 0x0 (0x0)
	char pad_1[7];  // 0x1 (0x1)
	struct FString ActivationEvent;  // 0x8 (0x8)
	int32_t FireDate;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_IntToVector
struct FConv_IntToVector
{
	int32_t inInt;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.MakeRotFromY
struct FMakeRotFromY
{
	struct FVector Y;  // 0x0 (0x0)
	struct FRotator ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.Character.ServerMove
struct FServerMove
{
	float Timestamp;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector_NetQuantize10 InAccel;  // 0x8 (0x8)
	struct FVector_NetQuantize100 ClientLoc;  // 0x20 (0x20)
	char CompressedMoveFlags;  // 0x38 (0x38)
	char ClientRoll;  // 0x39 (0x39)
	char pad_58[2];  // 0x3A (0x3A)
	uint32_t View;  // 0x3C (0x3C)
	struct UPrimitiveComponent* ClientMovementBase;  // 0x40 (0x40)
	struct FName ClientBaseBoneName;  // 0x48 (0x48)
	char ClientMovementMode;  // 0x50 (0x50)
	char pad_81[7];  // 0x51 (0x51)


}; 
 
 // ScriptStruct Engine.EquirectProps
struct FEquirectProps
{
	struct FBox2D LeftUVRect;  // 0x0 (0x0)
	struct FBox2D RightUVRect;  // 0x28 (0x28)
	struct FVector2D LeftScale;  // 0x50 (0x50)
	struct FVector2D RightScale;  // 0x60 (0x60)
	struct FVector2D LeftBias;  // 0x70 (0x70)
	struct FVector2D RightBias;  // 0x80 (0x80)


}; 
 
 // DelegateFunction Engine.InstigatedAnyDamageSignature__DelegateSignature
struct FInstigatedAnyDamageSignature__DelegateSignature
{
	float Damage;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct UDamageType* DamageType;  // 0x8 (0x8)
	struct AActor* DamagedActor;  // 0x10 (0x10)
	struct AActor* DamageCauser;  // 0x18 (0x18)


}; 
 
 // ScriptStruct Engine.RawDistribution
struct FRawDistribution
{
	struct FDistributionLookupTable Table;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.IntegerAnimationAttribute
struct FIntegerAnimationAttribute
{
	int32_t Value;  // 0x0 (0x0)


}; 
 
 // SparseDelegateFunction Engine.ComponentPhysicsStateChanged__DelegateSignature
struct FComponentPhysicsStateChanged__DelegateSignature
{
	struct UPrimitiveComponent* ChangedComponent;  // 0x0 (0x0)
	uint8_t StateChange;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.CheatManager.CheatScript
struct FCheatScript
{
	struct FString ScriptName;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.BlendParameter
struct FBlendParameter
{
	struct FString DisplayName;  // 0x0 (0x0)
	float Min;  // 0x10 (0x10)
	float Max;  // 0x14 (0x14)
	int32_t GridNum;  // 0x18 (0x18)
	char pad_28_1 : 7;  // 0x1C (0x1C)
	bool bSnapToGrid : 1;  // 0x1C (0x1C)
	char pad_29_1 : 7;  // 0x1D (0x1D)
	bool bWrapInput : 1;  // 0x1D (0x1D)
	char pad_30[2];  // 0x1E (0x1E)


}; 
 
 // DelegateFunction Engine.InputVectorAxisHandlerDynamicSignature__DelegateSignature
struct FInputVectorAxisHandlerDynamicSignature__DelegateSignature
{
	struct FVector AxisValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.InputComponent.GetControllerAnalogKeyState
struct FGetControllerAnalogKeyState
{
	struct FKey Key;  // 0x0 (0x0)
	float ReturnValue;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)


}; 
 
 // Function Engine.AnimNotifyState.Received_NotifyTick
struct FReceived_NotifyTick
{
	struct USkeletalMeshComponent* MeshComp;  // 0x0 (0x0)
	struct UAnimSequenceBase* Animation;  // 0x8 (0x8)
	float FrameDeltaTime;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)
	struct FAnimNotifyEventReference EventReference;  // 0x18 (0x18)
	char pad_64_1 : 7;  // 0x40 (0x40)
	bool ReturnValue : 1;  // 0x40 (0x40)
	char pad_65[7];  // 0x41 (0x41)


}; 
 
 // Function Engine.Actor.K2_SetActorLocation
struct FK2_SetActorLocation
{
	struct FVector NewLocation;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bSweep : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)
	struct FHitResult SweepHitResult;  // 0x20 (0x20)
	char pad_264_1 : 7;  // 0x108 (0x108)
	bool bTeleport : 1;  // 0x108 (0x108)
	char pad_265_1 : 7;  // 0x109 (0x109)
	bool ReturnValue : 1;  // 0x109 (0x109)
	char pad_266[6];  // 0x10A (0x10A)


}; 
 
 // Function Engine.KismetSystemLibrary.GetPrimaryAssetsWithBundleState
struct FGetPrimaryAssetsWithBundleState
{
	struct TArray<struct FName> RequiredBundles;  // 0x0 (0x0)
	struct TArray<struct FName> ExcludedBundles;  // 0x10 (0x10)
	struct TArray<struct FPrimaryAssetType> ValidTypes;  // 0x20 (0x20)
	char pad_48_1 : 7;  // 0x30 (0x30)
	bool bForceCurrentState : 1;  // 0x30 (0x30)
	char pad_49[7];  // 0x31 (0x31)
	struct TArray<struct FPrimaryAssetId> OutPrimaryAssetIdList;  // 0x38 (0x38)


}; 
 
 // Function Engine.Character.IsPlayingRootMotion
struct FIsPlayingRootMotion
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.LightComponent.SetEnableLightShaftBloom
struct FSetEnableLightShaftBloom
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.IsOverlappingComponent
struct FIsOverlappingComponent
{
	struct UPrimitiveComponent* OtherComp;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // ScriptStruct Engine.VectorRK4SpringInterpolator
struct FVectorRK4SpringInterpolator
{
	float StiffnessConstant;  // 0x0 (0x0)
	float DampeningRatio;  // 0x4 (0x4)


}; 
 
 // Function Engine.CurveSourceInterface.GetCurves
struct FGetCurves
{
	struct TArray<struct FNamedCurveValue> OutValues;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.BreakVector
struct FBreakVector
{
	struct FVector InVec;  // 0x0 (0x0)
	double X;  // 0x18 (0x18)
	double Y;  // 0x20 (0x20)
	double Z;  // 0x28 (0x28)


}; 
 
 // Function Engine.SkeletalMesh.K2_GetAllMorphTargetNames
struct FK2_GetAllMorphTargetNames
{
	struct TArray<struct FString> ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.CanLaunchURL
struct FCanLaunchURL
{
	struct FString URL;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // ScriptStruct Engine.ActorDataLayer
struct FActorDataLayer
{
	struct FName Name;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.ScalarMaterialInput
// Size: 0x30(Inherited: 0x28)
struct FScalarMaterialInput : FMaterialInput
{
	char UseConstant : 1;  // 0x28 (0x28)
	char pad_40_1 : 7;  // 0x28 (0x28)
	char pad_41[4];  // 0x29 (0x29)
	float Constant;  // 0x2C (0x2C)


}; 
 
 // ScriptStruct Engine.VectorDistribution
struct FVectorDistribution
{
	struct FDistributionLookupTable Table;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetTextLibrary.AsTimespan_Timespan
struct FAsTimespan_Timespan
{
	struct FTimespan InTimespan;  // 0x0 (0x0)
	struct FText ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.SubsystemBlueprintLibrary.GetEngineSubsystem
struct FGetEngineSubsystem
{
	UEngineSubsystem* Class;  // 0x0 (0x0)
	struct UEngineSubsystem* ReturnValue;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.TimecodeCustomAttributeNameSettings
struct FTimecodeCustomAttributeNameSettings
{
	struct FName HourAttributeName;  // 0x0 (0x0)
	struct FName MinuteAttributeName;  // 0x8 (0x8)
	struct FName SecondAttributeName;  // 0x10 (0x10)
	struct FName FrameAttributeName;  // 0x18 (0x18)
	struct FName SubframeAttributeName;  // 0x20 (0x20)
	struct FName RateAttributeName;  // 0x28 (0x28)
	struct FName TakenameAttributeName;  // 0x30 (0x30)


}; 
 
 // Function Engine.SceneComponent.K2_GetComponentRotation
struct FK2_GetComponentRotation
{
	struct FRotator ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.GetTickableWhenPaused
struct FGetTickableWhenPaused
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.ReceiveActorOnInputTouchLeave
struct FReceiveActorOnInputTouchLeave
{
	enum class ETouchIndex FingerIndex;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.BlueprintInputKeyDelegateBinding
// Size: 0x38(Inherited: 0x4)
struct FBlueprintInputKeyDelegateBinding : FBlueprintInputDelegateBinding
{
	char pad_4[4];  // 0x4 (0x4)
	struct FInputChord InputChord;  // 0x8 (0x8)
	enum class EInputEvent InputKeyEvent;  // 0x28 (0x28)
	char pad_41[3];  // 0x29 (0x29)
	struct FName FunctionNameToBind;  // 0x2C (0x2C)
	char pad_52[4];  // 0x34 (0x34)


}; 
 
 // ScriptStruct Engine.PaintedVertex
struct FPaintedVertex
{
	struct FVector Position;  // 0x0 (0x0)
	struct FColor Color;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)
	struct FVector4 Normal;  // 0x20 (0x20)


}; 
 
 // Function Engine.PlayerCameraManager.RemoveGenericCameraLensEffect
struct FRemoveGenericCameraLensEffect
{
	struct TScriptInterface<ICameraLensEffectInterface> Emitter;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Not_Int
struct FNot_Int
{
	int32_t A;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.FXSystemComponent.GetFXSystemAsset
struct FGetFXSystemAsset
{
	struct UFXSystemAsset* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.LightComponentBase.SetCastVolumetricShadow
struct FSetCastVolumetricShadow
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.GetInputAxisKeyValue
struct FGetInputAxisKeyValue
{
	struct FKey InputAxisKey;  // 0x0 (0x0)
	float ReturnValue;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_Vector4ToQuaternion
struct FConv_Vector4ToQuaternion
{
	struct FVector4 InVec;  // 0x0 (0x0)
	struct FQuat ReturnValue;  // 0x20 (0x20)


}; 
 
 // ScriptStruct Engine.StartPhysicsTickFunction
// Size: 0x30(Inherited: 0x28)
struct FStartPhysicsTickFunction : FTickFunction
{
	char pad_40[8];  // 0x28 (0x28)


}; 
 
 // ScriptStruct Engine.ShadingModelMaterialInput
// Size: 0x28(Inherited: 0x28)
struct FShadingModelMaterialInput : FMaterialInput
{


}; 
 
 // ScriptStruct Engine.AssetEditorOrbitCameraPosition
struct FAssetEditorOrbitCameraPosition
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bIsSet : 1;  // 0x0 (0x0)
	char pad_1[7];  // 0x1 (0x1)
	struct FVector CamOrbitPoint;  // 0x8 (0x8)
	struct FVector CamOrbitZoom;  // 0x20 (0x20)
	struct FRotator CamOrbitRotation;  // 0x38 (0x38)


}; 
 
 // ScriptStruct Engine.StrataMaterialInput
// Size: 0x28(Inherited: 0x28)
struct FStrataMaterialInput : FMaterialInput
{


}; 
 
 // ScriptStruct Engine.RuntimeCurveLinearColor
struct FRuntimeCurveLinearColor
{
	struct FRichCurve ColorCurves[4];  // 0x0 (0x0)
	struct UCurveLinearColor* ExternalCurve;  // 0x200 (0x200)


}; 
 
 // Function Engine.KismetSystemLibrary.Conv_SoftObjRefToSoftClassPath
struct FConv_SoftObjRefToSoftClassPath
{
	struct TSoftClassPtr<UObject> SoftClassReference;  // 0x0 (0x0)
	struct FSoftClassPath ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.Actor.SetActorTickEnabled
struct FSetActorTickEnabled
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bEnabled : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineComponent.GetRightVectorAtDistanceAlongSpline
struct FGetRightVectorAtDistanceAlongSpline
{
	float Distance;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // DelegateFunction Engine.OnAudioVirtualizationChanged__DelegateSignature
struct FOnAudioVirtualizationChanged__DelegateSignature
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bIsVirtualized : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.AnimNode_UseCachedPose
// Size: 0x28(Inherited: 0x10)
struct FAnimNode_UseCachedPose : FAnimNode_Base
{
	struct FPoseLink LinkToCachingNode;  // 0x10 (0x10)
	struct FName CachePoseName;  // 0x20 (0x20)


}; 
 
 // Function Engine.AnimInstance.GetLinkedAnimLayerInstanceByGroupAndClass
struct FGetLinkedAnimLayerInstanceByGroupAndClass
{
	struct FName InGroup;  // 0x0 (0x0)
	UAnimInstance* InClass;  // 0x8 (0x8)
	struct UAnimInstance* ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetInternationalizationLibrary.SetCurrentLocale
struct FSetCurrentLocale
{
	struct FString culture;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool SaveToConfig : 1;  // 0x10 (0x10)
	char pad_17_1 : 7;  // 0x11 (0x11)
	bool ReturnValue : 1;  // 0x11 (0x11)
	char pad_18[6];  // 0x12 (0x12)


}; 
 
 // Function Engine.DataLayer.GetDataLayerLabel
struct FGetDataLayerLabel
{
	struct FName ReturnValue;  // 0x0 (0x0)


}; 
 
 // DelegateFunction Engine.OnAsyncHandleSaveGame__DelegateSignature
struct FOnAsyncHandleSaveGame__DelegateSignature
{
	struct USaveGame* SaveGame;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bSuccess : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.Actor.K2_SetActorLocationAndRotation
struct FK2_SetActorLocationAndRotation
{
	struct FVector NewLocation;  // 0x0 (0x0)
	struct FRotator NewRotation;  // 0x18 (0x18)
	char pad_48_1 : 7;  // 0x30 (0x30)
	bool bSweep : 1;  // 0x30 (0x30)
	char pad_49[7];  // 0x31 (0x31)
	struct FHitResult SweepHitResult;  // 0x38 (0x38)
	char pad_288_1 : 7;  // 0x120 (0x120)
	bool bTeleport : 1;  // 0x120 (0x120)
	char pad_289_1 : 7;  // 0x121 (0x121)
	bool ReturnValue : 1;  // 0x121 (0x121)
	char pad_290[6];  // 0x122 (0x122)


}; 
 
 // Function Engine.Controller.SetIgnoreLookInput
struct FSetIgnoreLookInput
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewLookInput : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.SetCollisionResponseToAllChannels
struct FSetCollisionResponseToAllChannels
{
	enum class ECollisionResponse NewResponse;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Matrix_InverseTransformVector
struct FMatrix_InverseTransformVector
{
	struct FMatrix M;  // 0x0 (0x0)
	struct FVector V;  // 0x80 (0x80)
	struct FVector ReturnValue;  // 0x98 (0x98)


}; 
 
 // Function Engine.SkeletalMeshComponent.GetTeleportDistanceThreshold
struct FGetTeleportDistanceThreshold
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.Vector2MaterialInput
// Size: 0x38(Inherited: 0x28)
struct FVector2MaterialInput : FMaterialInput
{
	char UseConstant : 1;  // 0x28 (0x28)
	char pad_40_1 : 7;  // 0x28 (0x28)
	char pad_41[4];  // 0x29 (0x29)
	float ConstantX;  // 0x2C (0x2C)
	float ConstantY;  // 0x30 (0x30)
	char pad_52[4];  // 0x34 (0x34)


}; 
 
 // Function Engine.KismetInternationalizationLibrary.ClearCurrentAssetGroupCulture
struct FClearCurrentAssetGroupCulture
{
	struct FName AssetGroup;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool SaveToConfig : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.PrimitiveComponent.SetVisibleInSceneCaptureOnly
struct FSetVisibleInSceneCaptureOnly
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.SetMaterialByName
struct FSetMaterialByName
{
	struct FName MaterialSlotName;  // 0x0 (0x0)
	struct UMaterialInterface* Material;  // 0x8 (0x8)


}; 
 
 // DelegateFunction Engine.OnPrimaryAssetListLoaded__DelegateSignature
struct FOnPrimaryAssetListLoaded__DelegateSignature
{
	struct TArray<struct UObject*> Loaded;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Greater_Int64Int64
struct FGreater_Int64Int64
{
	int64_t A;  // 0x0 (0x0)
	int64_t B;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.KismetSystemLibrary.Conv_SoftObjectReferenceToString
struct FConv_SoftObjectReferenceToString
{
	struct TSoftObjectPtr<UObject> SoftObjectReference;  // 0x0 (0x0)
	struct FString ReturnValue;  // 0x30 (0x30)


}; 
 
 // ScriptStruct Engine.Vector4Distribution
struct FVector4Distribution
{
	struct FDistributionLookupTable Table;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Matrix_TransformVector4
struct FMatrix_TransformVector4
{
	struct FMatrix M;  // 0x0 (0x0)
	struct FVector4 V;  // 0x80 (0x80)
	struct FVector4 ReturnValue;  // 0xA0 (0xA0)


}; 
 
 // Function Engine.Actor.K2_AttachToComponent
struct FK2_AttachToComponent
{
	struct USceneComponent* Parent;  // 0x0 (0x0)
	struct FName SocketName;  // 0x8 (0x8)
	uint8_t LocationRule;  // 0x10 (0x10)
	uint8_t RotationRule;  // 0x11 (0x11)
	uint8_t ScaleRule;  // 0x12 (0x12)
	char pad_19_1 : 7;  // 0x13 (0x13)
	bool bWeldSimulatedBodies : 1;  // 0x13 (0x13)
	char pad_20[4];  // 0x14 (0x14)


}; 
 
 // ScriptStruct Engine.VectorMaterialInput
// Size: 0x38(Inherited: 0x28)
struct FVectorMaterialInput : FMaterialInput
{
	char UseConstant : 1;  // 0x28 (0x28)
	char pad_40_1 : 7;  // 0x28 (0x28)
	char pad_41[4];  // 0x29 (0x29)
	struct FVector3f Constant;  // 0x2C (0x2C)


}; 
 
 // Function Engine.KismetMathLibrary.MakeBoxSphereBounds
struct FMakeBoxSphereBounds
{
	struct FVector Origin;  // 0x0 (0x0)
	struct FVector BoxExtent;  // 0x18 (0x18)
	float SphereRadius;  // 0x30 (0x30)
	char pad_52[4];  // 0x34 (0x34)
	struct FBoxSphereBounds ReturnValue;  // 0x38 (0x38)


}; 
 
 // Function Engine.PlayerController.ClientGameEnded
struct FClientGameEnded
{
	struct AActor* EndGameFocus;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bIsWinner : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.KismetMathLibrary.EqualExactly_Vector2DVector2D
struct FEqualExactly_Vector2DVector2D
{
	struct FVector2D A;  // 0x0 (0x0)
	struct FVector2D B;  // 0x10 (0x10)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // DelegateFunction Engine.AnimDataModelModifiedDynamicEvent__DelegateSignature
struct FAnimDataModelModifiedDynamicEvent__DelegateSignature
{
	uint8_t NotifType;  // 0x0 (0x0)
	char pad_1[7];  // 0x1 (0x1)
	struct UAnimDataModel* Model;  // 0x8 (0x8)
	struct FAnimDataModelNotifPayload Payload;  // 0x10 (0x10)


}; 
 
 // Function Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataFloat
struct FSetDefaultCustomPrimitiveDataFloat
{
	int32_t DataIndex;  // 0x0 (0x0)
	float Value;  // 0x4 (0x4)


}; 
 
 // Function Engine.BlueprintPathsLibrary.SourceConfigDir
struct FSourceConfigDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.HUD.DrawRect
struct FDrawRect
{
	struct FLinearColor RectColor;  // 0x0 (0x0)
	float ScreenX;  // 0x10 (0x10)
	float ScreenY;  // 0x14 (0x14)
	float ScreenW;  // 0x18 (0x18)
	float ScreenH;  // 0x1C (0x1C)


}; 
 
 // Function Engine.KismetSystemLibrary.SetDoublePropertyByName
struct FSetDoublePropertyByName
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FName PropertyName;  // 0x8 (0x8)
	double Value;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetStringLibrary.LeftPad
struct FLeftPad
{
	struct FString SourceString;  // 0x0 (0x0)
	int32_t ChCount;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)
	struct FString ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.SceneComponent.K2_DetachFromComponent
struct FK2_DetachFromComponent
{
	uint8_t LocationRule;  // 0x0 (0x0)
	uint8_t RotationRule;  // 0x1 (0x1)
	uint8_t ScaleRule;  // 0x2 (0x2)
	char pad_3_1 : 7;  // 0x3 (0x3)
	bool bCallModify : 1;  // 0x3 (0x3)


}; 
 
 // ScriptStruct Engine.AnimDataModelNotifPayload
struct FAnimDataModelNotifPayload
{
	char pad_0[16];  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.K2_UnPauseTimer
struct FK2_UnPauseTimer
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FString FunctionName;  // 0x8 (0x8)


}; 
 
 // Function Engine.ExponentialHeightFogComponent.SetSecondFogData
struct FSetSecondFogData
{
	struct FExponentialHeightFogData NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.Character.GetCurrentMontage
struct FGetCurrentMontage
{
	struct UAnimMontage* ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.VertexOffsetUsage
struct FVertexOffsetUsage
{
	int32_t Usage;  // 0x0 (0x0)


}; 
 
 // DelegateFunction Engine.CharacterMovementUpdatedSignature__DelegateSignature
struct FCharacterMovementUpdatedSignature__DelegateSignature
{
	float DeltaSeconds;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector OldLocation;  // 0x8 (0x8)
	struct FVector OldVelocity;  // 0x20 (0x20)


}; 
 
 // SparseDelegateFunction Engine.ComponentCollisionSettingsChangedSignature__DelegateSignature
struct FComponentCollisionSettingsChangedSignature__DelegateSignature
{
	struct UPrimitiveComponent* ChangedComponent;  // 0x0 (0x0)


}; 
 
 // DelegateFunction Engine.InputAxisHandlerDynamicSignature__DelegateSignature
struct FInputAxisHandlerDynamicSignature__DelegateSignature
{
	float AxisValue;  // 0x0 (0x0)


}; 
 
 // DelegateFunction Engine.ConstraintBrokenSignature__DelegateSignature
struct FConstraintBrokenSignature__DelegateSignature
{
	int32_t ConstraintIndex;  // 0x0 (0x0)


}; 
 
 // Function Engine.RawAnimSequenceTrackExtensions.GetRotationalKeys
struct FGetRotationalKeys
{
	struct FRawAnimSequenceTrack Track;  // 0x0 (0x0)
	struct TArray<struct FQuat> ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.ActorComponent.SetComponentTickEnabled
struct FSetComponentTickEnabled
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bEnabled : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameModeBase.ChoosePlayerStart
struct FChoosePlayerStart
{
	struct AController* Player;  // 0x0 (0x0)
	struct AActor* ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.GameUserSettings.GetDefaultWindowMode
struct FGetDefaultWindowMode
{
	enum class EWindowMode ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.ConstraintInstanceBlueprintLibrary.SetAngularSoftTwistLimitParams
struct FSetAngularSoftTwistLimitParams
{
	struct FConstraintInstanceAccessor Accessor;  // 0x0 (0x0)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bSoftTwistLimit : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)
	float TwistLimitStiffness;  // 0x10 (0x10)
	float TwistLimitDamping;  // 0x14 (0x14)
	float TwistLimitRestitution;  // 0x18 (0x18)
	float TwistLimitContactDistance;  // 0x1C (0x1C)


}; 
 
 // Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector3
struct FSetCustomPrimitiveDataVector3
{
	int32_t DataIndex;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector Value;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.ClusterNode_DEPRECATED
struct FClusterNode_DEPRECATED
{
	struct FVector3f BoundMin;  // 0x0 (0x0)
	int32_t FirstChild;  // 0xC (0xC)
	struct FVector3f BoundMax;  // 0x10 (0x10)
	int32_t LastChild;  // 0x1C (0x1C)
	int32_t FirstInstance;  // 0x20 (0x20)
	int32_t LastInstance;  // 0x24 (0x24)


}; 
 
 // DelegateFunction Engine.OnSubmixRecordedFileDone__DelegateSignature
struct FOnSubmixRecordedFileDone__DelegateSignature
{
	struct USoundWave* ResultingSoundWave;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimInstance.GetRelevantAnimLength
struct FGetRelevantAnimLength
{
	int32_t MachineIndex;  // 0x0 (0x0)
	int32_t StateIndex;  // 0x4 (0x4)
	float ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetSystemLibrary.Conv_SoftObjRefToSoftObjPath
struct FConv_SoftObjRefToSoftObjPath
{
	struct TSoftObjectPtr<UObject> SoftObjectReference;  // 0x0 (0x0)
	struct FSoftObjectPath ReturnValue;  // 0x30 (0x30)


}; 
 
 // DelegateFunction Engine.InputActionHandlerDynamicSignature__DelegateSignature
struct FInputActionHandlerDynamicSignature__DelegateSignature
{
	struct FKey Key;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.DepthFieldGlowInfo
struct FDepthFieldGlowInfo
{
	char bEnableGlow : 1;  // 0x0 (0x0)
	char pad_0_1 : 7;  // 0x0 (0x0)
	char pad_1[4];  // 0x1 (0x1)
	struct FLinearColor GlowColor;  // 0x4 (0x4)
	char pad_20[4];  // 0x14 (0x14)
	struct FVector2D GlowOuterRadius;  // 0x18 (0x18)
	struct FVector2D GlowInnerRadius;  // 0x28 (0x28)


}; 
 
 // Function Engine.KismetStringTableLibrary.GetTableNamespace
struct FGetTableNamespace
{
	struct FName TableId;  // 0x0 (0x0)
	struct FString ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.PlayerInput.SetBind
struct FSetBind
{
	struct FName BindName;  // 0x0 (0x0)
	struct FString Command;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.GetPI
struct FGetPI
{
	double ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.GetInputVectorAxisValue
struct FGetInputVectorAxisValue
{
	struct FKey InputAxisKey;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetArrayLibrary.Array_RandomFromStream
struct FArray_RandomFromStream
{
	struct TArray<int32_t> TargetArray;  // 0x0 (0x0)
	struct FRandomStream RandomStream;  // 0x10 (0x10)
	int32_t OutItem;  // 0x18 (0x18)
	int32_t OutIndex;  // 0x1C (0x1C)


}; 
 
 // Function Engine.SceneComponent.GetSocketRotation
struct FGetSocketRotation
{
	struct FName InSocketName;  // 0x0 (0x0)
	struct FRotator ReturnValue;  // 0x8 (0x8)


}; 
 
 // DelegateFunction Engine.InputGestureHandlerDynamicSignature__DelegateSignature
struct FInputGestureHandlerDynamicSignature__DelegateSignature
{
	float Value;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.StreamingSourceShouldActivate
struct FStreamingSourceShouldActivate
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.ISMComponentInstance
struct FISMComponentInstance
{
	int32_t ClientIndex;  // 0x0 (0x0)
	int32_t InstanceIndex;  // 0x4 (0x4)
	int32_t InstanceSubIndex;  // 0x8 (0x8)


}; 
 
 // Function Engine.AnimSingleNodeInstance.SetMirrorDataTable
struct FSetMirrorDataTable
{
	struct UMirrorDataTable* MirrorDataTable;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.GetVolumeButtonsHandledBySystem
struct FGetVolumeButtonsHandledBySystem
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.SceneComponent.SetRelativeScale3D
struct FSetRelativeScale3D
{
	struct FVector NewScale3D;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMeshComponent.HasValidAnimationInstance
struct FHasValidAnimationInstance
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.SubtitleCue
struct FSubtitleCue
{
	struct FText Text;  // 0x0 (0x0)
	float Time;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)


}; 
 
 // Function Engine.KismetMathLibrary.RandomIntegerFromStream
struct FRandomIntegerFromStream
{
	int32_t Max;  // 0x0 (0x0)
	struct FRandomStream Stream;  // 0x4 (0x4)
	int32_t ReturnValue;  // 0xC (0xC)


}; 
 
 // Function Engine.HUD.DrawText
struct FDrawText
{
	struct FString Text;  // 0x0 (0x0)
	struct FLinearColor TextColor;  // 0x10 (0x10)
	float ScreenX;  // 0x20 (0x20)
	float ScreenY;  // 0x24 (0x24)
	struct UFont* Font;  // 0x28 (0x28)
	float Scale;  // 0x30 (0x30)
	char pad_52_1 : 7;  // 0x34 (0x34)
	bool bScalePosition : 1;  // 0x34 (0x34)
	char pad_53[3];  // 0x35 (0x35)


}; 
 
 // Function Engine.GameplayStatics.SetWorldOriginLocation
struct FSetWorldOriginLocation
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FIntVector NewLocation;  // 0x8 (0x8)
	char pad_20[4];  // 0x14 (0x14)


}; 
 
 // DelegateFunction Engine.InputTouchHandlerDynamicSignature__DelegateSignature
struct FInputTouchHandlerDynamicSignature__DelegateSignature
{
	enum class ETouchIndex FingerIndex;  // 0x0 (0x0)
	char pad_1[7];  // 0x1 (0x1)
	struct FVector Location;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.BlendSpaceTriangleEdgeInfo
struct FBlendSpaceTriangleEdgeInfo
{
	struct FVector2D Normal;  // 0x0 (0x0)
	int32_t NeighbourTriangleIndex;  // 0x10 (0x10)
	int32_t AdjacentPerimeterTriangleIndices[2];  // 0x14 (0x14)
	int32_t AdjacentPerimeterVertexIndices[2];  // 0x1C (0x1C)
	char pad_36[4];  // 0x24 (0x24)


}; 
 
 // ScriptStruct Engine.RPCDoSStateConfig
// Size: 0x78(Inherited: 0x48)
struct FRPCDoSStateConfig : FRPCDoSState
{
	char pad_72[48];  // 0x48 (0x48)


}; 
 
 // Function Engine.GameplayStatics.GetAvailableSpatialPluginNames
struct FGetAvailableSpatialPluginNames
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct TArray<struct FName> ReturnValue;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.ActorInstanceHandle
struct FActorInstanceHandle
{
	struct TWeakObjectPtr<AActor> Actor;  // 0x0 (0x0)
	char pad_8[16];  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.Vector_NetQuantize
// Size: 0x18(Inherited: 0x18)
struct FVector_NetQuantize : FVector
{


}; 
 
 // Function Engine.PlayerCameraManager.GetCameraRotation
struct FGetCameraRotation
{
	struct FRotator ReturnValue;  // 0x0 (0x0)


}; 
 
 // DelegateFunction Engine.PlatformGameInstance.PlatformRegisteredForUserNotificationsDelegate__DelegateSignature
struct FPlatformRegisteredForUserNotificationsDelegate__DelegateSignature
{
	int32_t inInt;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.ParticleCurvePair
struct FParticleCurvePair
{
	struct FString CurveName;  // 0x0 (0x0)
	struct UObject* CurveObject;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.MultiplyMultiply_FloatFloat
struct FMultiplyMultiply_FloatFloat
{
	double Base;  // 0x0 (0x0)
	double Exp;  // 0x8 (0x8)
	double ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.SplineComponent.SetLocationAtSplinePoint
struct FSetLocationAtSplinePoint
{
	int32_t PointIndex;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector InLocation;  // 0x8 (0x8)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x20 (0x20)
	char pad_33_1 : 7;  // 0x21 (0x21)
	bool bUpdateSpline : 1;  // 0x21 (0x21)
	char pad_34[6];  // 0x22 (0x22)


}; 
 
 // Function Engine.SkeletalMeshComponent.UnbindClothFromLeaderPoseComponent
struct FUnbindClothFromLeaderPoseComponent
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bRestoreSimulationSpace : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.EndTransaction
struct FEndTransaction
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.URL
struct FURL
{
	struct FString Protocol;  // 0x0 (0x0)
	struct FString Host;  // 0x10 (0x10)
	int32_t Port;  // 0x20 (0x20)
	int32_t Valid;  // 0x24 (0x24)
	struct FString Map;  // 0x28 (0x28)
	struct FString RedirectURL;  // 0x38 (0x38)
	struct TArray<struct FString> Op;  // 0x48 (0x48)
	struct FString Portal;  // 0x58 (0x58)


}; 
 
 // Function Engine.KismetInputLibrary.InputEvent_IsShiftDown
struct FInputEvent_IsShiftDown
{
	struct FInputEvent Input;  // 0x0 (0x0)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.PrimitiveComponent.SetSingleSampleShadowFromStationaryLights
struct FSetSingleSampleShadowFromStationaryLights
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewSingleSampleShadowFromStationaryLights : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.CameraShakeUpdateParams
struct FCameraShakeUpdateParams
{
	float DeltaTime;  // 0x0 (0x0)
	float ShakeScale;  // 0x4 (0x4)
	float DynamicScale;  // 0x8 (0x8)
	float BlendingWeight;  // 0xC (0xC)
	struct FMinimalViewInfo POV;  // 0x10 (0x10)


}; 
 
 // Function Engine.Emitter.IsActive
struct FIsActive
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.SetOnlyOwnerSee
struct FSetOnlyOwnerSee
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewOnlyOwnerSee : 1;  // 0x0 (0x0)


}; 
 
 // DelegateFunction Engine.OnAudioFadeChangeSignature__DelegateSignature
struct FOnAudioFadeChangeSignature__DelegateSignature
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bFadeOut : 1;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	float FadeTime;  // 0x4 (0x4)


}; 
 
 // Function Engine.Actor.K2_DetachFromActor
struct FK2_DetachFromActor
{
	uint8_t LocationRule;  // 0x0 (0x0)
	uint8_t RotationRule;  // 0x1 (0x1)
	uint8_t ScaleRule;  // 0x2 (0x2)


}; 
 
 // ScriptStruct Engine.AnimNodeConstantData
struct FAnimNodeConstantData
{
	struct TScriptInterface<IAnimClassInterface> AnimClassInterface;  // 0x0 (0x0)
	int32_t NodeIndex;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)


}; 
 
 // DelegateFunction Engine.OnPrimaryAssetClassListLoaded__DelegateSignature
struct FOnPrimaryAssetClassListLoaded__DelegateSignature
{
	struct TArray<UObject*> Loaded;  // 0x0 (0x0)


}; 
 
 // DelegateFunction Engine.OnAudioPlayStateChanged__DelegateSignature
struct FOnAudioPlayStateChanged__DelegateSignature
{
	uint8_t PlayState;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Clamp
struct FClamp
{
	int32_t Value;  // 0x0 (0x0)
	int32_t Min;  // 0x4 (0x4)
	int32_t Max;  // 0x8 (0x8)
	int32_t ReturnValue;  // 0xC (0xC)


}; 
 
 // DelegateFunction Engine.OnAudioSingleEnvelopeValue__DelegateSignature
struct FOnAudioSingleEnvelopeValue__DelegateSignature
{
	struct USoundWave* PlayingSoundWave;  // 0x0 (0x0)
	float EnvelopeValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.SceneComponent.K2_AttachTo
struct FK2_AttachTo
{
	struct USceneComponent* InParent;  // 0x0 (0x0)
	struct FName InSocketName;  // 0x8 (0x8)
	enum class EAttachLocation AttachType;  // 0x10 (0x10)
	char pad_17_1 : 7;  // 0x11 (0x11)
	bool bWeldSimulatedBodies : 1;  // 0x11 (0x11)
	char pad_18_1 : 7;  // 0x12 (0x12)
	bool ReturnValue : 1;  // 0x12 (0x12)
	char pad_19[5];  // 0x13 (0x13)


}; 
 
 // ScriptStruct Engine.AnimationTrackAddedPayload
// Size: 0xC(Inherited: 0x8)
struct FAnimationTrackAddedPayload : FAnimationTrackPayload
{
	int32_t TrackIndex;  // 0x8 (0x8)


}; 
 
 // DelegateFunction Engine.OnCanvasRenderTargetUpdate__DelegateSignature
struct FOnCanvasRenderTargetUpdate__DelegateSignature
{
	struct UCanvas* Canvas;  // 0x0 (0x0)
	int32_t Width;  // 0x8 (0x8)
	int32_t Height;  // 0xC (0xC)


}; 
 
 // Function Engine.AudioComponent.SetPaused
struct FSetPaused
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bPause : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.EditorMapPerformanceTestDefinition
struct FEditorMapPerformanceTestDefinition
{
	struct FSoftObjectPath PerformanceTestmap;  // 0x0 (0x0)
	int32_t TestTimer;  // 0x20 (0x20)
	char pad_36[4];  // 0x24 (0x24)


}; 
 
 // Function Engine.Actor.SetActorRelativeScale3D
struct FSetActorRelativeScale3D
{
	struct FVector NewRelativeScale;  // 0x0 (0x0)


}; 
 
 // Function Engine.PhysicsFieldStatics.EvalPhysicsVectorField
struct FEvalPhysicsVectorField
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector WorldPosition;  // 0x8 (0x8)
	enum class EFieldVectorType VectorType;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)
	struct FVector ReturnValue;  // 0x28 (0x28)


}; 
 
 // Function Engine.SphereComponent.GetUnscaledSphereRadius
struct FGetUnscaledSphereRadius
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineMeshComponent.SetStartScale
struct FSetStartScale
{
	struct FVector2D StartScale;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool bUpdateMesh : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.PrimitiveComponent.SetCastInsetShadow
struct FSetCastInsetShadow
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bInCastInsetShadow : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameStateBase.GetPlayerRespawnDelay
struct FGetPlayerRespawnDelay
{
	struct AController* Controller;  // 0x0 (0x0)
	float ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.KismetSystemLibrary.SetGamepadsBlockDeviceFeedback
struct FSetGamepadsBlockDeviceFeedback
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bBlock : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.ResponseChannel
struct FResponseChannel
{
	struct FName Channel;  // 0x0 (0x0)
	enum class ECollisionResponse Response;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.MeshComponent.SetVectorParameterValueOnMaterials
struct FSetVectorParameterValueOnMaterials
{
	struct FName ParameterName;  // 0x0 (0x0)
	struct FVector ParameterValue;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.AnimationGroupReference
struct FAnimationGroupReference
{
	uint8_t Method;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	struct FName GroupName;  // 0x4 (0x4)
	enum class EAnimGroupRole GroupRole;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)


}; 
 
 // DelegateFunction Engine.OnDataLayerRuntimeStateChanged__DelegateSignature
struct FOnDataLayerRuntimeStateChanged__DelegateSignature
{
	struct UDataLayerInstance* DataLayer;  // 0x0 (0x0)
	uint8_t State;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.ConstraintInstanceBlueprintLibrary.GetAngularDriveParams
struct FGetAngularDriveParams
{
	struct FConstraintInstanceAccessor Accessor;  // 0x0 (0x0)
	float OutPositionStrength;  // 0xC (0xC)
	float OutVelocityStrength;  // 0x10 (0x10)
	float OutForceLimit;  // 0x14 (0x14)


}; 
 
 // ScriptStruct Engine.FontCharacter
struct FFontCharacter
{
	int32_t StartU;  // 0x0 (0x0)
	int32_t StartV;  // 0x4 (0x4)
	int32_t USize;  // 0x8 (0x8)
	int32_t VSize;  // 0xC (0xC)
	char TextureIndex;  // 0x10 (0x10)
	char pad_17[3];  // 0x11 (0x11)
	int32_t VerticalOffset;  // 0x14 (0x14)


}; 
 
 // Function Engine.KismetSystemLibrary.LoadAsset_Blocking
struct FLoadAsset_Blocking
{
	struct TSoftObjectPtr<UObject> Asset;  // 0x0 (0x0)
	struct UObject* ReturnValue;  // 0x30 (0x30)


}; 
 
 // DelegateFunction Engine.OnForceFeedbackFinished__DelegateSignature
struct FOnForceFeedbackFinished__DelegateSignature
{
	struct UForceFeedbackComponent* ForceFeedbackComponent;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.RandomRotatorFromStream
struct FRandomRotatorFromStream
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bRoll : 1;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	struct FRandomStream Stream;  // 0x4 (0x4)
	char pad_12[4];  // 0xC (0xC)
	struct FRotator ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.MovementComponent.ConstrainLocationToPlane
struct FConstrainLocationToPlane
{
	struct FVector Location;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.Actor.ReceiveActorOnInputTouchEnd
struct FReceiveActorOnInputTouchEnd
{
	enum class ETouchIndex FingerIndex;  // 0x0 (0x0)


}; 
 
 // DelegateFunction Engine.OnMontageStartedMCDelegate__DelegateSignature
struct FOnMontageStartedMCDelegate__DelegateSignature
{
	struct UAnimMontage* Montage;  // 0x0 (0x0)


}; 
 
 // DelegateFunction Engine.OnPawnControllerChanged__DelegateSignature
struct FOnPawnControllerChanged__DelegateSignature
{
	struct APawn* Pawn;  // 0x0 (0x0)
	struct AController* Controller;  // 0x8 (0x8)


}; 
 
 // Function Engine.PhysicsConstraintComponent.SetLinearBreakable
struct FSetLinearBreakable
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bLinearBreakable : 1;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	float LinearBreakThreshold;  // 0x4 (0x4)


}; 
 
 // Function Engine.KismetSystemLibrary.Conv_SoftClassReferenceToString
struct FConv_SoftClassReferenceToString
{
	struct TSoftClassPtr<UObject> SoftClassReference;  // 0x0 (0x0)
	struct FString ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.SkeletalMeshComponent.SetTeleportRotationThreshold
struct FSetTeleportRotationThreshold
{
	float Threshold;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.FMod64
struct FFMod64
{
	double Dividend;  // 0x0 (0x0)
	double Divisor;  // 0x8 (0x8)
	double Remainder;  // 0x10 (0x10)
	int64_t ReturnValue;  // 0x18 (0x18)


}; 
 
 // ScriptStruct Engine.BaseAttenuationSettings
struct FBaseAttenuationSettings
{
	char pad_0[8];  // 0x0 (0x0)
	uint8_t DistanceAlgorithm;  // 0x8 (0x8)
	enum class EAttenuationShape AttenuationShape;  // 0x9 (0x9)
	uint8_t FalloffMode;  // 0xA (0xA)
	char pad_11[1];  // 0xB (0xB)
	float dBAttenuationAtMax;  // 0xC (0xC)
	struct FVector AttenuationShapeExtents;  // 0x10 (0x10)
	float ConeOffset;  // 0x28 (0x28)
	float FalloffDistance;  // 0x2C (0x2C)
	float ConeSphereRadius;  // 0x30 (0x30)
	float ConeSphereFalloffDistance;  // 0x34 (0x34)
	struct FRuntimeFloatCurve CustomAttenuationCurve;  // 0x38 (0x38)


}; 
 
 // Function Engine.AnimationDataController.SetCurveFlags
struct FSetCurveFlags
{
	struct FAnimationCurveIdentifier CurveId;  // 0x0 (0x0)
	int32_t Flags;  // 0x10 (0x10)
	char pad_20_1 : 7;  // 0x14 (0x14)
	bool bShouldTransact : 1;  // 0x14 (0x14)
	char pad_21_1 : 7;  // 0x15 (0x15)
	bool ReturnValue : 1;  // 0x15 (0x15)
	char pad_22[2];  // 0x16 (0x16)


}; 
 
 // Function Engine.KismetRenderingLibrary.BreakSkinWeightInfo
struct FBreakSkinWeightInfo
{
	struct FSkelMeshSkinWeightInfo InWeight;  // 0x0 (0x0)
	int32_t Bone0;  // 0x3C (0x3C)
	char Weight0;  // 0x40 (0x40)
	char pad_65[3];  // 0x41 (0x41)
	int32_t Bone1;  // 0x44 (0x44)
	char Weight1;  // 0x48 (0x48)
	char pad_73[3];  // 0x49 (0x49)
	int32_t Bone2;  // 0x4C (0x4C)
	char Weight2;  // 0x50 (0x50)
	char pad_81[3];  // 0x51 (0x51)
	int32_t Bone3;  // 0x54 (0x54)
	char Weight3;  // 0x58 (0x58)
	char pad_89[3];  // 0x59 (0x59)


}; 
 
 // Function Engine.KismetSystemLibrary.CapsuleTraceSingleByProfile
struct FCapsuleTraceSingleByProfile
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector Start;  // 0x8 (0x8)
	struct FVector End;  // 0x20 (0x20)
	float Radius;  // 0x38 (0x38)
	float HalfHeight;  // 0x3C (0x3C)
	struct FName ProfileName;  // 0x40 (0x40)
	char pad_72_1 : 7;  // 0x48 (0x48)
	bool bTraceComplex : 1;  // 0x48 (0x48)
	char pad_73[7];  // 0x49 (0x49)
	struct TArray<struct AActor*> ActorsToIgnore;  // 0x50 (0x50)
	enum class EDrawDebugTrace DrawDebugType;  // 0x60 (0x60)
	char pad_97[7];  // 0x61 (0x61)
	struct FHitResult OutHit;  // 0x68 (0x68)
	char pad_336_1 : 7;  // 0x150 (0x150)
	bool bIgnoreSelf : 1;  // 0x150 (0x150)
	char pad_337[3];  // 0x151 (0x151)
	struct FLinearColor TraceColor;  // 0x154 (0x154)
	struct FLinearColor TraceHitColor;  // 0x164 (0x164)
	float DrawTime;  // 0x174 (0x174)
	char pad_376_1 : 7;  // 0x178 (0x178)
	bool ReturnValue : 1;  // 0x178 (0x178)
	char pad_377[7];  // 0x179 (0x179)


}; 
 
 // DelegateFunction Engine.OnPlayerStatePawnSet__DelegateSignature
struct FOnPlayerStatePawnSet__DelegateSignature
{
	struct APlayerState* Player;  // 0x0 (0x0)
	struct APawn* NewPawn;  // 0x8 (0x8)
	struct APawn* OldPawn;  // 0x10 (0x10)


}; 
 
 // Function Engine.BlueprintPathsLibrary.RootDir
struct FRootDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // DelegateFunction Engine.PlatformGameInstance.PlatformScreenOrientationChangedDelegate__DelegateSignature
struct FPlatformScreenOrientationChangedDelegate__DelegateSignature
{
	enum class EScreenOrientation inScreenOrientation;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.BoneReference
struct FBoneReference
{
	struct FName BoneName;  // 0x0 (0x0)
	char pad_8[8];  // 0x8 (0x8)


}; 
 
 // Function Engine.AnimDataModel.GetBoneTrackNames
struct FGetBoneTrackNames
{
	struct TArray<struct FName> OutNames;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.DoesImplementInterface
struct FDoesImplementInterface
{
	struct UObject* TestObject;  // 0x0 (0x0)
	UInterface* Interface;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.GameplayStatics.FinishSpawningActor
struct FFinishSpawningActor
{
	struct AActor* Actor;  // 0x0 (0x0)
	char pad_8[8];  // 0x8 (0x8)
	struct FTransform SpawnTransform;  // 0x10 (0x10)
	struct AActor* ReturnValue;  // 0x70 (0x70)
	char pad_120[8];  // 0x78 (0x78)


}; 
 
 // DelegateFunction Engine.OnPrimaryAssetClassLoaded__DelegateSignature
struct FOnPrimaryAssetClassLoaded__DelegateSignature
{
	UObject* Loaded;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineComponent.GetLocationAndTangentAtSplinePoint
struct FGetLocationAndTangentAtSplinePoint
{
	int32_t PointIndex;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector Location;  // 0x8 (0x8)
	struct FVector Tangent;  // 0x20 (0x20)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x38 (0x38)
	char pad_57[7];  // 0x39 (0x39)


}; 
 
 // DelegateFunction Engine.OnPrimaryAssetLoaded__DelegateSignature
struct FOnPrimaryAssetLoaded__DelegateSignature
{
	struct UObject* Loaded;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_TransformToMatrix
struct FConv_TransformToMatrix
{
	struct FTransform Transform;  // 0x0 (0x0)
	struct FMatrix ReturnValue;  // 0x60 (0x60)


}; 
 
 // DelegateFunction Engine.OnQuartzMetronomeEvent__DelegateSignature
struct FOnQuartzMetronomeEvent__DelegateSignature
{
	struct FName ClockName;  // 0x0 (0x0)
	uint8_t QuantizationType;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)
	int32_t NumBars;  // 0xC (0xC)
	int32_t Beat;  // 0x10 (0x10)
	float BeatFraction;  // 0x14 (0x14)


}; 
 
 // Function Engine.KismetMathLibrary.Vector4_IsNAN
struct FVector4_IsNAN
{
	struct FVector4 A;  // 0x0 (0x0)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[15];  // 0x21 (0x21)


}; 
 
 // ScriptStruct Engine.NavAvoidanceMask
struct FNavAvoidanceMask
{
	char bGroup0 : 1;  // 0x0 (0x0)
	char bGroup1 : 1;  // 0x0 (0x0)
	char bGroup2 : 1;  // 0x0 (0x0)
	char bGroup3 : 1;  // 0x0 (0x0)
	char bGroup4 : 1;  // 0x0 (0x0)
	char bGroup5 : 1;  // 0x0 (0x0)
	char bGroup6 : 1;  // 0x0 (0x0)
	char bGroup7 : 1;  // 0x0 (0x0)
	char bGroup8 : 1;  // 0x1 (0x1)
	char bGroup9 : 1;  // 0x1 (0x1)
	char bGroup10 : 1;  // 0x1 (0x1)
	char bGroup11 : 1;  // 0x1 (0x1)
	char bGroup12 : 1;  // 0x1 (0x1)
	char bGroup13 : 1;  // 0x1 (0x1)
	char bGroup14 : 1;  // 0x1 (0x1)
	char bGroup15 : 1;  // 0x1 (0x1)
	char bGroup16 : 1;  // 0x2 (0x2)
	char bGroup17 : 1;  // 0x2 (0x2)
	char bGroup18 : 1;  // 0x2 (0x2)
	char bGroup19 : 1;  // 0x2 (0x2)
	char bGroup20 : 1;  // 0x2 (0x2)
	char bGroup21 : 1;  // 0x2 (0x2)
	char bGroup22 : 1;  // 0x2 (0x2)
	char bGroup23 : 1;  // 0x2 (0x2)
	char bGroup24 : 1;  // 0x3 (0x3)
	char bGroup25 : 1;  // 0x3 (0x3)
	char bGroup26 : 1;  // 0x3 (0x3)
	char bGroup27 : 1;  // 0x3 (0x3)
	char bGroup28 : 1;  // 0x3 (0x3)
	char bGroup29 : 1;  // 0x3 (0x3)
	char bGroup30 : 1;  // 0x3 (0x3)
	char bGroup31 : 1;  // 0x3 (0x3)


}; 
 
 // Function Engine.SceneComponent.K2_SetRelativeLocation
struct FK2_SetRelativeLocation
{
	struct FVector NewLocation;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bSweep : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)
	struct FHitResult SweepHitResult;  // 0x20 (0x20)
	char pad_264_1 : 7;  // 0x108 (0x108)
	bool bTeleport : 1;  // 0x108 (0x108)
	char pad_265[7];  // 0x109 (0x109)


}; 
 
 // Function Engine.AnimInstance.GetOwningComponent
struct FGetOwningComponent
{
	struct USkeletalMeshComponent* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.IsInputKeyDown
struct FIsInputKeyDown
{
	struct FKey Key;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool ReturnValue : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.KismetSystemLibrary.MakeARFilter
struct FMakeARFilter
{
	struct TArray<struct FName> PackageNames;  // 0x0 (0x0)
	struct TArray<struct FName> PackagePaths;  // 0x10 (0x10)
	struct TArray<struct FSoftObjectPath> SoftObjectPaths;  // 0x20 (0x20)
	struct TArray<struct FTopLevelAssetPath> ClassPaths;  // 0x30 (0x30)
	struct TSet<struct FTopLevelAssetPath> RecursiveClassPathsExclusionSet;  // 0x40 (0x40)
	struct TArray<struct FName> ClassNames;  // 0x90 (0x90)
	struct TSet<struct FName> RecursiveClassesExclusionSet;  // 0xA0 (0xA0)
	char pad_240_1 : 7;  // 0xF0 (0xF0)
	bool bRecursivePaths : 1;  // 0xF0 (0xF0)
	char pad_241_1 : 7;  // 0xF1 (0xF1)
	bool bRecursiveClasses : 1;  // 0xF1 (0xF1)
	char pad_242_1 : 7;  // 0xF2 (0xF2)
	bool bIncludeOnlyOnDiskAssets : 1;  // 0xF2 (0xF2)
	char pad_243[5];  // 0xF3 (0xF3)
	struct FARFilter ReturnValue;  // 0xF8 (0xF8)


}; 
 
 // ScriptStruct Engine.VectorParameterValue
struct FVectorParameterValue
{
	struct FMaterialParameterInfo ParameterInfo;  // 0x0 (0x0)
	struct FLinearColor ParameterValue;  // 0x10 (0x10)
	struct FGuid ExpressionGUID;  // 0x20 (0x20)


}; 
 
 // SparseDelegateFunction Engine.TakeAnyDamageSignature__DelegateSignature
struct FTakeAnyDamageSignature__DelegateSignature
{
	struct AActor* DamagedActor;  // 0x0 (0x0)
	float Damage;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)
	struct UDamageType* DamageType;  // 0x10 (0x10)
	struct AController* InstigatedBy;  // 0x18 (0x18)
	struct AActor* DamageCauser;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetInputLibrary.Key_GetNavigationDirectionFromAnalog
struct FKey_GetNavigationDirectionFromAnalog
{
	struct FAnalogInputEvent InAnalogEvent;  // 0x0 (0x0)
	uint8_t ReturnValue;  // 0x48 (0x48)
	char pad_73[7];  // 0x49 (0x49)


}; 
 
 // Function Engine.BlueprintPathsLibrary.CreateTempFilename
struct FCreateTempFilename
{
	struct FString Path;  // 0x0 (0x0)
	struct FString Prefix;  // 0x10 (0x10)
	struct FString Extension;  // 0x20 (0x20)
	struct FString ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.LightComponent.SetShadowBias
struct FSetShadowBias
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.LayerActorStats
struct FLayerActorStats
{
	 Type;  // 0x0 (0x0)
	int32_t Total;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // DelegateFunction Engine.OnQuartzMetronomeEventBP__DelegateSignature
struct FOnQuartzMetronomeEventBP__DelegateSignature
{
	struct FName ClockName;  // 0x0 (0x0)
	uint8_t QuantizationType;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)
	int32_t NumBars;  // 0xC (0xC)
	int32_t Beat;  // 0x10 (0x10)
	float BeatFraction;  // 0x14 (0x14)


}; 
 
 // Function Engine.SceneComponent.SetHiddenInGame
struct FSetHiddenInGame
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool NewHidden : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool bPropagateToChildren : 1;  // 0x1 (0x1)


}; 
 
 // Function Engine.GameStateBase.HasBegunPlay
struct FHasBegunPlay
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.MakeLiteralInt
struct FMakeLiteralInt
{
	int32_t Value;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.Actor.GetGameTimeSinceCreation
struct FGetGameTimeSinceCreation
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetInputLibrary.GetModifierKeysState
struct FGetModifierKeysState
{
	struct FSlateModifierKeysState ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.BlueprintMacroCosmeticInfo
struct FBlueprintMacroCosmeticInfo
{
	char pad_0[1];  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMeshComponent.SetAllMotorsAngularPositionDrive
struct FSetAllMotorsAngularPositionDrive
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bEnableSwingDrive : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool bEnableTwistDrive : 1;  // 0x1 (0x1)
	char pad_2_1 : 7;  // 0x2 (0x2)
	bool bSkipCustomPhysicsType : 1;  // 0x2 (0x2)


}; 
 
 // Function Engine.KismetMathLibrary.Divide_Int64Int64
struct FDivide_Int64Int64
{
	int64_t A;  // 0x0 (0x0)
	int64_t B;  // 0x8 (0x8)
	int64_t ReturnValue;  // 0x10 (0x10)


}; 
 
 // DelegateFunction Engine.OnSubmixSpectralAnalysis__DelegateSignature
struct FOnSubmixSpectralAnalysis__DelegateSignature
{
	struct TArray<float> Magnitudes;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.LevelStreamingStatus
struct FLevelStreamingStatus
{
	struct FName PackageName;  // 0x0 (0x0)
	char bShouldBeLoaded : 1;  // 0x8 (0x8)
	char bShouldBeVisible : 1;  // 0x8 (0x8)
	char pad_8_1 : 6;  // 0x8 (0x8)
	char pad_9[4];  // 0x9 (0x9)
	uint32_t LODIndex;  // 0xC (0xC)


}; 
 
 // Function Engine.PlayerController.ServerUnmutePlayer
struct FServerUnmutePlayer
{
	struct FUniqueNetIdRepl PlayerId;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.HLODISMComponentDesc
struct FHLODISMComponentDesc
{
	struct UStaticMesh* StaticMesh;  // 0x0 (0x0)
	struct UMaterialInterface* Material;  // 0x8 (0x8)
	struct TArray<struct FTransform> Instances;  // 0x10 (0x10)
	struct TArray<struct FCustomPrimitiveData> InstancesCustomPrimitiveData;  // 0x20 (0x20)


}; 
 
 // DelegateFunction Engine.OnSubmixSpectralAnalysisBP__DelegateSignature
struct FOnSubmixSpectralAnalysisBP__DelegateSignature
{
	struct TArray<float> Magnitude;  // 0x0 (0x0)


}; 
 
 // DelegateFunction Engine.OnSystemFinished__DelegateSignature
struct FOnSystemFinished__DelegateSignature
{
	struct UParticleSystemComponent* PSystem;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.MontageBlendSettings
struct FMontageBlendSettings
{
	struct UBlendProfile* BlendProfile;  // 0x0 (0x0)
	struct FAlphaBlendArgs Blend;  // 0x8 (0x8)
	uint8_t BlendMode;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.KismetSystemLibrary.GetPrimaryAssetIdFromSoftObjectReference
struct FGetPrimaryAssetIdFromSoftObjectReference
{
	struct TSoftObjectPtr<UObject> SoftObjectReference;  // 0x0 (0x0)
	struct FPrimaryAssetId ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.KismetMathLibrary.DegAsin
struct FDegAsin
{
	double A;  // 0x0 (0x0)
	double ReturnValue;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.CameraCacheEntry
struct FCameraCacheEntry
{
	float Timestamp;  // 0x0 (0x0)
	char pad_4[12];  // 0x4 (0x4)
	struct FMinimalViewInfo POV;  // 0x10 (0x10)


}; 
 
 // DelegateFunction Engine.OnTimelineFloat__DelegateSignature
struct FOnTimelineFloat__DelegateSignature
{
	float Output;  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.K2_BoxOverlapComponent
struct FK2_BoxOverlapComponent
{
	struct FVector InBoxCentre;  // 0x0 (0x0)
	struct FBox InBox;  // 0x18 (0x18)
	char pad_80_1 : 7;  // 0x50 (0x50)
	bool bTraceComplex : 1;  // 0x50 (0x50)
	char pad_81_1 : 7;  // 0x51 (0x51)
	bool bShowTrace : 1;  // 0x51 (0x51)
	char pad_82_1 : 7;  // 0x52 (0x52)
	bool bPersistentShowTrace : 1;  // 0x52 (0x52)
	char pad_83[5];  // 0x53 (0x53)
	struct FVector HitLocation;  // 0x58 (0x58)
	struct FVector HitNormal;  // 0x70 (0x70)
	struct FName BoneName;  // 0x88 (0x88)
	struct FHitResult OutHit;  // 0x90 (0x90)
	char pad_376_1 : 7;  // 0x178 (0x178)
	bool ReturnValue : 1;  // 0x178 (0x178)
	char pad_377[7];  // 0x179 (0x179)


}; 
 
 // Function Engine.TimelineComponent.SetLinearColorCurve
struct FSetLinearColorCurve
{
	struct UCurveLinearColor* NewLinearColorCurve;  // 0x0 (0x0)
	struct FName LinearColorTrackName;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.SlotEvaluationPose
struct FSlotEvaluationPose
{
	enum class EAdditiveAnimationType AdditiveType;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	float Weight;  // 0x4 (0x4)
	char pad_8[136];  // 0x8 (0x8)


}; 
 
 // Function Engine.SkeletalMeshComponent.SetAllowAnimCurveEvaluation
struct FSetAllowAnimCurveEvaluation
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bInAllow : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.CurveLinearColor.GetLinearColorValue
struct FGetLinearColorValue
{
	float InTime;  // 0x0 (0x0)
	struct FLinearColor ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.Actor.GetSquaredDistanceTo
struct FGetSquaredDistanceTo
{
	struct AActor* OtherActor;  // 0x0 (0x0)
	float ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // DelegateFunction Engine.OnTimelineLinearColor__DelegateSignature
struct FOnTimelineLinearColor__DelegateSignature
{
	struct FLinearColor Output;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMeshComponent.SetAnimClass
struct FSetAnimClass
{
	UObject* NewClass;  // 0x0 (0x0)


}; 
 
 // DelegateFunction Engine.OnTimelineVector__DelegateSignature
struct FOnTimelineVector__DelegateSignature
{
	struct FVector Output;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimInstance.HasMarkerBeenHitThisFrame
struct FHasMarkerBeenHitThisFrame
{
	struct FName SyncGroup;  // 0x0 (0x0)
	struct FName MarkerName;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[3];  // 0x11 (0x11)


}; 
 
 // ScriptStruct Engine.MaterialInstanceCachedData
struct FMaterialInstanceCachedData
{
	struct TArray<int32_t> ParentLayerIndexRemap;  // 0x0 (0x0)


}; 
 
 // Function Engine.PhysicsConstraintComponent.SetConstraintReferenceOrientation
struct FSetConstraintReferenceOrientation
{
	enum class EConstraintFrame Frame;  // 0x0 (0x0)
	char pad_1[7];  // 0x1 (0x1)
	struct FVector PriAxis;  // 0x8 (0x8)
	struct FVector SecAxis;  // 0x20 (0x20)


}; 
 
 // SparseDelegateFunction Engine.ActorBeginOverlapSignature__DelegateSignature
struct FActorBeginOverlapSignature__DelegateSignature
{
	struct AActor* OverlappedActor;  // 0x0 (0x0)
	struct AActor* OtherActor;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.CInterpTo
struct FCInterpTo
{
	struct FLinearColor Current;  // 0x0 (0x0)
	struct FLinearColor Target;  // 0x10 (0x10)
	float DeltaTime;  // 0x20 (0x20)
	float InterpSpeed;  // 0x24 (0x24)
	struct FLinearColor ReturnValue;  // 0x28 (0x28)


}; 
 
 // Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamic
struct FCreateAndSetMaterialInstanceDynamic
{
	int32_t ElementIndex;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct UMaterialInstanceDynamic* ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.Actor.SetActorHiddenInGame
struct FSetActorHiddenInGame
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewHidden : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Divide_VectorVector
struct FDivide_VectorVector
{
	struct FVector A;  // 0x0 (0x0)
	struct FVector B;  // 0x18 (0x18)
	struct FVector ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.PoseableMeshComponent.CopyPoseFromSkeletalComponent
struct FCopyPoseFromSkeletalComponent
{
	struct USkeletalMeshComponent* InComponentToCopy;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.BoxOverlapComponents
struct FBoxOverlapComponents
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector BoxPos;  // 0x8 (0x8)
	struct FVector Extent;  // 0x20 (0x20)
	struct TArray<enum class EObjectTypeQuery> ObjectTypes;  // 0x38 (0x38)
	UObject* ComponentClassFilter;  // 0x48 (0x48)
	struct TArray<struct AActor*> ActorsToIgnore;  // 0x50 (0x50)
	struct TArray<struct UPrimitiveComponent*> OutComponents;  // 0x60 (0x60)
	char pad_112_1 : 7;  // 0x70 (0x70)
	bool ReturnValue : 1;  // 0x70 (0x70)
	char pad_113[7];  // 0x71 (0x71)


}; 
 
 // Function Engine.KismetStringLibrary.BuildString_Rotator
struct FBuildString_Rotator
{
	struct FString AppendTo;  // 0x0 (0x0)
	struct FString Prefix;  // 0x10 (0x10)
	struct FRotator InRot;  // 0x20 (0x20)
	struct FString Suffix;  // 0x38 (0x38)
	struct FString ReturnValue;  // 0x48 (0x48)


}; 
 
 // Function Engine.SplineComponent.FindRollClosestToWorldLocation
struct FFindRollClosestToWorldLocation
{
	struct FVector WorldLocation;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x18 (0x18)
	char pad_25[3];  // 0x19 (0x19)
	float ReturnValue;  // 0x1C (0x1C)


}; 
 
 // DelegateFunction Engine.OnUserInputDeviceConnectionChange__DelegateSignature
struct FOnUserInputDeviceConnectionChange__DelegateSignature
{
	uint8_t NewConnectionState;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	struct FPlatformUserId PlatformUserId;  // 0x4 (0x4)
	struct FInputDeviceId InputDeviceId;  // 0x8 (0x8)


}; 
 
 // Function Engine.PlayerController.SetVirtualJoystickVisibility
struct FSetVirtualJoystickVisibility
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bVisible : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.SceneComponent.GetAttachParent
struct FGetAttachParent
{
	struct USceneComponent* ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.BracketPayload
// Size: 0x10(Inherited: 0x1)
struct FBracketPayload : FEmptyPayload
{
	struct FString Description;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerState.GetCompressedPing
struct FGetCompressedPing
{
	char ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.LevelStreamingDynamic.LoadLevelInstanceBySoftObjectPtr
struct FLoadLevelInstanceBySoftObjectPtr
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct TSoftObjectPtr<UWorld> Level;  // 0x8 (0x8)
	struct FVector Location;  // 0x38 (0x38)
	struct FRotator Rotation;  // 0x50 (0x50)
	char pad_104_1 : 7;  // 0x68 (0x68)
	bool bOutSuccess : 1;  // 0x68 (0x68)
	char pad_105[7];  // 0x69 (0x69)
	struct FString OptionalLevelNameOverride;  // 0x70 (0x70)
	ULevelStreamingDynamic* OptionalLevelStreamingClass;  // 0x80 (0x80)
	char pad_136_1 : 7;  // 0x88 (0x88)
	bool bLoadAsTempPackage : 1;  // 0x88 (0x88)
	char pad_137[7];  // 0x89 (0x89)
	struct ULevelStreamingDynamic* ReturnValue;  // 0x90 (0x90)


}; 
 
 // Function Engine.KismetMathLibrary.InverseTransformDirection
struct FInverseTransformDirection
{
	struct FTransform T;  // 0x0 (0x0)
	struct FVector Direction;  // 0x60 (0x60)
	struct FVector ReturnValue;  // 0x78 (0x78)


}; 
 
 // ScriptStruct Engine.UniqueNetIdReplNetSerializerNameStruct
struct FUniqueNetIdReplNetSerializerNameStruct
{
	struct FName Name;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.K2_PauseTimer
struct FK2_PauseTimer
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FString FunctionName;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.Normalize2D
struct FNormalize2D
{
	struct FVector2D A;  // 0x0 (0x0)
	float Tolerance;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)


}; 
 
 // DelegateFunction Engine.OnUserInputDevicePairingChange__DelegateSignature
struct FOnUserInputDevicePairingChange__DelegateSignature
{
	struct FInputDeviceId InputDeviceId;  // 0x0 (0x0)
	struct FPlatformUserId NewUserPlatformId;  // 0x4 (0x4)
	struct FPlatformUserId OldUserPlatformId;  // 0x8 (0x8)


}; 
 
 // Function Engine.Actor.IsActorBeingDestroyed
struct FIsActorBeingDestroyed
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.NavMovementComponent.IsSwimming
struct FIsSwimming
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // DelegateFunction Engine.ParticleBurstSignature__DelegateSignature
struct FParticleBurstSignature__DelegateSignature
{
	struct FName EventName;  // 0x0 (0x0)
	float EmitterTime;  // 0x8 (0x8)
	int32_t ParticleCount;  // 0xC (0xC)


}; 
 
 // Function Engine.AudioComponent.SetSourceBusSendPreEffect
struct FSetSourceBusSendPreEffect
{
	struct USoundSourceBus* SoundSourceBus;  // 0x0 (0x0)
	float SourceBusSendLevel;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.SplineComponent.GetTangentAtDistanceAlongSpline
struct FGetTangentAtDistanceAlongSpline
{
	float Distance;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.PrimitiveComponentInstanceData
// Size: 0x130(Inherited: 0xB8)
struct FPrimitiveComponentInstanceData : FSceneComponentInstanceData
{
	char pad_184[8];  // 0xB8 (0xB8)
	struct FTransform ComponentTransform;  // 0xC0 (0xC0)
	int32_t VisibilityId;  // 0x120 (0x120)
	char pad_292[4];  // 0x124 (0x124)
	struct UPrimitiveComponent* LODParent;  // 0x128 (0x128)


}; 
 
 // Function Engine.KismetSystemLibrary.Conv_PrimaryAssetTypeToString
struct FConv_PrimaryAssetTypeToString
{
	struct FPrimaryAssetType PrimaryAssetType;  // 0x0 (0x0)
	struct FString ReturnValue;  // 0x8 (0x8)


}; 
 
 // DelegateFunction Engine.ParticleCollisionSignature__DelegateSignature
struct FParticleCollisionSignature__DelegateSignature
{
	struct FName EventName;  // 0x0 (0x0)
	float EmitterTime;  // 0x8 (0x8)
	int32_t ParticleTime;  // 0xC (0xC)
	struct FVector Location;  // 0x10 (0x10)
	struct FVector Velocity;  // 0x28 (0x28)
	struct FVector Direction;  // 0x40 (0x40)
	struct FVector Normal;  // 0x58 (0x58)
	struct FName BoneName;  // 0x70 (0x70)
	struct UPhysicalMaterial* PhysMat;  // 0x78 (0x78)


}; 
 
 // Function Engine.CameraLensEffectInterfaceClassSupportLibrary.IsInterfaceClassValid
struct FIsInterfaceClassValid
{
	struct FCameraLensInterfaceClassSupport CameraLens;  // 0x0 (0x0)
	uint8_t Result;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.KismetSystemLibrary.DrawDebugFrustum
struct FDrawDebugFrustum
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	char pad_8[8];  // 0x8 (0x8)
	struct FTransform FrustumTransform;  // 0x10 (0x10)
	struct FLinearColor FrustumColor;  // 0x70 (0x70)
	float Duration;  // 0x80 (0x80)
	float Thickness;  // 0x84 (0x84)
	char pad_136[8];  // 0x88 (0x88)


}; 
 
 // Function Engine.KismetTextLibrary.Conv_ByteToText
struct FConv_ByteToText
{
	char Value;  // 0x0 (0x0)
	char pad_1[7];  // 0x1 (0x1)
	struct FText ReturnValue;  // 0x8 (0x8)


}; 
 
 // DelegateFunction Engine.ParticleDeathSignature__DelegateSignature
struct FParticleDeathSignature__DelegateSignature
{
	struct FName EventName;  // 0x0 (0x0)
	float EmitterTime;  // 0x8 (0x8)
	int32_t ParticleTime;  // 0xC (0xC)
	struct FVector Location;  // 0x10 (0x10)
	struct FVector Velocity;  // 0x28 (0x28)
	struct FVector Direction;  // 0x40 (0x40)


}; 
 
 // DelegateFunction Engine.ParticleSpawnSignature__DelegateSignature
struct FParticleSpawnSignature__DelegateSignature
{
	struct FName EventName;  // 0x0 (0x0)
	float EmitterTime;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)
	struct FVector Location;  // 0x10 (0x10)
	struct FVector Velocity;  // 0x28 (0x28)


}; 
 
 // Function Engine.StereoLayerComponent.GetUVRect
struct FGetUVRect
{
	struct FBox2D ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.LineTraceSingleByProfile
struct FLineTraceSingleByProfile
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector Start;  // 0x8 (0x8)
	struct FVector End;  // 0x20 (0x20)
	struct FName ProfileName;  // 0x38 (0x38)
	char pad_64_1 : 7;  // 0x40 (0x40)
	bool bTraceComplex : 1;  // 0x40 (0x40)
	char pad_65[7];  // 0x41 (0x41)
	struct TArray<struct AActor*> ActorsToIgnore;  // 0x48 (0x48)
	enum class EDrawDebugTrace DrawDebugType;  // 0x58 (0x58)
	char pad_89[7];  // 0x59 (0x59)
	struct FHitResult OutHit;  // 0x60 (0x60)
	char pad_328_1 : 7;  // 0x148 (0x148)
	bool bIgnoreSelf : 1;  // 0x148 (0x148)
	char pad_329[3];  // 0x149 (0x149)
	struct FLinearColor TraceColor;  // 0x14C (0x14C)
	struct FLinearColor TraceHitColor;  // 0x15C (0x15C)
	float DrawTime;  // 0x16C (0x16C)
	char pad_368_1 : 7;  // 0x170 (0x170)
	bool ReturnValue : 1;  // 0x170 (0x170)
	char pad_369[7];  // 0x171 (0x171)


}; 
 
 // ScriptStruct Engine.AnimatedBoneAttribute
struct FAnimatedBoneAttribute
{
	struct FAnimationAttributeIdentifier Identifier;  // 0x0 (0x0)
	struct FAttributeCurve Curve;  // 0x40 (0x40)


}; 
 
 // Function Engine.KismetMathLibrary.Matrix_RemoveScaling
struct FMatrix_RemoveScaling
{
	struct FMatrix M;  // 0x0 (0x0)
	float Tolerance;  // 0x80 (0x80)
	char pad_132[12];  // 0x84 (0x84)


}; 
 
 // DelegateFunction Engine.PlasticDeformationEventSignature__DelegateSignature
struct FPlasticDeformationEventSignature__DelegateSignature
{
	int32_t ConstraintIndex;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.GetTotalHours
struct FGetTotalHours
{
	struct FTimespan A;  // 0x0 (0x0)
	float ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // ScriptStruct Engine.CachedFloatCurve
struct FCachedFloatCurve
{
	struct FName CurveName;  // 0x0 (0x0)
	char pad_8[12];  // 0x8 (0x8)


}; 
 
 // Function Engine.PrimitiveComponent.GetCollisionResponseToChannel
struct FGetCollisionResponseToChannel
{
	enum class ECollisionChannel Channel;  // 0x0 (0x0)
	enum class ECollisionResponse ReturnValue;  // 0x1 (0x1)


}; 
 
 // ScriptStruct Engine.KTaperedCapsuleElem
// Size: 0x70(Inherited: 0x30)
struct FKTaperedCapsuleElem : FKShapeElem
{
	struct FVector Center;  // 0x30 (0x30)
	struct FRotator Rotation;  // 0x48 (0x48)
	float Radius0;  // 0x60 (0x60)
	float Radius1;  // 0x64 (0x64)
	float Length;  // 0x68 (0x68)
	char pad_108[4];  // 0x6C (0x6C)


}; 
 
 // ScriptStruct Engine.SoundWaveSpectralDataEntry
struct FSoundWaveSpectralDataEntry
{
	float Magnitude;  // 0x0 (0x0)
	float NormalizedMagnitude;  // 0x4 (0x4)


}; 
 
 // ScriptStruct Engine.MaterialTextureInfo
struct FMaterialTextureInfo
{
	float SamplingScale;  // 0x0 (0x0)
	int32_t UVChannelIndex;  // 0x4 (0x4)
	struct FName TextureName;  // 0x8 (0x8)


}; 
 
 // Function Engine.PlayerController.SetAudioListenerOverride
struct FSetAudioListenerOverride
{
	struct USceneComponent* AttachToComponent;  // 0x0 (0x0)
	struct FVector Location;  // 0x8 (0x8)
	struct FRotator Rotation;  // 0x20 (0x20)


}; 
 
 // DelegateFunction Engine.PlatformInterfaceDelegate__DelegateSignature
struct FPlatformInterfaceDelegate__DelegateSignature
{
	struct FPlatformInterfaceDelegateResult Result;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.MaxOfFloatArray
struct FMaxOfFloatArray
{
	struct TArray<float> FloatArray;  // 0x0 (0x0)
	int32_t IndexOfMaxValue;  // 0x10 (0x10)
	float MaxValue;  // 0x14 (0x14)


}; 
 
 // Function Engine.SplineComponent.ConvertSplineSegmentToPolyLine
struct FConvertSplineSegmentToPolyLine
{
	int32_t SplinePointStartIndex;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)
	float MaxSquareDistanceFromSpline;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)
	struct TArray<struct FVector> OutPoints;  // 0x10 (0x10)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // SparseDelegateFunction Engine.ActorBeginTouchOverSignature__DelegateSignature
struct FActorBeginTouchOverSignature__DelegateSignature
{
	enum class ETouchIndex FingerIndex;  // 0x0 (0x0)
	char pad_1[7];  // 0x1 (0x1)
	struct AActor* TouchedActor;  // 0x8 (0x8)


}; 
 
 // Function Engine.Actor.SetReplicates
struct FSetReplicates
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bInReplicates : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.Vector_NetQuantize10
// Size: 0x18(Inherited: 0x18)
struct FVector_NetQuantize10 : FVector
{


}; 
 
 // Function Engine.AudioComponent.SetAudioBusSendPreEffect
struct FSetAudioBusSendPreEffect
{
	struct UAudioBus* AudioBus;  // 0x0 (0x0)
	float AudioBusSendLevel;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // ScriptStruct Engine.PlatformInterfaceDelegateResult
struct FPlatformInterfaceDelegateResult
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bSuccessful : 1;  // 0x0 (0x0)
	char pad_1[7];  // 0x1 (0x1)
	struct FPlatformInterfaceData Data;  // 0x8 (0x8)


}; 
 
 // Function Engine.Actor.RemoveTickPrerequisiteComponent
struct FRemoveTickPrerequisiteComponent
{
	struct UActorComponent* PrerequisiteComponent;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.GetReflectionVector
struct FGetReflectionVector
{
	struct FVector Direction;  // 0x0 (0x0)
	struct FVector SurfaceNormal;  // 0x18 (0x18)
	struct FVector ReturnValue;  // 0x30 (0x30)


}; 
 
 // ScriptStruct Engine.PlatformInterfaceData
struct FPlatformInterfaceData
{
	struct FName DataName;  // 0x0 (0x0)
	enum class EPlatformInterfaceDataType Type;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)
	int32_t IntValue;  // 0xC (0xC)
	float FloatValue;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)
	struct FString StringValue;  // 0x18 (0x18)
	struct UObject* ObjectValue;  // 0x28 (0x28)


}; 
 
 // Function Engine.ActorComponent.ComponentHasTag
struct FComponentHasTag
{
	struct FName Tag;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // DelegateFunction Engine.PlayMontageAnimNotifyDelegate__DelegateSignature
struct FPlayMontageAnimNotifyDelegate__DelegateSignature
{
	struct FName NotifyName;  // 0x0 (0x0)
	struct FBranchingPointNotifyPayload BranchingPointPayload;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.RootMotionSource_MoveToDynamicForce
// Size: 0x140(Inherited: 0xE0)
struct FRootMotionSource_MoveToDynamicForce : FRootMotionSource
{
	struct FVector StartLocation;  // 0xD8 (0xD8)
	struct FVector InitialTargetLocation;  // 0xF0 (0xF0)
	struct FVector TargetLocation;  // 0x108 (0x108)
	char pad_296_1 : 7;  // 0x128 (0x128)
	bool bRestrictSpeedToExpected : 1;  // 0x120 (0x120)
	struct UCurveVector* PathOffsetCurve;  // 0x128 (0x128)
	struct UCurveFloat* TimeMappingCurve;  // 0x130 (0x130)
	char pad_313[7];  // 0x139 (0x139)


}; 
 
 // ScriptStruct Engine.BranchingPointNotifyPayload
struct FBranchingPointNotifyPayload
{
	char pad_0[32];  // 0x0 (0x0)


}; 
 
 // Function Engine.MaterialInstanceDynamic.K2_InterpolateMaterialInstanceParams
struct FK2_InterpolateMaterialInstanceParams
{
	struct UMaterialInstance* SourceA;  // 0x0 (0x0)
	struct UMaterialInstance* SourceB;  // 0x8 (0x8)
	float Alpha;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)


}; 
 
 // Function Engine.KismetSystemLibrary.K2_ClearTimerDelegate
struct FK2_ClearTimerDelegate
{
	struct FDelegate Delegate;  // 0x0 (0x0)


}; 
 
 // DelegateFunction Engine.ViewportDisplayCallback__DelegateSignature
struct FViewportDisplayCallback__DelegateSignature
{
	struct FText OutText;  // 0x0 (0x0)
	struct FLinearColor OutColor;  // 0x18 (0x18)
	char pad_40_1 : 7;  // 0x28 (0x28)
	bool ReturnValue : 1;  // 0x28 (0x28)
	char pad_41[7];  // 0x29 (0x29)


}; 
 
 // Function Engine.ActorComponent.Activate
struct FActivate
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bReset : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.UnloadPrimaryAsset
struct FUnloadPrimaryAsset
{
	struct FPrimaryAssetId PrimaryAssetId;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.K2_IsTimerActive
struct FK2_IsTimerActive
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FString FunctionName;  // 0x8 (0x8)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool ReturnValue : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.PrimitiveComponent.SetAllMassScale
struct FSetAllMassScale
{
	float InMassScale;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineComponent.GetWorldDirectionAtDistanceAlongSpline
struct FGetWorldDirectionAtDistanceAlongSpline
{
	float Distance;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.Actor.AddTickPrerequisiteActor
struct FAddTickPrerequisiteActor
{
	struct AActor* PrerequisiteActor;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimationDataController.AddAttribute
struct FAddAttribute
{
	struct FAnimationAttributeIdentifier AttributeIdentifier;  // 0x0 (0x0)
	char pad_64_1 : 7;  // 0x40 (0x40)
	bool bShouldTransact : 1;  // 0x40 (0x40)
	char pad_65_1 : 7;  // 0x41 (0x41)
	bool ReturnValue : 1;  // 0x41 (0x41)
	char pad_66[6];  // 0x42 (0x42)


}; 
 
 // Function Engine.Actor.AddTickPrerequisiteComponent
struct FAddTickPrerequisiteComponent
{
	struct UActorComponent* PrerequisiteComponent;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineComponent.GetLocationAtDistanceAlongSpline
struct FGetLocationAtDistanceAlongSpline
{
	float Distance;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.ActorComponent.GetComponentTickInterval
struct FGetComponentTickInterval
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.SetMassOverrideInKg
struct FSetMassOverrideInKg
{
	struct FName BoneName;  // 0x0 (0x0)
	float MassInKg;  // 0x8 (0x8)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bOverrideMass : 1;  // 000030777] /Game/DungeonCrawler/Data/Generated/DT_Monster/MonsterEffect/Id_MonsterEffect_ZombiePoisonCloud_Cooldown_Elite (000030777] Package Id_Spawner_Props_OrnateChestLarge_HR)
	char pad_13[3];  // 0xD (0xD)


}; 
 
 // Function Engine.GameUserSettings.IsVSyncDirty
struct FIsVSyncDirty
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetStringLibrary.BuildString_Double
struct FBuildString_Double
{
	struct FString AppendTo;  // 0x0 (0x0)
	struct FString Prefix;  // 0x10 (0x10)
	double InDouble;  // 0x20 (0x20)
	struct FString Suffix;  // 0x28 (0x28)
	struct FString ReturnValue;  // 0x38 (0x38)


}; 
 
 // ScriptStruct Engine.SoundSubmixSendInfo
struct FSoundSubmixSendInfo
{
	uint8_t SendLevelControlMethod;  // 0x0 (0x0)
	uint8_t SendStage;  // 0x1 (0x1)
	char pad_2[6];  // 0x2 (0x2)
	struct USoundSubmixBase* SoundSubmix;  // 0x8 (0x8)
	float SendLevel;  // 0x10 (0x10)
	char pad_20_1 : 7;  // 0x14 (0x14)
	bool DisableManualSendClamp : 1;  // 0x14 (0x14)
	char pad_21[3];  // 0x15 (0x15)
	float MinSendLevel;  // 0x18 (0x18)
	float MaxSendLevel;  // 0x1C (0x1C)
	float MinSendDistance;  // 0x20 (0x20)
	float MaxSendDistance;  // 0x24 (0x24)
	struct FRuntimeFloatCurve CustomSendLevelCurve;  // 0x28 (0x28)


}; 
 
 // Function Engine.Pawn.ReceiveControllerChanged
struct FReceiveControllerChanged
{
	struct AController* OldController;  // 0x0 (0x0)
	struct AController* NewController;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.FromSeconds
struct FFromSeconds
{
	float Seconds;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FTimespan ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.Actor.GetOwner
struct FGetOwner
{
	struct AActor* ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.MaterialExpressionCollection
struct FMaterialExpressionCollection
{
	struct TArray<struct UMaterialExpression*> Expressions;  // 0x0 (0x0)
	struct TArray<struct UMaterialExpressionComment*> EditorComments;  // 0x10 (0x10)
	struct UMaterialExpressionExecBegin* ExpressionExecBegin;  // 0x20 (0x20)
	struct UMaterialExpressionExecEnd* ExpressionExecEnd;  // 0x28 (0x28)


}; 
 
 // Function Engine.KismetArrayLibrary.Array_Contains
struct FArray_Contains
{
	struct TArray<int32_t> TargetArray;  // 0x0 (0x0)
	int32_t ItemToFind;  // 0x10 (0x10)
	char pad_20_1 : 7;  // 0x14 (0x14)
	bool ReturnValue : 1;  // 0x14 (0x14)
	char pad_21[3];  // 0x15 (0x15)


}; 
 
 // Function Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataVector2
struct FSetDefaultCustomPrimitiveDataVector2
{
	int32_t DataIndex;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector2D Value;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetSystemLibrary.BoxOverlapActors
struct FBoxOverlapActors
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector BoxPos;  // 0x8 (0x8)
	struct FVector BoxExtent;  // 0x20 (0x20)
	struct TArray<enum class EObjectTypeQuery> ObjectTypes;  // 0x38 (0x38)
	UObject* ActorClassFilter;  // 0x48 (0x48)
	struct TArray<struct AActor*> ActorsToIgnore;  // 0x50 (0x50)
	struct TArray<struct AActor*> OutActors;  // 0x60 (0x60)
	char pad_112_1 : 7;  // 0x70 (0x70)
	bool ReturnValue : 1;  // 0x70 (0x70)
	char pad_113[7];  // 0x71 (0x71)


}; 
 
 // Function Engine.MovementComponent.SetPlaneConstraintNormal
struct FSetPlaneConstraintNormal
{
	struct FVector PlaneNormal;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameplayStatics.ProjectWorldToScreen
struct FProjectWorldToScreen
{
	struct APlayerController* Player;  // 0x0 (0x0)
	struct FVector WorldPosition;  // 0x8 (0x8)
	struct FVector2D ScreenPosition;  // 0x20 (0x20)
	char pad_48_1 : 7;  // 0x30 (0x30)
	bool bPlayerViewportRelative : 1;  // 0x30 (0x30)
	char pad_49_1 : 7;  // 0x31 (0x31)
	bool ReturnValue : 1;  // 0x31 (0x31)
	char pad_50[6];  // 0x32 (0x32)


}; 
 
 // Function Engine.ForceFeedbackComponent.Play
struct FPlay
{
	float StartTime;  // 0x0 (0x0)


}; 
 
 // Function Engine.ActorComponent.IsBeingDestroyed
struct FIsBeingDestroyed
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimInstance.Montage_GetIsStopped
struct FMontage_GetIsStopped
{
	struct UAnimMontage* Montage;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.RectLightComponent.SetBarnDoorLength
struct FSetBarnDoorLength
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.K2_IsTimerPausedHandle
struct FK2_IsTimerPausedHandle
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FTimerHandle Handle;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.PrimitiveComponent.SetPhysMaterialOverride
struct FSetPhysMaterialOverride
{
	struct UPhysicalMaterial* NewPhysMaterial;  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.GetCollisionObjectType
struct FGetCollisionObjectType
{
	enum class ECollisionChannel ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector4
struct FSetCustomPrimitiveDataVector4
{
	int32_t DataIndex;  // 0x0 (0x0)
	char pad_4[12];  // 0x4 (0x4)
	struct FVector4 Value;  // 0x10 (0x10)


}; 
 
 // Function Engine.SceneComponent.SetAbsolute
struct FSetAbsolute
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewAbsoluteLocation : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool bNewAbsoluteRotation : 1;  // 0x1 (0x1)
	char pad_2_1 : 7;  // 0x2 (0x2)
	bool bNewAbsoluteScale : 1;  // 0x2 (0x2)


}; 
 
 // ScriptStruct Engine.DPMatchingRulestructD
// Size: 0x68(Inherited: 0x48)
struct FDPMatchingRulestructD : FDPMatchingRulestructBase
{
	struct TArray<struct FDPMatchingRulestructC> OnTrue;  // 0x48 (0x48)
	struct TArray<struct FDPMatchingRulestructC> OnFalse;  // 0x58 (0x58)


}; 
 
 // Function Engine.DirectionalLightComponent.SetCascadeDistributionExponent
struct FSetCascadeDistributionExponent
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.RandomBoolWithWeightFromStream
struct FRandomBoolWithWeightFromStream
{
	float Weight;  // 0x0 (0x0)
	struct FRandomStream RandomStream;  // 0x4 (0x4)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool ReturnValue : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)


}; 
 
 // Function Engine.DebugCameraController.ReceiveOnActivate
struct FReceiveOnActivate
{
	struct APlayerController* OriginalPC;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Divide_TimespanFloat
struct FDivide_TimespanFloat
{
	struct FTimespan A;  // 0x0 (0x0)
	float Scalar;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)
	struct FTimespan ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.ActorComponent.IsComponentTickEnabled
struct FIsComponentTickEnabled
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.ActorComponent.K2_DestroyComponent
struct FK2_DestroyComponent
{
	struct UObject* Object;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.ServerRecvClientInputFrame
struct FServerRecvClientInputFrame
{
	int32_t RecvClientInputFrame;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct TArray<char> Data;  // 0x8 (0x8)


}; 
 
 // Function Engine.SplineComponent.GetWorldDirectionAtTime
struct FGetWorldDirectionAtTime
{
	float Time;  // 0x0 (0x0)
	char pad_4_1 : 7;  // 0x4 (0x4)
	bool bUseConstantVelocity : 1;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.Actor.ReceiveAsyncPhysicsTick
struct FReceiveAsyncPhysicsTick
{
	float DeltaSeconds;  // 0x0 (0x0)
	float SimSeconds;  // 0x4 (0x4)


}; 
 
 // Function Engine.KismetMathLibrary.MakeTimespan
struct FMakeTimespan
{
	int32_t Days;  // 0x0 (0x0)
	int32_t Hours;  // 0x4 (0x4)
	int32_t Minutes;  // 0x8 (0x8)
	int32_t Seconds;  // 0xC (0xC)
	int32_t Milliseconds;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)
	struct FTimespan ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetSystemLibrary.BoxTraceMultiByProfile
struct FBoxTraceMultiByProfile
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector Start;  // 0x8 (0x8)
	struct FVector End;  // 0x20 (0x20)
	struct FVector HalfSize;  // 0x38 (0x38)
	struct FRotator Orientation;  // 0x50 (0x50)
	struct FName ProfileName;  // 0x68 (0x68)
	char pad_112_1 : 7;  // 0x70 (0x70)
	bool bTraceComplex : 1;  // 0x70 (0x70)
	char pad_113[7];  // 0x71 (0x71)
	struct TArray<struct AActor*> ActorsToIgnore;  // 0x78 (0x78)
	enum class EDrawDebugTrace DrawDebugType;  // 0x88 (0x88)
	char pad_137[7];  // 0x89 (0x89)
	struct TArray<struct FHitResult> OutHits;  // 0x90 (0x90)
	char pad_160_1 : 7;  // 0xA0 (0xA0)
	bool bIgnoreSelf : 1;  // 0xA0 (0xA0)
	char pad_161[3];  // 0xA1 (0xA1)
	struct FLinearColor TraceColor;  // 0xA4 (0xA4)
	struct FLinearColor TraceHitColor;  // 0xB4 (0xB4)
	float DrawTime;  // 0xC4 (0xC4)
	char pad_200_1 : 7;  // 0xC8 (0xC8)
	bool ReturnValue : 1;  // 0xC8 (0xC8)
	char pad_201[7];  // 0xC9 (0xC9)


}; 
 
 // Function Engine.KismetSystemLibrary.IsInterstitialAdAvailable
struct FIsInterstitialAdAvailable
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkyAtmosphereComponent.SetMieAbsorption
struct FSetMieAbsorption
{
	struct FLinearColor NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimInstance.GetInstanceMachineWeight
struct FGetInstanceMachineWeight
{
	int32_t MachineIndex;  // 0x0 (0x0)
	float ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.HUD.ReceiveDrawHUD
struct FReceiveDrawHUD
{
	int32_t SizeX;  // 0x0 (0x0)
	int32_t SizeY;  // 0x4 (0x4)


}; 
 
 // ScriptStruct Engine.FXSystemSpawnParameters
struct FFXSystemSpawnParameters
{
	char pad_0[120];  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Quat_SetComponents
struct FQuat_SetComponents
{
	struct FQuat Q;  // 0x0 (0x0)
	float X;  // 0x20 (0x20)
	float Y;  // 0x24 (0x24)
	float Z;  // 0x28 (0x28)
	float W;  // 0x2C (0x2C)


}; 
 
 // Function Engine.Actor.ReceiveEndPlay
struct FReceiveEndPlay
{
	enum class EEndPlayReason EndPlayReason;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.RemoveTickPrerequisiteActor
struct FRemoveTickPrerequisiteActor
{
	struct AActor* PrerequisiteActor;  // 0x0 (0x0)


}; 
 
 // SparseDelegateFunction Engine.ActorComponentActivatedSignature__DelegateSignature
struct FActorComponentActivatedSignature__DelegateSignature
{
	struct UActorComponent* Component;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bReset : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.SkeletalMeshComponent.GetSkeletalMeshAsset
struct FGetSkeletalMeshAsset
{
	struct USkeletalMesh* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetStringLibrary.Conv_IntPointToString
struct FConv_IntPointToString
{
	struct FIntPoint InIntPoint;  // 0x0 (0x0)
	struct FString ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.PrimitiveComponent.SetWalkableSlopeOverride
struct FSetWalkableSlopeOverride
{
	struct FWalkableSlopeOverride NewOverride;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.LessEqual_DateTimeDateTime
struct FLessEqual_DateTimeDateTime
{
	struct FDateTime A;  // 0x0 (0x0)
	struct FDateTime B;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // ScriptStruct Engine.SoundAttenuationSettings
// Size: 0x3C8(Inherited: 0xC0)
struct FSoundAttenuationSettings : FBaseAttenuationSettings
{
	char bAttenuate : 1;  // 0xC0 (0xC0)
	char bSpatialize : 1;  // 0xC0 (0xC0)
	char bAttenuateWithLPF : 1;  // 0xC0 (0xC0)
	char bEnableListenerFocus : 1;  // 0xC0 (0xC0)
	char bEnableFocusInterpolation : 1;  // 0xC0 (0xC0)
	char bEnableOcclusion : 1;  // 0xC0 (0xC0)
	char bUseComplexCollisionForOcclusion : 1;  // 0xC0 (0xC0)
	char bEnableReverbSend : 1;  // 0xC0 (0xC0)
	char bEnablePriorityAttenuation : 1;  // 0xC1 (0xC1)
	char bApplyNormalizationToStereoSounds : 1;  // 0xC1 (0xC1)
	char bEnableLogFrequencyScaling : 1;  // 0xC1 (0xC1)
	char bEnableSubmixSends : 1;  // 0xC1 (0xC1)
	char bEnableSourceDataOverride : 1;  // 0xC1 (0xC1)
	char bEnableSendToAudioLink : 1;  // 0xC1 (0xC1)
	char pad_193_1 : 2;  // 0xC1 (0xC1)
	enum class ESoundSpatializationAlgorithm SpatializationAlgorithm;  // 0xC2 (0xC2)
	char pad_195[5];  // 0xC3 (0xC3)
	struct UAudioLinkSettingsAbstract* AudioLinkSettingsOverride;  // 0xC8 (0xC8)
	float BinauralRadius;  // 0xD0 (0xD0)
	char pad_212[4];  // 0xD4 (0xD4)
	struct FRuntimeFloatCurve CustomLowpassAirAbsorptionCurve;  // 0xD8 (0xD8)
	struct FRuntimeFloatCurve CustomHighpassAirAbsorptionCurve;  // 0x160 (0x160)
	uint8_t AbsorptionMethod;  // 0x1E8 (0x1E8)
	enum class ECollisionChannel OcclusionTraceChannel;  // 0x1E9 (0x1E9)
	uint8_t ReverbSendMethod;  // 0x1EA (0x1EA)
	uint8_t PriorityAttenuationMethod;  // 0x1EB (0x1EB)
	float OmniRadius;  // 0x1EC (0x1EC)
	float StereoSpread;  // 0x1F0 (0x1F0)
	float LPFRadiusMin;  // 0x1F4 (0x1F4)
	float LPFRadiusMax;  // 0x1F8 (0x1F8)
	float LPFFrequencyAtMin;  // 0x1FC (0x1FC)
	float LPFFrequencyAtMax;  // 0x200 (0x200)
	float HPFFrequencyAtMin;  // 0x204 (0x204)
	float HPFFrequencyAtMax;  // 0x208 (0x208)
	float FocusAzimuth;  // 0x20C (0x20C)
	float NonFocusAzimuth;  // 0x210 (0x210)
	float FocusDistanceScale;  // 0x214 (0x214)
	float NonFocusDistanceScale;  // 0x218 (0x218)
	float FocusPriorityScale;  // 0x21C (0x21C)
	float NonFocusPriorityScale;  // 0x220 (0x220)
	float FocusVolumeAttenuation;  // 0x224 (0x224)
	float NonFocusVolumeAttenuation;  // 0x228 (0x228)
	float FocusAttackInterpSpeed;  // 0x22C (0x22C)
	float FocusReleaseInterpSpeed;  // 0x230 (0x230)
	float OcclusionLowPassFilterFrequency;  // 0x234 (0x234)
	float OcclusionVolumeAttenuation;  // 0x238 (0x238)
	float OcclusionInterpolationTime;  // 0x23C (0x23C)
	float ReverbWetLevelMin;  // 0x240 (0x240)
	float ReverbWetLevelMax;  // 0x244 (0x244)
	float ReverbDistanceMin;  // 0x248 (0x248)
	float ReverbDistanceMax;  // 0x24C (0x24C)
	float ManualReverbSendLevel;  // 0x250 (0x250)
	float PriorityAttenuationMin;  // 0x254 (0x254)
	float PriorityAttenuationMax;  // 0x258 (0x258)
	float PriorityAttenuationDistanceMin;  // 0x25C (0x25C)
	float PriorityAttenuationDistanceMax;  // 0x260 (0x260)
	float ManualPriorityAttenuation;  // 0x264 (0x264)
	struct FRuntimeFloatCurve CustomReverbSendCurve;  // 0x268 (0x268)
	struct TArray<struct FAttenuationSubmixSendSettings> SubmixSendSettings;  // 0x2F0 (0x2F0)
	struct FRuntimeFloatCurve CustomPriorityAttenuationCurve;  // 0x300 (0x300)
	struct FSoundAttenuationPluginSettings PluginSettings;  // 0x388 (0x388)


}; 
 
 // ScriptStruct Engine.ParticleEmitterReplayFrame
struct FParticleEmitterReplayFrame
{
	char pad_0[16];  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.IsZero2D
struct FIsZero2D
{
	struct FVector2D A;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.Actor.GetActorBounds
struct FGetActorBounds
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bOnlyCollidingComponents : 1;  // 0x0 (0x0)
	char pad_1[7];  // 0x1 (0x1)
	struct FVector Origin;  // 0x8 (0x8)
	struct FVector BoxExtent;  // 0x20 (0x20)
	char pad_56_1 : 7;  // 0x38 (0x38)
	bool bIncludeFromChildActors : 1;  // 0x38 (0x38)
	char pad_57[7];  // 0x39 (0x39)


}; 
 
 // Function Engine.ActorComponent.SetActive
struct FSetActive
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewActive : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool bReset : 1;  // 0x1 (0x1)


}; 
 
 // Function Engine.VOIPTalker.CreateTalkerForPlayer
struct FCreateTalkerForPlayer
{
	struct APlayerState* OwningState;  // 0x0 (0x0)
	struct UVOIPTalker* ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetSystemLibrary.GetConvenientWindowedResolutions
struct FGetConvenientWindowedResolutions
{
	struct TArray<struct FIntPoint> Resolutions;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.PointLightComponent.SetSourceLength
struct FSetSourceLength
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.ActorComponent.SetComponentTickInterval
struct FSetComponentTickInterval
{
	float TickInterval;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.InterpControlPoint
struct FInterpControlPoint
{
	struct FVector PositionControlPoint;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bPositionIsRelative : 1;  // 0x18 (0x18)
	char pad_25[15];  // 0x19 (0x19)


}; 
 
 // ScriptStruct Engine.AnimationFrameSnapshot
struct FAnimationFrameSnapshot
{
	char pad_0[1];  // 0x0 (0x0)


}; 
 
 // Function Engine.DataLayer.IsInitiallyActive
struct FIsInitiallyActive
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.SceneComponent.GetNumChildrenComponents
struct FGetNumChildrenComponents
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.PluginRedirect
struct FPluginRedirect
{
	struct FString OldPluginName;  // 0x0 (0x0)
	struct FString NewPluginName;  // 0x10 (0x10)


}; 
 
 // Function Engine.ActorComponent.SetComponentTickIntervalAndCooldown
struct FSetComponentTickIntervalAndCooldown
{
	float TickInterval;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.StreamingRenderAssetPrimitiveInfo
struct FStreamingRenderAssetPrimitiveInfo
{
	struct UStreamableRenderAsset* RenderAsset;  // 0x0 (0x0)
	struct FBoxSphereBounds Bounds;  // 0x8 (0x8)
	float TexelFactor;  // 0x40 (0x40)
	uint32_t PackedRelativeBox;  // 0x44 (0x44)
	char bAllowInvalidTexelFactorWhenUnregistered : 1;  // 0x48 (0x48)
	char bAffectedByComponentScale : 1;  // 0x48 (0x48)
	char pad_72_1 : 6;  // 0x48 (0x48)
	char pad_73[8];  // 0x49 (0x49)


}; 
 
 // Function Engine.PrimitiveComponent.GetCollisionEnabled
struct FGetCollisionEnabled
{
	enum class ECollisionEnabled ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.ClientTravel
struct FClientTravel
{
	struct FString URL;  // 0x0 (0x0)
	enum class ETravelType TravelType;  // 0x10 (0x10)
	char pad_17_1 : 7;  // 0x11 (0x11)
	bool bSeamless : 1;  // 0x11 (0x11)
	char pad_18[2];  // 0x12 (0x12)
	struct FGuid MapPackageGuid;  // 0x14 (0x14)
	char pad_36[4];  // 0x24 (0x24)


}; 
 
 // Function Engine.KismetInternationalizationLibrary.GetCurrentCulture
struct FGetCurrentCulture
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.ConstraintInstanceBlueprintLibrary.CopyParams
struct FCopyParams
{
	struct FConstraintInstanceAccessor Accessor;  // 0x0 (0x0)
	struct FConstraintInstanceAccessor SourceAccessor;  // 0xC (0xC)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bKeepPosition : 1;  // 0x18 (0x18)
	char pad_25_1 : 7;  // 0x19 (0x19)
	bool bKeepRotation : 1;  // 0x19 (0x19)
	char pad_26[2];  // 0x1A (0x1A)


}; 
 
 // Function Engine.GameplayStatics.IsSplitscreenForceDisabled
struct FIsSplitscreenForceDisabled
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.ActorComponent.SetIsReplicated
struct FSetIsReplicated
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ShouldReplicate : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.StreamingSourceShouldBlockOnSlowStreaming
struct FStreamingSourceShouldBlockOnSlowStreaming
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetRenderingLibrary.ExportRenderTarget
struct FExportRenderTarget
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct UTextureRenderTarget2D* TextureRenderTarget;  // 0x8 (0x8)
	struct FString FilePath;  // 0x10 (0x10)
	struct FString Filename;  // 0x20 (0x20)


}; 
 
 // Function Engine.Actor.SetTickableWhenPaused
struct FSetTickableWhenPaused
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bTickableWhenPaused : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.SceneComponent.K2_GetComponentToWorld
struct FK2_GetComponentToWorld
{
	struct FTransform ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.ServerViewSelf
struct FServerViewSelf
{
	struct FViewTargetTransitionParams TransitionParams;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.ExponentialHeightFogData
struct FExponentialHeightFogData
{
	float FogDensity;  // 0x0 (0x0)
	float FogHeightFalloff;  // 0x4 (0x4)
	float FogHeightOffset;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.ConeConstraint
// Size: 0x20(Inherited: 0x14)
struct FConeConstraint : FConstraintBaseParams
{
	float Swing1LimitDegrees;  // 0x14 (0x14)
	float Swing2LimitDegrees;  // 0x18 (0x18)
	enum class EAngularConstraintMotion Swing1Motion;  // 0x1C (0x1C)
	enum class EAngularConstraintMotion Swing2Motion;  // 0x1D (0x1D)
	char pad_30[2];  // 0x1E (0x1E)


}; 
 
 // Function Engine.Actor.SetTickGroup
struct FSetTickGroup
{
	enum class ETickingGroup NewTickGroup;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.GetDisplayName
struct FGetDisplayName
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FString ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.GameplayStatics.SpawnDialogueAtLocation
struct FSpawnDialogueAtLocation
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct UDialogueWave* Dialogue;  // 0x8 (0x8)
	struct FDialogueContext Context;  // 0x10 (0x10)
	struct FVector Location;  // 0x28 (0x28)
	struct FRotator Rotation;  // 0x40 (0x40)
	float VolumeMultiplier;  // 0x58 (0x58)
	float PitchMultiplier;  // 0x5C (0x5C)
	float StartTime;  // 0x60 (0x60)
	char pad_100[4];  // 0x64 (0x64)
	struct USoundAttenuation* AttenuationSettings;  // 0x68 (0x68)
	char pad_112_1 : 7;  // 0x70 (0x70)
	bool bAutoDestroy : 1;  // 0x70 (0x70)
	char pad_113[7];  // 0x71 (0x71)
	struct UAudioComponent* ReturnValue;  // 0x78 (0x78)


}; 
 
 // Function Engine.GameplayStatics.SpawnEmitterAtLocation
struct FSpawnEmitterAtLocation
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct UParticleSystem* EmitterTemplate;  // 0x8 (0x8)
	struct FVector Location;  // 0x10 (0x10)
	struct FRotator Rotation;  // 0x28 (0x28)
	struct FVector Scale;  // 0x40 (0x40)
	char pad_88_1 : 7;  // 0x58 (0x58)
	bool bAutoDestroy : 1;  // 0x58 (0x58)
	uint8_t PoolingMethod;  // 0x59 (0x59)
	char pad_90_1 : 7;  // 0x5A (0x5A)
	bool bAutoActivateSystem : 1;  // 0x5A (0x5A)
	char pad_91[5];  // 0x5B (0x5B)
	struct UParticleSystemComponent* ReturnValue;  // 0x60 (0x60)


}; 
 
 // Function Engine.CapsuleComponent.GetUnscaledCapsuleSize
struct FGetUnscaledCapsuleSize
{
	float OutRadius;  // 0x0 (0x0)
	float OutHalfHeight;  // 0x4 (0x4)


}; 
 
 // SparseDelegateFunction Engine.ActorComponentDeactivateSignature__DelegateSignature
struct FActorComponentDeactivateSignature__DelegateSignature
{
	struct UActorComponent* Component;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.TickFunction
struct FTickFunction
{
	char pad_0[8];  // 0x0 (0x0)
	enum class ETickingGroup TickGroup;  // 0x8 (0x8)
	enum class ETickingGroup EndTickGroup;  // 0x9 (0x9)
	char bTickEvenWhenPaused : 1;  // 0xA (0xA)
	char bCanEverTick : 1;  // 0xA (0xA)
	char bStartWithTickEnabled : 1;  // 0xA (0xA)
	char bAllowTickOnDedicatedServer : 1;  // 0xA (0xA)
	char pad_10_1 : 4;  // 0xA (0xA)
	char pad_11[2];  // 0xB (0xB)
	float TickInterval;  // 0xC (0xC)
	char pad_16[24];  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetSystemLibrary.LogString
struct FLogString
{
	struct FString InString;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool bPrintToLog : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.PlatformEventsComponent.IsInLaptopMode
struct FIsInLaptopMode
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Divide_IntPointIntPoint
struct FDivide_IntPointIntPoint
{
	struct FIntPoint A;  // 0x0 (0x0)
	struct FIntPoint B;  // 0x8 (0x8)
	struct FIntPoint ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.ConstraintInstanceBlueprintLibrary.GetAngularVelocityTarget
struct FGetAngularVelocityTarget
{
	struct FConstraintInstanceAccessor Accessor;  // 0x0 (0x0)
	char pad_12[4];  // 0xC (0xC)
	struct FVector OutVelTarget;  // 0x10 (0x10)


}; 
 
 // Function Engine.StaticMesh.SetStaticMaterials
struct FSetStaticMaterials
{
	struct TArray<struct FStaticMaterial> InStaticMaterials;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.ActorComponentTickFunction
// Size: 0x30(Inherited: 0x28)
struct FActorComponentTickFunction : FTickFunction
{
	char pad_40[8];  // 0x28 (0x28)


}; 
 
 // ScriptStruct Engine.DropNoteInfo
struct FDropNoteInfo
{
	struct FVector Location;  // 0x0 (0x0)
	struct FRotator Rotation;  // 0x18 (0x18)
	struct FString Comment;  // 0x30 (0x30)


}; 
 
 // ScriptStruct Engine.MaterialCachedParameterEditorInfo
struct FMaterialCachedParameterEditorInfo
{
	struct FString Description;  // 0x0 (0x0)
	struct FName Group;  // 0x10 (0x10)
	int32_t SortPriority;  // 0x18 (0x18)
	int32_t AssetIndex;  // 0x1C (0x1C)
	struct FGuid ExpressionGUID;  // 0x20 (0x20)


}; 
 
 // SparseDelegateFunction Engine.ActorEndCursorOverSignature__DelegateSignature
struct FActorEndCursorOverSignature__DelegateSignature
{
	struct AActor* TouchedActor;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.BatchedPoint
struct FBatchedPoint
{
	struct FVector Position;  // 0x0 (0x0)
	struct FLinearColor Color;  // 0x18 (0x18)
	float PointSize;  // 0x28 (0x28)
	float RemainingLifeTime;  // 0x2C (0x2C)
	char DepthPriority;  // 0x30 (0x30)
	char pad_49[7];  // 0x31 (0x31)


}; 
 
 // DelegateFunction Engine.ApplicationLifecycleComponent.OnLowPowerModeDelegate__DelegateSignature
struct FOnLowPowerModeDelegate__DelegateSignature
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bInLowPowerMode : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.BakedStringCustomAttribute
struct FBakedStringCustomAttribute
{
	char pad_0[1];  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetNodeHelperLibrary.GetRandomUnmarkedBit
struct FGetRandomUnmarkedBit
{
	int32_t Data;  // 0x0 (0x0)
	int32_t StartIdx;  // 0x4 (0x4)
	int32_t NumBits;  // 0x8 (0x8)
	int32_t ReturnValue;  // 0xC (0xC)


}; 
 
 // DelegateFunction Engine.ApplicationLifecycleComponent.OnTemperatureChangeDelegate__DelegateSignature
struct FOnTemperatureChangeDelegate__DelegateSignature
{
	uint8_t Severity;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimInstance.GetRelevantAnimTimeRemaining
struct FGetRelevantAnimTimeRemaining
{
	int32_t MachineIndex;  // 0x0 (0x0)
	int32_t StateIndex;  // 0x4 (0x4)
	float ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetSystemLibrary.GetSoftClassPath
struct FGetSoftClassPath
{
	UObject* Class;  // 0x0 (0x0)
	struct FSoftClassPath ReturnValue;  // 0x8 (0x8)


}; 
 
 // DelegateFunction Engine.ApplicationLifecycleComponent.ApplicationStartupArgumentsDelegate__DelegateSignature
struct FApplicationStartupArgumentsDelegate__DelegateSignature
{
	struct TArray<struct FString> StartupArguments;  // 0x0 (0x0)


}; 
 
 // Function Engine.MovementComponent.K2_MoveUpdatedComponent
struct FK2_MoveUpdatedComponent
{
	struct FVector Delta;  // 0x0 (0x0)
	struct FRotator NewRotation;  // 0x18 (0x18)
	struct FHitResult OutHit;  // 0x30 (0x30)
	char pad_280_1 : 7;  // 0x118 (0x118)
	bool bSweep : 1;  // 0x118 (0x118)
	char pad_281_1 : 7;  // 0x119 (0x119)
	bool bTeleport : 1;  // 0x119 (0x119)
	char pad_282_1 : 7;  // 0x11A (0x11A)
	bool ReturnValue : 1;  // 0x11A (0x11A)
	char pad_283[5];  // 0x11B (0x11B)


}; 
 
 // Function Engine.KismetSystemLibrary.BoxTraceSingleForObjects
struct FBoxTraceSingleForObjects
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector Start;  // 0x8 (0x8)
	struct FVector End;  // 0x20 (0x20)
	struct FVector HalfSize;  // 0x38 (0x38)
	struct FRotator Orientation;  // 0x50 (0x50)
	struct TArray<enum class EObjectTypeQuery> ObjectTypes;  // 0x68 (0x68)
	char pad_120_1 : 7;  // 0x78 (0x78)
	bool bTraceComplex : 1;  // 0x78 (0x78)
	char pad_121[7];  // 0x79 (0x79)
	struct TArray<struct AActor*> ActorsToIgnore;  // 0x80 (0x80)
	enum class EDrawDebugTrace DrawDebugType;  // 0x90 (0x90)
	char pad_145[7];  // 0x91 (0x91)
	struct FHitResult OutHit;  // 0x98 (0x98)
	char pad_384_1 : 7;  // 0x180 (0x180)
	bool bIgnoreSelf : 1;  // 0x180 (0x180)
	char pad_385[3];  // 0x181 (0x181)
	struct FLinearColor TraceColor;  // 0x184 (0x184)
	struct FLinearColor TraceHitColor;  // 0x194 (0x194)
	float DrawTime;  // 0x1A4 (0x1A4)
	char pad_424_1 : 7;  // 0x1A8 (0x1A8)
	bool ReturnValue : 1;  // 0x1A8 (0x1A8)
	char pad_425[7];  // 0x1A9 (0x1A9)


}; 
 
 // ScriptStruct Engine.ConstraintBaseParams
struct FConstraintBaseParams
{
	float Stiffness;  // 0x0 (0x0)
	float Damping;  // 0x4 (0x4)
	float Restitution;  // 0x8 (0x8)
	float ContactDistance;  // 0xC (0xC)
	char bSoftConstraint : 1;  // 0x10 (0x10)
	char pad_16_1 : 7;  // 0x10 (0x10)
	char pad_17[4];  // 0x11 (0x11)


}; 
 
 // ScriptStruct Engine.ChannelDefinition
struct FChannelDefinition
{
	struct FName ChannelName;  // 0x0 (0x0)
	struct FName ClassName;  // 0x8 (0x8)
	 ChannelClass;  // 0x10 (0x10)
	int32_t StaticChannelIndex;  // 0x18 (0x18)
	char bTickOnCreate : 1;  // 0x1C (0x1C)
	char bServerOpen : 1;  // 0x1C (0x1C)
	char bClientOpen : 1;  // 0x1C (0x1C)
	char bInitialServer : 1;  // 0x1C (0x1C)
	char bInitialClient : 1;  // 0x1C (0x1C)
	char pad_28_1 : 3;  // 0x1C (0x1C)
	char pad_29[4];  // 0x1D (0x1D)


}; 
 
 // DelegateFunction Engine.DataDrivenCVarEngineSubsystem.OnDataDrivenCVarChanged__DelegateSignature
struct FOnDataDrivenCVarChanged__DelegateSignature
{
	struct FString CVarName;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.K2_ClearTimerHandle
struct FK2_ClearTimerHandle
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FTimerHandle Handle;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetSystemLibrary.GetConsoleVariableBoolValue
struct FGetConsoleVariableBoolValue
{
	struct FString VariableName;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.KismetMathLibrary.ComposeRotators
struct FComposeRotators
{
	struct FRotator A;  // 0x0 (0x0)
	struct FRotator B;  // 0x18 (0x18)
	struct FRotator ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.MovementComponent.ConstrainDirectionToPlane
struct FConstrainDirectionToPlane
{
	struct FVector Direction;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetRenderingLibrary.ReadRenderTargetRawUVArea
struct FReadRenderTargetRawUVArea
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct UTextureRenderTarget2D* TextureRenderTarget;  // 0x8 (0x8)
	struct FBox2D Area;  // 0x10 (0x10)
	char pad_56_1 : 7;  // 0x38 (0x38)
	bool bNormalize : 1;  // 0x38 (0x38)
	char pad_57[7];  // 0x39 (0x39)
	struct TArray<struct FLinearColor> ReturnValue;  // 0x40 (0x40)


}; 
 
 // Function Engine.PhysicsConstraintComponent.GetCurrentSwing2
struct FGetCurrentSwing2
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineComponent.SetSplinePointType
struct FSetSplinePointType
{
	int32_t PointIndex;  // 0x0 (0x0)
	enum class ESplinePointType Type;  // 0x4 (0x4)
	char pad_5_1 : 7;  // 0x5 (0x5)
	bool bUpdateSpline : 1;  // 0x5 (0x5)
	char pad_6[2];  // 0x6 (0x6)


}; 
 
 // ScriptStruct Engine.IntegralCurve
// Size: 0x80(Inherited: 0x68)
struct FIntegralCurve : FIndexedCurve
{
	struct TArray<struct FIntegralKey> Keys;  // 0x68 (0x68)
	int32_t DefaultValue;  // 0x78 (0x78)
	char pad_124_1 : 7;  // 0x7C (0x7C)
	bool bUseDefaultValueBeforeFirstKey : 1;  // 0x7C (0x7C)
	char pad_125[3];  // 0x7D (0x7D)


}; 
 
 // Function Engine.MovementComponent.ConstrainNormalToPlane
struct FConstrainNormalToPlane
{
	struct FVector Normal;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x18 (0x18)


}; 
 
 // ScriptStruct Engine.CachedPoseIndices
struct FCachedPoseIndices
{
	struct TArray<int32_t> OrderedSavedPoseNodeIndices;  // 0x0 (0x0)


}; 
 
 // Function Engine.MovementComponent.GetGravityZ
struct FGetGravityZ
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.CameraLensEffectInterfaceClassSupportLibrary.SetInterfaceClass
struct FSetInterfaceClass
{
	AActor* Class;  // 0x0 (0x0)
	struct FCameraLensInterfaceClassSupport Var;  // 0x8 (0x8)
	uint8_t Result;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.SplineComponent.GetLocationAtSplinePoint
struct FGetLocationAtSplinePoint
{
	int32_t PointIndex;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetSystemLibrary.Conv_ObjectToClass
struct FConv_ObjectToClass
{
	struct UObject* Object;  // 0x0 (0x0)
	UObject* Class;  // 0x8 (0x8)
	UObject* ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.PrimitiveComponent.SetHiddenInSceneCapture
struct FSetHiddenInSceneCapture
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.StereoLayerComponent.SetTexture
struct FSetTexture
{
	struct UTexture* InTexture;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlatformInputDeviceMapperLibrary.NotEqual_InputDeviceId
struct FNotEqual_InputDeviceId
{
	struct FInputDeviceId A;  // 0x0 (0x0)
	struct FInputDeviceId B;  // 0x4 (0x4)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.MovementComponent.GetMaxSpeed
struct FGetMaxSpeed
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.ClampVectorSize
struct FClampVectorSize
{
	struct FVector A;  // 0x0 (0x0)
	double Min;  // 0x18 (0x18)
	double Max;  // 0x20 (0x20)
	struct FVector ReturnValue;  // 0x28 (0x28)


}; 
 
 // Function Engine.KismetSystemLibrary.ConvertToRelativePath
struct FConvertToRelativePath
{
	struct FString Filename;  // 0x0 (0x0)
	struct FString ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.SkinnedMeshComponent.SetSkinWeightOverride
struct FSetSkinWeightOverride
{
	int32_t LODIndex;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct TArray<struct FSkelMeshSkinWeightInfo> SkinWeights;  // 0x8 (0x8)


}; 
 
 // Function Engine.PrimitiveComponent.GetGenerateOverlapEvents
struct FGetGenerateOverlapEvents
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.LinearColor_ToNewOpacity
struct FLinearColor_ToNewOpacity
{
	struct FLinearColor InColor;  // 0x0 (0x0)
	float InOpacity;  // 0x10 (0x10)
	struct FLinearColor ReturnValue;  // 0x14 (0x14)


}; 
 
 // Function Engine.SceneComponent.GetSocketTransform
struct FGetSocketTransform
{
	struct FName InSocketName;  // 0x0 (0x0)
	enum class ERelativeTransformSpace TransformSpace;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)
	struct FTransform ReturnValue;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.CompilerNativizationOptions
struct FCompilerNativizationOptions
{
	struct FName PlatformName;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ServerOnlyPlatform : 1;  // 0x8 (0x8)
	char pad_9_1 : 7;  // 0x9 (0x9)
	bool ClientOnlyPlatform : 1;  // 0x9 (0x9)
	char pad_10_1 : 7;  // 0xA (0xA)
	bool bExcludeMonolithicHeaders : 1;  // 0xA (0xA)
	char pad_11[5];  // 0xB (0xB)
	struct TArray<struct FName> ExcludedModules;  // 0x10 (0x10)
	struct TSet<struct FSoftObjectPath> ExcludedAssets;  // 0x20 (0x20)
	struct TArray<struct FString> ExcludedFolderPaths;  // 0x70 (0x70)


}; 
 
 // ScriptStruct Engine.LODSoloTrack
struct FLODSoloTrack
{
	struct TArray<char> SoloEnableSetting;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.EqualEqual_DateTimeDateTime
struct FEqualEqual_DateTimeDateTime
{
	struct FDateTime A;  // 0x0 (0x0)
	struct FDateTime B;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.SceneComponent.GetPhysicsVolume
struct FGetPhysicsVolume
{
	struct APhysicsVolume* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkinnedMeshComponent.TransformToBoneSpace
struct FTransformToBoneSpace
{
	struct FName BoneName;  // 0x0 (0x0)
	struct FVector InPosition;  // 0x8 (0x8)
	struct FRotator InRotation;  // 0x20 (0x20)
	struct FVector OutPosition;  // 0x38 (0x38)
	struct FRotator OutRotation;  // 0x50 (0x50)


}; 
 
 // Function Engine.KismetSystemLibrary.ShowPlatformSpecificAchievementsScreen
struct FShowPlatformSpecificAchievementsScreen
{
	struct APlayerController* SpecificPlayer;  // 0x0 (0x0)


}; 
 
 // Function Engine.MovementComponent.GetPlaneConstraintAxisSetting
struct FGetPlaneConstraintAxisSetting
{
	uint8_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.BreakSoftClassPath
struct FBreakSoftClassPath
{
	struct FSoftClassPath InSoftClassPath;  // 0x0 (0x0)
	struct FString PathString;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetTextLibrary.Conv_Vector2dToText
struct FConv_Vector2dToText
{
	struct FVector2D InVec;  // 0x0 (0x0)
	struct FText ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.RotatorFromAxisAndAngle
struct FRotatorFromAxisAndAngle
{
	struct FVector Axis;  // 0x0 (0x0)
	float Angle;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)
	struct FRotator ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationBadgeAtTime
struct FScheduleLocalNotificationBadgeAtTime
{
	struct FDateTime FireDateTime;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool LocalTime : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)
	struct FString ActivationEvent;  // 0x10 (0x10)
	int32_t ReturnValue;  // 0x20 (0x20)
	char pad_36[4];  // 0x24 (0x24)


}; 
 
 // Function Engine.MovementComponent.GetPlaneConstraintNormal
struct FGetPlaneConstraintNormal
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.NotEqualExactly_Vector2DVector2D
struct FNotEqualExactly_Vector2DVector2D
{
	struct FVector2D A;  // 0x0 (0x0)
	struct FVector2D B;  // 0x10 (0x10)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // ScriptStruct Engine.CollectionReference
struct FCollectionReference
{
	struct FName CollectionName;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintSetLibrary.Set_ToArray
struct FSet_ToArray
{
	struct TSet<int32_t> A;  // 0x0 (0x0)
	struct TArray<int32_t> Result;  // 0x50 (0x50)


}; 
 
 // Function Engine.DataLayerSubsystem.GetDataLayerRuntimeStateByLabel
struct FGetDataLayerRuntimeStateByLabel
{
	struct FName InDataLayerLabel;  // 0x0 (0x0)
	uint8_t ReturnValue;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.KismetSystemLibrary.SetVector3fPropertyByName
struct FSetVector3fPropertyByName
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FName PropertyName;  // 0x8 (0x8)
	struct FVector3f Value;  // 0x10 (0x10)
	char pad_28[4];  // 0x1C (0x1C)


}; 
 
 // Function Engine.StaticMesh.GetMaterial
struct FGetMaterial
{
	int32_t MaterialIndex;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct UMaterialInterface* ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_ComponentMin
struct FVector_ComponentMin
{
	struct FVector A;  // 0x0 (0x0)
	struct FVector B;  // 0x18 (0x18)
	struct FVector ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.MovementComponent.GetPlaneConstraintOrigin
struct FGetPlaneConstraintOrigin
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.RGBToHSV
struct FRGBToHSV
{
	struct FLinearColor InColor;  // 0x0 (0x0)
	float H;  // 0x10 (0x10)
	float S;  // 0x14 (0x14)
	float V;  // 0x18 (0x18)
	float A;  // 0x1C (0x1C)


}; 
 
 // Function Engine.SceneComponent.GetSocketQuaternion
struct FGetSocketQuaternion
{
	struct FName InSocketName;  // 0x0 (0x0)
	char pad_8[8];  // 0x8 (0x8)
	struct FQuat ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.Matrix_InverseTransformPosition
struct FMatrix_InverseTransformPosition
{
	struct FMatrix M;  // 0x0 (0x0)
	struct FVector V;  // 0x80 (0x80)
	struct FVector ReturnValue;  // 0x98 (0x98)


}; 
 
 // Function Engine.GameStateBase.GetServerWorldTimeSeconds
struct FGetServerWorldTimeSeconds
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // SparseDelegateFunction Engine.ActorDestroyedSignature__DelegateSignature
struct FActorDestroyedSignature__DelegateSignature
{
	struct AActor* DestroyedActor;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.K2_GetRootComponent
struct FK2_GetRootComponent
{
	struct USceneComponent* ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.ColorGradePerRangeSettings
struct FColorGradePerRangeSettings
{
	struct FVector4 Saturation;  // 0x0 (0x0)
	struct FVector4 Contrast;  // 0x20 (0x20)
	struct FVector4 Gamma;  // 0x40 (0x40)
	struct FVector4 Gain;  // 0x60 (0x60)
	struct FVector4 Offset;  // 0x80 (0x80)


}; 
 
 // Function Engine.MovementComponent.IsExceedingMaxSpeed
struct FIsExceedingMaxSpeed
{
	float MaxSpeed;  // 0x0 (0x0)
	char pad_4_1 : 7;  // 0x4 (0x4)
	bool ReturnValue : 1;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)


}; 
 
 // Function Engine.SkeletalMeshComponent.GetAllowedAnimCurveEvaluate
struct FGetAllowedAnimCurveEvaluate
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimInstance.GetLinkedAnimLayerInstancesByGroup
struct FGetLinkedAnimLayerInstancesByGroup
{
	struct FName InGroup;  // 0x0 (0x0)
	struct TArray<struct UAnimInstance*> OutLinkedInstances;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMaterialLibrary.CreateDynamicMaterialInstance
struct FCreateDynamicMaterialInstance
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct UMaterialInterface* Parent;  // 0x8 (0x8)
	struct FName OptionalName;  // 0x10 (0x10)
	uint8_t CreationFlags;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)
	struct UMaterialInstanceDynamic* ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.AudioComponent.PlayQuantized
struct FPlayQuantized
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct UQuartzClockHandle* InClockHandle;  // 0x8 (0x8)
	struct FQuartzQuantizationBoundary InQuantizationBoundary;  // 0x10 (0x10)
	struct FDelegate InDelegate;  // 0x30 (0x30)
	float InStartTime;  // 0x40 (0x40)
	float InFadeInDuration;  // 0x44 (0x44)
	float InFadeVolumeLevel;  // 0x48 (0x48)
	uint8_t InFadeCurve;  // 0x4C (0x4C)
	char pad_77[3];  // 0x4D (0x4D)


}; 
 
 // Function Engine.KismetSystemLibrary.K2_SetTimer
struct FK2_SetTimer
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FString FunctionName;  // 0x8 (0x8)
	float Time;  // 0x18 (0x18)
	char pad_28_1 : 7;  // 0x1C (0x1C)
	bool bLooping : 1;  // 0x1C (0x1C)
	char pad_29[3];  // 0x1D (0x1D)
	float InitialStartDelay;  // 0x20 (0x20)
	float InitialStartDelayVariance;  // 0x24 (0x24)
	struct FTimerHandle ReturnValue;  // 0x28 (0x28)


}; 
 
 // Function Engine.MovementComponent.PhysicsVolumeChanged
struct FPhysicsVolumeChanged
{
	struct APhysicsVolume* NewVolume;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetStringLibrary.BuildString_Name
struct FBuildString_Name
{
	struct FString AppendTo;  // 0x0 (0x0)
	struct FString Prefix;  // 0x10 (0x10)
	struct FName InName;  // 0x20 (0x20)
	struct FString Suffix;  // 0x28 (0x28)
	struct FString ReturnValue;  // 0x38 (0x38)


}; 
 
 // ScriptStruct Engine.SceneViewExtensionIsActiveFunctor
struct FSceneViewExtensionIsActiveFunctor
{
	char pad_0[80];  // 0x0 (0x0)


}; 
 
 // SparseDelegateFunction Engine.ActorEndTouchOverSignature__DelegateSignature
struct FActorEndTouchOverSignature__DelegateSignature
{
	enum class ETouchIndex FingerIndex;  // 0x0 (0x0)
	char pad_1[7];  // 0x1 (0x1)
	struct AActor* TouchedActor;  // 0x8 (0x8)


}; 
 
 // Function Engine.MovementComponent.SetPlaneConstraintAxisSetting
struct FSetPlaneConstraintAxisSetting
{
	uint8_t NewAxisSetting;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.ParameterChannelNames
struct FParameterChannelNames
{
	struct FText R;  // 0x0 (0x0)
	struct FText G;  // 0x18 (0x18)
	struct FText B;  // 0x30 (0x30)
	struct FText A;  // 0x48 (0x48)


}; 
 
 // Function Engine.AnimInstance.GetInstanceAssetPlayerLength
struct FGetInstanceAssetPlayerLength
{
	int32_t AssetPlayerIndex;  // 0x0 (0x0)
	float ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.MovementComponent.SetPlaneConstraintEnabled
struct FSetPlaneConstraintEnabled
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bEnabled : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Divide_IntPointInt
struct FDivide_IntPointInt
{
	struct FIntPoint A;  // 0x0 (0x0)
	int32_t B;  // 0x8 (0x8)
	struct FIntPoint ReturnValue;  // 0xC (0xC)


}; 
 
 // Function Engine.Actor.SetNetDormancy
struct FSetNetDormancy
{
	enum class ENetDormancy NewDormancy;  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.IgnoreComponentWhenMoving
struct FIgnoreComponentWhenMoving
{
	struct UPrimitiveComponent* Component;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bShouldIgnore : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // ScriptStruct Engine.CurveEdTab
struct FCurveEdTab
{
	struct FString TabName;  // 0x0 (0x0)
	struct TArray<struct FCurveEdEntry> Curves;  // 0x10 (0x10)
	float ViewStartInput;  // 0x20 (0x20)
	float ViewEndInput;  // 0x24 (0x24)
	float ViewStartOutput;  // 0x28 (0x28)
	float ViewEndOutput;  // 0x2C (0x2C)


}; 
 
 // Function Engine.MovementComponent.SetPlaneConstraintFromVectors
struct FSetPlaneConstraintFromVectors
{
	struct FVector Forward;  // 0x0 (0x0)
	struct FVector Up;  // 0x18 (0x18)


}; 
 
 // Function Engine.Character.ClientAdjustPosition
struct FClientAdjustPosition
{
	float Timestamp;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector NewLoc;  // 0x8 (0x8)
	struct FVector NewVel;  // 0x20 (0x20)
	struct UPrimitiveComponent* NewBase;  // 0x38 (0x38)
	struct FName NewBaseBoneName;  // 0x40 (0x40)
	char pad_72_1 : 7;  // 0x48 (0x48)
	bool bHasBase : 1;  // 0x48 (0x48)
	char pad_73_1 : 7;  // 0x49 (0x49)
	bool bBaseRelativePosition : 1;  // 0x49 (0x49)
	char ServerMovementMode;  // 0x4A (0x4A)
	char pad_75[5];  // 0x4B (0x4B)


}; 
 
 // Function Engine.MovementComponent.SetPlaneConstraintOrigin
struct FSetPlaneConstraintOrigin
{
	struct FVector PlaneOrigin;  // 0x0 (0x0)


}; 
 
 // Function Engine.MovementComponent.SetUpdatedComponent
struct FSetUpdatedComponent
{
	struct USceneComponent* NewUpdatedComponent;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.SetActorEnableCollision
struct FSetActorEnableCollision
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewActorEnableCollision : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.GetSupportedFullscreenResolutions
struct FGetSupportedFullscreenResolutions
{
	struct TArray<struct FIntPoint> Resolutions;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.KismetMathLibrary.Add_DoubleDouble
struct FAdd_DoubleDouble
{
	double A;  // 0x0 (0x0)
	double B;  // 0x8 (0x8)
	double ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.GameplayStatics.SetViewportMouseCaptureMode
struct FSetViewportMouseCaptureMode
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	uint8_t MouseCaptureMode;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.KismetSystemLibrary.DrawDebugCone
struct FDrawDebugCone
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector Origin;  // 0x8 (0x8)
	struct FVector Direction;  // 0x20 (0x20)
	float Length;  // 0x38 (0x38)
	float AngleWidth;  // 0x3C (0x3C)
	float AngleHeight;  // 0x40 (0x40)
	int32_t NumSides;  // 0x44 (0x44)
	struct FLinearColor LineColor;  // 0x48 (0x48)
	float Duration;  // 0x58 (0x58)
	float Thickness;  // 0x5C (0x5C)


}; 
 
 // Function Engine.SplineComponent.GetDirectionAtSplinePoint
struct FGetDirectionAtSplinePoint
{
	int32_t PointIndex;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.InterpToMovementComponent.AddControlPointPosition
struct FAddControlPointPosition
{
	struct FVector Pos;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bPositionIsRelative : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.TextRenderComponent.SetVerticalAlignment
struct FSetVerticalAlignment
{
	enum class EVerticalTextAligment Value;  // 0x0 (0x0)


}; 
 
 // SparseDelegateFunction Engine.ComponentBeginCursorOverSignature__DelegateSignature
struct FComponentBeginCursorOverSignature__DelegateSignature
{
	struct UPrimitiveComponent* TouchedComponent;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.K2_GetComponentsByClass
struct FK2_GetComponentsByClass
{
	UActorComponent* ComponentClass;  // 0x0 (0x0)
	struct TArray<struct UActorComponent*> ReturnValue;  // 0x8 (0x8)


}; 
 
 // DelegateFunction Engine.InterpToMovementComponent.OnInterpToResetDelegate__DelegateSignature
struct FOnInterpToResetDelegate__DelegateSignature
{
	struct FHitResult ImpactResult;  // 0x0 (0x0)
	float Time;  // 0xE8 (0xE8)
	char pad_236[4];  // 0xEC (0xEC)


}; 
 
 // Function Engine.TimelineComponent.SetFloatCurve
struct FSetFloatCurve
{
	struct UCurveFloat* NewFloatCurve;  // 0x0 (0x0)
	struct FName FloatTrackName;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.Quat_SetFromEuler
struct FQuat_SetFromEuler
{
	struct FQuat Q;  // 0x0 (0x0)
	struct FVector Euler;  // 0x20 (0x20)
	char pad_56[8];  // 0x38 (0x38)


}; 
 
 // Function Engine.AnimationDataController.RemoveAttributeKey
struct FRemoveAttributeKey
{
	struct FAnimationAttributeIdentifier AttributeIdentifier;  // 0x0 (0x0)
	float Time;  // 0x40 (0x40)
	char pad_68_1 : 7;  // 0x44 (0x44)
	bool bShouldTransact : 1;  // 0x44 (0x44)
	char pad_69_1 : 7;  // 0x45 (0x45)
	bool ReturnValue : 1;  // 0x45 (0x45)
	char pad_70[2];  // 0x46 (0x46)


}; 
 
 // Function Engine.KismetMathLibrary.Max
struct FMax
{
	int32_t A;  // 0x0 (0x0)
	int32_t B;  // 0x4 (0x4)
	int32_t ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.SceneComponent.K2_GetComponentLocation
struct FK2_GetComponentLocation
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // DelegateFunction Engine.InterpToMovementComponent.OnInterpToReverseDelegate__DelegateSignature
struct FOnInterpToReverseDelegate__DelegateSignature
{
	struct FHitResult ImpactResult;  // 0x0 (0x0)
	float Time;  // 0xE8 (0xE8)
	char pad_236[4];  // 0xEC (0xEC)


}; 
 
 // Function Engine.KismetMathLibrary.Matrix_GetInverse
struct FMatrix_GetInverse
{
	struct FMatrix M;  // 0x0 (0x0)
	struct FMatrix ReturnValue;  // 0x80 (0x80)


}; 
 
 // DelegateFunction Engine.InterpToMovementComponent.OnInterpToStopDelegate__DelegateSignature
struct FOnInterpToStopDelegate__DelegateSignature
{
	struct FHitResult ImpactResult;  // 0x0 (0x0)
	float Time;  // 0xE8 (0xE8)
	char pad_236[4];  // 0xEC (0xEC)


}; 
 
 // Function Engine.ParticleSystemComponent.SetBeamEndPoint
struct FSetBeamEndPoint
{
	int32_t EmitterIndex;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector NewEndPoint;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.SpatialHashStreamingGridLevel
struct FSpatialHashStreamingGridLevel
{
	struct TArray<struct FSpatialHashStreamingGridLayerCell> LayerCells;  // 0x0 (0x0)
	struct TMap<int64_t, int32_t> LayerCellsMapping;  // 0x10 (0x10)


}; 
 
 // DelegateFunction Engine.ProjectileMovementComponent.OnProjectileStopDelegate__DelegateSignature
struct FOnProjectileStopDelegate__DelegateSignature
{
	struct FHitResult ImpactResult;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.PostProcessSettings
struct FPostProcessSettings
{
	char bOverride_TemperatureType : 1;  // 0x0 (0x0)
	char bOverride_WhiteTemp : 1;  // 0x0 (0x0)
	char bOverride_WhiteTint : 1;  // 0x0 (0x0)
	char bOverride_ColorSaturation : 1;  // 0x0 (0x0)
	char bOverride_ColorContrast : 1;  // 0x0 (0x0)
	char bOverride_ColorGamma : 1;  // 0x0 (0x0)
	char bOverride_ColorGain : 1;  // 0x0 (0x0)
	char bOverride_ColorOffset : 1;  // 0x0 (0x0)
	char bOverride_ColorSaturationShadows : 1;  // 0x1 (0x1)
	char bOverride_ColorContrastShadows : 1;  // 0x1 (0x1)
	char bOverride_ColorGammaShadows : 1;  // 0x1 (0x1)
	char bOverride_ColorGainShadows : 1;  // 0x1 (0x1)
	char bOverride_ColorOffsetShadows : 1;  // 0x1 (0x1)
	char bOverride_ColorSaturationMidtones : 1;  // 0x1 (0x1)
	char bOverride_ColorContrastMidtones : 1;  // 0x1 (0x1)
	char bOverride_ColorGammaMidtones : 1;  // 0x1 (0x1)
	char bOverride_ColorGainMidtones : 1;  // 0x2 (0x2)
	char bOverride_ColorOffsetMidtones : 1;  // 0x2 (0x2)
	char bOverride_ColorSaturationHighlights : 1;  // 0x2 (0x2)
	char bOverride_ColorContrastHighlights : 1;  // 0x2 (0x2)
	char bOverride_ColorGammaHighlights : 1;  // 0x2 (0x2)
	char bOverride_ColorGainHighlights : 1;  // 0x2 (0x2)
	char bOverride_ColorOffsetHighlights : 1;  // 0x2 (0x2)
	char bOverride_ColorCorrectionShadowsMax : 1;  // 0x2 (0x2)
	char bOverride_ColorCorrectionHighlightsMin : 1;  // 0x3 (0x3)
	char bOverride_ColorCorrectionHighlightsMax : 1;  // 0x3 (0x3)
	char bOverride_BlueCorrection : 1;  // 0x3 (0x3)
	char bOverride_ExpandGamut : 1;  // 0x3 (0x3)
	char bOverride_ToneCurveAmount : 1;  // 0x3 (0x3)
	char bOverride_FilmSlope : 1;  // 0x3 (0x3)
	char bOverride_FilmToe : 1;  // 0x3 (0x3)
	char bOverride_FilmShoulder : 1;  // 0x3 (0x3)
	char bOverride_FilmBlackClip : 1;  // 0x4 (0x4)
	char bOverride_FilmWhiteClip : 1;  // 0x4 (0x4)
	char bOverride_SceneColorTint : 1;  // 0x4 (0x4)
	char bOverride_SceneFringeIntensity : 1;  // 0x4 (0x4)
	char bOverride_ChromaticAberrationStartOffset : 1;  // 0x4 (0x4)
	char bOverride_AmbientCubemapTint : 1;  // 0x4 (0x4)
	char bOverride_AmbientCubemapIntensity : 1;  // 0x4 (0x4)
	char bOverride_BloomMethod : 1;  // 0x4 (0x4)
	char bOverride_BloomIntensity : 1;  // 0x5 (0x5)
	char bOverride_BloomThreshold : 1;  // 0x5 (0x5)
	char bOverride_Bloom1Tint : 1;  // 0x5 (0x5)
	char bOverride_Bloom1Size : 1;  // 0x5 (0x5)
	char bOverride_Bloom2Size : 1;  // 0x5 (0x5)
	char bOverride_Bloom2Tint : 1;  // 0x5 (0x5)
	char bOverride_Bloom3Tint : 1;  // 0x5 (0x5)
	char bOverride_Bloom3Size : 1;  // 0x5 (0x5)
	char bOverride_Bloom4Tint : 1;  // 0x6 (0x6)
	char bOverride_Bloom4Size : 1;  // 0x6 (0x6)
	char bOverride_Bloom5Tint : 1;  // 0x6 (0x6)
	char bOverride_Bloom5Size : 1;  // 0x6 (0x6)
	char bOverride_Bloom6Tint : 1;  // 0x6 (0x6)
	char bOverride_Bloom6Size : 1;  // 0x6 (0x6)
	char bOverride_BloomSizeScale : 1;  // 0x6 (0x6)
	char bOverride_BloomConvolutionTexture : 1;  // 0x6 (0x6)
	char bOverride_BloomConvolutionScatterDispersion : 1;  // 0x7 (0x7)
	char bOverride_BloomConvolutionSize : 1;  // 0x7 (0x7)
	char bOverride_BloomConvolutionCenterUV : 1;  // 0x7 (0x7)
	char bOverride_BloomConvolutionPreFilter : 1;  // 0x7 (0x7)
	char bOverride_BloomConvolutionPreFilterMin : 1;  // 0x7 (0x7)
	char bOverride_BloomConvolutionPreFilterMax : 1;  // 0x7 (0x7)
	char bOverride_BloomConvolutionPreFilterMult : 1;  // 0x7 (0x7)
	char bOverride_BloomConvolutionBufferScale : 1;  // 0x7 (0x7)
	char bOverride_BloomDirtMaskIntensity : 1;  // 0x8 (0x8)
	char bOverride_BloomDirtMaskTint : 1;  // 0x8 (0x8)
	char bOverride_BloomDirtMask : 1;  // 0x8 (0x8)
	char bOverride_CameraShutterSpeed : 1;  // 0x8 (0x8)
	char bOverride_CameraISO : 1;  // 0x8 (0x8)
	char bOverride_AutoExposureMethod : 1;  // 0x8 (0x8)
	char bOverride_AutoExposureLowPercent : 1;  // 0x8 (0x8)
	char bOverride_AutoExposureHighPercent : 1;  // 0x8 (0x8)
	char bOverride_AutoExposureMinBrightness : 1;  // 0x9 (0x9)
	char bOverride_AutoExposureMaxBrightness : 1;  // 0x9 (0x9)
	char bOverride_AutoExposureCalibrationConstant : 1;  // 0x9 (0x9)
	char bOverride_AutoExposureSpeedUp : 1;  // 0x9 (0x9)
	char bOverride_AutoExposureSpeedDown : 1;  // 0x9 (0x9)
	char bOverride_AutoExposureBias : 1;  // 0x9 (0x9)
	char bOverride_AutoExposureBiasCurve : 1;  // 0x9 (0x9)
	char bOverride_AutoExposureMeterMask : 1;  // 0x9 (0x9)
	char bOverride_AutoExposureApplyPhysicalCameraExposure : 1;  // 0xA (0xA)
	char bOverride_HistogramLogMin : 1;  // 0xA (0xA)
	char bOverride_HistogramLogMax : 1;  // 0xA (0xA)
	char bOverride_LocalExposureContrastScale : 1;  // 0xA (0xA)
	char bOverride_LocalExposureHighlightContrastScale : 1;  // 0xA (0xA)
	char bOverride_LocalExposureShadowContrastScale : 1;  // 0xA (0xA)
	char bOverride_LocalExposureDetailStrength : 1;  // 0xA (0xA)
	char bOverride_LocalExposureBlurredLuminanceBlend : 1;  // 0xA (0xA)
	char bOverride_LocalExposureBlurredLuminanceKernelSizePercent : 1;  // 0xB (0xB)
	char bOverride_LocalExposureMiddleGreyBias : 1;  // 0xB (0xB)
	char bOverride_LensFlareIntensity : 1;  // 0xB (0xB)
	char bOverride_LensFlareTint : 1;  // 0xB (0xB)
	char bOverride_LensFlareTints : 1;  // 0xB (0xB)
	char bOverride_LensFlareBokehSize : 1;  // 0xB (0xB)
	char bOverride_LensFlareBokehShape : 1;  // 0xB (0xB)
	char bOverride_LensFlareThreshold : 1;  // 0xB (0xB)
	char bOverride_VignetteIntensity : 1;  // 0xC (0xC)
	char bOverride_GrainIntensity : 1;  // 0xC (0xC)
	char bOverride_GrainJitter : 1;  // 0xC (0xC)
	char bOverride_FilmGrainIntensity : 1;  // 0xC (0xC)
	char bOverride_FilmGrainIntensityShadows : 1;  // 0xC (0xC)
	char bOverride_FilmGrainIntensityMidtones : 1;  // 0xC (0xC)
	char bOverride_FilmGrainIntensityHighlights : 1;  // 0xC (0xC)
	char bOverride_FilmGrainShadowsMax : 1;  // 0xC (0xC)
	char bOverride_FilmGrainHighlightsMin : 1;  // 0xD (0xD)
	char bOverride_FilmGrainHighlightsMax : 1;  // 0xD (0xD)
	char bOverride_FilmGrainTexelSize : 1;  // 0xD (0xD)
	char bOverride_FilmGrainTexture : 1;  // 0xD (0xD)
	char bOverride_AmbientOcclusionIntensity : 1;  // 0xD (0xD)
	char bOverride_AmbientOcclusionStaticFraction : 1;  // 0xD (0xD)
	char bOverride_AmbientOcclusionRadius : 1;  // 0xD (0xD)
	char bOverride_AmbientOcclusionFadeDistance : 1;  // 0xD (0xD)
	char bOverride_AmbientOcclusionFadeRadius : 1;  // 0xE (0xE)
	char bOverride_AmbientOcclusionDistance : 1;  // 0xE (0xE)
	char bOverride_AmbientOcclusionRadiusInWS : 1;  // 0xE (0xE)
	char bOverride_AmbientOcclusionPower : 1;  // 0xE (0xE)
	char bOverride_AmbientOcclusionBias : 1;  // 0xE (0xE)
	char bOverride_AmbientOcclusionQuality : 1;  // 0xE (0xE)
	char bOverride_AmbientOcclusionMipBlend : 1;  // 0xE (0xE)
	char bOverride_AmbientOcclusionMipScale : 1;  // 0xE (0xE)
	char bOverride_AmbientOcclusionMipThreshold : 1;  // 0xF (0xF)
	char bOverride_AmbientOcclusionTemporalBlendWeight : 1;  // 0xF (0xF)
	char pad_15_1 : 6;  // 0xF (0xF)
	char bOverride_RayTracingAO : 1;  // 0x10 (0x10)
	char bOverride_RayTracingAOSamplesPerPixel : 1;  // 0x10 (0x10)
	char bOverride_RayTracingAOIntensity : 1;  // 0x10 (0x10)
	char bOverride_RayTracingAORadius : 1;  // 0x10 (0x10)
	char pad_16_1 : 4;  // 0x10 (0x10)
	char pad_17[4];  // 0x11 (0x11)
	char bOverride_LPVIntensity : 1;  // 0x14 (0x14)
	char bOverride_LPVDirectionalOcclusionIntensity : 1;  // 0x14 (0x14)
	char bOverride_LPVDirectionalOcclusionRadius : 1;  // 0x14 (0x14)
	char bOverride_LPVDiffuseOcclusionExponent : 1;  // 0x14 (0x14)
	char bOverride_LPVSpecularOcclusionExponent : 1;  // 0x14 (0x14)
	char bOverride_LPVDiffuseOcclusionIntensity : 1;  // 0x14 (0x14)
	char bOverride_LPVSpecularOcclusionIntensity : 1;  // 0x14 (0x14)
	char bOverride_LPVSize : 1;  // 0x14 (0x14)
	char bOverride_LPVSecondaryOcclusionIntensity : 1;  // 0x15 (0x15)
	char bOverride_LPVSecondaryBounceIntensity : 1;  // 0x15 (0x15)
	char bOverride_LPVGeometryVolumeBias : 1;  // 0x15 (0x15)
	char bOverride_LPVVplInjectionBias : 1;  // 0x15 (0x15)
	char bOverride_LPVEmissiveInjectionIntensity : 1;  // 0x15 (0x15)
	char bOverride_LPVFadeRange : 1;  // 0x15 (0x15)
	char bOverride_LPVDirectionalOcclusionFadeRange : 1;  // 0x15 (0x15)
	char bOverride_IndirectLightingColor : 1;  // 0x15 (0x15)
	char bOverride_IndirectLightingIntensity : 1;  // 0x16 (0x16)
	char bOverride_ColorGradingIntensity : 1;  // 0x16 (0x16)
	char bOverride_ColorGradingLUT : 1;  // 0x16 (0x16)
	char bOverride_DepthOfFieldFocalDistance : 1;  // 0x16 (0x16)
	char bOverride_DepthOfFieldFstop : 1;  // 0x16 (0x16)
	char bOverride_DepthOfFieldMinFstop : 1;  // 0x16 (0x16)
	char bOverride_DepthOfFieldBladeCount : 1;  // 0x16 (0x16)
	char bOverride_DepthOfFieldSensorWidth : 1;  // 0x16 (0x16)
	char bOverride_DepthOfFieldSqueezeFactor : 1;  // 0x17 (0x17)
	char bOverride_DepthOfFieldDepthBlurRadius : 1;  // 0x17 (0x17)
	char bOverride_DepthOfFieldDepthBlurAmount : 1;  // 0x17 (0x17)
	char bOverride_DepthOfFieldFocalRegion : 1;  // 0x17 (0x17)
	char bOverride_DepthOfFieldNearTransitionRegion : 1;  // 0x17 (0x17)
	char bOverride_DepthOfFieldFarTransitionRegion : 1;  // 0x17 (0x17)
	char bOverride_DepthOfFieldScale : 1;  // 0x17 (0x17)
	char bOverride_DepthOfFieldNearBlurSize : 1;  // 0x17 (0x17)
	char bOverride_DepthOfFieldFarBlurSize : 1;  // 0x18 (0x18)
	char bOverride_MobileHQGaussian : 1;  // 0x18 (0x18)
	char bOverride_DepthOfFieldOcclusion : 1;  // 0x18 (0x18)
	char bOverride_DepthOfFieldSkyFocusDistance : 1;  // 0x18 (0x18)
	char bOverride_DepthOfFieldVignetteSize : 1;  // 0x18 (0x18)
	char bOverride_MotionBlurAmount : 1;  // 0x18 (0x18)
	char bOverride_MotionBlurMax : 1;  // 0x18 (0x18)
	char bOverride_MotionBlurTargetFPS : 1;  // 0x18 (0x18)
	char bOverride_MotionBlurPerObjectSize : 1;  // 0x19 (0x19)
	char bOverride_ScreenPercentage : 1;  // 0x19 (0x19)
	char bOverride_ReflectionMethod : 1;  // 0x19 (0x19)
	char bOverride_LumenReflectionQuality : 1;  // 0x19 (0x19)
	char bOverride_ScreenSpaceReflectionIntensity : 1;  // 0x19 (0x19)
	char bOverride_ScreenSpaceReflectionQuality : 1;  // 0x19 (0x19)
	char bOverride_ScreenSpaceReflectionMaxRoughness : 1;  // 0x19 (0x19)
	char bOverride_ScreenSpaceReflectionRoughnessScale : 1;  // 0x19 (0x19)
	char pad_26[2];  // 0x1A (0x1A)
	char bOverride_ReflectionsType : 1;  // 0x1C (0x1C)
	char bOverride_RayTracingReflectionsMaxRoughness : 1;  // 0x1C (0x1C)
	char bOverride_RayTracingReflectionsMaxBounces : 1;  // 0x1C (0x1C)
	char bOverride_RayTracingReflectionsSamplesPerPixel : 1;  // 0x1C (0x1C)
	char bOverride_RayTracingReflectionsShadows : 1;  // 0x1C (0x1C)
	char bOverride_RayTracingReflectionsTranslucency : 1;  // 0x1C (0x1C)
	char bOverride_TranslucencyType : 1;  // 0x1C (0x1C)
	char bOverride_RayTracingTranslucencyMaxRoughness : 1;  // 0x1C (0x1C)
	char bOverride_RayTracingTranslucencyRefractionRays : 1;  // 0x1D (0x1D)
	char bOverride_RayTracingTranslucencySamplesPerPixel : 1;  // 0x1D (0x1D)
	char bOverride_RayTracingTranslucencyShadows : 1;  // 0x1D (0x1D)
	char bOverride_RayTracingTranslucencyRefraction : 1;  // 0x1D (0x1D)
	char bOverride_DynamicGlobalIlluminationMethod : 1;  // 0x1D (0x1D)
	char bOverride_LumenSceneLightingQuality : 1;  // 0x1D (0x1D)
	char bOverride_LumenSceneDetail : 1;  // 0x1D (0x1D)
	char bOverride_LumenSceneViewDistance : 1;  // 0x1D (0x1D)
	char bOverride_LumenSceneLightingUpdateSpeed : 1;  // 0x1E (0x1E)
	char bOverride_LumenFinalGatherQuality : 1;  // 0x1E (0x1E)
	char bOverride_LumenFinalGatherLightingUpdateSpeed : 1;  // 0x1E (0x1E)
	char bOverride_LumenMaxTraceDistance : 1;  // 0x1E (0x1E)
	char bOverride_LumenDiffuseColorBoost : 1;  // 0x1E (0x1E)
	char bOverride_LumenSkylightLeaking : 1;  // 0x1E (0x1E)
	char bOverride_LumenFullSkylightLeakingDistance : 1;  // 0x1E (0x1E)
	char pad_30_1 : 1;  // 0x1E (0x1E)
	char pad_31[2];  // 0x1F (0x1F)
	char bOverride_LumenRayLightingMode : 1;  // 0x20 (0x20)
	char bOverride_LumenFrontLayerTranslucencyReflections : 1;  // 0x20 (0x20)
	char bOverride_LumenSurfaceCacheResolution : 1;  // 0x20 (0x20)
	char pad_32_1 : 5;  // 0x20 (0x20)
	char pad_33[4];  // 0x21 (0x21)
	char bOverride_RayTracingGI : 1;  // 0x24 (0x24)
	char bOverride_RayTracingGIMaxBounces : 1;  // 0x24 (0x24)
	char bOverride_RayTracingGISamplesPerPixel : 1;  // 0x24 (0x24)
	char bOverride_PathTracingMaxBounces : 1;  // 0x24 (0x24)
	char bOverride_PathTracingSamplesPerPixel : 1;  // 0x24 (0x24)
	char bOverride_PathTracingFilterWidth : 1;  // 0x24 (0x24)
	char bOverride_PathTracingEnableEmissive : 1;  // 0x24 (0x24)
	char bOverride_PathTracingMaxPathExposure : 1;  // 0x24 (0x24)
	char bOverride_PathTracingEnableReferenceDOF : 1;  // 0x25 (0x25)
	char bOverride_PathTracingEnableReferenceAtmosphere : 1;  // 0x25 (0x25)
	char bOverride_PathTracingEnableDenoiser : 1;  // 0x25 (0x25)
	char pad_37_1 : 5;  // 0x25 (0x25)
	char pad_38[3];  // 0x26 (0x26)
	char bMobileHQGaussian : 1;  // 0x28 (0x28)
	char pad_40_1 : 7;  // 0x28 (0x28)
	enum class EBloomMethod BloomMethod;  // 0x29 (0x29)
	enum class EAutoExposureMethod AutoExposureMethod;  // 0x2A (0x2A)
	enum class ETemperatureMethod TemperatureType;  // 0x2B (0x2B)
	float WhiteTemp;  // 0x2C (0x2C)
	float WhiteTint;  // 0x30 (0x30)
	char pad_52[12];  // 0x34 (0x34)
	struct FVector4 ColorSaturation;  // 0x40 (0x40)
	struct FVector4 ColorContrast;  // 0x60 (0x60)
	struct FVector4 ColorGamma;  // 0x80 (0x80)
	struct FVector4 ColorGain;  // 0xA0 (0xA0)
	struct FVector4 ColorOffset;  // 0xC0 (0xC0)
	struct FVector4 ColorSaturationShadows;  // 0xE0 (0xE0)
	struct FVector4 ColorContrastShadows;  // 0x100 (0x100)
	struct FVector4 ColorGammaShadows;  // 0x120 (0x120)
	struct FVector4 ColorGainShadows;  // 0x140 (0x140)
	struct FVector4 ColorOffsetShadows;  // 0x160 (0x160)
	struct FVector4 ColorSaturationMidtones;  // 0x180 (0x180)
	struct FVector4 ColorContrastMidtones;  // 0x1A0 (0x1A0)
	struct FVector4 ColorGammaMidtones;  // 0x1C0 (0x1C0)
	struct FVector4 ColorGainMidtones;  // 0x1E0 (0x1E0)
	struct FVector4 ColorOffsetMidtones;  // 0x200 (0x200)
	struct FVector4 ColorSaturationHighlights;  // 0x220 (0x220)
	struct FVector4 ColorContrastHighlights;  // 0x240 (0x240)
	struct FVector4 ColorGammaHighlights;  // 0x260 (0x260)
	struct FVector4 ColorGainHighlights;  // 0x280 (0x280)
	struct FVector4 ColorOffsetHighlights;  // 0x2A0 (0x2A0)
	float ColorCorrectionHighlightsMin;  // 0x2C0 (0x2C0)
	float ColorCorrectionHighlightsMax;  // 0x2C4 (0x2C4)
	float ColorCorrectionShadowsMax;  // 0x2C8 (0x2C8)
	float BlueCorrection;  // 0x2CC (0x2CC)
	float ExpandGamut;  // 0x2D0 (0x2D0)
	float ToneCurveAmount;  // 0x2D4 (0x2D4)
	float FilmSlope;  // 0x2D8 (0x2D8)
	float FilmToe;  // 0x2DC (0x2DC)
	float FilmShoulder;  // 0x2E0 (0x2E0)
	float FilmBlackClip;  // 0x2E4 (0x2E4)
	float FilmWhiteClip;  // 0x2E8 (0x2E8)
	struct FLinearColor SceneColorTint;  // 0x2EC (0x2EC)
	float SceneFringeIntensity;  // 0x2FC (0x2FC)
	float ChromaticAberrationStartOffset;  // 0x300 (0x300)
	float BloomIntensity;  // 0x304 (0x304)
	float BloomThreshold;  // 0x308 (0x308)
	float BloomSizeScale;  // 0x30C (0x30C)
	float Bloom1Size;  // 0x310 (0x310)
	float Bloom2Size;  // 0x314 (0x314)
	float Bloom3Size;  // 0x318 (0x318)
	float Bloom4Size;  // 0x31C (0x31C)
	float Bloom5Size;  // 0x320 (0x320)
	float Bloom6Size;  // 0x324 (0x324)
	struct FLinearColor Bloom1Tint;  // 0x328 (0x328)
	struct FLinearColor Bloom2Tint;  // 0x338 (0x338)
	struct FLinearColor Bloom3Tint;  // 0x348 (0x348)
	struct FLinearColor Bloom4Tint;  // 0x358 (0x358)
	struct FLinearColor Bloom5Tint;  // 0x368 (0x368)
	struct FLinearColor Bloom6Tint;  // 0x378 (0x378)
	float BloomConvolutionScatterDispersion;  // 0x388 (0x388)
	float BloomConvolutionSize;  // 0x38C (0x38C)
	struct UTexture2D* BloomConvolutionTexture;  // 0x390 (0x390)
	struct FVector2D BloomConvolutionCenterUV;  // 0x398 (0x398)
	float BloomConvolutionPreFilterMin;  // 0x3A8 (0x3A8)
	float BloomConvolutionPreFilterMax;  // 0x3AC (0x3AC)
	float BloomConvolutionPreFilterMult;  // 0x3B0 (0x3B0)
	float BloomConvolutionBufferScale;  // 0x3B4 (0x3B4)
	struct UTexture* BloomDirtMask;  // 0x3B8 (0x3B8)
	float BloomDirtMaskIntensity;  // 0x3C0 (0x3C0)
	struct FLinearColor BloomDirtMaskTint;  // 0x3C4 (0x3C4)
	enum class EDynamicGlobalIlluminationMethod DynamicGlobalIlluminationMethod;  // 0x3D4 (0x3D4)
	char pad_981[3];  // 0x3D5 (0x3D5)
	struct FLinearColor IndirectLightingColor;  // 0x3D8 (0x3D8)
	float IndirectLightingIntensity;  // 0x3E8 (0x3E8)
	float LumenSceneLightingQuality;  // 0x3EC (0x3EC)
	float LumenSceneDetail;  // 0x3F0 (0x3F0)
	float LumenSceneViewDistance;  // 0x3F4 (0x3F4)
	float LumenSceneLightingUpdateSpeed;  // 0x3F8 (0x3F8)
	float LumenFinalGatherQuality;  // 0x3FC (0x3FC)
	float LumenFinalGatherLightingUpdateSpeed;  // 0x400 (0x400)
	float LumenMaxTraceDistance;  // 0x404 (0x404)
	float LumenDiffuseColorBoost;  // 0x408 (0x408)
	float LumenSkylightLeaking;  // 0x40C (0x40C)
	float LumenFullSkylightLeakingDistance;  // 0x410 (0x410)
	float LumenSurfaceCacheResolution;  // 0x414 (0x414)
	uint8_t RayTracingGIType;  // 0x418 (0x418)
	char pad_1049[3];  // 0x419 (0x419)
	int32_t RayTracingGIMaxBounces;  // 0x41C (0x41C)
	int32_t RayTracingGISamplesPerPixel;  // 0x420 (0x420)
	enum class EReflectionMethod ReflectionMethod;  // 0x424 (0x424)
	uint8_t ReflectionsType;  // 0x425 (0x425)
	char pad_1062[2];  // 0x426 (0x426)
	float LumenReflectionQuality;  // 0x428 (0x428)
	uint8_t LumenRayLightingMode;  // 0x42C (0x42C)
	char LumenFrontLayerTranslucencyReflections : 1;  // 0x42D (0x42D)
	char pad_1069_1 : 7;  // 0x42D (0x42D)
	char pad_1070[3];  // 0x42E (0x42E)
	float ScreenSpaceReflectionIntensity;  // 0x430 (0x430)
	float ScreenSpaceReflectionQuality;  // 0x434 (0x434)
	float ScreenSpaceReflectionMaxRoughness;  // 0x438 (0x438)
	float RayTracingReflectionsMaxRoughness;  // 0x43C (0x43C)
	int32_t RayTracingReflectionsMaxBounces;  // 0x440 (0x440)
	int32_t RayTracingReflectionsSamplesPerPixel;  // 0x444 (0x444)
	uint8_t RayTracingReflectionsShadows;  // 0x448 (0x448)
	char RayTracingReflectionsTranslucency : 1;  // 0x449 (0x449)
	char pad_1097_1 : 7;  // 0x449 (0x449)
	char pad_1098[3];  // 0x44A (0x44A)
	struct FLinearColor AmbientCubemapTint;  // 0x44C (0x44C)
	float AmbientCubemapIntensity;  // 0x45C (0x45C)
	struct UTextureCube* AmbientCubemap;  // 0x460 (0x460)
	float CameraShutterSpeed;  // 0x468 (0x468)
	float CameraISO;  // 0x46C (0x46C)
	float DepthOfFieldFstop;  // 0x470 (0x470)
	float DepthOfFieldMinFstop;  // 0x474 (0x474)
	int32_t DepthOfFieldBladeCount;  // 0x478 (0x478)
	float AutoExposureBias;  // 0x47C (0x47C)
	float AutoExposureBiasBackup;  // 0x480 (0x480)
	char bOverride_AutoExposureBiasBackup : 1;  // 0x484 (0x484)
	char pad_1156_1 : 7;  // 0x484 (0x484)
	char pad_1157[4];  // 0x485 (0x485)
	char AutoExposureApplyPhysicalCameraExposure : 1;  // 0x488 (0x488)
	char pad_1160_1 : 7;  // 0x488 (0x488)
	char pad_1161[8];  // 0x489 (0x489)
	struct UCurveFloat* AutoExposureBiasCurve;  // 0x490 (0x490)
	struct UTexture* AutoExposureMeterMask;  // 0x498 (0x498)
	float AutoExposureLowPercent;  // 0x4A0 (0x4A0)
	float AutoExposureHighPercent;  // 0x4A4 (0x4A4)
	float AutoExposureMinBrightness;  // 0x4A8 (0x4A8)
	float AutoExposureMaxBrightness;  // 0x4AC (0x4AC)
	float AutoExposureSpeedUp;  // 0x4B0 (0x4B0)
	float AutoExposureSpeedDown;  // 0x4B4 (0x4B4)
	float HistogramLogMin;  // 0x4B8 (0x4B8)
	float HistogramLogMax;  // 0x4BC (0x4BC)
	float AutoExposureCalibrationConstant;  // 0x4C0 (0x4C0)
	float LocalExposureContrastScale;  // 0x4C4 (0x4C4)
	float LocalExposureHighlightContrastScale;  // 0x4C8 (0x4C8)
	float LocalExposureShadowContrastScale;  // 0x4CC (0x4CC)
	float LocalExposureDetailStrength;  // 0x4D0 (0x4D0)
	float LocalExposureBlurredLuminanceBlend;  // 0x4D4 (0x4D4)
	float LocalExposureBlurredLuminanceKernelSizePercent;  // 0x4D8 (0x4D8)
	float LocalExposureMiddleGreyBias;  // 0x4DC (0x4DC)
	float LensFlareIntensity;  // 0x4E0 (0x4E0)
	struct FLinearColor LensFlareTint;  // 0x4E4 (0x4E4)
	float LensFlareBokehSize;  // 0x4F4 (0x4F4)
	float LensFlareThreshold;  // 0x4F8 (0x4F8)
	char pad_1276[4];  // 0x4FC (0x4FC)
	struct UTexture* LensFlareBokehShape;  // 0x500 (0x500)
	struct FLinearColor LensFlareTints[8];  // 0x508 (0x508)
	float VignetteIntensity;  // 0x588 (0x588)
	float GrainJitter;  // 0x58C (0x58C)
	float GrainIntensity;  // 0x590 (0x590)
	float FilmGrainIntensity;  // 0x594 (0x594)
	float FilmGrainIntensityShadows;  // 0x598 (0x598)
	float FilmGrainIntensityMidtones;  // 0x59C (0x59C)
	float FilmGrainIntensityHighlights;  // 0x5A0 (0x5A0)
	float FilmGrainShadowsMax;  // 0x5A4 (0x5A4)
	float FilmGrainHighlightsMin;  // 0x5A8 (0x5A8)
	float FilmGrainHighlightsMax;  // 0x5AC (0x5AC)
	float FilmGrainTexelSize;  // 0x5B0 (0x5B0)
	char pad_1460[4];  // 0x5B4 (0x5B4)
	struct UTexture2D* FilmGrainTexture;  // 0x5B8 (0x5B8)
	float AmbientOcclusionIntensity;  // 0x5C0 (0x5C0)
	float AmbientOcclusionStaticFraction;  // 0x5C4 (0x5C4)
	float AmbientOcclusionRadius;  // 0x5C8 (0x5C8)
	char AmbientOcclusionRadiusInWS : 1;  // 0x5CC (0x5CC)
	char pad_1484_1 : 7;  // 0x5CC (0x5CC)
	char pad_1485[4];  // 0x5CD (0x5CD)
	float AmbientOcclusionFadeDistance;  // 0x5D0 (0x5D0)
	float AmbientOcclusionFadeRadius;  // 0x5D4 (0x5D4)
	float AmbientOcclusionDistance;  // 0x5D8 (0x5D8)
	float AmbientOcclusionPower;  // 0x5DC (0x5DC)
	float AmbientOcclusionBias;  // 0x5E0 (0x5E0)
	float AmbientOcclusionQuality;  // 0x5E4 (0x5E4)
	float AmbientOcclusionMipBlend;  // 0x5E8 (0x5E8)
	float AmbientOcclusionMipScale;  // 0x5EC (0x5EC)
	float AmbientOcclusionMipThreshold;  // 0x5F0 (0x5F0)
	float AmbientOcclusionTemporalBlendWeight;  // 0x5F4 (0x5F4)
	char RayTracingAO : 1;  // 0x5F8 (0x5F8)
	char pad_1528_1 : 7;  // 0x5F8 (0x5F8)
	char pad_1529[4];  // 0x5F9 (0x5F9)
	int32_t RayTracingAOSamplesPerPixel;  // 0x5FC (0x5FC)
	float RayTracingAOIntensity;  // 0x600 (0x600)
	float RayTracingAORadius;  // 0x604 (0x604)
	float ColorGradingIntensity;  // 0x608 (0x608)
	char pad_1548[4];  // 0x60C (0x60C)
	struct UTexture* ColorGradingLUT;  // 0x610 (0x610)
	float DepthOfFieldSensorWidth;  // 0x618 (0x618)
	float DepthOfFieldSqueezeFactor;  // 0x61C (0x61C)
	float DepthOfFieldFocalDistance;  // 0x620 (0x620)
	float DepthOfFieldDepthBlurAmount;  // 0x624 (0x624)
	float DepthOfFieldDepthBlurRadius;  // 0x628 (0x628)
	float DepthOfFieldFocalRegion;  // 0x62C (0x62C)
	float DepthOfFieldNearTransitionRegion;  // 0x630 (0x630)
	float DepthOfFieldFarTransitionRegion;  // 0x634 (0x634)
	float DepthOfFieldScale;  // 0x638 (0x638)
	float DepthOfFieldNearBlurSize;  // 0x63C (0x63C)
	float DepthOfFieldFarBlurSize;  // 0x640 (0x640)
	float DepthOfFieldOcclusion;  // 0x644 (0x644)
	float DepthOfFieldSkyFocusDistance;  // 0x648 (0x648)
	float DepthOfFieldVignetteSize;  // 0x64C (0x64C)
	float MotionBlurAmount;  // 0x650 (0x650)
	float MotionBlurMax;  // 0x654 (0x654)
	int32_t MotionBlurTargetFPS;  // 0x658 (0x658)
	float MotionBlurPerObjectSize;  // 0x65C (0x65C)
	float LPVIntensity;  // 0x660 (0x660)
	float LPVVplInjectionBias;  // 0x664 (0x664)
	float LPVSize;  // 0x668 (0x668)
	float LPVSecondaryOcclusionIntensity;  // 0x66C (0x66C)
	float LPVSecondaryBounceIntensity;  // 0x670 (0x670)
	float LPVGeometryVolumeBias;  // 0x674 (0x674)
	float LPVEmissiveInjectionIntensity;  // 0x678 (0x678)
	float LPVDirectionalOcclusionIntensity;  // 0x67C (0x67C)
	float LPVDirectionalOcclusionRadius;  // 0x680 (0x680)
	float LPVDiffuseOcclusionExponent;  // 0x684 (0x684)
	float LPVSpecularOcclusionExponent;  // 0x688 (0x688)
	float LPVDiffuseOcclusionIntensity;  // 0x68C (0x68C)
	float LPVSpecularOcclusionIntensity;  // 0x690 (0x690)
	uint8_t TranslucencyType;  // 0x694 (0x694)
	char pad_1685[3];  // 0x695 (0x695)
	float RayTracingTranslucencyMaxRoughness;  // 0x698 (0x698)
	int32_t RayTracingTranslucencyRefractionRays;  // 0x69C (0x69C)
	int32_t RayTracingTranslucencySamplesPerPixel;  // 0x6A0 (0x6A0)
	uint8_t RayTracingTranslucencyShadows;  // 0x6A4 (0x6A4)
	char RayTracingTranslucencyRefraction : 1;  // 0x6A5 (0x6A5)
	char pad_1701_1 : 7;  // 0x6A5 (0x6A5)
	char pad_1702[3];  // 0x6A6 (0x6A6)
	int32_t PathTracingMaxBounces;  // 0x6A8 (0x6A8)
	int32_t PathTracingSamplesPerPixel;  // 0x6AC (0x6AC)
	float PathTracingFilterWidth;  // 0x6B0 (0x6B0)
	char PathTracingEnableEmissive : 1;  // 0x6B4 (0x6B4)
	char pad_1716_1 : 7;  // 0x6B4 (0x6B4)
	char pad_1717[4];  // 0x6B5 (0x6B5)
	float PathTracingMaxPathExposure;  // 0x6B8 (0x6B8)
	char PathTracingEnableReferenceDOF : 1;  // 0x6BC (0x6BC)
	char PathTracingEnableReferenceAtmosphere : 1;  // 0x6BC (0x6BC)
	char PathTracingEnableDenoiser : 1;  // 0x6BC (0x6BC)
	char pad_1724_1 : 5;  // 0x6BC (0x6BC)
	char pad_1725[4];  // 0x6BD (0x6BD)
	float LPVFadeRange;  // 0x6C0 (0x6C0)
	float LPVDirectionalOcclusionFadeRange;  // 0x6C4 (0x6C4)
	float ScreenPercentage;  // 0x6C8 (0x6C8)
	char pad_1740[4];  // 0x6CC (0x6CC)
	struct FWeightedBlendables WeightedBlendables;  // 0x6D0 (0x6D0)


}; 
 
 // Function Engine.AudioComponent.SetLowPassFilterEnabled
struct FSetLowPassFilterEnabled
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool InLowPassFilterEnabled : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.LoadAssetClass
struct FLoadAssetClass
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct TSoftClassPtr<UObject> AssetClass;  // 0x8 (0x8)
	struct FDelegate OnLoaded;  // 0x38 (0x38)
	struct FLatentActionInfo LatentInfo;  // 0x48 (0x48)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_GetAbsMin
struct FVector_GetAbsMin
{
	struct FVector A;  // 0x0 (0x0)
	double ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.SplineComponent.GetFloatPropertyAtSplineInputKey
struct FGetFloatPropertyAtSplineInputKey
{
	float InKey;  // 0x0 (0x0)
	struct FName PropertyName;  // 0x4 (0x4)
	float ReturnValue;  // 0xC (0xC)


}; 
 
 // DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitBeginDelegate__DelegateSignature
struct FOnInterpToWaitBeginDelegate__DelegateSignature
{
	struct FHitResult ImpactResult;  // 0x0 (0x0)
	float Time;  // 0xE8 (0xE8)
	char pad_236[4];  // 0xEC (0xEC)


}; 
 
 // Function Engine.LevelStreaming.IsLevelVisible
struct FIsLevelVisible
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimDataModel.GetNumberOfTransformCurves
struct FGetNumberOfTransformCurves
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.SoundClassProperties
struct FSoundClassProperties
{
	float Volume;  // 0x0 (0x0)
	float Pitch;  // 0x4 (0x4)
	float LowPassFilterFrequency;  // 0x8 (0x8)
	float AttenuationDistanceScale;  // 0xC (0xC)
	float LFEBleed;  // 0x10 (0x10)
	float VoiceCenterChannelVolume;  // 0x14 (0x14)
	float RadioFilterVolume;  // 0x18 (0x18)
	float RadioFilterVolumeThreshold;  // 0x1C (0x1C)
	char bApplyEffects : 1;  // 0x20 (0x20)
	char bAlwaysPlay : 1;  // 0x20 (0x20)
	char bIsUISound : 1;  // 0x20 (0x20)
	char bIsMusic : 1;  // 0x20 (0x20)
	char bCenterChannelOnly : 1;  // 0x20 (0x20)
	char bApplyAmbientVolumes : 1;  // 0x20 (0x20)
	char bReverb : 1;  // 0x20 (0x20)
	char pad_32_1 : 1;  // 0x20 (0x20)
	char pad_33[4];  // 0x21 (0x21)
	float Default2DReverbSendAmount;  // 0x24 (0x24)
	struct FSoundModulationDefaultSettings ModulationSettings;  // 0x28 (0x28)
	enum class EAudioOutputTarget OutputTarget;  // 0x1A8 (0x1A8)
	uint8_t LoadingBehavior;  // 0x1A9 (0x1A9)
	char pad_426[6];  // 0x1AA (0x1AA)
	struct USoundSubmix* DefaultSubmix;  // 0x1B0 (0x1B0)


}; 
 
 // Function Engine.SkeletalMeshComponent.GetPostProcessInstance
struct FGetPostProcessInstance
{
	struct UAnimInstance* ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.EdGraphSchemaAction
struct FEdGraphSchemaAction
{
	char pad_0[8];  // 0x0 (0x0)
	struct FText MenuDescription;  // 0x8 (0x8)
	struct FText TooltipDescription;  // 0x20 (0x20)
	struct FText Category;  // 0x38 (0x38)
	struct FText Keywords;  // 0x50 (0x50)
	int32_t Grouping;  // 0x68 (0x68)
	int32_t SectionID;  // 0x6C (0x6C)
	struct TArray<struct FString> MenuDescriptionArray;  // 0x70 (0x70)
	struct TArray<struct FString> FullSearchTitlesArray;  // 0x80 (0x80)
	struct TArray<struct FString> FullSearchKeywordsArray;  // 0x90 (0x90)
	struct TArray<struct FString> FullSearchCategoryArray;  // 0xA0 (0xA0)
	struct TArray<struct FString> LocalizedMenuDescriptionArray;  // 0xB0 (0xB0)
	struct TArray<struct FString> LocalizedFullSearchTitlesArray;  // 0xC0 (0xC0)
	struct TArray<struct FString> LocalizedFullSearchKeywordsArray;  // 0xD0 (0xD0)
	struct TArray<struct FString> LocalizedFullSearchCategoryArray;  // 0xE0 (0xE0)
	struct FString SearchText;  // 0xF0 (0xF0)


}; 
 
 // ScriptStruct Engine.AnimSingleNodeInstanceProxy
// Size: 0x980(Inherited: 0x880)
struct FAnimSingleNodeInstanceProxy : FAnimInstanceProxy
{
	char pad_2176[256];  // 0x880 (0x880)


}; 
 
 // Function Engine.GameplayStatics.GetAllActorsOfClassWithTag
struct FGetAllActorsOfClassWithTag
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	AActor* ActorClass;  // 0x8 (0x8)
	struct FName Tag;  // 0x10 (0x10)
	struct TArray<struct AActor*> OutActors;  // 0x18 (0x18)


}; 
 
 // DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitEndDelegate__DelegateSignature
struct FOnInterpToWaitEndDelegate__DelegateSignature
{
	struct FHitResult ImpactResult;  // 0x0 (0x0)
	float Time;  // 0xE8 (0xE8)
	char pad_236[4];  // 0xEC (0xEC)


}; 
 
 // Function Engine.SceneComponent.K2_AddLocalRotation
struct FK2_AddLocalRotation
{
	struct FRotator DeltaRotation;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bSweep : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)
	struct FHitResult SweepHitResult;  // 0x20 (0x20)
	char pad_264_1 : 7;  // 0x108 (0x108)
	bool bTeleport : 1;  // 0x108 (0x108)
	char pad_265[7];  // 0x109 (0x109)


}; 
 
 // Function Engine.PrimitiveComponent.ScaleByMomentOfInertia
struct FScaleByMomentOfInertia
{
	struct FVector InputVector;  // 0x0 (0x0)
	struct FName BoneName;  // 0x18 (0x18)
	struct FVector ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.CurveLinearColorAtlas.GetCurvePosition
struct FGetCurvePosition
{
	struct UCurveLinearColor* InCurve;  // 0x0 (0x0)
	float Position;  // 0x8 (0x8)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool ReturnValue : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)


}; 
 
 // Function Engine.InterpToMovementComponent.RestartMovement
struct FRestartMovement
{
	float InitialDirection;  // 0x0 (0x0)


}; 
 
 // Function Engine.HUD.GetTextSize
struct FGetTextSize
{
	struct FString Text;  // 0x0 (0x0)
	float OutWidth;  // 0x10 (0x10)
	float OutHeight;  // 0x14 (0x14)
	struct UFont* Font;  // 0x18 (0x18)
	float Scale;  // 0x20 (0x20)
	char pad_36[4];  // 0x24 (0x24)


}; 
 
 // Function Engine.KismetMathLibrary.Add_QuatQuat
struct FAdd_QuatQuat
{
	struct FQuat A;  // 0x0 (0x0)
	struct FQuat B;  // 0x20 (0x20)
	struct FQuat ReturnValue;  // 0x40 (0x40)


}; 
 
 // Function Engine.KismetMathLibrary.GetUpVector
struct FGetUpVector
{
	struct FRotator InRot;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.PhysicsConstraintComponent.SetLinearDriveParams
struct FSetLinearDriveParams
{
	float PositionStrength;  // 0x0 (0x0)
	float VelocityStrength;  // 0x4 (0x4)
	float InForceLimit;  // 0x8 (0x8)


}; 
 
 // Function Engine.PrimitiveComponent.SetCullDistance
struct FSetCullDistance
{
	float NewCullDistance;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.GetDotProductTo
struct FGetDotProductTo
{
	struct AActor* OtherActor;  // 0x0 (0x0)
	float ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.ProjectileMovementComponent.StopSimulating
struct FStopSimulating
{
	struct FHitResult HitResult;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.DrawDebugLine
struct FDrawDebugLine
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector LineStart;  // 0x8 (0x8)
	struct FVector LineEnd;  // 0x20 (0x20)
	struct FLinearColor LineColor;  // 0x38 (0x38)
	float Duration;  // 0x48 (0x48)
	float Thickness;  // 0x4C (0x4C)


}; 
 
 // ScriptStruct Engine.AnimNotifyQueue
struct FAnimNotifyQueue
{
	char pad_0[16];  // 0x0 (0x0)
	struct TArray<struct FAnimNotifyEventReference> AnimNotifies;  // 0x10 (0x10)
	struct TMap<struct FName, struct FAnimNotifyArray> UnfilteredMontageAnimNotifies;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetMathLibrary.SetQuaternionSpringStateAngularVelocity
struct FSetQuaternionSpringStateAngularVelocity
{
	struct FQuaternionSpringState SpringState;  // 0x0 (0x0)
	struct FVector AngularVelocity;  // 0x40 (0x40)
	char pad_88[8];  // 0x58 (0x58)


}; 
 
 // Function Engine.KismetSystemLibrary.AddFloatHistorySample
struct FAddFloatHistorySample
{
	float Value;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FDebugFloatHistory FloatHistory;  // 0x8 (0x8)
	struct FDebugFloatHistory ReturnValue;  // 0x28 (0x28)


}; 
 
 // Function Engine.AnimNotifyLibrary.NotifyStateReachedEnd
struct FNotifyStateReachedEnd
{
	struct FAnimNotifyEventReference EventReference;  // 0x0 (0x0)
	char pad_40_1 : 7;  // 0x28 (0x28)
	bool ReturnValue : 1;  // 0x28 (0x28)
	char pad_41[7];  // 0x29 (0x29)


}; 
 
 // ScriptStruct Engine.InputScaleBiasClampState
struct FInputScaleBiasClampState
{
	char pad_0[8];  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.PerBoneBlendWeights
struct FPerBoneBlendWeights
{
	struct TArray<struct FPerBoneBlendWeight> BoneBlendWeights;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.DebugFloatHistory
struct FDebugFloatHistory
{
	struct TArray<float> Samples;  // 0x0 (0x0)
	int32_t MaxSamples;  // 0x10 (0x10)
	float MinValue;  // 0x14 (0x14)
	float MaxValue;  // 0x18 (0x18)
	char pad_28_1 : 7;  // 0x1C (0x1C)
	bool bAutoAdjustMinMax : 1;  // 0x1C (0x1C)
	char pad_29[3];  // 0x1D (0x1D)


}; 
 
 // Function Engine.KismetSystemLibrary.ParseParamValue
struct FParseParamValue
{
	struct FString InString;  // 0x0 (0x0)
	struct FString InParam;  // 0x10 (0x10)
	struct FString OutValue;  // 0x20 (0x20)
	char pad_48_1 : 7;  // 0x30 (0x30)
	bool ReturnValue : 1;  // 0x30 (0x30)
	char pad_49[7];  // 0x31 (0x31)


}; 
 
 // Function Engine.KismetSystemLibrary.BeginTransaction
struct FBeginTransaction
{
	struct FString Context;  // 0x0 (0x0)
	struct FText Description;  // 0x10 (0x10)
	struct UObject* PrimaryObject;  // 0x28 (0x28)
	int32_t ReturnValue;  // 0x30 (0x30)
	char pad_52[4];  // 0x34 (0x34)


}; 
 
 // ScriptStruct Engine.ParticleSystemReplayFrame
struct FParticleSystemReplayFrame
{
	char pad_0[16];  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.GetParentComponent
struct FGetParentComponent
{
	struct UChildActorComponent* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.GetPhysicsLinearVelocity
struct FGetPhysicsLinearVelocity
{
	struct FName BoneName;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeDelegate
struct FK2_GetTimerElapsedTimeDelegate
{
	struct FDelegate Delegate;  // 0x0 (0x0)
	float ReturnValue;  // 0x10 (0x10)


}; 
 
 // SparseDelegateFunction Engine.PawnRestartedSignature__DelegateSignature
struct FPawnRestartedSignature__DelegateSignature
{
	struct APawn* Pawn;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.BoxTraceMulti
struct FBoxTraceMulti
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector Start;  // 0x8 (0x8)
	struct FVector End;  // 0x20 (0x20)
	struct FVector HalfSize;  // 0x38 (0x38)
	struct FRotator Orientation;  // 0x50 (0x50)
	enum class ETraceTypeQuery TraceChannel;  // 0x68 (0x68)
	char pad_105_1 : 7;  // 0x69 (0x69)
	bool bTraceComplex : 1;  // 0x69 (0x69)
	char pad_106[6];  // 0x6A (0x6A)
	struct TArray<struct AActor*> ActorsToIgnore;  // 0x70 (0x70)
	enum class EDrawDebugTrace DrawDebugType;  // 0x80 (0x80)
	char pad_129[7];  // 0x81 (0x81)
	struct TArray<struct FHitResult> OutHits;  // 0x88 (0x88)
	char pad_152_1 : 7;  // 0x98 (0x98)
	bool bIgnoreSelf : 1;  // 0x98 (0x98)
	char pad_153[3];  // 0x99 (0x99)
	struct FLinearColor TraceColor;  // 0x9C (0x9C)
	struct FLinearColor TraceHitColor;  // 0xAC (0xAC)
	float DrawTime;  // 0xBC (0xBC)
	char pad_192_1 : 7;  // 0xC0 (0xC0)
	bool ReturnValue : 1;  // 0xC0 (0xC0)
	char pad_193[7];  // 0xC1 (0xC1)


}; 
 
 // ScriptStruct Engine.KSphereElem
// Size: 0x50(Inherited: 0x30)
struct FKSphereElem : FKShapeElem
{
	struct FVector Center;  // 0x30 (0x30)
	float Radius;  // 0x48 (0x48)
	char pad_76[4];  // 0x4C (0x4C)


}; 
 
 // Function Engine.KismetSystemLibrary.BoxTraceMultiForObjects
struct FBoxTraceMultiForObjects
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector Start;  // 0x8 (0x8)
	struct FVector End;  // 0x20 (0x20)
	struct FVector HalfSize;  // 0x38 (0x38)
	struct FRotator Orientation;  // 0x50 (0x50)
	struct TArray<enum class EObjectTypeQuery> ObjectTypes;  // 0x68 (0x68)
	char pad_120_1 : 7;  // 0x78 (0x78)
	bool bTraceComplex : 1;  // 0x78 (0x78)
	char pad_121[7];  // 0x79 (0x79)
	struct TArray<struct AActor*> ActorsToIgnore;  // 0x80 (0x80)
	enum class EDrawDebugTrace DrawDebugType;  // 0x90 (0x90)
	char pad_145[7];  // 0x91 (0x91)
	struct TArray<struct FHitResult> OutHits;  // 0x98 (0x98)
	char pad_168_1 : 7;  // 0xA8 (0xA8)
	bool bIgnoreSelf : 1;  // 0xA8 (0xA8)
	char pad_169[3];  // 0xA9 (0xA9)
	struct FLinearColor TraceColor;  // 0xAC (0xAC)
	struct FLinearColor TraceHitColor;  // 0xBC (0xBC)
	float DrawTime;  // 0xCC (0xCC)
	char pad_208_1 : 7;  // 0xD0 (0xD0)
	bool ReturnValue : 1;  // 0xD0 (0xD0)
	char pad_209[7];  // 0xD1 (0xD1)


}; 
 
 // Function Engine.PlayerController.ServerChangeName
struct FServerChangeName
{
	struct FString S;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.ComponentSpacePoseLink
// Size: 0x10(Inherited: 0x10)
struct FComponentSpacePoseLink : FPoseLinkBase
{


}; 
 
 // ScriptStruct Engine.BakedFloatCustomAttribute
struct FBakedFloatCustomAttribute
{
	char pad_0[1];  // 0x0 (0x0)


}; 
 
 // Function Engine.LightComponentBase.SetSamplesPerPixel
struct FSetSamplesPerPixel
{
	int32_t NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_ProjectOnToNormal
struct FVector_ProjectOnToNormal
{
	struct FVector V;  // 0x0 (0x0)
	struct FVector InNormal;  // 0x18 (0x18)
	struct FVector ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.KismetRenderingLibrary.CreateRenderTarget2DArray
struct FCreateRenderTarget2DArray
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	int32_t Width;  // 0x8 (0x8)
	int32_t Height;  // 0xC (0xC)
	int32_t Slices;  // 0x10 (0x10)
	enum class ETextureRenderTargetFormat Format;  // 0x14 (0x14)
	char pad_21[3];  // 0x15 (0x15)
	struct FLinearColor ClearColor;  // 0x18 (0x18)
	char pad_40_1 : 7;  // 0x28 (0x28)
	bool bAutoGenerateMipMaps : 1;  // 0x28 (0x28)
	char pad_41[7];  // 0x29 (0x29)
	struct UTextureRenderTarget2DArray* ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.GameStateBase.GetPlayerStartTime
struct FGetPlayerStartTime
{
	struct AController* Controller;  // 0x0 (0x0)
	float ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.KismetSystemLibrary.BoxTraceSingle
struct FBoxTraceSingle
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector Start;  // 0x8 (0x8)
	struct FVector End;  // 0x20 (0x20)
	struct FVector HalfSize;  // 0x38 (0x38)
	struct FRotator Orientation;  // 0x50 (0x50)
	enum class ETraceTypeQuery TraceChannel;  // 0x68 (0x68)
	char pad_105_1 : 7;  // 0x69 (0x69)
	bool bTraceComplex : 1;  // 0x69 (0x69)
	char pad_106[6];  // 0x6A (0x6A)
	struct TArray<struct AActor*> ActorsToIgnore;  // 0x70 (0x70)
	enum class EDrawDebugTrace DrawDebugType;  // 0x80 (0x80)
	char pad_129[7];  // 0x81 (0x81)
	struct FHitResult OutHit;  // 0x88 (0x88)
	char pad_368_1 : 7;  // 0x170 (0x170)
	bool bIgnoreSelf : 1;  // 0x170 (0x170)
	char pad_369[3];  // 0x171 (0x171)
	struct FLinearColor TraceColor;  // 0x174 (0x174)
	struct FLinearColor TraceHitColor;  // 0x184 (0x184)
	float DrawTime;  // 0x194 (0x194)
	char pad_408_1 : 7;  // 0x198 (0x198)
	bool ReturnValue : 1;  // 0x198 (0x198)
	char pad_409[7];  // 0x199 (0x199)


}; 
 
 // ScriptStruct Engine.BakedIntegerCustomAttribute
struct FBakedIntegerCustomAttribute
{
	char pad_0[1];  // 0x0 (0x0)


}; 
 
 // Function Engine.InputComponent.GetControllerKeyTimeDown
struct FGetControllerKeyTimeDown
{
	struct FKey Key;  // 0x0 (0x0)
	float ReturnValue;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)


}; 
 
 // ScriptStruct Engine.TTVectorTrack
// Size: 0x28(Inherited: 0x20)
struct FTTVectorTrack : FTTPropertyTrack
{
	struct UCurveVector* CurveVector;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetMathLibrary.GetTAU
struct FGetTAU
{
	double ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.BranchFilter
struct FBranchFilter
{
	struct FName BoneName;  // 0x0 (0x0)
	int32_t BlendDepth;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetSystemLibrary.BoxTraceSingleByProfile
struct FBoxTraceSingleByProfile
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector Start;  // 0x8 (0x8)
	struct FVector End;  // 0x20 (0x20)
	struct FVector HalfSize;  // 0x38 (0x38)
	struct FRotator Orientation;  // 0x50 (0x50)
	struct FName ProfileName;  // 0x68 (0x68)
	char pad_112_1 : 7;  // 0x70 (0x70)
	bool bTraceComplex : 1;  // 0x70 (0x70)
	char pad_113[7];  // 0x71 (0x71)
	struct TArray<struct AActor*> ActorsToIgnore;  // 0x78 (0x78)
	enum class EDrawDebugTrace DrawDebugType;  // 0x88 (0x88)
	char pad_137[7];  // 0x89 (0x89)
	struct FHitResult OutHit;  // 0x90 (0x90)
	char pad_376_1 : 7;  // 0x178 (0x178)
	bool bIgnoreSelf : 1;  // 0x178 (0x178)
	char pad_377[3];  // 0x179 (0x179)
	struct FLinearColor TraceColor;  // 0x17C (0x17C)
	struct FLinearColor TraceHitColor;  // 0x18C (0x18C)
	float DrawTime;  // 0x19C (0x19C)
	char pad_416_1 : 7;  // 0x1A0 (0x1A0)
	bool ReturnValue : 1;  // 0x1A0 (0x1A0)
	char pad_417[7];  // 0x1A1 (0x1A1)


}; 
 
 // Function Engine.KismetSystemLibrary.BreakARFilter
struct FBreakARFilter
{
	struct FARFilter InARFilter;  // 0x0 (0x0)
	struct TArray<struct FName> PackageNames;  // 0x150 (0x150)
	struct TArray<struct FName> PackagePaths;  // 0x160 (0x160)
	struct TArray<struct FSoftObjectPath> SoftObjectPaths;  // 0x170 (0x170)
	struct TArray<struct FTopLevelAssetPath> ClassPaths;  // 0x180 (0x180)
	struct TSet<struct FTopLevelAssetPath> RecursiveClassPathsExclusionSet;  // 0x190 (0x190)
	struct TArray<struct FName> ClassNames;  // 0x1E0 (0x1E0)
	struct TSet<struct FName> RecursiveClassesExclusionSet;  // 0x1F0 (0x1F0)
	char pad_576_1 : 7;  // 0x240 (0x240)
	bool bRecursivePaths : 1;  // 0x240 (0x240)
	char pad_577_1 : 7;  // 0x241 (0x241)
	bool bRecursiveClasses : 1;  // 0x241 (0x241)
	char pad_578_1 : 7;  // 0x242 (0x242)
	bool bIncludeOnlyOnDiskAssets : 1;  // 0x242 (0x242)
	char pad_579[5];  // 0x243 (0x243)


}; 
 
 // Function Engine.KismetSystemLibrary.BreakSoftObjectPath
struct FBreakSoftObjectPath
{
	struct FSoftObjectPath InSoftObjectPath;  // 0x0 (0x0)
	struct FString PathString;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_BoundedToCube
struct FVector_BoundedToCube
{
	struct FVector InVect;  // 0x0 (0x0)
	float InRadius;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)
	struct FVector ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.SkeletalMesh.FindSocketAndIndex
struct FFindSocketAndIndex
{
	struct FName InSocketName;  // 0x0 (0x0)
	int32_t OutIndex;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)
	struct USkeletalMeshSocket* ReturnValue;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.AnimationState
// Size: 0x28(Inherited: 0x8)
struct FAnimationState : FAnimationStateBase
{
	struct TArray<struct FAnimationTransitionRule> Transitions;  // 0x8 (0x8)
	int32_t StateRootNodeIndex;  // 0x18 (0x18)
	int32_t StartNotify;  // 0x1C (0x1C)
	int32_t EndNotify;  // 0x20 (0x20)
	int32_t FullyBlendedNotify;  // 0x24 (0x24)


}; 
 
 // Function Engine.PlayerController.SetName
struct FSetName
{
	struct FString S;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.IsValidSoftClassReference
struct FIsValidSoftClassReference
{
	struct TSoftClassPtr<UObject> SoftClassReference;  // 0x0 (0x0)
	char pad_48_1 : 7;  // 0x30 (0x30)
	bool ReturnValue : 1;  // 0x30 (0x30)
	char pad_49[7];  // 0x31 (0x31)


}; 
 
 // Function Engine.KismetSystemLibrary.NotEqual_PrimaryAssetType
struct FNotEqual_PrimaryAssetType
{
	struct FPrimaryAssetType A;  // 0x0 (0x0)
	struct FPrimaryAssetType B;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[3];  // 0x11 (0x11)


}; 
 
 // ScriptStruct Engine.HapticFeedbackDetails_Curve
struct FHapticFeedbackDetails_Curve
{
	struct FRuntimeFloatCurve Frequency;  // 0x0 (0x0)
	struct FRuntimeFloatCurve Amplitude;  // 0x88 (0x88)


}; 
 
 // Function Engine.DataTableFunctionLibrary.GetDataTableRowNames
struct FGetDataTableRowNames
{
	struct UDataTable* Table;  // 0x0 (0x0)
	struct TArray<struct FName> OutRowNames;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.BuildPromotionOpenAssetSettings
struct FBuildPromotionOpenAssetSettings
{
	struct FFilePath BlueprintAsset;  // 0x0 (0x0)
	struct FFilePath MaterialAsset;  // 0x10 (0x10)
	struct FFilePath ParticleSystemAsset;  // 0x20 (0x20)
	struct FFilePath SkeletalMeshAsset;  // 0x30 (0x30)
	struct FFilePath StaticMeshAsset;  // 0x40 (0x40)
	struct FFilePath TextureAsset;  // 0x50 (0x50)


}; 
 
 // Function Engine.KismetSystemLibrary.CancelTransaction
struct FCancelTransaction
{
	int32_t Index;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.CapsuleOverlapActors
struct FCapsuleOverlapActors
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector CapsulePos;  // 0x8 (0x8)
	float Radius;  // 0x20 (0x20)
	float HalfHeight;  // 0x24 (0x24)
	struct TArray<enum class EObjectTypeQuery> ObjectTypes;  // 0x28 (0x28)
	UObject* ActorClassFilter;  // 0x38 (0x38)
	struct TArray<struct AActor*> ActorsToIgnore;  // 0x40 (0x40)
	struct TArray<struct AActor*> OutActors;  // 0x50 (0x50)
	char pad_96_1 : 7;  // 0x60 (0x60)
	bool ReturnValue : 1;  // 0x60 (0x60)
	char pad_97[7];  // 0x61 (0x61)


}; 
 
 // Function Engine.AnimationDataController.InsertBoneTrack
struct FInsertBoneTrack
{
	struct FName BoneName;  // 0x0 (0x0)
	int32_t DesiredIndex;  // 0x8 (0x8)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bShouldTransact : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)
	int32_t ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInDegrees
struct FSetPhysicsMaxAngularVelocityInDegrees
{
	float NewMaxAngVel;  // 0x0 (0x0)
	char pad_4_1 : 7;  // 0x4 (0x4)
	bool bAddToCurrent : 1;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)
	struct FName BoneName;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetSystemLibrary.IsValidSoftObjectReference
struct FIsValidSoftObjectReference
{
	struct TSoftObjectPtr<UObject> SoftObjectReference;  // 0x0 (0x0)
	char pad_48_1 : 7;  // 0x30 (0x30)
	bool ReturnValue : 1;  // 0x30 (0x30)
	char pad_49[7];  // 0x31 (0x31)


}; 
 
 // Function Engine.GameModeBase.GetNumSpectators
struct FGetNumSpectators
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.DirectionalLightComponent.SetLightSourceSoftAngle
struct FSetLightSourceSoftAngle
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.CapsuleOverlapComponents
struct FCapsuleOverlapComponents
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector CapsulePos;  // 0x8 (0x8)
	float Radius;  // 0x20 (0x20)
	float HalfHeight;  // 0x24 (0x24)
	struct TArray<enum class EObjectTypeQuery> ObjectTypes;  // 0x28 (0x28)
	UObject* ComponentClassFilter;  // 0x38 (0x38)
	struct TArray<struct AActor*> ActorsToIgnore;  // 0x40 (0x40)
	struct TArray<struct UPrimitiveComponent*> OutComponents;  // 0x50 (0x50)
	char pad_96_1 : 7;  // 0x60 (0x60)
	bool ReturnValue : 1;  // 0x60 (0x60)
	char pad_97[7];  // 0x61 (0x61)


}; 
 
 // Function Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstancesByTag
struct FGetLinkedAnimGraphInstancesByTag
{
	struct FName InTag;  // 0x0 (0x0)
	struct TArray<struct UAnimInstance*> OutLinkedInstances;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetSystemLibrary.CapsuleTraceMulti
struct FCapsuleTraceMulti
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector Start;  // 0x8 (0x8)
	struct FVector End;  // 0x20 (0x20)
	float Radius;  // 0x38 (0x38)
	float HalfHeight;  // 0x3C (0x3C)
	enum class ETraceTypeQuery TraceChannel;  // 0x40 (0x40)
	char pad_65_1 : 7;  // 0x41 (0x41)
	bool bTraceComplex : 1;  // 0x41 (0x41)
	char pad_66[6];  // 0x42 (0x42)
	struct TArray<struct AActor*> ActorsToIgnore;  // 0x48 (0x48)
	enum class EDrawDebugTrace DrawDebugType;  // 0x58 (0x58)
	char pad_89[7];  // 0x59 (0x59)
	struct TArray<struct FHitResult> OutHits;  // 0x60 (0x60)
	char pad_112_1 : 7;  // 0x70 (0x70)
	bool bIgnoreSelf : 1;  // 0x70 (0x70)
	char pad_113[3];  // 0x71 (0x71)
	struct FLinearColor TraceColor;  // 0x74 (0x74)
	struct FLinearColor TraceHitColor;  // 0x84 (0x84)
	float DrawTime;  // 0x94 (0x94)
	char pad_152_1 : 7;  // 0x98 (0x98)
	bool ReturnValue : 1;  // 0x98 (0x98)
	char pad_153[7];  // 0x99 (0x99)


}; 
 
 // ScriptStruct Engine.SoundWaveEnvelopeTimeData
struct FSoundWaveEnvelopeTimeData
{
	float Amplitude;  // 0x0 (0x0)
	float TimeSec;  // 0x4 (0x4)


}; 
 
 // Function Engine.SkyAtmosphereComponent.GetAtmosphereTransmitanceOnGroundAtPlanetTop
struct FGetAtmosphereTransmitanceOnGroundAtPlanetTop
{
	struct UDirectionalLightComponent* DirectionalLight;  // 0x0 (0x0)
	struct FLinearColor ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetSystemLibrary.CapsuleTraceMultiByProfile
struct FCapsuleTraceMultiByProfile
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector Start;  // 0x8 (0x8)
	struct FVector End;  // 0x20 (0x20)
	float Radius;  // 0x38 (0x38)
	float HalfHeight;  // 0x3C (0x3C)
	struct FName ProfileName;  // 0x40 (0x40)
	char pad_72_1 : 7;  // 0x48 (0x48)
	bool bTraceComplex : 1;  // 0x48 (0x48)
	char pad_73[7];  // 0x49 (0x49)
	struct TArray<struct AActor*> ActorsToIgnore;  // 0x50 (0x50)
	enum class EDrawDebugTrace DrawDebugType;  // 0x60 (0x60)
	char pad_97[7];  // 0x61 (0x61)
	struct TArray<struct FHitResult> OutHits;  // 0x68 (0x68)
	char pad_120_1 : 7;  // 0x78 (0x78)
	bool bIgnoreSelf : 1;  // 0x78 (0x78)
	char pad_121[3];  // 0x79 (0x79)
	struct FLinearColor TraceColor;  // 0x7C (0x7C)
	struct FLinearColor TraceHitColor;  // 0x8C (0x8C)
	float DrawTime;  // 0x9C (0x9C)
	char pad_160_1 : 7;  // 0xA0 (0xA0)
	bool ReturnValue : 1;  // 0xA0 (0xA0)
	char pad_161[7];  // 0xA1 (0xA1)


}; 
 
 // ScriptStruct Engine.InputAxisConfigEntry
struct FInputAxisConfigEntry
{
	struct FName AxisKeyName;  // 0x0 (0x0)
	struct FInputAxisProperties AxisProperties;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.WeightedMovingAverage_Float
struct FWeightedMovingAverage_Float
{
	float CurrentSample;  // 0x0 (0x0)
	float PreviousSample;  // 0x4 (0x4)
	float Weight;  // 0x8 (0x8)
	float ReturnValue;  // 0xC (0xC)


}; 
 
 // Function Engine.KismetSystemLibrary.DrawDebugPoint
struct FDrawDebugPoint
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector Position;  // 0x8 (0x8)
	float Size;  // 0x20 (0x20)
	struct FLinearColor PointColor;  // 0x24 (0x24)
	float Duration;  // 0x34 (0x34)


}; 
 
 // Function Engine.PrimitiveComponent.SetMassScale
struct FSetMassScale
{
	struct FName BoneName;  // 0x0 (0x0)
	float InMassScale;  // 0x8 (0x8)


}; 
 
 // Function Engine.SkeletalMeshComponent.BreakConstraint
struct FBreakConstraint
{
	struct FVector Impulse;  // 0x0 (0x0)
	struct FVector HitLocation;  // 0x18 (0x18)
	struct FName InBoneName;  // 0x30 (0x30)


}; 
 
 // Function Engine.WorldPartitionBlueprintLibrary.LoadActors
struct FLoadActors
{
	struct TArray<struct FGuid> InActorsToLoad;  // 0x0 (0x0)


}; 
 
 // DelegateFunction Engine.PlatformGameInstance.PlatformRegisteredForRemoteNotificationsDelegate__DelegateSignature
struct FPlatformRegisteredForRemoteNotificationsDelegate__DelegateSignature
{
	struct TArray<char> inArray;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.LaunchURL
struct FLaunchURL
{
	struct FString URL;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.CapsuleTraceMultiForObjects
struct FCapsuleTraceMultiForObjects
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector Start;  // 0x8 (0x8)
	struct FVector End;  // 0x20 (0x20)
	float Radius;  // 0x38 (0x38)
	float HalfHeight;  // 0x3C (0x3C)
	struct TArray<enum class EObjectTypeQuery> ObjectTypes;  // 0x40 (0x40)
	char pad_80_1 : 7;  // 0x50 (0x50)
	bool bTraceComplex : 1;  // 0x50 (0x50)
	char pad_81[7];  // 0x51 (0x51)
	struct TArray<struct AActor*> ActorsToIgnore;  // 0x58 (0x58)
	enum class EDrawDebugTrace DrawDebugType;  // 0x68 (0x68)
	char pad_105[7];  // 0x69 (0x69)
	struct TArray<struct FHitResult> OutHits;  // 0x70 (0x70)
	char pad_128_1 : 7;  // 0x80 (0x80)
	bool bIgnoreSelf : 1;  // 0x80 (0x80)
	char pad_129[3];  // 0x81 (0x81)
	struct FLinearColor TraceColor;  // 0x84 (0x84)
	struct FLinearColor TraceHitColor;  // 0x94 (0x94)
	float DrawTime;  // 0xA4 (0xA4)
	char pad_168_1 : 7;  // 0xA8 (0xA8)
	bool ReturnValue : 1;  // 0xA8 (0xA8)
	char pad_169[7];  // 0xA9 (0xA9)


}; 
 
 // ScriptStruct Engine.CanvasUVTri
struct FCanvasUVTri
{
	struct FVector2D V0_Pos;  // 0x0 (0x0)
	struct FVector2D V0_UV;  // 0x10 (0x10)
	struct FLinearColor V0_Color;  // 0x20 (0x20)
	struct FVector2D V1_Pos;  // 0x30 (0x30)
	struct FVector2D V1_UV;  // 0x40 (0x40)
	struct FLinearColor V1_Color;  // 0x50 (0x50)
	struct FVector2D V2_Pos;  // 0x60 (0x60)
	struct FVector2D V2_UV;  // 0x70 (0x70)
	struct FLinearColor V2_Color;  // 0x80 (0x80)


}; 
 
 // Function Engine.KismetSystemLibrary.CapsuleTraceSingle
struct FCapsuleTraceSingle
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector Start;  // 0x8 (0x8)
	struct FVector End;  // 0x20 (0x20)
	float Radius;  // 0x38 (0x38)
	float HalfHeight;  // 0x3C (0x3C)
	enum class ETraceTypeQuery TraceChannel;  // 0x40 (0x40)
	char pad_65_1 : 7;  // 0x41 (0x41)
	bool bTraceComplex : 1;  // 0x41 (0x41)
	char pad_66[6];  // 0x42 (0x42)
	struct TArray<struct AActor*> ActorsToIgnore;  // 0x48 (0x48)
	enum class EDrawDebugTrace DrawDebugType;  // 0x58 (0x58)
	char pad_89[7];  // 0x59 (0x59)
	struct FHitResult OutHit;  // 0x60 (0x60)
	char pad_328_1 : 7;  // 0x148 (0x148)
	bool bIgnoreSelf : 1;  // 0x148 (0x148)
	char pad_329[3];  // 0x149 (0x149)
	struct FLinearColor TraceColor;  // 0x14C (0x14C)
	struct FLinearColor TraceHitColor;  // 0x15C (0x15C)
	float DrawTime;  // 0x16C (0x16C)
	char pad_368_1 : 7;  // 0x170 (0x170)
	bool ReturnValue : 1;  // 0x170 (0x170)
	char pad_369[7];  // 0x171 (0x171)


}; 
 
 // ScriptStruct Engine.CustomDefine
struct FCustomDefine
{
	struct FString DefineName;  // 0x0 (0x0)
	struct FString DefineValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetSystemLibrary.CapsuleTraceSingleForObjects
struct FCapsuleTraceSingleForObjects
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector Start;  // 0x8 (0x8)
	struct FVector End;  // 0x20 (0x20)
	float Radius;  // 0x38 (0x38)
	float HalfHeight;  // 0x3C (0x3C)
	struct TArray<enum class EObjectTypeQuery> ObjectTypes;  // 0x40 (0x40)
	char pad_80_1 : 7;  // 0x50 (0x50)
	bool bTraceComplex : 1;  // 0x50 (0x50)
	char pad_81[7];  // 0x51 (0x51)
	struct TArray<struct AActor*> ActorsToIgnore;  // 0x58 (0x58)
	enum class EDrawDebugTrace DrawDebugType;  // 0x68 (0x68)
	char pad_105[7];  // 0x69 (0x69)
	struct FHitResult OutHit;  // 0x70 (0x70)
	char pad_344_1 : 7;  // 0x158 (0x158)
	bool bIgnoreSelf : 1;  // 0x158 (0x158)
	char pad_345[3];  // 0x159 (0x159)
	struct FLinearColor TraceColor;  // 0x15C (0x15C)
	struct FLinearColor TraceHitColor;  // 0x16C (0x16C)
	float DrawTime;  // 0x17C (0x17C)
	char pad_384_1 : 7;  // 0x180 (0x180)
	bool ReturnValue : 1;  // 0x180 (0x180)
	char pad_385[7];  // 0x181 (0x181)


}; 
 
 // Function Engine.KismetSystemLibrary.ComponentOverlapActors
struct FComponentOverlapActors
{
	struct UPrimitiveComponent* Component;  // 0x0 (0x0)
	char pad_8[8];  // 0x8 (0x8)
	struct FTransform ComponentTransform;  // 0x10 (0x10)
	struct TArray<enum class EObjectTypeQuery> ObjectTypes;  // 0x70 (0x70)
	UObject* ActorClassFilter;  // 0x80 (0x80)
	struct TArray<struct AActor*> ActorsToIgnore;  // 0x88 (0x88)
	struct TArray<struct AActor*> OutActors;  // 0x98 (0x98)
	char pad_168_1 : 7;  // 0xA8 (0xA8)
	bool ReturnValue : 1;  // 0xA8 (0xA8)
	char pad_169[7];  // 0xA9 (0xA9)


}; 
 
 // ScriptStruct Engine.RawDistributionFloat
// Size: 0x30(Inherited: 0x20)
struct FRawDistributionFloat : FRawDistribution
{
	float MinValue;  // 0x20 (0x20)
	float MaxValue;  // 0x24 (0x24)
	struct UDistributionFloat* Distribution;  // 0x28 (0x28)


}; 
 
 // Function Engine.Actor.K2_OnBecomeViewTarget
struct FK2_OnBecomeViewTarget
{
	struct APlayerController* PC;  // 0x0 (0x0)


}; 
 
 // Function Engine.WorldPartitionBlueprintLibrary.GetEditorWorldBounds
struct FGetEditorWorldBounds
{
	struct FBox ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineComponent.GetScaleAtDistanceAlongSpline
struct FGetScaleAtDistanceAlongSpline
{
	float Distance;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.Actor.ReceiveActorBeginOverlap
struct FReceiveActorBeginOverlap
{
	struct AActor* OtherActor;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameInstance.HandleTravelError
struct FHandleTravelError
{
	enum class ETravelFailure FailureType;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.TimespanRatio
struct FTimespanRatio
{
	struct FTimespan A;  // 0x0 (0x0)
	struct FTimespan B;  // 0x8 (0x8)
	float ReturnValue;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)


}; 
 
 // Function Engine.KismetSystemLibrary.ComponentOverlapComponents
struct FComponentOverlapComponents
{
	struct UPrimitiveComponent* Component;  // 0x0 (0x0)
	char pad_8[8];  // 0x8 (0x8)
	struct FTransform ComponentTransform;  // 0x10 (0x10)
	struct TArray<enum class EObjectTypeQuery> ObjectTypes;  // 0x70 (0x70)
	UObject* ComponentClassFilter;  // 0x80 (0x80)
	struct TArray<struct AActor*> ActorsToIgnore;  // 0x88 (0x88)
	struct TArray<struct UPrimitiveComponent*> OutComponents;  // 0x98 (0x98)
	char pad_168_1 : 7;  // 0xA8 (0xA8)
	bool ReturnValue : 1;  // 0xA8 (0xA8)
	char pad_169[7];  // 0xA9 (0xA9)


}; 
 
 // ScriptStruct Engine.HLODProxyMesh
struct FHLODProxyMesh
{
	 LODActor;  // 0x0 (0x0)
	char pad_28[4];  // 0x1C (0x1C)
	struct UStaticMesh* StaticMesh;  // 0x20 (0x20)
	struct FName Key;  // 0x28 (0x28)


}; 
 
 // ScriptStruct Engine.BlueprintDebugData
struct FBlueprintDebugData
{
	char pad_0[1];  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.ControlScreensaver
struct FControlScreensaver
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bAllowScreenSaver : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.ProjectileMovementComponent.LimitVelocity
struct FLimitVelocity
{
	struct FVector NewVelocity;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.VolumetricCloudComponent.SetLayerHeight
struct FSetLayerHeight
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.GetPreferredLanguages
struct FGetPreferredLanguages
{
	struct TArray<struct FString> ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.PlayDynamicForceFeedback
struct FPlayDynamicForceFeedback
{
	float Intensity;  // 0x0 (0x0)
	float Duration;  // 0x4 (0x4)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bAffectsLeftLarge : 1;  // 0x8 (0x8)
	char pad_9_1 : 7;  // 0x9 (0x9)
	bool bAffectsLeftSmall : 1;  // 0x9 (0x9)
	char pad_10_1 : 7;  // 0xA (0xA)
	bool bAffectsRightLarge : 1;  // 0xA (0xA)
	char pad_11_1 : 7;  // 0xB (0xB)
	bool bAffectsRightSmall : 1;  // 0xB (0xB)
	enum class EDynamicForceFeedbackAction Action;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)
	struct FLatentActionInfo LatentInfo;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.GetTotalDays
struct FGetTotalDays
{
	struct FTimespan A;  // 0x0 (0x0)
	float ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.SceneComponent.OnRep_Visibility
struct FOnRep_Visibility
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool OldValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.PhysicsConstraintComponent.SetAngularVelocityDrive
struct FSetAngularVelocityDrive
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bEnableSwingDrive : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool bEnableTwistDrive : 1;  // 0x1 (0x1)


}; 
 
 // Function Engine.CharacterMovementComponent.SetGroupsToIgnoreMask
struct FSetGroupsToIgnoreMask
{
	struct FNavAvoidanceMask GroupMask;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMeshComponent.GetAnimationMode
struct FGetAnimationMode
{
	enum class EAnimationMode ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.ImportanceSamplingLibrary.MakeImportanceTexture
struct FMakeImportanceTexture
{
	struct UTexture2D* Texture;  // 0x0 (0x0)
	enum class EImportanceWeight WeightingFunc;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)
	struct FImportanceTexture ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.GetRightVector
struct FGetRightVector
{
	struct FRotator InRot;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetSystemLibrary.Conv_ClassToSoftClassReference
struct FConv_ClassToSoftClassReference
{
	UObject* Class;  // 0x0 (0x0)
	struct TSoftClassPtr<UObject> ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.CameraModifier.OnCameraOwnerDestroyed
struct FOnCameraOwnerDestroyed
{
	struct AActor* InOwner;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.Conv_InterfaceToObject
struct FConv_InterfaceToObject
{
	struct TScriptInterface<IInterface> Interface;  // 0x0 (0x0)
	struct UObject* ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetSystemLibrary.GetCurrentBundleState
struct FGetCurrentBundleState
{
	struct FPrimaryAssetId PrimaryAssetId;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool bForceCurrentState : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)
	struct TArray<struct FName> OutBundles;  // 0x18 (0x18)
	char pad_40_1 : 7;  // 0x28 (0x28)
	bool ReturnValue : 1;  // 0x28 (0x28)
	char pad_41[7];  // 0x29 (0x29)


}; 
 
 // Function Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreActors
struct FCopyArrayOfMoveIgnoreActors
{
	struct TArray<struct AActor*> ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.ClientStopCameraShake
struct FClientStopCameraShake
{
	UCameraShakeBase* Shake;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bImmediately : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_One
struct FVector_One
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.StaticMeshActor.SetMobility
struct FSetMobility
{
	enum class EComponentMobility InMobility;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.Conv_ObjectToSoftObjectReference
struct FConv_ObjectToSoftObjectReference
{
	struct UObject* Object;  // 0x0 (0x0)
	struct TSoftObjectPtr<UObject> ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetSystemLibrary.Conv_PrimaryAssetIdToString
struct FConv_PrimaryAssetIdToString
{
	struct FPrimaryAssetId PrimaryAssetId;  // 0x0 (0x0)
	struct FString ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.CheatManager.Slomo
struct FSlomo
{
	float NewTimeDilation;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.GetLevel
struct FGetLevel
{
	struct ULevel* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.TimespanZeroValue
struct FTimespanZeroValue
{
	struct FTimespan ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.BoxComponent.GetUnscaledBoxExtent
struct FGetUnscaledBoxExtent
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.Conv_SoftClassPathToSoftClassRef
struct FConv_SoftClassPathToSoftClassRef
{
	struct FSoftClassPath SoftClassPath;  // 0x0 (0x0)
	struct TSoftClassPtr<UObject> ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetSystemLibrary.GetBuildVersion
struct FGetBuildVersion
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.AnimNodeData
struct FAnimNodeData
{
	struct TScriptInterface<IAnimClassInterface> AnimClassInterface;  // 0x0 (0x0)
	struct TArray<uint32_t> Entries;  // 0x10 (0x10)
	int32_t NodeIndex;  // 0x20 (0x20)
	uint8_t Flags;  // 0x24 (0x24)


}; 
 
 // Function Engine.KismetSystemLibrary.Conv_SoftClassReferenceToClass
struct FConv_SoftClassReferenceToClass
{
	struct TSoftClassPtr<UObject> SoftClass;  // 0x0 (0x0)
	UObject* ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.KismetSystemLibrary.K2_TimerExists
struct FK2_TimerExists
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FString FunctionName;  // 0x8 (0x8)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool ReturnValue : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // ScriptStruct Engine.AnimNotifyEvent
// Size: 0xB8(Inherited: 0x30)
struct FAnimNotifyEvent : FAnimLinkableElement
{
	float DisplayTime;  // 0x30 (0x30)
	float TriggerTimeOffset;  // 0x34 (0x34)
	float EndTriggerTimeOffset;  // 0x38 (0x38)
	float TriggerWeightThreshold;  // 0x3C (0x3C)
	struct FName NotifyName;  // 0x40 (0x40)
	struct UAnimNotify* Notify;  // 0x48 (0x48)
	struct UAnimNotifyState* NotifyStateClass;  // 0x50 (0x50)
	float Duration;  // 0x58 (0x58)
	char pad_92[4];  // 0x5C (0x5C)
	struct FAnimLinkableElement EndLink;  // 0x60 (0x60)
	char pad_144_1 : 7;  // 0x90 (0x90)
	bool bConvertedFromBranchingPoint : 1;  // 0x90 (0x90)
	enum class EMontageNotifyTickType MontageTickType;  // 0x91 (0x91)
	char pad_146[2];  // 0x92 (0x92)
	float NotifyTriggerChance;  // 0x94 (0x94)
	enum class ENotifyFilterType NotifyFilterType;  // 0x98 (0x98)
	char pad_153[3];  // 0x99 (0x99)
	int32_t NotifyFilterLOD;  // 0x9C (0x9C)
	char pad_160_1 : 7;  // 0xA0 (0xA0)
	bool bTriggerOnDedicatedServer : 1;  // 0xA0 (0xA0)
	char pad_161_1 : 7;  // 0xA1 (0xA1)
	bool bTriggerOnFollower : 1;  // 0xA1 (0xA1)
	char pad_162[2];  // 0xA2 (0xA2)
	int32_t TrackIndex;  // 0xA4 (0xA4)
	char pad_168[16];  // 0xA8 (0xA8)


}; 
 
 // Function Engine.KismetSystemLibrary.GetConsoleVariableIntValue
struct FGetConsoleVariableIntValue
{
	struct FString VariableName;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)


}; 
 
 // Function Engine.KismetSystemLibrary.GetClassDisplayName
struct FGetClassDisplayName
{
	UObject* Class;  // 0x0 (0x0)
	struct FString ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.LinearColor_SetFromPow22
struct FLinearColor_SetFromPow22
{
	struct FLinearColor InOutColor;  // 0x0 (0x0)
	struct FColor InColor;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetSystemLibrary.Conv_SoftObjectReferenceToObject
struct FConv_SoftObjectReferenceToObject
{
	struct TSoftObjectPtr<UObject> SoftObject;  // 0x0 (0x0)
	struct UObject* ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.SkinnedMeshComponent.HideBoneByName
struct FHideBoneByName
{
	struct FName BoneName;  // 0x0 (0x0)
	enum class EPhysBodyOp PhysBodyOption;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.KismetMathLibrary.DotProduct2D
struct FDotProduct2D
{
	struct FVector2D A;  // 0x0 (0x0)
	struct FVector2D B;  // 0x10 (0x10)
	double ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetSystemLibrary.Conv_SoftObjPathToSoftObjRef
struct FConv_SoftObjPathToSoftObjRef
{
	struct FSoftObjectPath SoftObjectPath;  // 0x0 (0x0)
	struct TSoftObjectPtr<UObject> ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.GameUserSettings.IsFullscreenModeDirty
struct FIsFullscreenModeDirty
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.MaterialLayersFunctionsRuntimeData
struct FMaterialLayersFunctionsRuntimeData
{
	struct TArray<struct UMaterialFunctionInterface*> Layers;  // 0x0 (0x0)
	struct TArray<struct UMaterialFunctionInterface*> Blends;  // 0x10 (0x10)


}; 
 
 // Function Engine.AnimInstance.GetInstanceTransitionCrossfadeDuration
struct FGetInstanceTransitionCrossfadeDuration
{
	int32_t MachineIndex;  // 0x0 (0x0)
	int32_t TransitionIndex;  // 0x4 (0x4)
	float ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.Matrix_ApplyScale
struct FMatrix_ApplyScale
{
	struct FMatrix M;  // 0x0 (0x0)
	float Scale;  // 0x80 (0x80)
	char pad_132[12];  // 0x84 (0x84)
	struct FMatrix ReturnValue;  // 0x90 (0x90)


}; 
 
 // Function Engine.KismetSystemLibrary.ConvertToAbsolutePath
struct FConvertToAbsolutePath
{
	struct FString Filename;  // 0x0 (0x0)
	struct FString ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.PlayerController.ClientRepObjRef
struct FClientRepObjRef
{
	struct UObject* Object;  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.GetClosestPointOnCollision
struct FGetClosestPointOnCollision
{
	struct FVector Point;  // 0x0 (0x0)
	struct FVector OutPointOnBody;  // 0x18 (0x18)
	struct FName BoneName;  // 0x30 (0x30)
	float ReturnValue;  // 0x38 (0x38)
	char pad_60[4];  // 0x3C (0x3C)


}; 
 
 // ScriptStruct Engine.CurveScaledPayload
// Size: 0x18(Inherited: 0x10)
struct FCurveScaledPayload : FCurvePayload
{
	float Factor;  // 0x10 (0x10)
	float Origin;  // 0x14 (0x14)


}; 
 
 // Function Engine.GameModeBase.K2_OnChangeName
struct FK2_OnChangeName
{
	struct AController* Other;  // 0x0 (0x0)
	struct FString NewName;  // 0x8 (0x8)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bNameChange : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.VolumetricCloudComponent.SetReflectionSampleCountScale
struct FSetReflectionSampleCountScale
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.CreateCopyForUndoBuffer
struct FCreateCopyForUndoBuffer
{
	struct UObject* ObjectToModify;  // 0x0 (0x0)


}; 
 
 // Function Engine.CharacterMovementComponent.K2_GetWalkableFloorAngle
struct FK2_GetWalkableFloorAngle
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeHandle
struct FK2_GetTimerElapsedTimeHandle
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FTimerHandle Handle;  // 0x8 (0x8)
	float ReturnValue;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)


}; 
 
 // Function Engine.KismetSystemLibrary.GetActorListFromComponentList
struct FGetActorListFromComponentList
{
	struct TArray<struct UPrimitiveComponent*> ComponentList;  // 0x0 (0x0)
	UObject* ActorClassFilter;  // 0x10 (0x10)
	struct TArray<struct AActor*> OutActorList;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetSystemLibrary.Delay
struct FDelay
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	float Duration;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)
	struct FLatentActionInfo LatentInfo;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetSystemLibrary.SphereTraceMultiByProfile
struct FSphereTraceMultiByProfile
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector Start;  // 0x8 (0x8)
	struct FVector End;  // 0x20 (0x20)
	float Radius;  // 0x38 (0x38)
	struct FName ProfileName;  // 0x3C (0x3C)
	char pad_68_1 : 7;  // 0x44 (0x44)
	bool bTraceComplex : 1;  // 0x44 (0x44)
	char pad_69[3];  // 0x45 (0x45)
	struct TArray<struct AActor*> ActorsToIgnore;  // 0x48 (0x48)
	enum class EDrawDebugTrace DrawDebugType;  // 0x58 (0x58)
	char pad_89[7];  // 0x59 (0x59)
	struct TArray<struct FHitResult> OutHits;  // 0x60 (0x60)
	char pad_112_1 : 7;  // 0x70 (0x70)
	bool bIgnoreSelf : 1;  // 0x70 (0x70)
	char pad_113[3];  // 0x71 (0x71)
	struct FLinearColor TraceColor;  // 0x74 (0x74)
	struct FLinearColor TraceHitColor;  // 0x84 (0x84)
	float DrawTime;  // 0x94 (0x94)
	char pad_152_1 : 7;  // 0x98 (0x98)
	bool ReturnValue : 1;  // 0x98 (0x98)
	char pad_153[7];  // 0x99 (0x99)


}; 
 
 // Function Engine.KismetSystemLibrary.DelayUntilNextTick
struct FDelayUntilNextTick
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FLatentActionInfo LatentInfo;  // 0x8 (0x8)


}; 
 
 // Function Engine.GameplayStatics.GetActorOfClass
struct FGetActorOfClass
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	AActor* ActorClass;  // 0x8 (0x8)
	struct AActor* ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetSystemLibrary.DrawDebugArrow
struct FDrawDebugArrow
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector LineStart;  // 0x8 (0x8)
	struct FVector LineEnd;  // 0x20 (0x20)
	float ArrowSize;  // 0x38 (0x38)
	struct FLinearColor LineColor;  // 0x3C (0x3C)
	float Duration;  // 0x4C (0x4C)
	float Thickness;  // 0x50 (0x50)
	char pad_84[4];  // 0x54 (0x54)


}; 
 
 // Function Engine.AtmosphericFogComponent.SetDistanceOffset
struct FSetDistanceOffset
{
	float NewDistanceOffset;  // 0x0 (0x0)


}; 
 
 // SparseDelegateFunction Engine.ActorOnClickedSignature__DelegateSignature
struct FActorOnClickedSignature__DelegateSignature
{
	struct AActor* TouchedActor;  // 0x0 (0x0)
	struct FKey ButtonPressed;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.LightmassDirectionalLightSettings
// Size: 0x10(Inherited: 0xC)
struct FLightmassDirectionalLightSettings : FLightmassLightSettings
{
	float LightSourceAngle;  // 0xC (0xC)


}; 
 
 // Function Engine.PlayerController.ClientPlaySound
struct FClientPlaySound
{
	struct USoundBase* Sound;  // 0x0 (0x0)
	float VolumeMultiplier;  // 0x8 (0x8)
	float PitchMultiplier;  // 0xC (0xC)


}; 
 
 // Function Engine.KismetSystemLibrary.DrawDebugBox
struct FDrawDebugBox
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector Center;  // 0x8 (0x8)
	struct FVector Extent;  // 0x20 (0x20)
	struct FLinearColor LineColor;  // 0x38 (0x38)
	struct FRotator Rotation;  // 0x48 (0x48)
	float Duration;  // 0x60 (0x60)
	float Thickness;  // 0x64 (0x64)


}; 
 
 // ScriptStruct Engine.WalkableSlopeOverride
struct FWalkableSlopeOverride
{
	enum class EWalkableSlopeBehavior WalkableSlopeBehavior;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	float WalkableSlopeAngle;  // 0x4 (0x4)
	char pad_8[8];  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetSystemLibrary.DrawDebugCamera
struct FDrawDebugCamera
{
	struct ACameraActor* CameraActor;  // 0x0 (0x0)
	struct FLinearColor CameraColor;  // 0x8 (0x8)
	float Duration;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)


}; 
 
 // Function Engine.InstancedStaticMeshComponent.UpdateInstanceTransform
struct FUpdateInstanceTransform
{
	int32_t InstanceIndex;  // 0x0 (0x0)
	char pad_4[12];  // 0x4 (0x4)
	struct FTransform NewInstanceTransform;  // 0x10 (0x10)
	char pad_112_1 : 7;  // 0x70 (0x70)
	bool bWorldSpace : 1;  // 0x70 (0x70)
	char pad_113_1 : 7;  // 0x71 (0x71)
	bool bMarkRenderStateDirty : 1;  // 0x71 (0x71)
	char pad_114_1 : 7;  // 0x72 (0x72)
	bool bTeleport : 1;  // 0x72 (0x72)
	char pad_115_1 : 7;  // 0x73 (0x73)
	bool ReturnValue : 1;  // 0x73 (0x73)
	char pad_116[12];  // 0x74 (0x74)


}; 
 
 // Function Engine.KismetSystemLibrary.DrawDebugCapsule
struct FDrawDebugCapsule
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector Center;  // 0x8 (0x8)
	float HalfHeight;  // 0x20 (0x20)
	float Radius;  // 0x24 (0x24)
	struct FRotator Rotation;  // 0x28 (0x28)
	struct FLinearColor LineColor;  // 0x40 (0x40)
	float Duration;  // 0x50 (0x50)
	float Thickness;  // 0x54 (0x54)


}; 
 
 // ScriptStruct Engine.RootMotionSourceGroup
struct FRootMotionSourceGroup
{
	char pad_0[40];  // 0x0 (0x0)
	char bHasAdditiveSources : 1;  // 0x28 (0x28)
	char bHasOverrideSources : 1;  // 0x28 (0x28)
	char bHasOverrideSourcesWithIgnoreZAccumulate : 1;  // 0x28 (0x28)
	char bIsAdditiveVelocityApplied : 1;  // 0x28 (0x28)
	char pad_40_1 : 4;  // 0x28 (0x28)
	struct FRootMotionSourceSettings LastAccumulatedSettings;  // 0x29 (0x29)
	char pad_42[6];  // 0x2A (0x2A)
	struct FVector_NetQuantize10 LastPreAdditiveVelocity;  // 0x30 (0x30)


}; 
 
 // Function Engine.AmbientSound.FadeOut
struct FFadeOut
{
	float FadeOutDuration;  // 0x0 (0x0)
	float FadeVolumeLevel;  // 0x4 (0x4)


}; 
 
 // Function Engine.SplineComponent.GetRotationAtTime
struct FGetRotationAtTime
{
	float Time;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x4 (0x4)
	char pad_5_1 : 7;  // 0x5 (0x5)
	bool bUseConstantVelocity : 1;  // 0x5 (0x5)
	char pad_6[2];  // 0x6 (0x6)
	struct FRotator ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.CameraComponent.SetPostProcessBlendWeight
struct FSetPostProcessBlendWeight
{
	float InPostProcessBlendWeight;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.SphereTraceSingle
struct FSphereTraceSingle
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector Start;  // 0x8 (0x8)
	struct FVector End;  // 0x20 (0x20)
	float Radius;  // 0x38 (0x38)
	enum class ETraceTypeQuery TraceChannel;  // 0x3C (0x3C)
	char pad_61_1 : 7;  // 0x3D (0x3D)
	bool bTraceComplex : 1;  // 0x3D (0x3D)
	char pad_62[2];  // 0x3E (0x3E)
	struct TArray<struct AActor*> ActorsToIgnore;  // 0x40 (0x40)
	enum class EDrawDebugTrace DrawDebugType;  // 0x50 (0x50)
	char pad_81[7];  // 0x51 (0x51)
	struct FHitResult OutHit;  // 0x58 (0x58)
	char pad_320_1 : 7;  // 0x140 (0x140)
	bool bIgnoreSelf : 1;  // 0x140 (0x140)
	char pad_321[3];  // 0x141 (0x141)
	struct FLinearColor TraceColor;  // 0x144 (0x144)
	struct FLinearColor TraceHitColor;  // 0x154 (0x154)
	float DrawTime;  // 0x164 (0x164)
	char pad_360_1 : 7;  // 0x168 (0x168)
	bool ReturnValue : 1;  // 0x168 (0x168)
	char pad_361[7];  // 0x169 (0x169)


}; 
 
 // Function Engine.PlayerState.GetPlayerName
struct FGetPlayerName
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.DrawDebugCircle
struct FDrawDebugCircle
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector Center;  // 0x8 (0x8)
	float Radius;  // 0x20 (0x20)
	int32_t NumSegments;  // 0x24 (0x24)
	struct FLinearColor LineColor;  // 0x28 (0x28)
	float Duration;  // 0x38 (0x38)
	float Thickness;  // 0x3C (0x3C)
	struct FVector YAxis;  // 0x40 (0x40)
	struct FVector ZAxis;  // 0x58 (0x58)
	char pad_112_1 : 7;  // 0x70 (0x70)
	bool bDrawAxis : 1;  // 0x70 (0x70)
	char pad_113[7];  // 0x71 (0x71)


}; 
 
 // ScriptStruct Engine.SkeletonToMeshLinkup
struct FSkeletonToMeshLinkup
{
	struct TArray<int32_t> SkeletonToMeshTable;  // 0x0 (0x0)
	struct TArray<int32_t> MeshToSkeletonTable;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetSystemLibrary.DrawDebugConeInDegrees
struct FDrawDebugConeInDegrees
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector Origin;  // 0x8 (0x8)
	struct FVector Direction;  // 0x20 (0x20)
	float Length;  // 0x38 (0x38)
	float AngleWidth;  // 0x3C (0x3C)
	float AngleHeight;  // 0x40 (0x40)
	int32_t NumSides;  // 0x44 (0x44)
	struct FLinearColor LineColor;  // 0x48 (0x48)
	float Duration;  // 0x58 (0x58)
	float Thickness;  // 0x5C (0x5C)


}; 
 
 // Function Engine.KismetSystemLibrary.SetStructurePropertyByName
struct FSetStructurePropertyByName
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FName PropertyName;  // 0x8 (0x8)
	struct FGenericStruct Value;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)


}; 
 
 // Function Engine.KismetMathLibrary.TimespanMaxValue
struct FTimespanMaxValue
{
	struct FTimespan ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.GetUniqueDeviceId
struct FGetUniqueDeviceId
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameplayStatics.GetPlayerState
struct FGetPlayerState
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	int32_t PlayerStateIndex;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)
	struct APlayerState* ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.Actor.ReceiveHit
struct FReceiveHit
{
	struct UPrimitiveComponent* MyComp;  // 0x0 (0x0)
	struct AActor* Other;  // 0x8 (0x8)
	struct UPrimitiveComponent* OtherComp;  // 0x10 (0x10)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bSelfMoved : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)
	struct FVector HitLocation;  // 0x20 (0x20)
	struct FVector HitNormal;  // [x38 ([x38)
	struct FVector NormalImpulse;  // 0x50 (0x50)
	struct FHitResult Hit;  // 0x68 (0x68)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_BoolToByte
struct FConv_BoolToByte
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool InBool : 1;  // 0x0 (0x0)
	char ReturnValue;  // 0x1 (0x1)


}; 
 
 // Function Engine.KismetMathLibrary.DegSin
struct FDegSin
{
	double A;  // 0x0 (0x0)
	double ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetSystemLibrary.IsControllerAssignedToGamepad
struct FIsControllerAssignedToGamepad
{
	int32_t ControllerId;  // 0x0 (0x0)
	char pad_4_1 : 7;  // 0x4 (0x4)
	bool ReturnValue : 1;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)


}; 
 
 // Function Engine.KismetSystemLibrary.K2_TimerExistsDelegate
struct FK2_TimerExistsDelegate
{
	struct FDelegate Delegate;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[3];  // 0x11 (0x11)


}; 
 
 // Function Engine.KismetMathLibrary.Divide_ByteByte
struct FDivide_ByteByte
{
	char A;  // 0x0 (0x0)
	char B;  // 0x1 (0x1)
	char ReturnValue;  // 0x2 (0x2)


}; 
 
 // ScriptStruct Engine.GaussianSumBloomSettings
struct FGaussianSumBloomSettings
{
	float Intensity;  // 0x0 (0x0)
	float Threshold;  // 0x4 (0x4)
	float SizeScale;  // 0x8 (0x8)
	float Filter1Size;  // 0xC (0xC)
	float Filter2Size;  // 0x10 (0x10)
	float Filter3Size;  // 0x14 (0x14)
	float Filter4Size;  // 0x18 (0x18)
	float Filter5Size;  // 0x1C (0x1C)
	float Filter6Size;  // 0x20 (0x20)
	struct FLinearColor Filter1Tint;  // 0x24 (0x24)
	struct FLinearColor Filter2Tint;  // 0x34 (0x34)
	struct FLinearColor Filter3Tint;  // 0x44 (0x44)
	struct FLinearColor Filter4Tint;  // 0x54 (0x54)
	struct FLinearColor Filter5Tint;  // 0x64 (0x64)
	struct FLinearColor Filter6Tint;  // 0x74 (0x74)


}; 
 
 // Function Engine.KismetSystemLibrary.DrawDebugCoordinateSystem
struct FDrawDebugCoordinateSystem
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector AxisLoc;  // 0x8 (0x8)
	struct FRotator AxisRot;  // 0x20 (0x20)
	float Scale;  // 0x38 (0x38)
	float Duration;  // 0x3C (0x3C)
	float Thickness;  // 0x40 (0x40)
	char pad_68[4];  // 0x44 (0x44)


}; 
 
 // Function Engine.BlueprintMapLibrary.Map_Find
struct FMap_Find
{
	struct TMap<int32_t, int32_t> TargetMap;  // 0x0 (0x0)
	int32_t Key;  // 0x50 (0x50)
	int32_t Value;  // 0x54 (0x54)
	char pad_88_1 : 7;  // 0x58 (0x58)
	bool ReturnValue : 1;  // 0x58 (0x58)
	char pad_89[7];  // 0x59 (0x59)


}; 
 
 // Function Engine.PhysicsConstraintComponent.SetAngularVelocityDriveSLERP
struct FSetAngularVelocityDriveSLERP
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bEnableSLERP : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.TTEventTrack
// Size: 0x28(Inherited: 0x18)
struct FTTEventTrack : FTTTrackBase
{
	struct FName FunctionName;  // 0x18 (0x18)
	struct UCurveFloat* CurveKeys;  // 0x20 (0x20)


}; 
 
 // Function Engine.SkinnedMeshComponent.SetCapsuleIndirectShadowMinVisibility
struct FSetCapsuleIndirectShadowMinVisibility
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_Int64ToByte
struct FConv_Int64ToByte
{
	int64_t inInt;  // 0x0 (0x0)
	char ReturnValue;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.KismetSystemLibrary.DrawDebugCylinder
struct FDrawDebugCylinder
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector Start;  // 0x8 (0x8)
	struct FVector End;  // 0x20 (0x20)
	float Radius;  // 0x38 (0x38)
	int32_t Segments;  // 0x3C (0x3C)
	struct FLinearColor LineColor;  // 0x40 (0x40)
	float Duration;  // 0x50 (0x50)
	float Thickness;  // 0x54 (0x54)


}; 
 
 // Function Engine.KismetSystemLibrary.GetProjectDirectory
struct FGetProjectDirectory
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.ActorComponentInstanceSourceInfo
struct FActorComponentInstanceSourceInfo
{
	struct UObject* SourceComponentTemplate;  // 0x0 (0x0)
	uint8_t SourceComponentCreationMethod;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)
	int32_t SourceComponentTypeSerializedIndex;  // 0xC (0xC)


}; 
 
 // ScriptStruct Engine.CharacterMoveResponsePackedBits
// Size: 0x98(Inherited: 0x98)
struct FCharacterMoveResponsePackedBits : FCharacterNetworkSerializationPackedBits
{


}; 
 
 // Function Engine.KismetMathLibrary.LessEqual_Int64Int64
struct FLessEqual_Int64Int64
{
	int64_t A;  // 0x0 (0x0)
	int64_t B;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // ScriptStruct Engine.TexturePlatformData
struct FTexturePlatformData
{
	char pad_0[48];  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.DrawDebugFloatHistoryLocation
struct FDrawDebugFloatHistoryLocation
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FDebugFloatHistory FloatHistory;  // 0x8 (0x8)
	struct FVector DrawLocation;  // 0x28 (0x28)
	struct FVector2D DrawSize;  // 0x40 (0x40)
	struct FLinearColor DrawColor;  // 0x50 (0x50)
	float Duration;  // 0x60 (0x60)
	char pad_100[4];  // 0x64 (0x64)


}; 
 
 // Function Engine.PrimitiveComponent.K2_IsPhysicsCollisionEnabled
struct FK2_IsPhysicsCollisionEnabled
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.SetNotifyRigidBodyCollision
struct FSetNotifyRigidBodyCollision
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewNotifyRigidBodyCollision : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.PawnMovementComponent.ConsumeInputVector
struct FConsumeInputVector
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.DrawDebugFloatHistoryTransform
struct FDrawDebugFloatHistoryTransform
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FDebugFloatHistory FloatHistory;  // 0x8 (0x8)
	char pad_40[8];  // 0x28 (0x28)
	struct FTransform DrawTransform;  // 0x30 (0x30)
	struct FVector2D DrawSize;  // 0x90 (0x90)
	struct FLinearColor DrawColor;  // 0xA0 (0xA0)
	float Duration;  // 0xB0 (0xB0)
	char pad_180[12];  // 0xB4 (0xB4)


}; 
 
 // Function Engine.PrimitiveComponent.AddAngularImpulseInRadians
struct FAddAngularImpulseInRadians
{
	struct FVector Impulse;  // 0x0 (0x0)
	struct FName BoneName;  // 0x18 (0x18)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool bVelChange : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // ScriptStruct Engine.RawCurveTracks
struct FRawCurveTracks
{
	struct TArray<struct FFloatCurve> FloatCurves;  // 0x0 (0x0)


}; 
 
 // Function Engine.Controller.SetIgnoreMoveInput
struct FSetIgnoreMoveInput
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewMoveInput : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_ComponentMax
struct FVector_ComponentMax
{
	struct FVector A;  // 0x0 (0x0)
	struct FVector B;  // 0x18 (0x18)
	struct FVector ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.KismetSystemLibrary.DrawDebugPlane
struct FDrawDebugPlane
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	char pad_8[8];  // 0x8 (0x8)
	struct FPlane PlaneCoordinates;  // 0x10 (0x10)
	struct FVector Location;  // 0x30 (0x30)
	float Size;  // 0x48 (0x48)
	struct FLinearColor PlaneColor;  // 0x4C (0x4C)
	float Duration;  // 0x5C (0x5C)


}; 
 
 // Function Engine.CharacterMovementComponent.CalcVelocity
struct FCalcVelocity
{
	float DeltaTime;  // 0x0 (0x0)
	float Friction;  // 0x4 (0x4)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bFluid : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)
	float BrakingDeceleration;  // 0xC (0xC)


}; 
 
 // ScriptStruct Engine.NonBlendableTransformAnimationAttribute
// Size: 0x60(Inherited: 0x60)
struct FNonBlendableTransformAnimationAttribute : FTransformAnimationAttribute
{


}; 
 
 // Function Engine.KismetMathLibrary.NotEqual_TimespanTimespan
struct FNotEqual_TimespanTimespan
{
	struct FTimespan A;  // 0x0 (0x0)
	struct FTimespan B;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.KismetSystemLibrary.DrawDebugSphere
struct FDrawDebugSphere
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector Center;  // 0x8 (0x8)
	float Radius;  // 0x20 (0x20)
	int32_t Segments;  // 0x24 (0x24)
	struct FLinearColor LineColor;  // 0x28 (0x28)
	float Duration;  // 0x38 (0x38)
	float Thickness;  // 0x3C (0x3C)


}; 
 
 // Function Engine.KismetMathLibrary.MakeRotFromXY
struct FMakeRotFromXY
{
	struct FVector X;  // 0x0 (0x0)
	struct FVector Y;  // 0x18 (0x18)
	struct FRotator ReturnValue;  // 0x30 (0x30)


}; 
 
 // ScriptStruct Engine.A2CSPose
// Size: 0x28(Inherited: 0x10)
struct FA2CSPose : FA2Pose
{
	char pad_16[8];  // 0x10 (0x10)
	struct TArray<char> ComponentSpaceFlags;  // 0x18 (0x18)


}; 
 
 // Function Engine.CanvasRenderTarget2D.ReceiveUpdate
struct FReceiveUpdate
{
	struct UCanvas* Canvas;  // 0x0 (0x0)
	int32_t Width;  // 0x8 (0x8)
	int32_t Height;  // 0xC (0xC)


}; 
 
 // Function Engine.KismetInputLibrary.ModifierKeysState_IsCommandDown
struct FModifierKeysState_IsCommandDown
{
	struct FSlateModifierKeysState KeysState;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool ReturnValue : 1;  // 0x1 (0x1)


}; 
 
 // Function Engine.AvoidanceManager.GetNewAvoidanceUID
struct FGetNewAvoidanceUID
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Vector4_SizeSquared
struct FVector4_SizeSquared
{
	struct FVector4 A;  // 0x0 (0x0)
	double ReturnValue;  // 0x20 (0x20)
	char pad_40[8];  // 0x28 (0x28)


}; 
 
 // Function Engine.KismetSystemLibrary.DrawDebugString
struct FDrawDebugString
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector TextLocation;  // 0x8 (0x8)
	struct FString Text;  // 0x20 (0x20)
	struct AActor* TestBaseActor;  // 0x30 (0x30)
	struct FLinearColor TextColor;  // 0x38 (0x38)
	float Duration;  // 0x48 (0x48)
	char pad_76[4];  // 0x4C (0x4C)


}; 
 
 // ScriptStruct Engine.SkeletalMeshOptimizationSettings
struct FSkeletalMeshOptimizationSettings
{
	enum class SkeletalMeshTerminationCriterion TerminationCriterion;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	float NumOfTrianglesPercentage;  // 0x4 (0x4)
	float NumOfVertPercentage;  // 0x8 (0x8)
	uint32_t MaxNumOfTriangles;  // 0xC (0xC)
	uint32_t MaxNumOfVerts;  // 0x10 (0x10)
	float MaxDeviationPercentage;  // 0x14 (0x14)
	enum class SkeletalMeshOptimizationType ReductionMethod;  // 0x18 (0x18)
	enum class SkeletalMeshOptimizationImportance SilhouetteImportance;  // 0x19 (0x19)
	enum class SkeletalMeshOptimizationImportance TextureImportance;  // 0x1A (0x1A)
	enum class SkeletalMeshOptimizationImportance ShadingImportance;  // 0x1B (0x1B)
	enum class SkeletalMeshOptimizationImportance SkinningImportance;  // 0x1C (0x1C)
	char bRemapMorphTargets : 1;  // 0x1D (0x1D)
	char bRecalcNormals : 1;  // 0x1D (0x1D)
	char pad_29_1 : 6;  // 0x1D (0x1D)
	char pad_30[3];  // 0x1E (0x1E)
	float WeldingThreshold;  // 0x20 (0x20)
	float NormalsThreshold;  // 0x24 (0x24)
	int32_t MaxBonesPerVertex;  // 0x28 (0x28)
	char bEnforceBoneBoundaries : 1;  // 0x2C (0x2C)
	char bMergeCoincidentVertBones : 1;  // 0x2C (0x2C)
	char pad_44_1 : 6;  // 0x2C (0x2C)
	char pad_45[4];  // 0x2D (0x2D)
	float VolumeImportance;  // 0x30 (0x30)
	char bLockEdges : 1;  // 0x34 (0x34)
	char bLockColorBounaries : 1;  // 0x34 (0x34)
	char pad_52_1 : 6;  // 0x34 (0x34)
	char pad_53[4];  // 0x35 (0x35)
	int32_t BaseLOD;  // 0x38 (0x38)


}; 
 
 // SparseDelegateFunction Engine.ComponentEndOverlapSignature__DelegateSignature
struct FComponentEndOverlapSignature__DelegateSignature
{
	struct UPrimitiveComponent* OverlappedComponent;  // 0x0 (0x0)
	struct AActor* OtherActor;  // 0x8 (0x8)
	struct UPrimitiveComponent* OtherComp;  // 0x10 (0x10)
	int32_t OtherBodyIndex;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)


}; 
 
 // Function Engine.PlayerController.ClientIgnoreMoveInput
struct FClientIgnoreMoveInput
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bIgnore : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.EqualEqual_PrimaryAssetId
struct FEqualEqual_PrimaryAssetId
{
	struct FPrimaryAssetId A;  // 0x0 (0x0)
	struct FPrimaryAssetId B;  // 0x10 (0x10)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[3];  // 0x21 (0x21)


}; 
 
 // ScriptStruct Engine.IndexedCurve
struct FIndexedCurve
{
	char pad_0[8];  // 0x0 (0x0)
	struct FKeyHandleMap KeyHandlesToIndices;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.Divide_VectorFloat
struct FDivide_VectorFloat
{
	struct FVector A;  // 0x0 (0x0)
	double B;  // 0x18 (0x18)
	struct FVector ReturnValue;  // 0x20 (0x20)


}; 
 
 // DelegateFunction Engine.PlatformGameInstance.PlatformReceivedRemoteNotificationDelegate__DelegateSignature
struct FPlatformReceivedRemoteNotificationDelegate__DelegateSignature
{
	struct FString InString;  // 0x0 (0x0)
	enum class EApplicationState inAppState;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.KismetSystemLibrary.EqualEqual_PrimaryAssetType
struct FEqualEqual_PrimaryAssetType
{
	struct FPrimaryAssetType A;  // 0x0 (0x0)
	struct FPrimaryAssetType B;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[3];  // 0x11 (0x11)


}; 
 
 // Function Engine.Actor.WasRecentlyRendered
struct FWasRecentlyRendered
{
	float Tolerance;  // 0x0 (0x0)
	char pad_4_1 : 7;  // 0x4 (0x4)
	bool ReturnValue : 1;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)


}; 
 
 // ScriptStruct Engine.TTPropertyTrack
// Size: 0x20(Inherited: 0x18)
struct FTTPropertyTrack : FTTTrackBase
{
	struct FName PropertyName;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetSystemLibrary.GetObjectName
struct FGetObjectName
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FString ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetSystemLibrary.EqualEqual_SoftClassReference
struct FEqualEqual_SoftClassReference
{
	struct TSoftClassPtr<UObject> A;  // 0x0 (0x0)
	struct TSoftClassPtr<UObject> B;  // 0x30 (0x30)
	char pad_96_1 : 7;  // 0x60 (0x60)
	bool ReturnValue : 1;  // 0x60 (0x60)
	char pad_97[7];  // 0x61 (0x61)


}; 
 
 // Function Engine.KismetMathLibrary.LinearColor_ToRGBE
struct FLinearColor_ToRGBE
{
	struct FLinearColor InLinearColor;  // 0x0 (0x0)
	struct FColor ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.SkyAtmosphereComponent.SetRayleighScatteringScale
struct FSetRayleighScatteringScale
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.EqualEqual_SoftObjectReference
struct FEqualEqual_SoftObjectReference
{
	struct TSoftObjectPtr<UObject> A;  // 0x0 (0x0)
	struct TSoftObjectPtr<UObject> B;  // 0x30 (0x30)
	char pad_96_1 : 7;  // 0x60 (0x60)
	bool ReturnValue : 1;  // 0x60 (0x60)
	char pad_97[7];  // 0x61 (0x61)


}; 
 
 // Function Engine.KismetSystemLibrary.GetProjectSavedDirectory
struct FGetProjectSavedDirectory
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.ExecuteConsoleCommand
struct FExecuteConsoleCommand
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FString Command;  // 0x8 (0x8)
	struct APlayerController* SpecificPlayer;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetSystemLibrary.IsValidPrimaryAssetId
struct FIsValidPrimaryAssetId
{
	struct FPrimaryAssetId PrimaryAssetId;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[3];  // 0x11 (0x11)


}; 
 
 // Function Engine.KismetSystemLibrary.FlushDebugStrings
struct FFlushDebugStrings
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)


}; 
 
 // Function Engine.SceneComponent.GetChildComponent
struct FGetChildComponent
{
	int32_t ChildIndex;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct USceneComponent* ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetSystemLibrary.FlushPersistentDebugLines
struct FFlushPersistentDebugLines
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.GetComponentsByTag
struct FGetComponentsByTag
{
	UActorComponent* ComponentClass;  // 0x0 (0x0)
	struct FName Tag;  // 0x8 (0x8)
	struct TArray<struct UActorComponent*> ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.SkeletalMeshComponent.K2_GetClosestPointOnPhysicsAsset
struct FK2_GetClosestPointOnPhysicsAsset
{
	struct FVector WorldPosition;  // 0x0 (0x0)
	struct FVector ClosestWorldPosition;  // 0x18 (0x18)
	struct FVector Normal;  // 0x30 (0x30)
	struct FName BoneName;  // 0x48 (0x48)
	float Distance;  // 0x50 (0x50)
	char pad_84_1 : 7;  // 0x54 (0x54)
	bool ReturnValue : 1;  // 0x54 (0x54)
	char pad_85[3];  // 0x55 (0x55)


}; 
 
 // Function Engine.KismetSystemLibrary.SetTransformPropertyByName
struct FSetTransformPropertyByName
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FName PropertyName;  // 0x8 (0x8)
	struct FTransform Value;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetSystemLibrary.SetClassPropertyByName
struct FSetClassPropertyByName
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FName PropertyName;  // 0x8 (0x8)
	UObject* Value;  // 0x10 (0x10)


}; 
 
 // SparseDelegateFunction Engine.PawnControllerChangedSignature__DelegateSignature
struct FPawnControllerChangedSignature__DelegateSignature
{
	struct APawn* Pawn;  // 0x0 (0x0)
	struct AController* OldController;  // 0x8 (0x8)
	struct AController* NewController;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetSystemLibrary.GetClassFromPrimaryAssetId
struct FGetClassFromPrimaryAssetId
{
	struct FPrimaryAssetId PrimaryAssetId;  // 0x0 (0x0)
	UObject* ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.PrimitiveComponent.IsGravityEnabled
struct FIsGravityEnabled
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.GetAdIDCount
struct FGetAdIDCount
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.MaterialInstanceDynamic.SetVectorParameterValueByInfo
struct FSetVectorParameterValueByInfo
{
	struct FMaterialParameterInfo ParameterInfo;  // 0x0 (0x0)
	struct FLinearColor Value;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetSystemLibrary.GetBuildConfiguration
struct FGetBuildConfiguration
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPathsLibrary.GetRelativePathToRoot
struct FGetRelativePathToRoot
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.GetRemoteRole
struct FGetRemoteRole
{
	enum class ENetRole ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimNotifyStateMachineInspectionLibrary.IsTriggeredByStateMachine
struct FIsTriggeredByStateMachine
{
	struct FAnimNotifyEventReference EventReference;  // 0x0 (0x0)
	struct UAnimInstance* AnimInstance;  // 0x28 (0x28)
	struct FName StateMachineName;  // 0x30 (0x30)
	char pad_56_1 : 7;  // 0x38 (0x38)
	bool ReturnValue : 1;  // 0x38 (0x38)
	char pad_57[7];  // 0x39 (0x39)


}; 
 
 // Function Engine.SkeletalMeshComponent.GetBoneMass
struct FGetBoneMass
{
	struct FName BoneName;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bScaleMass : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)
	float ReturnValue;  // 0xC (0xC)


}; 
 
 // ScriptStruct Engine.AttributePayload
// Size: 0x40(Inherited: 0x1)
struct FAttributePayload : FEmptyPayload
{
	struct FAnimationAttributeIdentifier Identifier;  // 0x0 (0x0)


}; 
 
 // Function Engine.AudioComponent.GetPlayState
struct FGetPlayState
{
	uint8_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.GetCommandLine
struct FGetCommandLine
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.EqualEqual_ByteByte
struct FEqualEqual_ByteByte
{
	char A;  // 0x0 (0x0)
	char B;  // 0x1 (0x1)
	char pad_2_1 : 7;  // 0x2 (0x2)
	bool ReturnValue : 1;  // 0x2 (0x2)


}; 
 
 // Function Engine.ExponentialHeightFogComponent.SetFullyDirectionalInscatteringColorDistance
struct FSetFullyDirectionalInscatteringColorDistance
{
	float Value;  // 0x0 (0x0)


}; 
 
 // Function Engine.Controller.ReceiveUnPossess
struct FReceiveUnPossess
{
	struct APawn* UnpossessedPawn;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.KConvexElem
// Size: 0x100(Inherited: 0x30)
struct FKConvexElem : FKShapeElem
{
	struct TArray<struct FVector> VertexData;  // 0x30 (0x30)
	struct TArray<int32_t> IndexData;  // 0x40 (0x40)
	struct FBox ElemBox;  // 0x50 (0x50)
	char pad_136[8];  // 0x88 (0x88)
	struct FTransform Transform;  // 0x90 (0x90)
	char pad_240[16];  // 0xF0 (0xF0)


}; 
 
 // Function Engine.BlueprintTypeConversions.ConvertFRotator3dToFRotator3f
struct FConvertFRotator3dToFRotator3f
{
	int32_t InFromData;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.KismetSystemLibrary.GetComponentBounds
struct FGetComponentBounds
{
	struct USceneComponent* Component;  // 0x0 (0x0)
	struct FVector Origin;  // 0x8 (0x8)
	struct FVector BoxExtent;  // 0x20 (0x20)
	float SphereRadius;  // 0x38 (0x38)
	char pad_60[4];  // 0x3C (0x3C)


}; 
 
 // ScriptStruct Engine.CurveEdEntry
struct FCurveEdEntry
{
	struct UObject* CurveObject;  // 0x0 (0x0)
	struct FColor CurveColor;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)
	struct FString CurveName;  // 0x10 (0x10)
	int32_t bHideCurve;  // 0x20 (0x20)
	int32_t bColorCurve;  // 0x24 (0x24)
	int32_t bFloatingPointColorCurve;  // 0x28 (0x28)
	int32_t bClamp;  // 0x2C (0x2C)
	float ClampLow;  // 0x30 (0x30)
	float ClampHigh;  // 0x34 (0x34)


}; 
 
 // Function Engine.LightComponentBase.SetAffectReflection
struct FSetAffectReflection
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewValue : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.AnimNode_AssetPlayerRelevancyBase
// Size: 0x10(Inherited: 0x10)
struct FAnimNode_AssetPlayerRelevancyBase : FAnimNode_Base
{


}; 
 
 // ScriptStruct Engine.PropertyAccessCopy
struct FPropertyAccessCopy
{
	int32_t AccessIndex;  // 0x0 (0x0)
	int32_t DestAccessStartIndex;  // 0x4 (0x4)
	int32_t DestAccessEndIndex;  // 0x8 (0x8)
	uint8_t Type;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)


}; 
 
 // ScriptStruct Engine.ExpressionExecOutput
struct FExpressionExecOutput
{
	struct UMaterialExpression* Expression;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.EndPhysicsTickFunction
// Size: 0x30(Inherited: 0x28)
struct FEndPhysicsTickFunction : FTickFunction
{
	char pad_40[8];  // 0x28 (0x28)


}; 
 
 // Function Engine.KismetSystemLibrary.IsSplitScreen
struct FIsSplitScreen
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.KismetSystemLibrary.GetConsoleVariableFloatValue
struct FGetConsoleVariableFloatValue
{
	struct FString VariableName;  // 0x0 (0x0)
	float ReturnValue;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)


}; 
 
 // Function Engine.KismetSystemLibrary.GetDefaultLanguage
struct FGetDefaultLanguage
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.SkeletalMeshSamplingRegion
struct FSkeletalMeshSamplingRegion
{
	struct FName Name;  // 0x0 (0x0)
	int32_t LODIndex;  // 0x8 (0x8)
	char bSupportUniformlyDistributedSampling : 1;  // 0xC (0xC)
	char pad_12_1 : 7;  // 0xC (0xC)
	char pad_13[4];  // 0xD (0xD)
	struct TArray<struct FSkeletalMeshSamplingRegionMaterialFilter> MaterialFilters;  // 0x10 (0x10)
	struct TArray<struct FSkeletalMeshSamplingRegionBoneFilter> BoneFilters;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_IntToByte
struct FConv_IntToByte
{
	int32_t inInt;  // 0x0 (0x0)
	char ReturnValue;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)


}; 
 
 // Function Engine.KismetSystemLibrary.SetSoftClassPropertyByName
struct FSetSoftClassPropertyByName
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FName PropertyName;  // 0x8 (0x8)
	struct TSoftClassPtr<UObject> Value;  // 0x10 (0x10)


}; 
 
 // Function Engine.AudioComponent.GetCookedEnvelopeData
struct FGetCookedEnvelopeData
{
	float OutEnvelopeData;  // 0x0 (0x0)
	char pad_4_1 : 7;  // 0x4 (0x4)
	bool ReturnValue : 1;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)


}; 
 
 // Function Engine.SplineComponent.AddPoint
struct FAddPoint
{
	struct FSplinePoint Point;  // 0x0 (0x0)
	char pad_136_1 : 7;  // 0x88 (0x88)
	bool bUpdateSpline : 1;  // 0x88 (0x88)
	char pad_137[7];  // 0x89 (0x89)


}; 
 
 // Function Engine.KismetSystemLibrary.GetDefaultLocale
struct FGetDefaultLocale
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetInputLibrary.Key_GetNavigationActionFromKey
struct FKey_GetNavigationActionFromKey
{
	struct FKeyEvent InKeyEvent;  // 0x0 (0x0)
	uint8_t ReturnValue;  // 0x40 (0x40)
	char pad_65[7];  // 0x41 (0x41)


}; 
 
 // Function Engine.AudioComponent.GetCookedEnvelopeDataForAllPlayingSounds
struct FGetCookedEnvelopeDataForAllPlayingSounds
{
	struct TArray<struct FSoundWaveEnvelopeDataPerSound> OutEnvelopeData;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.Actor.GetHorizontalDotProductTo
struct FGetHorizontalDotProductTo
{
	struct AActor* OtherActor;  // 0x0 (0x0)
	float ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.KismetSystemLibrary.GetPlatformUserName
struct FGetPlatformUserName
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetRenderingLibrary.ReadRenderTargetPixel
struct FReadRenderTargetPixel
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct UTextureRenderTarget2D* TextureRenderTarget;  // 0x8 (0x8)
	int32_t X;  // 0x10 (0x10)
	int32_t Y;  // 0x14 (0x14)
	struct FColor ReturnValue;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)


}; 
 
 // Function Engine.KismetSystemLibrary.GetDeviceId
struct FGetDeviceId
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.CollisionResponseContainer
struct FCollisionResponseContainer
{
	enum class ECollisionResponse WorldStatic;  // 0x0 (0x0)
	enum class ECollisionResponse WorldDynamic;  // 0x1 (0x1)
	enum class ECollisionResponse Pawn;  // 0x2 (0x2)
	enum class ECollisionResponse Visibility;  // 0x3 (0x3)
	enum class ECollisionResponse Camera;  // 0x4 (0x4)
	enum class ECollisionResponse PhysicsBody;  // 0x5 (0x5)
	enum class ECollisionResponse Vehicle;  // 0x6 (0x6)
	enum class ECollisionResponse Destructible;  // 0x7 (0x7)
	enum class ECollisionResponse EngineTraceChannel1;  // 0x8 (0x8)
	enum class ECollisionResponse EngineTraceChannel2;  // 0x9 (0x9)
	enum class ECollisionResponse EngineTraceChannel3;  // 0xA (0xA)
	enum class ECollisionResponse EngineTraceChannel4;  // 0xB (0xB)
	enum class ECollisionResponse EngineTraceChannel5;  // 0xC (0xC)
	enum class ECollisionResponse EngineTraceChannel6;  // 0xD (0xD)
	enum class ECollisionResponse GameTraceChannel1;  // 0xE (0xE)
	enum class ECollisionResponse GameTraceChannel2;  // 0xF (0xF)
	enum class ECollisionResponse GameTraceChannel3;  // 0x10 (0x10)
	enum class ECollisionResponse GameTraceChannel4;  // 0x11 (0x11)
	enum class ECollisionResponse GameTraceChannel5;  // 0x12 (0x12)
	enum class ECollisionResponse GameTraceChannel6;  // 0x13 (0x13)
	enum class ECollisionResponse GameTraceChannel7;  // 0x14 (0x14)
	enum class ECollisionResponse GameTraceChannel8;  // 0x15 (0x15)
	enum class ECollisionResponse GameTraceChannel9;  // 0x16 (0x16)
	enum class ECollisionResponse GameTraceChannel10;  // 0x17 (0x17)
	enum class ECollisionResponse GameTraceChannel11;  // 0x18 (0x18)
	enum class ECollisionResponse GameTraceChannel12;  // 0x19 (0x19)
	enum class ECollisionResponse GameTraceChannel13;  // 0x1A (0x1A)
	enum class ECollisionResponse GameTraceChannel14;  // 0x1B (0x1B)
	enum class ECollisionResponse GameTraceChannel15;  // 0x1C (0x1C)
	enum class ECollisionResponse GameTraceChannel16;  // 0x1D (0x1D)
	enum class ECollisionResponse GameTraceChannel17;  // 0x1E (0x1E)
	enum class ECollisionResponse GameTraceChannel18;  // 0x1F (0x1F)


}; 
 
 // Function Engine.SkeletalMeshComponent.SetAllBodiesBelowPhysicsBlendWeight
struct FSetAllBodiesBelowPhysicsBlendWeight
{
	struct FName InBoneName;  // 0x0 (0x0)
	float PhysicsBlendWeight;  // 0x8 (0x8)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bSkipCustomPhysicsType : 1;  // 0xC (0xC)
	char pad_13_1 : 7;  // 0xD (0xD)
	bool bIncludeSelf : 1;  // 0xD (0xD)
	char pad_14[2];  // 0xE (0xE)


}; 
 
 // ScriptStruct Engine.DebugTextInfo
struct FDebugTextInfo
{
	struct AActor* SrcActor;  // 0x0 (0x0)
	struct FVector SrcActorOffset;  // 0x8 (0x8)
	struct FVector SrcActorDesiredOffset;  // 0x20 (0x20)
	struct FString DebugText;  // 0x38 (0x38)
	float TimeRemaining;  // 0x48 (0x48)
	float Duration;  // 0x4C (0x4C)
	struct FColor TextColor;  // 0x50 (0x50)
	char bAbsoluteLocation : 1;  // 0x54 (0x54)
	char bKeepAttachedToActor : 1;  // 0x54 (0x54)
	char bDrawShadow : 1;  // 0x54 (0x54)
	char pad_84_1 : 5;  // 0x54 (0x54)
	char pad_85[4];  // 0x55 (0x55)
	struct FVector OrigActorLocation;  // 0x58 (0x58)
	struct UFont* Font;  // 0x70 (0x70)
	float FontScale;  // 0x78 (0x78)
	char pad_124[4];  // 0x7C (0x7C)


}; 
 
 // ScriptStruct Engine.AnimSubsystem_Base
// Size: 0x18(Inherited: 0x8)
struct FAnimSubsystem_Base : FAnimSubsystem
{
	struct TArray<struct FExposedValueHandler> ExposedValueHandlers;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetSystemLibrary.GetEngineVersion
struct FGetEngineVersion
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.IsValidPrimaryAssetType
struct FIsValidPrimaryAssetType
{
	struct FPrimaryAssetType PrimaryAssetType;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.TimecodeProvider.GetDelayedTimecode
struct FGetDelayedTimecode
{
	struct FTimecode ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.GetFrameCount
struct FGetFrameCount
{
	int64_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // SparseDelegateFunction Engine.ComponentOnInputTouchBeginSignature__DelegateSignature
struct FComponentOnInputTouchBeginSignature__DelegateSignature
{
	enum class ETouchIndex FingerIndex;  // 0x0 (0x0)
	char pad_1[7];  // 0x1 (0x1)
	struct UPrimitiveComponent* TouchedComponent;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetSystemLibrary.GetGameBundleId
struct FGetGameBundleId
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.BPInterfaceDescription
struct FBPInterfaceDescription
{
	UInterface* Interface;  // 0x0 (0x0)
	struct TArray<struct UEdGraph*> Graphs;  // 0x8 (0x8)


}; 
 
 // Function Engine.AudioParameterConversionStatics.StringToAudioParameter
struct FStringToAudioParameter
{
	struct FName Name;  // 0x0 (0x0)
	struct FString String;  // 0x8 (0x8)
	struct FAudioParameter ReturnValue;  // 0x18 (0x18)


}; 
 
 // ScriptStruct Engine.RawAnimSequenceTrack
struct FRawAnimSequenceTrack
{
	struct TArray<struct FVector3f> PosKeys;  // 0x0 (0x0)
	struct TArray<struct FQuat4f> RotKeys;  // 0x10 (0x10)
	struct TArray<struct FVector3f> ScaleKeys;  // 0x20 (0x20)


}; 
 
 // SparseDelegateFunction Engine.ComponentHitSignature__DelegateSignature
struct FComponentHitSignature__DelegateSignature
{
	struct UPrimitiveComponent* HitComponent;  // 0x0 (0x0)
	struct AActor* OtherActor;  // 0x8 (0x8)
	struct UPrimitiveComponent* OtherComp;  // 0x10 (0x10)
	struct FVector NormalImpulse;  // 0x18 (0x18)
	struct FHitResult Hit;  // 0x30 (0x30)


}; 
 
 // Function Engine.KismetMathLibrary.RandomInteger64
struct FRandomInteger64
{
	int64_t Max;  // 0x0 (0x0)
	int64_t ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.PrimitiveComponent.GetBodyInstanceAsyncPhysicsTickHandle
struct FGetBodyInstanceAsyncPhysicsTickHandle
{
	struct FName BoneName;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bGetWelded : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)
	int32_t Index;  // 0xC (0xC)
	struct FBodyInstanceAsyncPhysicsTickHandle ReturnValue;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.CurveFlagsChangedPayload
// Size: 0x14(Inherited: 0x10)
struct FCurveFlagsChangedPayload : FCurvePayload
{
	int32_t OldFlags;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetSystemLibrary.GetGameName
struct FGetGameName
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.AnimNode_CustomProperty
// Size: 0x58(Inherited: 0x10)
struct FAnimNode_CustomProperty : FAnimNode_Base
{
	struct TArray<struct FName> SourcePropertyNames;  // 0x10 (0x10)
	struct TArray<struct FName> DestPropertyNames;  // 0x20 (0x20)
	struct UObject* TargetInstance;  // 0x30 (0x30)
	char pad_56[32];  // 0x38 (0x38)


}; 
 
 // ScriptStruct Engine.AnimNode_LinkedInputPose
// Size: 0xC8(Inherited: 0x10)
struct FAnimNode_LinkedInputPose : FAnimNode_Base
{
	struct FName Name;  // 0x10 (0x10)
	struct FName Graph;  // 0x18 (0x18)
	struct FPoseLink InputPose;  // 0x20 (0x20)
	char pad_48[152];  // 0x30 (0x30)


}; 
 
 // Function Engine.KismetSystemLibrary.GetGamepadButtonGlyph
struct FGetGamepadButtonGlyph
{
	struct FString ButtonKey;  // 0x0 (0x0)
	int32_t ControllerIndex;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)
	struct UTexture2D* ReturnValue;  // 0x18 (0x18)


}; 
 
 // ScriptStruct Engine.TrackToSkeletonMap
struct FTrackToSkeletonMap
{
	int32_t BoneTreeIndex;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.SpatialHashRuntimeGrid
struct FSpatialHashRuntimeGrid
{
	char pad_0[1];  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.NotEqual_SoftObjectReference
struct FNotEqual_SoftObjectReference
{
	struct TSoftObjectPtr<UObject> A;  // 0x0 (0x0)
	struct TSoftObjectPtr<UObject> B;  // 0x30 (0x30)
	char pad_96_1 : 7;  // 0x60 (0x60)
	bool ReturnValue : 1;  // 0x60 (0x60)
	char pad_97[7];  // 0x61 (0x61)


}; 
 
 // Function Engine.StaticMesh.GetNumLODs
struct FGetNumLODs
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.CameraComponent.SetFieldOfView
struct FSetFieldOfView
{
	float InFieldOfView;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTime
struct FK2_GetTimerRemainingTime
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FString FunctionName;  // 0x8 (0x8)
	float ReturnValue;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)


}; 
 
 // ScriptStruct Engine.TransformAnimationAttribute
struct FTransformAnimationAttribute
{
	struct FTransform Value;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.ISMClientHandle
struct FISMClientHandle
{
	int32_t Index;  // 0x0 (0x0)
	struct FGuid Guid;  // 0x4 (0x4)


}; 
 
 // Function Engine.KismetSystemLibrary.GetGamepadControllerName
struct FGetGamepadControllerName
{
	int32_t ControllerId;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FString ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.SoundEffectPresetWidgetInterface.GetClass
struct FGetClass
{
	USoundEffectPreset* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.GetGameTimeInSeconds
struct FGetGameTimeInSeconds
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	double ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.SoundSubmix.SetSubmixOutputVolume
struct FSetSubmixOutputVolume
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	float InOutputVolume;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // ScriptStruct Engine.GameNameRedirect
struct FGameNameRedirect
{
	struct FName OldGameName;  // 0x0 (0x0)
	struct FName NewGameName;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.IntegralKey
struct FIntegralKey
{
	float Time;  // 0x0 (0x0)
	int32_t Value;  // 0x4 (0x4)


}; 
 
 // Function Engine.KismetSystemLibrary.GetLocalCurrencyCode
struct FGetLocalCurrencyCode
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SceneComponent.GetChildrenComponents
struct FGetChildrenComponents
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bIncludeAllDescendants : 1;  // 0x0 (0x0)
	char pad_1[7];  // 0x1 (0x1)
	struct TArray<struct USceneComponent*> Children;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetSystemLibrary.GetPrimaryAssetIdFromClass
struct FGetPrimaryAssetIdFromClass
{
	UObject* Class;  // 0x0 (0x0)
	struct FPrimaryAssetId ReturnValue;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.DPMatchingRulestruct
// Size: 0x68(Inherited: 0x48)
struct FDPMatchingRulestruct : FDPMatchingRulestructBase
{
	struct TArray<struct FDPMatchingRulestructE> OnTrue;  // 0x48 (0x48)
	struct TArray<struct FDPMatchingRulestructE> OnFalse;  // 0x58 (0x58)


}; 
 
 // Function Engine.Actor.GetTransform
struct FGetTransform
{
	struct FTransform ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.GetLocalCurrencySymbol
struct FGetLocalCurrencySymbol
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.AddForceAtLocation
struct FAddForceAtLocation
{
	struct FVector Force;  // 0x0 (0x0)
	struct FVector Location;  // 0x18 (0x18)
	struct FName BoneName;  // 0x30 (0x30)


}; 
 
 // Function Engine.PrimitiveComponent.GetCenterOfMass
struct FGetCenterOfMass
{
	struct FName BoneName;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.PlayerController.ClientPrestreamTextures
struct FClientPrestreamTextures
{
	struct AActor* ForcedActor;  // 0x0 (0x0)
	float ForceDuration;  // 0x8 (0x8)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bEnableStreaming : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)
	int32_t CinematicTextureGroups;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)


}; 
 
 // Function Engine.KismetSystemLibrary.GetMinYResolutionFor3DView
struct FGetMinYResolutionFor3DView
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.GetAngularDamping
struct FGetAngularDamping
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.FloatAnimationAttribute
struct FFloatAnimationAttribute
{
	float Value;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.MeshSectionInfo
struct FMeshSectionInfo
{
	int32_t MaterialIndex;  // 0x0 (0x0)
	char pad_4_1 : 7;  // 0x4 (0x4)
	bool bEnableCollision : 1;  // 0x4 (0x4)
	char pad_5_1 : 7;  // 0x5 (0x5)
	bool bCastShadow : 1;  // 0x5 (0x5)
	char pad_6_1 : 7;  // 0x6 (0x6)
	bool bVisibleInRayTracing : 1;  // 0x6 (0x6)
	char pad_7_1 : 7;  // 0x7 (0x7)
	bool bAffectDistanceFieldLighting : 1;  // 0x7 (0x7)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bForceOpaque : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.KismetMathLibrary.Less_IntInt
struct FLess_IntInt
{
	int32_t A;  // 0x0 (0x0)
	int32_t B;  // 0x4 (0x4)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.KismetSystemLibrary.GetMinYResolutionForUI
struct FGetMinYResolutionForUI
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.NetPushModelHelpers.MarkPropertyDirty
struct FMarkPropertyDirty
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FName PropertyName;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.UniqueNetIdRepl
// Size: 0x30(Inherited: 0x1)
struct FUniqueNetIdRepl : FUniqueNetIdWrapper
{
	char pad_1[31];  // 0x1 (0x1)
	struct TArray<char> ReplicationBytes;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetMathLibrary.FFloor64
struct FFFloor64
{
	double A;  // 0x0 (0x0)
	int64_t ReturnValue;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.AnimBlueprintFunctionData
struct FAnimBlueprintFunctionData
{
	struct TFieldPath<FNone> OutputPoseNodeProperty;  // 0x0 (0x0)
	struct TArray<struct TFieldPath<FNone>> InputPoseNodeProperties;  // 0x20 (0x20)
	struct TArray<struct TFieldPath<FNone>> InputProperties;  // 0x30 (0x30)


}; 
 
 // Function Engine.KismetMathLibrary.FInterpTo_Constant
struct FFInterpTo_Constant
{
	double Current;  // 0x0 (0x0)
	double Target;  // 0x8 (0x8)
	double DeltaTime;  // 0x10 (0x10)
	double InterpSpeed;  // 0x18 (0x18)
	double ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.SceneComponent.GetParentComponents
struct FGetParentComponents
{
	struct TArray<struct USceneComponent*> Parents;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.GetObjectFromPrimaryAssetId
struct FGetObjectFromPrimaryAssetId
{
	struct FPrimaryAssetId PrimaryAssetId;  // 0x0 (0x0)
	struct UObject* ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetSystemLibrary.SetWindowTitle
struct FSetWindowTitle
{
	struct FText Title;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.ScreenMessageString
struct FScreenMessageString
{
	uint64_t Key;  // 0x0 (0x0)
	struct FString ScreenMessage;  // 0x8 (0x8)
	struct FColor DisplayColor;  // 0x18 (0x18)
	float TimeToDisplay;  // 0x1C (0x1C)
	float CurrentTimeDisplayed;  // 0x20 (0x20)
	char pad_36[4];  // 0x24 (0x24)
	struct FVector2D TextScale;  // 0x28 (0x28)


}; 
 
 // Function Engine.KismetSystemLibrary.GetOuterObject
struct FGetOuterObject
{
	struct UObject* Object;  // 0x0 (0x0)
	struct UObject* ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.Actor.GetLifeSpan
struct FGetLifeSpan
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Vector4_Zero
struct FVector4_Zero
{
	struct FVector4 ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkinnedMeshComponent.ClearSkinWeightOverride
struct FClearSkinWeightOverride
{
	int32_t LODIndex;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.GetPathName
struct FGetPathName
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FString ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.GreaterGreater_VectorRotator
struct FGreaterGreater_VectorRotator
{
	struct FVector A;  // 0x0 (0x0)
	struct FRotator B;  // 0x18 (0x18)
	struct FVector ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.ProjectileMovementComponent.IsInterpolationComplete
struct FIsInterpolationComplete
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineComponent.GetRotationAtSplineInputKey
struct FGetRotationAtSplineInputKey
{
	float InKey;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)
	struct FRotator ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetSystemLibrary.GetPlatformUserDir
struct FGetPlatformUserDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMeshComponent.SetAllMotorsAngularVelocityDrive
struct FSetAllMotorsAngularVelocityDrive
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bEnableSwingDrive : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool bEnableTwistDrive : 1;  // 0x1 (0x1)
	char pad_2_1 : 7;  // 0x2 (0x2)
	bool bSkipCustomPhysicsType : 1;  // 0x2 (0x2)


}; 
 
 // Function Engine.KismetInputLibrary.PointerEvent_GetTouchpadIndex
struct FPointerEvent_GetTouchpadIndex
{
	struct FPointerEvent Input;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x98 (0x98)
	char pad_156[4];  // 0x9C (0x9C)


}; 
 
 // Function Engine.SceneComponent.K2_AddWorldOffset
struct FK2_AddWorldOffset
{
	struct FVector DeltaLocation;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bSweep : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)
	struct FHitResult SweepHitResult;  // 0x20 (0x20)
	char pad_264_1 : 7;  // 0x108 (0x108)
	bool bTeleport : 1;  // 0x108 (0x108)
	char pad_265[7];  // 0x109 (0x109)


}; 
 
 // Function Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreComponents
struct FCopyArrayOfMoveIgnoreComponents
{
	struct TArray<struct UPrimitiveComponent*> ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.K2_AddActorLocalOffset
struct FK2_AddActorLocalOffset
{
	struct FVector DeltaLocation;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bSweep : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)
	struct FHitResult SweepHitResult;  // 0x20 (0x20)
	char pad_264_1 : 7;  // 0x108 (0x108)
	bool bTeleport : 1;  // 0x108 (0x108)
	char pad_265[7];  // 0x109 (0x109)


}; 
 
 // Function Engine.KismetSystemLibrary.GetPrimaryAssetIdFromObject
struct FGetPrimaryAssetIdFromObject
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FPrimaryAssetId ReturnValue;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.CurvePayload
// Size: 0x10(Inherited: 0x1)
struct FCurvePayload : FEmptyPayload
{
	struct FAnimationCurveIdentifier Identifier;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.SeedRandomStream
struct FSeedRandomStream
{
	struct FRandomStream Stream;  // 0x0 (0x0)


}; 
 
 // Function Engine.ParticleSystemComponent.BeginTrails
struct FBeginTrails
{
	struct FName InFirstSocketName;  // 0x0 (0x0)
	struct FName InSecondSocketName;  // 0x8 (0x8)
	enum class ETrailWidthMode InWidthMode;  // 0x10 (0x10)
	char pad_17[3];  // 0x11 (0x11)
	float InWidth;  // 0x14 (0x14)


}; 
 
 // ScriptStruct Engine.MinimalViewInfo
struct FMinimalViewInfo
{
	struct FVector Location;  // 0x0 (0x0)
	struct FRotator Rotation;  // 0x18 (0x18)
	float FOV;  // 0x30 (0x30)
	float DesiredFOV;  // 0x34 (0x34)
	float OrthoWidth;  // 0x38 (0x38)
	float OrthoNearClipPlane;  // 0x3C (0x3C)
	float OrthoFarClipPlane;  // 0x40 (0x40)
	float PerspectiveNearClipPlane;  // 0x44 (0x44)
	float AspectRatio;  // 0x48 (0x48)
	char bConstrainAspectRatio : 1;  // 0x4C (0x4C)
	char bUseFieldOfViewForLOD : 1;  // 0x4C (0x4C)
	char pad_76_1 : 6;  // 0x4C (0x4C)
	char pad_77[4];  // 0x4D (0x4D)
	enum class ECameraProjectionMode ProjectionMode;  // 0x50 (0x50)
	char pad_81[3];  // 0x51 (0x51)
	float PostProcessBlendWeight;  // 0x54 (0x54)
	char pad_88[8];  // 0x58 (0x58)
	struct FPostProcessSettings PostProcessSettings;  // 0x60 (0x60)
	struct FVector2D OffCenterProjectionOffset;  // 0x740 (0x740)
	char pad_1872[112];  // 0x750 (0x750)


}; 
 
 // Function Engine.KismetSystemLibrary.SetColorPropertyByName
struct FSetColorPropertyByName
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FName PropertyName;  // 0x8 (0x8)
	struct FColor Value;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)


}; 
 
 // Function Engine.KismetSystemLibrary.GetPrimaryAssetIdFromSoftClassReference
struct FGetPrimaryAssetIdFromSoftClassReference
{
	struct TSoftClassPtr<UObject> SoftClassReference;  // 0x0 (0x0)
	struct FPrimaryAssetId ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.KismetSystemLibrary.SetSuppressViewportTransitionMessage
struct FSetSuppressViewportTransitionMessage
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bState : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.GameplayStatics.GetAccurateRealTime
struct FGetAccurateRealTime
{
	int32_t Seconds;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	double PartialSeconds;  // 0x8 (0x8)


}; 
 
 // Function Engine.SplineComponent.GetWorldLocationAtSplinePoint
struct FGetWorldLocationAtSplinePoint
{
	int32_t PointIndex;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.AnimSingleNodeInstance.SetPositionWithPreviousTime
struct FSetPositionWithPreviousTime
{
	float InPosition;  // 0x0 (0x0)
	float InPreviousTime;  // 0x4 (0x4)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bFireNotifies : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.GameplayStatics.GetPlayerPawn
struct FGetPlayerPawn
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	int32_t PlayerIndex;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)
	struct APawn* ReturnValue;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.StreamableTexture
struct FStreamableTexture
{
	char pad_0[1];  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector2
struct FSetCustomPrimitiveDataVector2
{
	int32_t DataIndex;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector2D Value;  // 0x8 (0x8)


}; 
 
 // Function Engine.PlayerController.ServerAcknowledgePossession
struct FServerAcknowledgePossession
{
	struct APawn* P;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.GetPrimaryAssetIdList
struct FGetPrimaryAssetIdList
{
	struct FPrimaryAssetType PrimaryAssetType;  // 0x0 (0x0)
	struct TArray<struct FPrimaryAssetId> OutPrimaryAssetIdList;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetSystemLibrary.GetProjectContentDirectory
struct FGetProjectContentDirectory
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.MaterialInstanceDynamic.InitializeScalarParameterAndGetIndex
struct FInitializeScalarParameterAndGetIndex
{
	struct FName ParameterName;  // 0x0 (0x0)
	float Value;  // 0x8 (0x8)
	int32_t OutParameterIndex;  // 0xC (0xC)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[3];  // 0x11 (0x11)


}; 
 
 // ScriptStruct Engine.BoneSocketTarget
struct FBoneSocketTarget
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bUseSocket : 1;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	struct FBoneReference BoneReference;  // 0x4 (0x4)
	char pad_20[12];  // 0x14 (0x14)
	struct FSocketReference SocketReference;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetSystemLibrary.GetRenderingDetailMode
struct FGetRenderingDetailMode
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SceneComponent.GetAllSocketNames
struct FGetAllSocketNames
{
	struct TArray<struct FName> ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.GetRenderingMaterialQualityLevel
struct FGetRenderingMaterialQualityLevel
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.GetSoftClassReferenceFromPrimaryAssetId
struct FGetSoftClassReferenceFromPrimaryAssetId
{
	struct FPrimaryAssetId PrimaryAssetId;  // 0x0 (0x0)
	struct TSoftClassPtr<UObject> ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.PrimitiveComponent.GetPhysicsLinearVelocityAtPoint
struct FGetPhysicsLinearVelocityAtPoint
{
	struct FVector Point;  // 0x0 (0x0)
	struct FName BoneName;  // 0x18 (0x18)
	struct FVector ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.PlayerInput.InvertAxisKey
struct FInvertAxisKey
{
	struct FKey AxisKey;  // 0x0 (0x0)


}; 
 
 // Function Engine.LocalLightComponent.SetIntensityUnits
struct FSetIntensityUnits
{
	uint8_t NewIntensityUnits;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.RPCDoSState
struct FRPCDoSState
{
	char pad_0[8];  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bLogEscalate : 1;  // 0x8 (0x8)
	char pad_9_1 : 7;  // 0x9 (0x9)
	bool bSendEscalateAnalytics : 1;  // 0x9 (0x9)
	char pad_10_1 : 7;  // 0xA (0xA)
	bool bKickPlayer : 1;  // 0xA (0xA)
	char pad_11_1 : 7;  // 0xB (0xB)
	bool bTrackRecentRPCs : 1;  // 0xB (0xB)
	int16_t EscalateQuotaRPCsPerFrame;  // 0xC (0xC)
	int16_t EscalateTimeQuotaMSPerFrame;  // 0xE (0xE)
	int16_t EscalateQuotaRPCsPerPeriod;  // 0x10 (0x10)
	int16_t EscalateTimeQuotaMSPerPeriod;  // 0x12 (0x12)
	int8_t EscalateQuotaTimePeriod;  // 0x14 (0x14)
	int8_t EscalationCountTolerance;  // 0x15 (0x15)
	int16_t EscalationTimeToleranceMS;  // 0x16 (0x16)
	int16_t RPCRepeatLimitPerPeriod;  // 0x18 (0x18)
	int16_t RPCRepeatLimitMSPerPeriod;  // 0x1A (0x1A)
	int8_t RPCRepeatLimitTimePeriod;  // 0x1C (0x1C)
	char pad_29[1];  // 0x1D (0x1D)
	int16_t CooloffTime;  // 0x1E (0x1E)
	int16_t AutoEscalateTime;  // 0x20 (0x20)
	char pad_34[38];  // 0x22 (0x22)


}; 
 
 // Function Engine.KismetSystemLibrary.GetSoftObjectPath
struct FGetSoftObjectPath
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FSoftObjectPath ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetSystemLibrary.GetSoftObjectReferenceFromPrimaryAssetId
struct FGetSoftObjectReferenceFromPrimaryAssetId
{
	struct FPrimaryAssetId PrimaryAssetId;  // 0x0 (0x0)
	struct TSoftObjectPtr<UObject> ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.GameUserSettings.SetAudioQualityLevel
struct FSetAudioQualityLevel
{
	int32_t QualityLevel;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkinnedMeshComponent.GetParentBone
struct FGetParentBone
{
	struct FName BoneName;  // 0x0 (0x0)
	struct FName ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.Character.RootMotionDebugClientPrintOnScreen
struct FRootMotionDebugClientPrintOnScreen
{
	struct FString InString;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.GetSystemPath
struct FGetSystemPath
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FString ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.Actor.SetRayTracingGroupId
struct FSetRayTracingGroupId
{
	int32_t InRaytracingGroupId;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.HasMultipleLocalPlayers
struct FHasMultipleLocalPlayers
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // ScriptStruct Engine.DialogueWaveParameter
struct FDialogueWaveParameter
{
	struct UDialogueWave* DialogueWave;  // 0x0 (0x0)
	struct FDialogueContext Context;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.ExposureSettings
struct FExposureSettings
{
	float FixedEV100;  // 0x0 (0x0)
	char pad_4_1 : 7;  // 0x4 (0x4)
	bool bFixed : 1;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)


}; 
 
 // ScriptStruct Engine.CachedAnimRelevancyData
struct FCachedAnimRelevancyData
{
	struct FName StateMachineName;  // 0x0 (0x0)
	struct FName StateName;  // 0x8 (0x8)
	char pad_16[12];  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetSystemLibrary.IsDedicatedServer
struct FIsDedicatedServer
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.KismetMathLibrary.BreakVector_NetQuantize10
struct FBreakVector_NetQuantize10
{
	struct FVector_NetQuantize10 InVec;  // 0x0 (0x0)
	double X;  // 0x18 (0x18)
	double Y;  // 0x20 (0x20)
	double Z;  // 0x28 (0x28)


}; 
 
 // Function Engine.KismetSystemLibrary.IsInterstitialAdRequested
struct FIsInterstitialAdRequested
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.IsPackagedForDistribution
struct FIsPackagedForDistribution
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.IsLoggedIn
struct FIsLoggedIn
{
	struct APlayerController* SpecificPlayer;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.KismetMathLibrary.ClampAxes2D
struct FClampAxes2D
{
	struct FVector2D A;  // 0x0 (0x0)
	double MinAxisVal;  // 0x10 (0x10)
	double MaxAxisVal;  // 0x18 (0x18)
	struct FVector2D ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.Emitter.SetActorParameter
struct FSetActorParameter
{
	struct FName ParameterName;  // 0x0 (0x0)
	struct AActor* Param;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.MakeRotFromYZ
struct FMakeRotFromYZ
{
	struct FVector Y;  // 0x0 (0x0)
	struct FVector Z;  // 0x18 (0x18)
	struct FRotator ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.KismetSystemLibrary.IsScreensaverEnabled
struct FIsScreensaverEnabled
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.WasInputKeyJustPressed
struct FWasInputKeyJustPressed
{
	struct FKey Key;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool ReturnValue : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.KismetSystemLibrary.SetRotatorPropertyByName
struct FSetRotatorPropertyByName
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FName PropertyName;  // 0x8 (0x8)
	struct FRotator Value;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.GetMinute
struct FGetMinute
{
	struct FDateTime A;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.SphereComponent.GetScaledSphereRadius
struct FGetScaledSphereRadius
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.HUD.DrawMaterialTriangle
struct FDrawMaterialTriangle
{
	struct UMaterialInterface* Material;  // 0x0 (0x0)
	struct FVector2D V0_Pos;  // 0x8 (0x8)
	struct FVector2D V1_Pos;  // 0x18 (0x18)
	struct FVector2D V2_Pos;  // 0x28 (0x28)
	struct FVector2D V0_UV;  // 0x38 (0x38)
	struct FVector2D V1_UV;  // 0x48 (0x48)
	struct FVector2D V2_UV;  // 0x58 (0x58)
	struct FLinearColor V0_Color;  // 0x68 (0x68)
	struct FLinearColor V1_Color;  // 0x78 (0x78)
	struct FLinearColor V2_Color;  // 0x88 (0x88)


}; 
 
 // Function Engine.KismetSystemLibrary.IsServer
struct FIsServer
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.TypedElementWorldInterface.GetPivotOffset
struct FGetPivotOffset
{
	struct FScriptTypedElementHandle InElementHandle;  // 0x0 (0x0)
	struct FVector OutPivotOffset;  // 0x8 (0x8)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // ScriptStruct Engine.SkelMeshSkinWeightInfo
struct FSkelMeshSkinWeightInfo
{
	int32_t Bones[c];  // 0x0 (0x0)
	char Weights[c];  // 0x30 (0x30)


}; 
 
 // Function Engine.KismetSystemLibrary.IsStandalone
struct FIsStandalone
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // SparseDelegateFunction Engine.ActorEndPlaySignature__DelegateSignature
struct FActorEndPlaySignature__DelegateSignature
{
	struct AActor* Actor;  // 0x0 (0x0)
	enum class EEndPlayReason EndPlayReason;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.KismetMathLibrary.GetAbs2D
struct FGetAbs2D
{
	struct FVector2D A;  // 0x0 (0x0)
	struct FVector2D ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_UnwindEuler
struct FVector_UnwindEuler
{
	struct FVector A;  // 0x0 (0x0)


}; 
 
 // Function Engine.CharacterMovementComponent.AddImpulse
struct FAddImpulse
{
	struct FVector Impulse;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bVelocityChange : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.KismetSystemLibrary.K2_SetTimerDelegate
struct FK2_SetTimerDelegate
{
	struct FDelegate Delegate;  // 0x0 (0x0)
	float Time;  // 0x10 (0x10)
	char pad_20_1 : 7;  // 0x14 (0x14)
	bool bLooping : 1;  // 0x14 (0x14)
	char pad_21[3];  // 0x15 (0x15)
	float InitialStartDelay;  // 0x18 (0x18)
	float InitialStartDelayVariance;  // 0x1C (0x1C)
	struct FTimerHandle ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.PrimitiveComponent.AddAngularImpulseInDegrees
struct FAddAngularImpulseInDegrees
{
	struct FVector Impulse;  // 0x0 (0x0)
	struct FName BoneName;  // 0x18 (0x18)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool bVelChange : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.SkeletalMeshComponent.GetIntegerAttribute_Ref
struct FGetIntegerAttribute_Ref
{
	struct FName BoneName;  // 0x0 (0x0)
	struct FName AttributeName;  // 0x8 (0x8)
	int32_t OutValue;  // 0x10 (0x10)
	uint8_t LookupType;  // 0x14 (0x14)
	char pad_21_1 : 7;  // 0x15 (0x15)
	bool ReturnValue : 1;  // 0x15 (0x15)
	char pad_22[2];  // 0x16 (0x16)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_VectorToVector2D
struct FConv_VectorToVector2D
{
	struct FVector InVector;  // 0x0 (0x0)
	struct FVector2D ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetSystemLibrary.IsUnattended
struct FIsUnattended
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.AnimNodeFunctionRef
struct FAnimNodeFunctionRef
{
	struct FName ClassName;  // 0x0 (0x0)
	struct FName FunctionName;  // 0x8 (0x8)
	 Class;  // 0x10 (0x10)
	struct UFunction* Function;  // 0x18 (0x18)


}; 
 
 // Function Engine.AnimationCurveIdentifierExtensions.IsValid
struct FIsValid
{
	struct FAnimationCurveIdentifier Identifier;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[3];  // 0x11 (0x11)


}; 
 
 // Function Engine.TypedElementWorldInterface.GetRelativeTransform
struct FGetRelativeTransform
{
	struct FScriptTypedElementHandle InElementHandle;  // 0x0 (0x0)
	char pad_8[8];  // 0x8 (0x8)
	struct FTransform OutTransform;  // 0x10 (0x10)
	char pad_112_1 : 7;  // 0x70 (0x70)
	bool ReturnValue : 1;  // 0x70 (0x70)
	char pad_113[15];  // 0x71 (0x71)


}; 
 
 // Function Engine.KismetSystemLibrary.IsValidClass
struct FIsValidClass
{
	UObject* Class;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.SplineComponent.FindScaleClosestToWorldLocation
struct FFindScaleClosestToWorldLocation
{
	struct FVector WorldLocation;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetSystemLibrary.K2_ClearAndInvalidateTimerHandle
struct FK2_ClearAndInvalidateTimerHandle
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FTimerHandle Handle;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.TimerHandle
struct FTimerHandle
{
	uint64_t Handle;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMesh.SetMaterials
struct FSetMaterials
{
	struct TArray<struct FSkeletalMaterial> InMaterials;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.K2_ClearTimer
struct FK2_ClearTimer
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FString FunctionName;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.ObjectCookedMetaDataStore
struct FObjectCookedMetaDataStore
{
	struct TMap<struct FName, struct FString> ObjectMetaData;  // 0x0 (0x0)


}; 
 
 // DelegateFunction Engine.PlatformGameInstance.PlatformReceivedLocalNotificationDelegate__DelegateSignature
struct FPlatformReceivedLocalNotificationDelegate__DelegateSignature
{
	struct FString InString;  // 0x0 (0x0)
	int32_t inInt;  // 0x10 (0x10)
	enum class EApplicationState inAppState;  // 0x14 (0x14)
	char pad_21[3];  // 0x15 (0x15)


}; 
 
 // Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTime
struct FK2_GetTimerElapsedTime
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FString FunctionName;  // 0x8 (0x8)
	float ReturnValue;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)


}; 
 
 // Function Engine.Exporter.RunAssetExportTasks
struct FRunAssetExportTasks
{
	struct TArray<struct UAssetExportTask*> ExportTasks;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.Actor.GetOverlappingComponents
struct FGetOverlappingComponents
{
	struct TArray<struct UPrimitiveComponent*> OverlappingComponents;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetStringLibrary.GetCharacterArrayFromString
struct FGetCharacterArrayFromString
{
	struct FString SourceString;  // 0x0 (0x0)
	struct TArray<struct FString> ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeDelegate
struct FK2_GetTimerRemainingTimeDelegate
{
	struct FDelegate Delegate;  // 0x0 (0x0)
	float ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeHandle
struct FK2_GetTimerRemainingTimeHandle
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FTimerHandle Handle;  // 0x8 (0x8)
	float ReturnValue;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)


}; 
 
 // Function Engine.KismetInputLibrary.Key_IsModifierKey
struct FKey_IsModifierKey
{
	struct FKey Key;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool ReturnValue : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // ScriptStruct Engine.LocalSpacePose
struct FLocalSpacePose
{
	struct TArray<struct FTransform> Transforms;  // 0x0 (0x0)
	struct TArray<struct FName> Names;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetSystemLibrary.K2_IsTimerActiveDelegate
struct FK2_IsTimerActiveDelegate
{
	struct FDelegate Delegate;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[3];  // 0x11 (0x11)


}; 
 
 // Function Engine.KismetMathLibrary.Abs
struct FAbs
{
	double A;  // 0x0 (0x0)
	double ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.LODActor.OnSubActorEndPlay
struct FOnSubActorEndPlay
{
	struct AActor* Actor;  // 0x0 (0x0)
	enum class EEndPlayReason Reason;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.KismetStringTableLibrary.GetTableEntryMetaData
struct FGetTableEntryMetaData
{
	struct FName TableId;  // 0x0 (0x0)
	struct FString Key;  // 0x8 (0x8)
	struct FName MetaDataId;  // 0x18 (0x18)
	struct FString ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetStringLibrary.RightPad
struct FRightPad
{
	struct FString SourceString;  // 0x0 (0x0)
	int32_t ChCount;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)
	struct FString ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetSystemLibrary.K2_IsTimerActiveHandle
struct FK2_IsTimerActiveHandle
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FTimerHandle Handle;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.SkeletalMeshComponent.SetUpdateAnimationInEditor
struct FSetUpdateAnimationInEditor
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool NewUpdateState : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.EnableInput
struct FEnableInput
{
	struct APlayerController* PlayerController;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPathsLibrary.EnginePluginsDir
struct FEnginePluginsDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimSingleNodeInstance.SetPosition
struct FSetPosition
{
	float InPosition;  // 0x0 (0x0)
	char pad_4_1 : 7;  // 0x4 (0x4)
	bool bFireNotifies : 1;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)


}; 
 
 // SparseDelegateFunction Engine.ComponentSleepSignature__DelegateSignature
struct FComponentSleepSignature__DelegateSignature
{
	struct UPrimitiveComponent* SleepingComponent;  // 0x0 (0x0)
	struct FName BoneName;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.KeyHandleLookupTable
struct FKeyHandleLookupTable
{
	char pad_0[136];  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.K2_AddActorWorldOffset
struct FK2_AddActorWorldOffset
{
	struct FVector DeltaLocation;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bSweep : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)
	struct FHitResult SweepHitResult;  // 0x20 (0x20)
	char pad_264_1 : 7;  // 0x108 (0x108)
	bool bTeleport : 1;  // 0x108 (0x108)
	char pad_265[7];  // 0x109 (0x109)


}; 
 
 // Function Engine.KismetSystemLibrary.K2_IsTimerPaused
struct FK2_IsTimerPaused
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FString FunctionName;  // 0x8 (0x8)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool ReturnValue : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.KismetSystemLibrary.K2_IsTimerPausedDelegate
struct FK2_IsTimerPausedDelegate
{
	struct FDelegate Delegate;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[3];  // 0x11 (0x11)


}; 
 
 // Function Engine.Actor.GetInstigatorController
struct FGetInstigatorController
{
	struct AController* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.LessEqual_IntInt
struct FLessEqual_IntInt
{
	int32_t A;  // 0x0 (0x0)
	int32_t B;  // 0x4 (0x4)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.KismetSystemLibrary.K2_IsValidTimerHandle
struct FK2_IsValidTimerHandle
{
	struct FTimerHandle Handle;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.PlayerController.GetInputTouchState
struct FGetInputTouchState
{
	enum class ETouchIndex FingerIndex;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	float LocationX;  // 0x4 (0x4)
	float LocationY;  // 0x8 (0x8)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bIsCurrentlyPressed : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)


}; 
 
 // Function Engine.KismetMathLibrary.Xor_Int64Int64
struct FXor_Int64Int64
{
	int64_t A;  // 0x0 (0x0)
	int64_t B;  // 0x8 (0x8)
	int64_t ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.SplineComponent.GetVectorPropertyAtSplinePoint
struct FGetVectorPropertyAtSplinePoint
{
	int32_t Index;  // 0x0 (0x0)
	struct FName PropertyName;  // 0x4 (0x4)
	char pad_12[4];  // 0xC (0xC)
	struct FVector ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetSystemLibrary.K2_PauseTimerDelegate
struct FK2_PauseTimerDelegate
{
	struct FDelegate Delegate;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetInputLibrary.GetAnalogValue
struct FGetAnalogValue
{
	struct FAnalogInputEvent Input;  // 0x0 (0x0)
	float ReturnValue;  // 0x48 (0x48)
	char pad_76[4];  // 0x4C (0x4C)


}; 
 
 // Function Engine.KismetSystemLibrary.K2_PauseTimerHandle
struct FK2_PauseTimerHandle
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FTimerHandle Handle;  // 0x8 (0x8)


}; 
 
 // Function Engine.SplineComponent.SetDrawDebug
struct FSetDrawDebug
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bShow : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.SphereTraceSingleForObjects
struct FSphereTraceSingleForObjects
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector Start;  // 0x8 (0x8)
	struct FVector End;  // 0x20 (0x20)
	float Radius;  // 0x38 (0x38)
	char pad_60[4];  // 0x3C (0x3C)
	struct TArray<enum class EObjectTypeQuery> ObjectTypes;  // 0x40 (0x40)
	char pad_80_1 : 7;  // 0x50 (0x50)
	bool bTraceComplex : 1;  // 0x50 (0x50)
	char pad_81[7];  // 0x51 (0x51)
	struct TArray<struct AActor*> ActorsToIgnore;  // 0x58 (0x58)
	enum class EDrawDebugTrace DrawDebugType;  // 0x68 (0x68)
	char pad_105[7];  // 0x69 (0x69)
	struct FHitResult OutHit;  // 0x70 (0x70)
	char pad_344_1 : 7;  // 0x158 (0x158)
	bool bIgnoreSelf : 1;  // 0x158 (0x158)
	char pad_345[3];  // 0x159 (0x159)
	struct FLinearColor TraceColor;  // 0x15C (0x15C)
	struct FLinearColor TraceHitColor;  // 0x16C (0x16C)
	float DrawTime;  // 0x17C (0x17C)
	char pad_384_1 : 7;  // 0x180 (0x180)
	bool ReturnValue : 1;  // 0x180 (0x180)
	char pad_385[7];  // 0x181 (0x181)


}; 
 
 // Function Engine.KismetSystemLibrary.K2_SetTimerForNextTick
struct FK2_SetTimerForNextTick
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FString FunctionName;  // 0x8 (0x8)
	struct FTimerHandle ReturnValue;  // 0x18 (0x18)


}; 
 
 // ScriptStruct Engine.AnimNode_Root
// Size: 0x20(Inherited: 0x10)
struct FAnimNode_Root : FAnimNode_Base
{
	struct FPoseLink Result;  // 0x10 (0x10)


}; 
 
 // Function Engine.PlayerController.ProjectWorldLocationToScreen
struct FProjectWorldLocationToScreen
{
	struct FVector WorldLocation;  // 0x0 (0x0)
	struct FVector2D ScreenLocation;  // 0x18 (0x18)
	char pad_40_1 : 7;  // 0x28 (0x28)
	bool bPlayerViewportRelative : 1;  // 0x28 (0x28)
	char pad_41_1 : 7;  // 0x29 (0x29)
	bool ReturnValue : 1;  // 0x29 (0x29)
	char pad_42[6];  // 0x2A (0x2A)


}; 
 
 // Function Engine.SplineComponent.GetRightVectorAtTime
struct FGetRightVectorAtTime
{
	float Time;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x4 (0x4)
	char pad_5_1 : 7;  // 0x5 (0x5)
	bool bUseConstantVelocity : 1;  // 0x5 (0x5)
	char pad_6[2];  // 0x6 (0x6)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetInputLibrary.EqualEqual_KeyKey
struct FEqualEqual_KeyKey
{
	struct FKey A;  // 0x0 (0x0)
	struct FKey B;  // 0x18 (0x18)
	char pad_48_1 : 7;  // 0x30 (0x30)
	bool ReturnValue : 1;  // 0x30 (0x30)
	char pad_49[7];  // 0x31 (0x31)


}; 
 
 // Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamicFromMaterial
struct FCreateAndSetMaterialInstanceDynamicFromMaterial
{
	int32_t ElementIndex;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct UMaterialInterface* Parent;  // 0x8 (0x8)
	struct UMaterialInstanceDynamic* ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.GetMinutes
struct FGetMinutes
{
	struct FTimespan A;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.KismetSystemLibrary.K2_SetTimerForNextTickDelegate
struct FK2_SetTimerForNextTickDelegate
{
	struct FDelegate Delegate;  // 0x0 (0x0)
	struct FTimerHandle ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.GameModeBase.K2_PostLogin
struct FK2_PostLogin
{
	struct APlayerController* NewPlayer;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.BakedAnimationStateMachine
struct FBakedAnimationStateMachine
{
	struct FName MachineName;  // 0x0 (0x0)
	int32_t InitialState;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)
	struct TArray<struct FBakedAnimationState> States;  // 0x10 (0x10)
	struct TArray<struct FAnimationTransitionBetweenStates> Transitions;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetSystemLibrary.K2_TimerExistsHandle
struct FK2_TimerExistsHandle
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FTimerHandle Handle;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.SkinnedMeshComponent.GetRefPosePosition
struct FGetRefPosePosition
{
	int32_t BoneIndex;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetSystemLibrary.K2_UnPauseTimerDelegate
struct FK2_UnPauseTimerDelegate
{
	struct FDelegate Delegate;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.BlueprintInputAxisKeyDelegateBinding
// Size: 0x28(Inherited: 0x4)
struct FBlueprintInputAxisKeyDelegateBinding : FBlueprintInputDelegateBinding
{
	char pad_4[4];  // 0x4 (0x4)
	struct FKey AxisKey;  // 0x8 (0x8)
	struct FName FunctionNameToBind;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetSystemLibrary.K2_UnPauseTimerHandle
struct FK2_UnPauseTimerHandle
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FTimerHandle Handle;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.SimulatedRootMotionReplicatedMove
struct FSimulatedRootMotionReplicatedMove
{
	float Time;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FRepRootMotionMontage RootMotion;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.PointDamageEvent
// Size: 0x118(Inherited: 0x10)
struct FPointDamageEvent : FDamageEvent
{
	float Damage;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)
	struct FVector_NetQuantizeNormal ShotDirection;  // 0x18 (0x18)
	struct FHitResult HitInfo;  // 0x30 (0x30)


}; 
 
 // Function Engine.KismetMathLibrary.AverageOfIntArray
struct FAverageOfIntArray
{
	struct TArray<int32_t> IntArray;  // 0x0 (0x0)
	float AverageValue;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)


}; 
 
 // Function Engine.KismetSystemLibrary.LineTraceMulti
struct FLineTraceMulti
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector Start;  // 0x8 (0x8)
	struct FVector End;  // 0x20 (0x20)
	enum class ETraceTypeQuery TraceChannel;  // 0x38 (0x38)
	char pad_57_1 : 7;  // 0x39 (0x39)
	bool bTraceComplex : 1;  // 0x39 (0x39)
	char pad_58[6];  // 0x3A (0x3A)
	struct TArray<struct AActor*> ActorsToIgnore;  // 0x40 (0x40)
	enum class EDrawDebugTrace DrawDebugType;  // 0x50 (0x50)
	char pad_81[7];  // 0x51 (0x51)
	struct TArray<struct FHitResult> OutHits;  // 0x58 (0x58)
	char pad_104_1 : 7;  // 0x68 (0x68)
	bool bIgnoreSelf : 1;  // 0x68 (0x68)
	char pad_105[3];  // 0x69 (0x69)
	struct FLinearColor TraceColor;  // 0x6C (0x6C)
	struct FLinearColor TraceHitColor;  // 0x7C (0x7C)
	float DrawTime;  // 0x8C (0x8C)
	char pad_144_1 : 7;  // 0x90 (0x90)
	bool ReturnValue : 1;  // 0x90 (0x90)
	char pad_145[7];  // 0x91 (0x91)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_CosineAngle2D
struct FVector_CosineAngle2D
{
	struct FVector A;  // 0x0 (0x0)
	struct FVector B;  // 0x18 (0x18)
	double ReturnValue;  // 0x30 (0x30)


}; 
 
 // DelegateFunction Engine.ProjectileMovementComponent.OnProjectileBounceDelegate__DelegateSignature
struct FOnProjectileBounceDelegate__DelegateSignature
{
	struct FHitResult ImpactResult;  // 0x0 (0x0)
	struct FVector ImpactVelocity;  // 0xE8 (0xE8)


}; 
 
 // Function Engine.KismetSystemLibrary.LineTraceMultiByProfile
struct FLineTraceMultiByProfile
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector Start;  // 0x8 (0x8)
	struct FVector End;  // 0x20 (0x20)
	struct FName ProfileName;  // 0x38 (0x38)
	char pad_64_1 : 7;  // 0x40 (0x40)
	bool bTraceComplex : 1;  // 0x40 (0x40)
	char pad_65[7];  // 0x41 (0x41)
	struct TArray<struct AActor*> ActorsToIgnore;  // 0x48 (0x48)
	enum class EDrawDebugTrace DrawDebugType;  // 0x58 (0x58)
	char pad_89[7];  // 0x59 (0x59)
	struct TArray<struct FHitResult> OutHits;  // 0x60 (0x60)
	char pad_112_1 : 7;  // 0x70 (0x70)
	bool bIgnoreSelf : 1;  // 0x70 (0x70)
	char pad_113[3];  // 0x71 (0x71)
	struct FLinearColor TraceColor;  // 0x74 (0x74)
	struct FLinearColor TraceHitColor;  // 0x84 (0x84)
	float DrawTime;  // 0x94 (0x94)
	char pad_152_1 : 7;  // 0x98 (0x98)
	bool ReturnValue : 1;  // 0x98 (0x98)
	char pad_153[7];  // 0x99 (0x99)


}; 
 
 // Function Engine.KismetSystemLibrary.LineTraceMultiForObjects
struct FLineTraceMultiForObjects
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector Start;  // 0x8 (0x8)
	struct FVector End;  // 0x20 (0x20)
	struct TArray<enum class EObjectTypeQuery> ObjectTypes;  // 0x38 (0x38)
	char pad_72_1 : 7;  // 0x48 (0x48)
	bool bTraceComplex : 1;  // 0x48 (0x48)
	char pad_73[7];  // 0x49 (0x49)
	struct TArray<struct AActor*> ActorsToIgnore;  // 0x50 (0x50)
	enum class EDrawDebugTrace DrawDebugType;  // 0x60 (0x60)
	char pad_97[7];  // 0x61 (0x61)
	struct TArray<struct FHitResult> OutHits;  // 0x68 (0x68)
	char pad_120_1 : 7;  // 0x78 (0x78)
	bool bIgnoreSelf : 1;  // 0x78 (0x78)
	char pad_121[3];  // 0x79 (0x79)
	struct FLinearColor TraceColor;  // 0x7C (0x7C)
	struct FLinearColor TraceHitColor;  // 0x8C (0x8C)
	float DrawTime;  // 0x9C (0x9C)
	char pad_160_1 : 7;  // 0xA0 (0xA0)
	bool ReturnValue : 1;  // 0xA0 (0xA0)
	char pad_161[7];  // 0xA1 (0xA1)


}; 
 
 // ScriptStruct Engine.SpriteCategoryInfo
struct FSpriteCategoryInfo
{
	struct FName Category;  // 0x0 (0x0)
	struct FText DisplayName;  // 0x8 (0x8)
	struct FText Description;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetSystemLibrary.LineTraceSingle
struct FLineTraceSingle
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector Start;  // 0x8 (0x8)
	struct FVector End;  // 0x20 (0x20)
	enum class ETraceTypeQuery TraceChannel;  // 0x38 (0x38)
	char pad_57_1 : 7;  // 0x39 (0x39)
	bool bTraceComplex : 1;  // 0x39 (0x39)
	char pad_58[6];  // 0x3A (0x3A)
	struct TArray<struct AActor*> ActorsToIgnore;  // 0x40 (0x40)
	enum class EDrawDebugTrace DrawDebugType;  // 0x50 (0x50)
	char pad_81[7];  // 0x51 (0x51)
	struct FHitResult OutHit;  // 0x58 (0x58)
	char pad_320_1 : 7;  // 0x140 (0x140)
	bool bIgnoreSelf : 1;  // 0x140 (0x140)
	char pad_321[3];  // 0x141 (0x141)
	struct FLinearColor TraceColor;  // 0x144 (0x144)
	struct FLinearColor TraceHitColor;  // 0x154 (0x154)
	float DrawTime;  // 0x164 (0x164)
	char pad_360_1 : 7;  // 0x168 (0x168)
	bool ReturnValue : 1;  // 0x168 (0x168)
	char pad_361[7];  // 0x169 (0x169)


}; 
 
 // Function Engine.KismetSystemLibrary.LineTraceSingleForObjects
struct FLineTraceSingleForObjects
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector Start;  // 0x8 (0x8)
	struct FVector End;  // 0x20 (0x20)
	struct TArray<enum class EObjectTypeQuery> ObjectTypes;  // 0x38 (0x38)
	char pad_72_1 : 7;  // 0x48 (0x48)
	bool bTraceComplex : 1;  // 0x48 (0x48)
	char pad_73[7];  // 0x49 (0x49)
	struct TArray<struct AActor*> ActorsToIgnore;  // 0x50 (0x50)
	enum class EDrawDebugTrace DrawDebugType;  // 0x60 (0x60)
	char pad_97[7];  // 0x61 (0x61)
	struct FHitResult OutHit;  // 0x68 (0x68)
	char pad_336_1 : 7;  // 0x150 (0x150)
	bool bIgnoreSelf : 1;  // 0x150 (0x150)
	char pad_337[3];  // 0x151 (0x151)
	struct FLinearColor TraceColor;  // 0x154 (0x154)
	struct FLinearColor TraceHitColor;  // 0x164 (0x164)
	float DrawTime;  // 0x174 (0x174)
	char pad_376_1 : 7;  // 0x178 (0x178)
	bool ReturnValue : 1;  // 0x178 (0x178)
	char pad_377[7];  // 0x179 (0x179)


}; 
 
 // Function Engine.LightComponent.SetTemperature
struct FSetTemperature
{
	float NewTemperature;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.LoadAsset
struct FLoadAsset
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct TSoftObjectPtr<UObject> Asset;  // 0x8 (0x8)
	struct FDelegate OnLoaded;  // 0x38 (0x38)
	struct FLatentActionInfo LatentInfo;  // 0x48 (0x48)


}; 
 
 // SparseDelegateFunction Engine.ActorOnReleasedSignature__DelegateSignature
struct FActorOnReleasedSignature__DelegateSignature
{
	struct AActor* TouchedActor;  // 0x0 (0x0)
	struct FKey ButtonReleased;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetSystemLibrary.SphereOverlapComponents
struct FSphereOverlapComponents
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector SpherePos;  // 0x8 (0x8)
	float SphereRadius;  // 0x20 (0x20)
	char pad_36[4];  // 0x24 (0x24)
	struct TArray<enum class EObjectTypeQuery> ObjectTypes;  // 0x28 (0x28)
	UObject* ComponentClassFilter;  // 0x38 (0x38)
	struct TArray<struct AActor*> ActorsToIgnore;  // 0x40 (0x40)
	struct TArray<struct UPrimitiveComponent*> OutComponents;  // 0x50 (0x50)
	char pad_96_1 : 7;  // 0x60 (0x60)
	bool ReturnValue : 1;  // 0x60 (0x60)
	char pad_97[7];  // 0x61 (0x61)


}; 
 
 // Function Engine.Controller.Possess
struct FPossess
{
	struct APawn* InPawn;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameUserSettings.GetAudioQualityLevel
struct FGetAudioQualityLevel
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.ForceFeedbackAttenuationSettings
// Size: 0xC0(Inherited: 0xC0)
struct FForceFeedbackAttenuationSettings : FBaseAttenuationSettings
{


}; 
 
 // Function Engine.GameModeBase.InitializeHUDForPlayer
struct FInitializeHUDForPlayer
{
	struct APlayerController* NewPlayer;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimationDataController.UpdateCurveNamesFromSkeleton
struct FUpdateCurveNamesFromSkeleton
{
	struct USkeleton* Skeleton;  // 0x0 (0x0)
	uint8_t SupportedCurveType;  // 0x8 (0x8)
	char pad_9_1 : 7;  // 0x9 (0x9)
	bool bShouldTransact : 1;  // 0x9 (0x9)
	char pad_10[6];  // 0xA (0xA)


}; 
 
 // Function Engine.SceneComponent.DetachFromParent
struct FDetachFromParent
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bMaintainWorldPosition : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool bCallModify : 1;  // 0x1 (0x1)


}; 
 
 // DelegateFunction Engine.KismetSystemLibrary.OnAssetLoaded__DelegateSignature
struct FOnAssetLoaded__DelegateSignature
{
	struct UObject* Loaded;  // 0x0 (0x0)


}; 
 
 // Function Engine.InputComponent.GetControllerAnalogStickState
struct FGetControllerAnalogStickState
{
	enum class EControllerAnalogStick WhichStick;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	float StickX;  // 0x4 (0x4)
	float StickY;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.StateMachineDebugData
struct FStateMachineDebugData
{
	char pad_0[336];  // 0x0 (0x0)


}; 
 
 // DelegateFunction Engine.KismetSystemLibrary.OnAssetClassLoaded__DelegateSignature
struct FOnAssetClassLoaded__DelegateSignature
{
	UObject* Loaded;  // 0x0 (0x0)


}; 
 
 // Function Engine.AtmosphericFogComponent.SetDistanceScale
struct FSetDistanceScale
{
	float NewDistanceScale;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.LoadClassAsset_Blocking
struct FLoadClassAsset_Blocking
{
	struct TSoftClassPtr<UObject> AssetClass;  // 0x0 (0x0)
	UObject* ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.KismetMathLibrary.FMax
struct FFMax
{
	double A;  // 0x0 (0x0)
	double B;  // 0x8 (0x8)
	double ReturnValue;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.RepAttachment
struct FRepAttachment
{
	struct AActor* AttachParent;  // 0x0 (0x0)
	struct FVector_NetQuantize100 LocationOffset;  // 0x8 (0x8)
	struct FVector_NetQuantize100 RelativeScale3D;  // 0x20 (0x20)
	struct FRotator RotationOffset;  // 0x38 (0x38)
	struct FName AttachSocket;  // 0x50 (0x50)
	struct USceneComponent* AttachComponent;  // 0x58 (0x58)


}; 
 
 // Function Engine.PoseableMeshComponent.SetBoneRotationByName
struct FSetBoneRotationByName
{
	struct FName BoneName;  // 0x0 (0x0)
	struct FRotator InRotation;  // 0x8 (0x8)
	enum class EBoneSpaces BoneSpace;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.PoseableMeshComponent.GetBoneTransformByName
struct FGetBoneTransformByName
{
	struct FName BoneName;  // 0x0 (0x0)
	enum class EBoneSpaces BoneSpace;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)
	struct FTransform ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.VisualLoggerKismetLibrary.LogSegment
struct FLogSegment
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector SegmentStart;  // 0x8 (0x8)
	struct FVector SegmentEnd;  // 0x20 (0x20)
	struct FString Text;  // 0x38 (0x38)
	struct FLinearColor ObjectColor;  // 0x48 (0x48)
	float Thickness;  // 0x58 (0x58)
	struct FName CategoryName;  // 0x5C (0x5C)
	char pad_100_1 : 7;  // 0x64 (0x64)
	bool bAddToMessageLog : 1;  // 0x64 (0x64)
	char pad_101[3];  // 0x65 (0x65)


}; 
 
 // Function Engine.KismetSystemLibrary.LoadInterstitialAd
struct FLoadInterstitialAd
{
	int32_t AdIdIndex;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.K2_GetActorRotation
struct FK2_GetActorRotation
{
	struct FRotator ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.FilmStockSettings
struct FFilmStockSettings
{
	float Slope;  // 0x0 (0x0)
	float Toe;  // 0x4 (0x4)
	float Shoulder;  // 0x8 (0x8)
	float BlackClip;  // 0xC (0xC)
	float WhiteClip;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.SimpleMemberReference
struct FSimpleMemberReference
{
	struct UObject* MemberParent;  // 0x0 (0x0)
	struct FName MemberName;  // 0x8 (0x8)
	struct FGuid MemberGuid;  // 0x10 (0x10)


}; 
 
 // Function Engine.PrimitiveComponent.SetVectorParameterForCustomPrimitiveData
struct FSetVectorParameterForCustomPrimitiveData
{
	struct FName ParameterName;  // 0x0 (0x0)
	char pad_8[8];  // 0x8 (0x8)
	struct FVector4 Value;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.DrawToRenderTargetContext
struct FDrawToRenderTargetContext
{
	struct UTextureRenderTarget2D* RenderTarget;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.MakeLiteralBool
struct FMakeLiteralBool
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool Value : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool ReturnValue : 1;  // 0x1 (0x1)


}; 
 
 // Function Engine.KismetSystemLibrary.QuitGame
struct FQuitGame
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct APlayerController* SpecificPlayer;  // 0x8 (0x8)
	enum class EQuitPreference QuitPreference;  // 0x10 (0x10)
	char pad_17_1 : 7;  // 0x11 (0x11)
	bool bIgnorePlatformRestrictions : 1;  // 0x11 (0x11)
	char pad_18[6];  // 0x12 (0x12)


}; 
 
 // Function Engine.PointLightComponent.SetSourceRadius
struct FSetSourceRadius
{
	float bNewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.MakeLiteralByte
struct FMakeLiteralByte
{
	char Value;  // 0x0 (0x0)
	char ReturnValue;  // 0x1 (0x1)


}; 
 
 // Function Engine.AnimInstance.GetRelevantAnimTimeRemainingFraction
struct FGetRelevantAnimTimeRemainingFraction
{
	int32_t MachineIndex;  // 0x0 (0x0)
	int32_t StateIndex;  // 0x4 (0x4)
	float ReturnValue;  // 0x8 (0x8)


}; 
 
 // DelegateFunction Engine.PlatformGameInstance.PlatformStartupArgumentsDelegate__DelegateSignature
struct FPlatformStartupArgumentsDelegate__DelegateSignature
{
	struct TArray<struct FString> StartupArguments;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.CustomAttributePerBoneData
struct FCustomAttributePerBoneData
{
	char pad_0[1];  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.NotEqual_NameName
struct FNotEqual_NameName
{
	struct FName A;  // 0x0 (0x0)
	struct FName B;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[3];  // 0x11 (0x11)


}; 
 
 // ScriptStruct Engine.EncounteredStateMachineStack
struct FEncounteredStateMachineStack
{
	char pad_0[48];  // 0x0 (0x0)


}; 
 
 // Function Engine.ViewportStatsSubsystem.AddTimedDisplay
struct FAddTimedDisplay
{
	struct FText Text;  // 0x0 (0x0)
	struct FLinearColor Color;  // 0x18 (0x18)
	float Duration;  // 0x28 (0x28)
	char pad_44[4];  // 0x2C (0x2C)
	struct FVector2D DisplayOffset;  // 0x30 (0x30)


}; 
 
 // Function Engine.KismetSystemLibrary.MakeLiteralDouble
struct FMakeLiteralDouble
{
	double Value;  // 0x0 (0x0)
	double ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetSystemLibrary.MakeLiteralInt64
struct FMakeLiteralInt64
{
	int64_t Value;  // 0x0 (0x0)
	int64_t ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetSystemLibrary.MakeLiteralName
struct FMakeLiteralName
{
	struct FName Value;  // 0x0 (0x0)
	struct FName ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.AnimInstance.Montage_PlayWithBlendSettings
struct FMontage_PlayWithBlendSettings
{
	struct UAnimMontage* MontageToPlay;  // 0x0 (0x0)
	struct FMontageBlendSettings BlendInSettings;  // 0x8 (0x8)
	float InPlayRate;  // 0x28 (0x28)
	uint8_t ReturnValueType;  // 0x2C (0x2C)
	char pad_45[3];  // 0x2D (0x2D)
	float InTimeToStartMontageAt;  // 0x30 (0x30)
	char pad_52_1 : 7;  // 0x34 (0x34)
	bool bStopAllMontages : 1;  // 0x34 (0x34)
	char pad_53[3];  // 0x35 (0x35)
	float ReturnValue;  // 0x38 (0x38)
	char pad_60[4];  // 0x3C (0x3C)


}; 
 
 // ScriptStruct Engine.StaticComponentMaskParameter
// Size: 0x28(Inherited: 0x24)
struct FStaticComponentMaskParameter : FStaticParameterBase
{
	char pad_36_1 : 7;  // 0x24 (0x24)
	bool R : 1;  // 0x24 (0x24)
	char pad_37_1 : 7;  // 0x25 (0x25)
	bool G : 1;  // 0x25 (0x25)
	char pad_38_1 : 7;  // 0x26 (0x26)
	bool B : 1;  // 0x26 (0x26)
	char pad_39_1 : 7;  // 0x27 (0x27)
	bool A : 1;  // 0x27 (0x27)


}; 
 
 // Function Engine.RawAnimSequenceTrackExtensions.GetScaleKeys
struct FGetScaleKeys
{
	struct FRawAnimSequenceTrack Track;  // 0x0 (0x0)
	struct TArray<struct FVector> ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.KismetMathLibrary.LinearColor_Gray
struct FLinearColor_Gray
{
	struct FLinearColor ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.AudioParameterConversionStatics.ObjectArrayToAudioParameter
struct FObjectArrayToAudioParameter
{
	struct FName Name;  // 0x0 (0x0)
	struct TArray<struct UObject*> Objects;  // 0x8 (0x8)
	struct FAudioParameter ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetSystemLibrary.MakeLiteralString
struct FMakeLiteralString
{
	struct FString Value;  // 0x0 (0x0)
	struct FString ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.CurveLinearColor.GetUnadjustedLinearColorValue
struct FGetUnadjustedLinearColorValue
{
	float InTime;  // 0x0 (0x0)
	struct FLinearColor ReturnValue;  // 0x4 (0x4)


}; 
 
 // ScriptStruct Engine.Vector_NetQuantize100
// Size: 0x18(Inherited: 0x18)
struct FVector_NetQuantize100 : FVector
{


}; 
 
 // ScriptStruct Engine.UserActivity
struct FUserActivity
{
	struct FString ActionName;  // 0x0 (0x0)
	char pad_16[8];  // 0x10 (0x10)


}; 
 
 // Function Engine.GameplayStatics.ClearSoundMixClassOverride
struct FClearSoundMixClassOverride
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct USoundMix* InSoundMixModifier;  // 0x8 (0x8)
	struct USoundClass* InSoundClass;  // 0x10 (0x10)
	float FadeOutTime;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)


}; 
 
 // ScriptStruct Engine.AudioQualitySettings
struct FAudioQualitySettings
{
	struct FText DisplayName;  // 0x0 (0x0)
	int32_t MaxChannels;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)


}; 
 
 // ScriptStruct Engine.BlendSpaceSegment
struct FBlendSpaceSegment
{
	int32_t SampleIndices[2];  // 0x0 (0x0)
	float Vertices[2];  // 0x8 (0x8)


}; 
 
 // Function Engine.RectLightComponent.SetSourceHeight
struct FSetSourceHeight
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.MakeLiteralText
struct FMakeLiteralText
{
	struct FText Value;  // 0x0 (0x0)
	struct FText ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.LightComponentBase.SetAffectGlobalIllumination
struct FSetAffectGlobalIllumination
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewValue : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.InputActionKeyMapping
struct FInputActionKeyMapping
{
	struct FName ActionName;  // 0x0 (0x0)
	char bShift : 1;  // 0x8 (0x8)
	char bCtrl : 1;  // 0x8 (0x8)
	char bAlt : 1;  // 0x8 (0x8)
	char bCmd : 1;  // 0x8 (0x8)
	char pad_8_1 : 4;  // 0x8 (0x8)
	char pad_9[8];  // 0x9 (0x9)
	struct FKey Key;  // 0x10 (0x10)


}; 
 
 // Function Engine.PlayerController.ClientGotoState
struct FClientGotoState
{
	struct FName NewState;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.MakeSoftClassPath
struct FMakeSoftClassPath
{
	struct FString PathString;  // 0x0 (0x0)
	struct FSoftClassPath ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.CheatManager.StreamLevelIn
struct FStreamLevelIn
{
	struct FName PackageName;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.PreviewAssetAttachContainer
struct FPreviewAssetAttachContainer
{
	struct TArray<struct FPreviewAttachedObjectPair> AttachedObjects;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.K2_AttachRootComponentToActor
struct FK2_AttachRootComponentToActor
{
	struct AActor* InParentActor;  // 0x0 (0x0)
	struct FName InSocketName;  // 0x8 (0x8)
	enum class EAttachLocation AttachLocationType;  // 0x10 (0x10)
	char pad_17_1 : 7;  // 0x11 (0x11)
	bool bWeldSimulatedBodies : 1;  // 0x11 (0x11)
	char pad_18[6];  // 0x12 (0x12)


}; 
 
 // Function Engine.KismetMathLibrary.GetMin2D
struct FGetMin2D
{
	struct FVector2D A;  // 0x0 (0x0)
	double ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetSystemLibrary.MakeSoftObjectPath
struct FMakeSoftObjectPath
{
	struct FString PathString;  // 0x0 (0x0)
	struct FSoftObjectPath ReturnValue;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.SkeletalMeshSamplingInfo
struct FSkeletalMeshSamplingInfo
{
	struct TArray<struct FSkeletalMeshSamplingRegion> Regions;  // 0x0 (0x0)
	struct FSkeletalMeshSamplingBuiltData BuiltData;  // 0x10 (0x10)


}; 
 
 // Function Engine.ProjectileMovementComponent.IsVelocityUnderSimulationThreshold
struct FIsVelocityUnderSimulationThreshold
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.KLevelSetElem
// Size: 0xA0(Inherited: 0x30)
struct FKLevelSetElem : FKShapeElem
{
	struct FTransform Transform;  // 0x30 (0x30)
	char pad_144[16];  // 0x90 (0x90)


}; 
 
 // Function Engine.KismetInputLibrary.PointerEvent_GetUserIndex
struct FPointerEvent_GetUserIndex
{
	struct FPointerEvent Input;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x98 (0x98)
	char pad_156[4];  // 0x9C (0x9C)


}; 
 
 // Function Engine.KismetSystemLibrary.MoveComponentTo
struct FMoveComponentTo
{
	struct USceneComponent* Component;  // 0x0 (0x0)
	struct FVector TargetRelativeLocation;  // 0x8 (0x8)
	struct FRotator TargetRelativeRotation;  // 0x20 (0x20)
	char pad_56_1 : 7;  // 0x38 (0x38)
	bool bEaseOut : 1;  // 0x38 (0x38)
	char pad_57_1 : 7;  // 0x39 (0x39)
	bool bEaseIn : 1;  // 0x39 (0x39)
	char pad_58[2];  // 0x3A (0x3A)
	float OverTime;  // 0x3C (0x3C)
	char pad_64_1 : 7;  // 0x40 (0x40)
	bool bForceShortestRotationPath : 1;  // 0x40 (0x40)
	enum class EMoveComponentAction MoveAction;  // 0x41 (0x41)
	char pad_66[6];  // 0x42 (0x42)
	struct FLatentActionInfo LatentInfo;  // 0x48 (0x48)


}; 
 
 // Function Engine.GameplayStatics.GetNumPlayerControllers
struct FGetNumPlayerControllers
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.BlueprintPathsLibrary.NormalizeFilename
struct FNormalizeFilename
{
	struct FString InPath;  // 0x0 (0x0)
	struct FString OutPath;  // 0x10 (0x10)


}; 
 
 // Function Engine.MeshComponent.GetOverlayMaterial
struct FGetOverlayMaterial
{
	struct UMaterialInterface* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SceneComponent.DoesSocketExist
struct FDoesSocketExist
{
	struct FName InSocketName;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // ScriptStruct Engine.LightmassLightSettings
struct FLightmassLightSettings
{
	float IndirectLightingSaturation;  // 0x0 (0x0)
	float ShadowExponent;  // 0x4 (0x4)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bUseAreaShadowsForStationaryLight : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.InputComponent.GetControllerMouseDelta
struct FGetControllerMouseDelta
{
	float DeltaX;  // 0x0 (0x0)
	float DeltaY;  // 0x4 (0x4)


}; 
 
 // Function Engine.KismetSystemLibrary.NotEqual_PrimaryAssetId
struct FNotEqual_PrimaryAssetId
{
	struct FPrimaryAssetId A;  // 0x0 (0x0)
	struct FPrimaryAssetId B;  // 0x10 (0x10)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[3];  // 0x21 (0x21)


}; 
 
 // Function Engine.Actor.GetAttachParentSocketName
struct FGetAttachParentSocketName
{
	struct FName ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.AnimNotifyTrack
struct FAnimNotifyTrack
{
	struct FName TrackName;  // 0x0 (0x0)
	struct FLinearColor TrackColor;  // 0x8 (0x8)
	char pad_24[32];  // 0x18 (0x18)


}; 
 
 // Function Engine.AnimInstance.IsAnyMontagePlaying
struct FIsAnyMontagePlaying
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerInput.InvertAxis
struct FInvertAxis
{
	struct FName AxisName;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.SetVolumeButtonsHandledBySystem
struct FSetVolumeButtonsHandledBySystem
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bEnabled : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.Character.ClientMoveResponsePacked
struct FClientMoveResponsePacked
{
	struct FCharacterMoveResponsePackedBits PackedBits;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.BatchedLine
struct FBatchedLine
{
	struct FVector Start;  // 0x0 (0x0)
	struct FVector End;  // 0x18 (0x18)
	struct FLinearColor Color;  // 0x30 (0x30)
	float Thickness;  // 0x40 (0x40)
	float RemainingLifeTime;  // 0x44 (0x44)
	char DepthPriority;  // 0x48 (0x48)
	char pad_73[7];  // 0x49 (0x49)


}; 
 
 // Function Engine.KismetSystemLibrary.NotEqual_SoftClassReference
struct FNotEqual_SoftClassReference
{
	struct TSoftClassPtr<UObject> A;  // 0x0 (0x0)
	struct TSoftClassPtr<UObject> B;  // 0x30 (0x30)
	char pad_96_1 : 7;  // 0x60 (0x60)
	bool ReturnValue : 1;  // 0x60 (0x60)
	char pad_97[7];  // 0x61 (0x61)


}; 
 
 // Function Engine.TypedElementWorldInterface.CanDuplicateElement
struct FCanDuplicateElement
{
	struct FScriptTypedElementHandle InElementHandle;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.SplineComponent.GetUpVectorAtDistanceAlongSpline
struct FGetUpVectorAtDistanceAlongSpline
{
	float Distance;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // SparseDelegateFunction Engine.IsRootComponentChanged__DelegateSignature
struct FIsRootComponentChanged__DelegateSignature
{
	struct USceneComponent* UpdatedComponent;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bIsRootComponent : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // ScriptStruct Engine.PrimaryAssetRulesCustomOverride
struct FPrimaryAssetRulesCustomOverride
{
	struct FPrimaryAssetType PrimaryAssetType;  // 0x0 (0x0)
	struct FDirectoryPath FilterDirectory;  // 0x8 (0x8)
	struct FString FilterString;  // 0x18 (0x18)
	struct FPrimaryAssetRules Rules;  // 0x28 (0x28)
	char pad_52[4];  // 0x34 (0x34)


}; 
 
 // Function Engine.DecalComponent.GetFadeInStartDelay
struct FGetFadeInStartDelay
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimInstance.Montage_JumpToSection
struct FMontage_JumpToSection
{
	struct FName SectionName;  // 0x0 (0x0)
	struct UAnimMontage* Montage;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetSystemLibrary.ParseParam
struct FParseParam
{
	struct FString InString;  // 0x0 (0x0)
	struct FString InParam;  // 0x10 (0x10)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.KismetMathLibrary.Matrix_GetFrustumNearPlane
struct FMatrix_GetFrustumNearPlane
{
	struct FMatrix M;  // 0x0 (0x0)
	struct FPlane OutPlane;  // 0x80 (0x80)
	char pad_160_1 : 7;  // 0xA0 (0xA0)
	bool ReturnValue : 1;  // 0xA0 (0xA0)
	char pad_161[15];  // 0xA1 (0xA1)


}; 
 
 // ScriptStruct Engine.ParticleSystemWorldManagerTickFunction
// Size: 0x30(Inherited: 0x28)
struct FParticleSystemWorldManagerTickFunction : FTickFunction
{
	char pad_40[8];  // 0x28 (0x28)


}; 
 
 // Function Engine.GameInstance.DebugCreatePlayer
struct FDebugCreatePlayer
{
	int32_t ControllerId;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlatformEventsComponent.IsInTabletMode
struct FIsInTabletMode
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.PrintString
struct FPrintString
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FString InString;  // 0x8 (0x8)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bPrintToScreen : 1;  // 0x18 (0x18)
	char pad_25_1 : 7;  // 0x19 (0x19)
	bool bPrintToLog : 1;  // 0x19 (0x19)
	char pad_26[2];  // 0x1A (0x1A)
	struct FLinearColor TextColor;  // 0x1C (0x1C)
	float Duration;  // 0x2C (0x2C)
	struct FName Key;  // 0x30 (0x30)


}; 
 
 // Function Engine.BlueprintPathsLibrary.EnterprisePluginsDir
struct FEnterprisePluginsDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.AtmosphericFogComponent.SetAltitudeScale
struct FSetAltitudeScale
{
	float NewAltitudeScale;  // 0x0 (0x0)


}; 
 
 // Function Engine.PoseableMeshComponent.GetBoneRotationByName
struct FGetBoneRotationByName
{
	struct FName BoneName;  // 0x0 (0x0)
	enum class EBoneSpaces BoneSpace;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)
	struct FRotator ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.PlatformEventsComponent.SupportsConvertibleLaptops
struct FSupportsConvertibleLaptops
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.PrintText
struct FPrintText
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FText InText;  // 0x8 (0x8)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool bPrintToScreen : 1;  // 0x20 (0x20)
	char pad_33_1 : 7;  // 0x21 (0x21)
	bool bPrintToLog : 1;  // 0x21 (0x21)
	char pad_34[2];  // 0x22 (0x22)
	struct FLinearColor TextColor;  // 0x24 (0x24)
	float Duration;  // 0x34 (0x34)
	struct FName Key;  // 0x38 (0x38)


}; 
 
 // ScriptStruct Engine.LevelViewportInfo
struct FLevelViewportInfo
{
	struct FVector CamPosition;  // 0x0 (0x0)
	struct FRotator CamRotation;  // 0x18 (0x18)
	float CamOrthoZoom;  // 0x30 (0x30)
	char pad_52_1 : 7;  // 0x34 (0x34)
	bool CamUpdated : 1;  // 0x34 (0x34)
	char pad_53[3];  // 0x35 (0x35)


}; 
 
 // ScriptStruct Engine.AnimTickRecord
struct FAnimTickRecord
{
	struct UAnimationAsset* SourceAsset;  // 0x0 (0x0)
	char pad_8[104];  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.DaysInYear
struct FDaysInYear
{
	int32_t Year;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x4 (0x4)


}; 
 
 // ScriptStruct Engine.AsyncPhysicsTimestamp
struct FAsyncPhysicsTimestamp
{
	int32_t ServerFrame;  // 0x0 (0x0)
	int32_t LocalFrame;  // 0x4 (0x4)


}; 
 
 // Function Engine.KismetSystemLibrary.PrintWarning
struct FPrintWarning
{
	struct FString InString;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineComponent.GetLocalLocationAndTangentAtSplinePoint
struct FGetLocalLocationAndTangentAtSplinePoint
{
	int32_t PointIndex;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector LocalLocation;  // 0x8 (0x8)
	struct FVector LocalTangent;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetSystemLibrary.RetriggerableDelay
struct FRetriggerableDelay
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	float Duration;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)
	struct FLatentActionInfo LatentInfo;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetSystemLibrary.SetBoolPropertyByName
struct FSetBoolPropertyByName
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FName PropertyName;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool Value : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_GetProjection
struct FVector_GetProjection
{
	struct FVector A;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.BoxComponent.GetScaledBoxExtent
struct FGetScaledBoxExtent
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.SetBytePropertyByName
struct FSetBytePropertyByName
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FName PropertyName;  // 0x8 (0x8)
	char Value;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // ScriptStruct Engine.CustomAttribute
struct FCustomAttribute
{
	char pad_0[1];  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimNotify.Received_Notify
struct FReceived_Notify
{
	struct USkeletalMeshComponent* MeshComp;  // 0x0 (0x0)
	struct UAnimSequenceBase* Animation;  // 0x8 (0x8)
	struct FAnimNotifyEventReference EventReference;  // 0x10 (0x10)
	char pad_56_1 : 7;  // 0x38 (0x38)
	bool ReturnValue : 1;  // 0x38 (0x38)
	char pad_57[7];  // 0x39 (0x39)


}; 
 
 // Function Engine.KismetSystemLibrary.SetCollisionProfileNameProperty
struct FSetCollisionProfileNameProperty
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FName PropertyName;  // 0x8 (0x8)
	struct FCollisionProfileName Value;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.EditorElement
struct FEditorElement
{
	int32_t Indices[3];  // 0x0 (0x0)
	float Weights[3];  // 0xC (0xC)


}; 
 
 // Function Engine.KismetSystemLibrary.SetFieldPathPropertyByName
struct FSetFieldPathPropertyByName
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FName PropertyName;  // 0x8 (0x8)
	struct TFieldPath<FNone> Value;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.SimpleCurveKey
struct FSimpleCurveKey
{
	float Time;  // 0x0 (0x0)
	float Value;  // 0x4 (0x4)


}; 
 
 // Function Engine.Actor.SetActorScale3D
struct FSetActorScale3D
{
	struct FVector NewScale3D;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.TransformRotation
struct FTransformRotation
{
	struct FTransform T;  // 0x0 (0x0)
	struct FRotator Rotation;  // 0x60 (0x60)
	struct FRotator ReturnValue;  // 0x78 (0x78)


}; 
 
 // ScriptStruct Engine.QuartzPulseOverrideStep
struct FQuartzPulseOverrideStep
{
	int32_t NumberOfPulses;  // 0x0 (0x0)
	uint8_t PulseDuration;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)


}; 
 
 // Function Engine.KismetSystemLibrary.SetInt64PropertyByName
struct FSetInt64PropertyByName
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FName PropertyName;  // 0x8 (0x8)
	int64_t Value;  // 0x10 (0x10)


}; 
 
 // Function Engine.SplineComponent.SetTangentsAtSplinePoint
struct FSetTangentsAtSplinePoint
{
	int32_t PointIndex;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector InArriveTangent;  // 0x8 (0x8)
	struct FVector InLeaveTangent;  // 0x20 (0x20)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x38 (0x38)
	char pad_57_1 : 7;  // 0x39 (0x39)
	bool bUpdateSpline : 1;  // 0x39 (0x39)
	char pad_58[6];  // 0x3A (0x3A)


}; 
 
 // Function Engine.KismetSystemLibrary.SetInterfacePropertyByName
struct FSetInterfacePropertyByName
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FName PropertyName;  // 0x8 (0x8)
	struct TScriptInterface<IInterface> Value;  // 0x10 (0x10)


}; 
 
 // Function Engine.DefaultPawn.MoveForward
struct FMoveForward
{
	float Val;  // 0x0 (0x0)


}; 
 
 // Function Engine.DataLayerInstance.IsVisible
struct FIsVisible
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.LevelStreaming.GetLevelScriptActor
struct FGetLevelScriptActor
{
	struct ALevelScriptActor* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMeshComponent.UnlinkAnimClassLayers
struct FUnlinkAnimClassLayers
{
	UAnimInstance* InClass;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.SetIntPropertyByName
struct FSetIntPropertyByName
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FName PropertyName;  // 0x8 (0x8)
	int32_t Value;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)


}; 
 
 // ScriptStruct Engine.SplineInstanceData
// Size: 0x1A0(Inherited: 0xB8)
struct FSplineInstanceData : FSceneComponentInstanceData
{
	char pad_184_1 : 7;  // 0xB8 (0xB8)
	bool bSplineHasBeenEdited : 1;  // 0xB8 (0xB8)
	char pad_185[7];  // 0xB9 (0xB9)
	struct FSplineCurves SplineCurves;  // 0xC0 (0xC0)
	struct FSplineCurves SplineCurvesPreUCS;  // 0x130 (0x130)


}; 
 
 // Function Engine.SkeletalMeshComponent.SetEnableGravityOnAllBodiesBelow
struct FSetEnableGravityOnAllBodiesBelow
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bEnableGravity : 1;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	struct FName BoneName;  // 0x4 (0x4)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bIncludeSelf : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)


}; 
 
 // Function Engine.KismetSystemLibrary.SetLinearColorPropertyByName
struct FSetLinearColorPropertyByName
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FName PropertyName;  // 0x8 (0x8)
	struct FLinearColor Value;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetSystemLibrary.SetNamePropertyByName
struct FSetNamePropertyByName
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FName PropertyName;  // 0x8 (0x8)
	struct FName Value;  // 0x10 (0x10)


}; 
 
 // Function Engine.PlayerController.SetDisableHaptics
struct FSetDisableHaptics
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewDisabled : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkinnedMeshComponent.SetVertexColorOverride_LinearColor
struct FSetVertexColorOverride_LinearColor
{
	int32_t LODIndex;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct TArray<struct FLinearColor> VertexColors;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetStringLibrary.BuildString_Bool
struct FBuildString_Bool
{
	struct FString AppendTo;  // 0x0 (0x0)
	struct FString Prefix;  // 0x10 (0x10)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool InBool : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)
	struct FString Suffix;  // 0x28 (0x28)
	struct FString ReturnValue;  // 0x38 (0x38)


}; 
 
 // Function Engine.SkeletalMesh.GetMaterials
struct FGetMaterials
{
	struct TArray<struct FSkeletalMaterial> ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PoseableMeshComponent.SetBoneScaleByName
struct FSetBoneScaleByName
{
	struct FName BoneName;  // 0x0 (0x0)
	struct FVector InScale3D;  // 0x8 (0x8)
	enum class EBoneSpaces BoneSpace;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.KismetSystemLibrary.SetSoftObjectPropertyByName
struct FSetSoftObjectPropertyByName
{
	struct UObject* Object;  // 0x0 ([x0)
	struct FName PropertyName;  // 0x8 (0x8)
	struct TSoftObjectPtr<UObject> Value;  // 000523186] ited: 0xB8)
 ([00523186] ited: 0xB8)
)


}; 
 
 // Function Engine.Controller.GetDesiredRotation
struct FGetDesiredRotation
{
	struct FRotator ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.SetStringPropertyByName
struct FSetStringPropertyByName
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FName PropertyName;  // 0x8 (0x8)
	struct FString Value;  // 0x10 (0x10)


}; 
 
 // Function Engine.SceneComponent.K2_SetRelativeRotation
struct FK2_SetRelativeRotation
{
	struct FRotator NewRotation;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bSweep : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)
	struct FHitResult SweepHitResult;  // 0x20 (0x20)
	char pad_264_1 : 7;  // 0x108 (0x108)
	bool bTeleport : 1;  // 0x108 (0x108)
	char pad_265[7];  // 0x109 (0x109)


}; 
 
 // Function Engine.ParticleSystemComponent.CreateNamedDynamicMaterialInstance
struct FCreateNamedDynamicMaterialInstance
{
	struct FName InName;  // 0x0 (0x0)
	struct UMaterialInterface* SourceMaterial;  // 0x8 (0x8)
	struct UMaterialInstanceDynamic* ReturnValue;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.GenericStruct
struct FGenericStruct
{
	int32_t Data;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.SetTextPropertyByName
struct FSetTextPropertyByName
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FName PropertyName;  // 0x8 (0x8)
	struct FText Value;  // 0x10 (0x10)


}; 
 
 // Function Engine.TimelineComponent.GetPlayRate
struct FGetPlayRate
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.StereoLayerComponent.GetPriority
struct FGetPriority
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.ConstraintInstanceBlueprintLibrary.GetOrientationDriveSLERP
struct FGetOrientationDriveSLERP
{
	struct FConstraintInstanceAccessor Accessor;  // 0x0 (0x0)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bOutEnableSLERP : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)


}; 
 
 // Function Engine.SceneComponent.K2_SetWorldRotation
struct FK2_SetWorldRotation
{
	struct FRotator NewRotation;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bSweep : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)
	struct FHitResult SweepHitResult;  // 0x20 (0x20)
	char pad_264_1 : 7;  // 0x108 (0x108)
	bool bTeleport : 1;  // 0x108 (0x108)
	char pad_265[7];  // 0x109 (0x109)


}; 
 
 // Function Engine.KismetSystemLibrary.SetVectorPropertyByName
struct FSetVectorPropertyByName
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FName PropertyName;  // 0x8 (0x8)
	struct FVector Value;  // 0x10 (0x10)


}; 
 
 // Function Engine.Actor.GetVerticalDistanceTo
struct FGetVerticalDistanceTo
{
	struct AActor* OtherActor;  // 0x0 (0x0)
	float ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // ScriptStruct Engine.MaterialParameterInfo
struct FMaterialParameterInfo
{
	struct FName Name;  // 0x0 (0x0)
	enum class EMaterialParameterAssociation Association;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)
	int32_t Index;  // 0xC (0xC)


}; 
 
 // Function Engine.Pawn.ReceivePossessed
struct FReceivePossessed
{
	struct AController* NewController;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.ShowAdBanner
struct FShowAdBanner
{
	int32_t AdIdIndex;  // 0x0 (0x0)
	char pad_4_1 : 7;  // 0x4 (0x4)
	bool bShowOnBottomOfScreen : 1;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)


}; 
 
 // Function Engine.TextRenderComponent.SetVertSpacingAdjust
struct FSetVertSpacingAdjust
{
	float Value;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.ShowPlatformSpecificLeaderboardScreen
struct FShowPlatformSpecificLeaderboardScreen
{
	struct FString CategoryName;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.AlphaBlend
struct FAlphaBlend
{
	struct UCurveFloat* CustomCurve;  // 0x0 (0x0)
	float BlendTime;  // 0x8 (0x8)
	char pad_12[24];  // 0xC (0xC)
	uint8_t BlendOption;  // 0x24 (0x24)
	char pad_37[11];  // 0x25 (0x25)


}; 
 
 // Function Engine.KismetMathLibrary.FindLookAtRotation
struct FFindLookAtRotation
{
	struct FVector Start;  // 0x0 (0x0)
	struct FVector Target;  // 0x18 (0x18)
	struct FRotator ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.KismetSystemLibrary.SnapshotObject
struct FSnapshotObject
{
	struct UObject* Object;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetSystemLibrary.SphereOverlapActors
struct FSphereOverlapActors
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector SpherePos;  // 0x8 (0x8)
	float SphereRadius;  // 0x20 (0x20)
	char pad_36[4];  // 0x24 (0x24)
	struct TArray<enum class EObjectTypeQuery> ObjectTypes;  // 0x28 (0x28)
	UObject* ActorClassFilter;  // 0x38 (0x38)
	struct TArray<struct AActor*> ActorsToIgnore;  // 0x40 (0x40)
	struct TArray<struct AActor*> OutActors;  // 0x50 (0x50)
	char pad_96_1 : 7;  // 0x60 (0x60)
	bool ReturnValue : 1;  // 0x60 (0x60)
	char pad_97[7];  // 0x61 (0x61)


}; 
 
 // Function Engine.SplineComponent.GetDistanceAlongSplineAtSplinePoint
struct FGetDistanceAlongSplineAtSplinePoint
{
	int32_t PointIndex;  // 0x0 (0x0)
	float ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.KismetSystemLibrary.SphereTraceMulti
struct FSphereTraceMulti
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector Start;  // 0x8 (0x8)
	struct FVector End;  // 0x20 (0x20)
	float Radius;  // 0x38 (0x38)
	enum class ETraceTypeQuery TraceChannel;  // 0x3C (0x3C)
	char pad_61_1 : 7;  // 0x3D (0x3D)
	bool bTraceComplex : 1;  // 0x3D (0x3D)
	char pad_62[2];  // 0x3E (0x3E)
	struct TArray<struct AActor*> ActorsToIgnore;  // 0x40 (0x40)
	enum class EDrawDebugTrace DrawDebugType;  // 0x50 (0x50)
	char pad_81[7];  // 0x51 (0x51)
	struct TArray<struct FHitResult> OutHits;  // 0x58 (0x58)
	char pad_104_1 : 7;  // 0x68 (0x68)
	bool bIgnoreSelf : 1;  // 0x68 (0x68)
	char pad_105[3];  // 0x69 (0x69)
	struct FLinearColor TraceColor;  // 0x6C (0x6C)
	struct FLinearColor TraceHitColor;  // 0x7C (0x7C)
	float DrawTime;  // 0x8C (0x8C)
	char pad_144_1 : 7;  // 0x90 (0x90)
	bool ReturnValue : 1;  // 0x90 (0x90)
	char pad_145[7];  // 0x91 (0x91)


}; 
 
 // Function Engine.KismetSystemLibrary.SphereTraceMultiForObjects
struct FSphereTraceMultiForObjects
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector Start;  // 0x8 (0x8)
	struct FVector End;  // 0x20 (0x20)
	float Radius;  // 0x38 (0x38)
	char pad_60[4];  // 0x3C (0x3C)
	struct TArray<enum class EObjectTypeQuery> ObjectTypes;  // 0x40 (0x40)
	char pad_80_1 : 7;  // 0x50 (0x50)
	bool bTraceComplex : 1;  // 0x50 (0x50)
	char pad_81[7];  // 0x51 (0x51)
	struct TArray<struct AActor*> ActorsToIgnore;  // 0x58 (0x58)
	enum class EDrawDebugTrace DrawDebugType;  // 0x68 (0x68)
	char pad_105[7];  // 0x69 (0x69)
	struct TArray<struct FHitResult> OutHits;  // 0x70 (0x70)
	char pad_128_1 : 7;  // 0x80 (0x80)
	bool bIgnoreSelf : 1;  // 0x80 (0x80)
	char pad_129[3];  // 0x81 (0x81)
	struct FLinearColor TraceColor;  // 0x84 (0x84)
	struct FLinearColor TraceHitColor;  // 0x94 (0x94)
	float DrawTime;  // 0xA4 (0xA4)
	char pad_168_1 : 7;  // 0xA8 (0xA8)
	bool ReturnValue : 1;  // 0xA8 (0xA8)
	char pad_169[7];  // 0xA9 (0xA9)


}; 
 
 // Function Engine.KismetStringLibrary.Conv_Vector2dToString
struct FConv_Vector2dToString
{
	struct FVector2D InVec;  // 0x0 (0x0)
	struct FString ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetSystemLibrary.SphereTraceSingleByProfile
struct FSphereTraceSingleByProfile
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector Start;  // 0x8 (0x8)
	struct FVector End;  // 0x20 (0x20)
	float Radius;  // 0x38 (0x38)
	struct FName ProfileName;  // 0x3C (0x3C)
	char pad_68_1 : 7;  // 0x44 (0x44)
	bool bTraceComplex : 1;  // 0x44 (0x44)
	char pad_69[3];  // 0x45 (0x45)
	struct TArray<struct AActor*> ActorsToIgnore;  // 0x48 (0x48)
	enum class EDrawDebugTrace DrawDebugType;  // 0x58 (0x58)
	char pad_89[7];  // 0x59 (0x59)
	struct FHitResult OutHit;  // 0x60 (0x60)
	char pad_328_1 : 7;  // 0x148 (0x148)
	bool bIgnoreSelf : 1;  // 0x148 (0x148)
	char pad_329[3];  // 0x149 (0x149)
	struct FLinearColor TraceColor;  // 0x14C (0x14C)
	struct FLinearColor TraceHitColor;  // 0x15C (0x15C)
	float DrawTime;  // 0x16C (0x16C)
	char pad_368_1 : 7;  // 0x170 (0x170)
	bool ReturnValue : 1;  // 0x170 (0x170)
	char pad_369[7];  // 0x171 (0x171)


}; 
 
 // Function Engine.ParticleSystemComponent.SetTrailSourceData
struct FSetTrailSourceData
{
	struct FName InFirstSocketName;  // 0x0 (0x0)
	struct FName InSecondSocketName;  // 0x8 (0x8)
	enum class ETrailWidthMode InWidthMode;  // 0x10 (0x10)
	char pad_17[3];  // 0x11 (0x11)
	float InWidth;  // 0x14 (0x14)


}; 
 
 // ScriptStruct Engine.BaseComponentReference
struct FBaseComponentReference
{
	struct FName ComponentProperty;  // 0x0 (0x0)
	struct FString PathToComponent;  // 0x8 (0x8)
	char pad_24[8];  // 0x18 (0x18)


}; 
 
 // Function Engine.Actor.GetParentActor
struct FGetParentActor
{
	struct AActor* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.CheatManager.DestroyAll
struct FDestroyAll
{
	AActor* aClass;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.CachedAnimStateArray
struct FCachedAnimStateArray
{
	struct TArray<struct FCachedAnimStateData> States;  // 0x0 (0x0)
	char pad_16[8];  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetSystemLibrary.TransactObject
struct FTransactObject
{
	struct UObject* Object;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Multiply_Int64Int64
struct FMultiply_Int64Int64
{
	int64_t A;  // 0x0 (0x0)
	int64_t B;  // 0x8 (0x8)
	int64_t ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetSystemLibrary.UnloadPrimaryAssetList
struct FUnloadPrimaryAssetList
{
	struct TArray<struct FPrimaryAssetId> PrimaryAssetIdList;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEnd
struct FGetInstanceAssetPlayerTimeFromEnd
{
	int32_t AssetPlayerIndex;  // 0x0 (0x0)
	float ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.GameInstance.DebugRemovePlayer
struct FDebugRemovePlayer
{
	int32_t ControllerId;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameInstance.HandleNetworkError
struct FHandleNetworkError
{
	enum class ENetworkFailure FailureType;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool bIsServer : 1;  // 0x1 (0x1)


}; 
 
 // ScriptStruct Engine.HLODSubActorDesc
struct FHLODSubActorDesc
{
	char pad_0[1];  // 0x0 (0x0)


}; 
 
 // DelegateFunction Engine.PlatformGameInstance.PlatformFailedToRegisterForRemoteNotificationsDelegate__DelegateSignature
struct FPlatformFailedToRegisterForRemoteNotificationsDelegate__DelegateSignature
{
	struct FString InString;  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.K2_SphereTraceComponent
struct FK2_SphereTraceComponent
{
	struct FVector TraceStart;  // 0x0 (0x0)
	struct FVector TraceEnd;  // 0x18 (0x18)
	float SphereRadius;  // 0x30 (0x30)
	char pad_52_1 : 7;  // 0x34 (0x34)
	bool bTraceComplex : 1;  // 0x34 (0x34)
	char pad_53_1 : 7;  // 0x35 (0x35)
	bool bShowTrace : 1;  // 0x35 (0x35)
	char pad_54_1 : 7;  // 0x36 (0x36)
	bool bPersistentShowTrace : 1;  // 0x36 (0x36)
	char pad_55[1];  // 0x37 (0x37)
	struct FVector HitLocation;  // 0x38 (0x38)
	struct FVector HitNormal;  // 0x50 (0x50)
	struct FName BoneName;  // 0x68 (0x68)
	struct FHitResult OutHit;  // 0x70 (0x70)
	char pad_344_1 : 7;  // 0x158 (0x158)
	bool ReturnValue : 1;  // 0x158 (0x158)
	char pad_345[7];  // 0x159 (0x159)


}; 
 
 // Function Engine.KismetMathLibrary.Matrix_GetMaximumAxisScale
struct FMatrix_GetMaximumAxisScale
{
	struct FMatrix M;  // 0x0 (0x0)
	float ReturnValue;  // 0x80 (0x80)
	char pad_132[12];  // 0x84 (0x84)


}; 
 
 // Function Engine.PrimitiveComponent.SetCastContactShadow
struct FSetCastContactShadow
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bInCastContactShadow : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.ProjectileMovementComponent.MoveInterpolationTarget
struct FMoveInterpolationTarget
{
	struct FVector NewLocation;  // 0x0 (0x0)
	struct FRotator NewRotation;  // 0x18 (0x18)


}; 
 
 // Function Engine.ProjectileMovementComponent.SetInterpolatedComponent
struct FSetInterpolatedComponent
{
	struct USceneComponent* Component;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_MatrixToRotator
struct FConv_MatrixToRotator
{
	struct FMatrix InMatrix;  // 0x7FF7D3428690 (0x16FAD03EBC0) (0x7FF7D3428690 (0x16FAD03EBC0))
	struct FRotator ReturnValue;  // 0x80 (0x80)
	char pad_152[8];  // 0x98 (0x98)


}; 
 
 // Function Engine.AsyncActionLoadPrimaryAssetList.AsyncLoadPrimaryAssetList
struct FAsyncLoadPrimaryAssetList
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct TArray<struct FPrimaryAssetId> PrimaryAssetList;  // 0x8 (0x8)
	struct TArray<struct FName> LoadBundles;  // 0x18 (0x18)
	struct UAsyncActionLoadPrimaryAssetList* ReturnValue;  // 0x28 (0x28)


}; 
 
 // Function Engine.ProjectileMovementComponent.SetVelocityInLocalSpace
struct FSetVelocityInLocalSpace
{
	struct FVector NewVelocity;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.PredictProjectilePathPointData
struct FPredictProjectilePathPointData
{
	struct FVector Location;  // 0x0 (0x0 (0x0))
	struct FVector Velocity;  // 0x18 (0x18)
	float Time;  // 0x30 (0x30)
	char pad_52[4];  // 0x34 (0x34)


}; 
 
 // Function Engine.AnimInstance.GetRelevantAnimTimeFraction
struct FGetRelevantAnimTimeFraction
{
	int32_t MachineIndex;  // 0x0 (0x0)
	int32_t StateIndex;  // 0x4 (0x4)
	float ReturnValue;  // 0x8 (0x8)


}; 
 
 // SparseDelegateFunction Engine.ActorBeginCursorOverSignature__DelegateSignature
struct FActorBeginCursorOverSignature__DelegateSignature
{
	struct AActor* TouchedActor;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimInstance.Montage_GetPlayRate
struct FMontage_GetPlayRate
{
	struct UAnimMontage* Montage;  // 0x0 (0x0)
	float ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // SparseDelegateFunction Engine.ActorEndOverlapSignature__DelegateSignature
struct FActorEndOverlapSignature__DelegateSignature
{
	struct AActor* OverlappedActor;  // 0x0 (0x0)
	struct AActor* OtherActor;  // 0x8 (0x8)


}; 
 
 // Function Engine.AnimInstance.BlueprintUpdateAnimation
struct FBlueprintUpdateAnimation
{
	float DeltaTimeX;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameplayStatics.SpawnSound2D
struct FSpawnSound2D
{
	struct UObject* WorldContextObject;  // 0x0 (0x0) (0x0 (0x0))
	struct USoundBase* Sound;  // 0x8 (0x8)
	float VolumeMultiplier;  // 0x10 (0x7FF7D3388D00 (0x0))
	float PitchMultiplier;  // 0x14 (0x14)
	float StartTime;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)
	struct USoundConcurrency* ConcurrencySettings;  // 0x20 (0x20)
	char pad_40_1 : 7;  // 0x28 (0x28)
	bool bPersistAcrossLevelTransition : 1;  // 0x28 (0x28)
	char pad_41_1 : 7;  // 0x29 (0x29)
	bool bAutoDestroy : 1;  // 0x29 (0x29)
	char pad_42[6];  // 0x2A (0x2A)
	struct UAudioComponent* ReturnValue;  // 0x30 (0x30)


}; 
 
 // SparseDelegateFunction Engine.ActorHitSignature__DelegateSignature
struct FActorHitSignature__DelegateSignature
{
	struct AActor* SelfActor;  // 0x0 (0x0)
	struct AActor* OtherActor;  // 0x8 (0x8)
	struct FVector NormalImpulse;  // 0x10 (0x10)
	struct FHitResult Hit;  // 0x28 (0x28)


}; 
 
 // Function Engine.Actor.GetSquaredHorizontalDistanceTo
struct FGetSquaredHorizontalDistanceTo
{
	struct AActor* OtherActor;  // 0x0 (0x0)
	float ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.GameplayStatics.GetGameMode
struct FGetGameMode
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct AGameModeBase* ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.CharacterMovementComponent.CapsuleTouched
struct FCapsuleTouched
{
	struct UPrimitiveComponent* OverlappedComp;  // 0x0 (0x0)
	struct AActor* Other;  // 0x8 (0x8)
	struct UPrimitiveComponent* OtherComp;  // 0x10 (0x10)
	int32_t OtherBodyIndex;  // 0x18 (0x18)
	char pad_28_1 : 7;  // 0x1C (0x1C)
	bool bFromSweep : 1;  // 0x1C (0x1C)
	char pad_29[3];  // 0x1D (0x1D)
	struct FHitResult SweepResult;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_Normalize
struct FVector_Normalize
{
	struct FVector A;  // 0x0 (0x0)
	float Tolerance;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)


}; 
 
 // SparseDelegateFunction Engine.ActorOnInputTouchBeginSignature__DelegateSignature
struct FActorOnInputTouchBeginSignature__DelegateSignature
{
	enum class ETouchIndex FingerIndex;  // 0x0 (0x0)
	char pad_1[7];  // 0x1 (0x1)
	struct AActor* TouchedActor;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_VectorToTransform
struct FConv_VectorToTransform
{
	struct FVector InLocation;  // 0x0 (0x0)
	char pad_24[8];  // 0x18 (0x18)
	struct FTransform ReturnValue;  // 0x20 (0x20)


}; 
 
 // ScriptStruct Engine.StaticMaterial
struct FStaticMaterial
{
	struct UMaterialInterface* MaterialInterface;  // 0x0 (0x0)
	struct FName MaterialSlotName;  // 0x8 (0x8)
	struct FName ImportedMaterialSlotName;  // 0x10 (0x10)
	struct FMeshUVChannelInfo UVChannelData;  // 0x18 (0x18)
	char pad_44[4];  // 0x2C (0x2C)


}; 
 
 // Function Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransform
struct FBatchUpdateInstancesTransform
{
	int32_t StartInstanceIndex;  // 0x0 (0x0)
	int32_t NumInstances;  // 0x4 (0x4)
	char pad_8[8];  // 0x8 (0x8)
	struct FTransform NewInstancesTransform;  // 0x10 (0x10)
	char pad_112_1 : 7;  // 0x70 (0x70)
	bool bWorldSpace : 1;  // 0x70 (0x70)
	char pad_113_1 : 7;  // 0x71 (0x71)
	bool bMarkRenderStateDirty : 1;  // 0x71 (0x71)
	char pad_114_1 : 7;  // 0x72 (0x72)
	bool bTeleport : 1;  // 0x72 (0x72)
	char pad_115_1 : 7;  // 0x73 (0x73)
	bool ReturnValue : 1;  // 0x73 (0x73)
	char pad_116[12];  // 0x74 (0x74)


}; 
 
 // Function Engine.StaticMesh.GetMaterialIndex
struct FGetMaterialIndex
{
	struct FName MaterialSlotName;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x8 (0x8)


}; 
 
 // SparseDelegateFunction Engine.ActorOnInputTouchEndSignature__DelegateSignature
struct FActorOnInputTouchEndSignature__DelegateSignature
{
	enum class ETouchIndex FingerIndex;  // 0x0 (0x0)
	char pad_1[7];  // 0x1 (0x1)
	struct AActor* TouchedActor;  // 0x8 (0x8)


}; 
 
 // SparseDelegateFunction Engine.ComponentBeginOverlapSignature__DelegateSignature
struct FComponentBeginOverlapSignature__DelegateSignature
{
	struct UPrimitiveComponent* OverlappedComponent;  // 0x0 (0x0)
	struct AActor* OtherActor;  // 0x8 (0x8)
	struct UPrimitiveComponent* OtherComp;  // 0x10 (0x10)
	int32_t OtherBodyIndex;  // 0x18 (0x18)
	char pad_28_1 : 7;  // 0x1C (0x1C)
	bool bFromSweep : 1;  // 0x1C (0x1C)
	char pad_29[3];  // 0x1D (0x1D)
	struct FHitResult SweepResult;  // 0x20 (0x20)


}; 
 
 // ScriptStruct Engine.LensBloomSettings
struct FLensBloomSettings
{
	struct FGaussianSumBloomSettings GaussianSum;  // 0x0 (0x0)
	char pad_132[4];  // 0x84 (0x84)
	struct FConvolutionBloomSettings Convolution;  // 0x88 (0x88)
	enum class EBloomMethod Method;  // 0xB8 (0xB8)
	char pad_185[7];  // 0xB9 (0xB9)


}; 
 
 // SparseDelegateFunction Engine.ComponentBeginTouchOverSignature__DelegateSignature
struct FComponentBeginTouchOverSignature__DelegateSignature
{
	enum class ETouchIndex FingerIndex;  // 0x0 (0x0)
	char pad_1[7];  // 0x1 (0x1)
	struct UPrimitiveComponent* TouchedComponent;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.KAggregateGeom
struct FKAggregateGeom
{
	struct TArray<struct FKSphereElem> SphereElems;  // 0x0 (0x0)
	struct TArray<struct FKBoxElem> BoxElems;  // 0x10 (0x10)
	struct TArray<struct FKSphylElem> SphylElems;  // 0x20 (0x20)
	struct TArray<struct FKConvexElem> ConvexElems;  // 0x30 (0x30)
	struct TArray<struct FKTaperedCapsuleElem> TaperedCapsuleElems;  // 0x40 (0x40)
	struct TArray<struct FKLevelSetElem> LevelSetElems;  // 0x50 (0x50)
	char pad_96[8];  // 0x60 (0x60)


}; 
 
 // Function Engine.GameUserSettings.GetScreenResolution
struct FGetScreenResolution
{
	struct FIntPoint ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.MaterialParameterCollection.GetVectorParameterNames
struct FGetVectorParameterNames
{
	struct TArray<struct FName> ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.WeightedBlendSample
struct FWeightedBlendSample
{
	int32_t SampleIndex;  // 0x0 (0x0)
	float SampleWeight;  // 0x4 (0x4)


}; 
 
 // ScriptStruct Engine.MaterialShadingModelField
struct FMaterialShadingModelField
{
	uint16_t ShadingModelField;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMesh.GetDefaultAnimatingRig
struct FGetDefaultAnimatingRig
{
	struct TSoftObjectPtr<UObject> ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.SkelMeshMergeSectionMapping
struct FSkelMeshMergeSectionMapping
{
	struct TArray<int32_t> SectionIDs;  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.SetScalarParameterForDefaultCustomPrimitiveData
struct FSetScalarParameterForDefaultCustomPrimitiveData
{
	struct FName ParameterName;  // 0x0 (0x0)
	float Value;  // 0x8 (0x8)


}; 
 
 // SparseDelegateFunction Engine.ComponentEndCursorOverSignature__DelegateSignature
struct FComponentEndCursorOverSignature__DelegateSignature
{
	struct UPrimitiveComponent* TouchedComponent;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.TextureSourceBlock
struct FTextureSourceBlock
{
	int32_t BlockX;  // 0x0 (0x0)
	int32_t BlockY;  // 0x4 (0x4)
	int32_t SizeX;  // 0x8 (0x8)
	int32_t SizeY;  // 0xC (0xC)
	int32_t NumSlices;  // 0x10 (0x10)
	int32_t NumMips;  // 0x14 (0x14)


}; 
 
 // Function Engine.SceneComponent.K2_AddWorldTransformKeepScale
struct FK2_AddWorldTransformKeepScale
{
	struct FTransform DeltaTransform;  // 0x0 (0x0)
	char pad_96_1 : 7;  // 0x60 (0x60)
	bool bSweep : 1;  // 0x60 (0x60)
	char pad_97[7];  // 0x61 (0x61)
	struct FHitResult SweepHitResult;  // 0x68 (0x68)
	char pad_336_1 : 7;  // 0x150 (0x150)
	bool bTeleport : 1;  // 0x150 (0x150)
	char pad_337[15];  // 0x151 (0x151)


}; 
 
 // SparseDelegateFunction Engine.ComponentEndTouchOverSignature__DelegateSignature
struct FComponentEndTouchOverSignature__DelegateSignature
{
	enum class ETouchIndex FingerIndex;  // 0x0 (0x0)
	char pad_1[7];  // 0x1 (0x1)
	struct UPrimitiveComponent* TouchedComponent;  // 0x8 (0x8)


}; 
 
 // SparseDelegateFunction Engine.ComponentOnClickedSignature__DelegateSignature
struct FComponentOnClickedSignature__DelegateSignature
{
	struct UPrimitiveComponent* TouchedComponent;  // 0x0 (0x0)
	struct FKey ButtonPressed;  // 0x8 (0x8)


}; 
 
 // Function Engine.SceneComponent.K2_AddLocalTransform
struct FK2_AddLocalTransform
{
	struct FTransform DeltaTransform;  // 0x0 (0x0)
	char pad_96_1 : 7;  // 0x60 (0x60)
	bool bSweep : 1;  // 0x60 (0x60)
	char pad_97[7];  // 0x61 (0x61)
	struct FHitResult SweepHitResult;  // 0x68 (0x68)
	char pad_336_1 : 7;  // 0x150 (0x150)
	bool bTeleport : 1;  // 0x150 (0x150)
	char pad_337[15];  // 0x151 (0x151)


}; 
 
 // ScriptStruct Engine.RootMotionExtractionStep
struct FRootMotionExtractionStep
{
	struct UAnimSequence* AnimSequence;  // 0x0 (0x0)
	float StartPosition;  // 0x8 (0x8)
	float EndPosition;  // 0xC (0xC)


}; 
 
 // Function Engine.PrimitiveComponent.GetPhysicsAngularVelocityInRadians
struct FGetPhysicsAngularVelocityInRadians
{
	struct FName BoneName;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.PerPlatformInt
struct FPerPlatformInt
{
	int32_t Default;  // 0x0 (0x0)


}; 
 
 // SparseDelegateFunction Engine.ComponentOnInputTouchEndSignature__DelegateSignature
struct FComponentOnInputTouchEndSignature__DelegateSignature
{
	enum class ETouchIndex FingerIndex;  // 0x0 (0x0)
	char pad_1[7];  // 0x1 (0x1)
	struct UPrimitiveComponent* TouchedComponent;  // 0x8 (0x8)


}; 
 
 // Function Engine.GameplayStatics.IsGamePaused
struct FIsGamePaused
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.Pawn.GetLastMovementInputVector
struct FGetLastMovementInputVector
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // SparseDelegateFunction Engine.ComponentOnReleasedSignature__DelegateSignature
struct FComponentOnReleasedSignature__DelegateSignature
{
	struct UPrimitiveComponent* TouchedComponent;  // 0x0 (0x0)
	struct FKey ButtonReleased;  // 0x8 (0x8)


}; 
 
 // Function Engine.SceneComponent.IsAnySimulatingPhysics
struct FIsAnySimulatingPhysics
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.CachedAnimDataLibrary.StateMachine_GetLocalWeight
struct FStateMachine_GetLocalWeight
{
	struct UAnimInstance* InAnimInstance;  // 0x0 (0x0)
	struct FCachedAnimStateData CachedAnimStateData;  // 0x8 (0x8)
	float ReturnValue;  // 0x24 (0x24)


}; 
 
 // SparseDelegateFunction Engine.ComponentWakeSignature__DelegateSignature
struct FComponentWakeSignature__DelegateSignature
{
	struct UPrimitiveComponent* WakingComponent;  // 0x0 (0x0)
	struct FName BoneName;  // 0x8 (0x8)


}; 
 
 // Function Engine.SceneComponent.GetComponentVelocity
struct FGetComponentVelocity
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.GetWalkableSlopeOverride
struct FGetWalkableSlopeOverride
{
	struct FWalkableSlopeOverride ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkinnedMeshComponent.IsBoneHiddenByName
struct FIsBoneHiddenByName
{
	struct FName BoneName;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // ScriptStruct Engine.EditedDocumentInfo
struct FEditedDocumentInfo
{
	struct FSoftObjectPath EditedObjectPath;  // 0x0 (0x0)
	struct FVector2D SavedViewOffset;  // 0x20 (0x20)
	float SavedZoomAmount;  // 0x30 (0x30)
	char pad_52[4];  // 0x34 (0x34)
	struct UObject* EditedObject;  // 0x38 (0x38)


}; 
 
 // Function Engine.AnimMontage.GetDefaultBlendInTime
struct FGetDefaultBlendInTime
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // SparseDelegateFunction Engine.PhysicsVolumeChanged__DelegateSignature
struct FPhysicsVolumeChanged__DelegateSignature
{
	struct APhysicsVolume* NewVolume;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.DisableInput
struct FDisableInput
{
	struct APlayerController* PlayerController;  // 0x0 (0x0)


}; 
 
 // SparseDelegateFunction Engine.TakePointDamageSignature__DelegateSignature
struct FTakePointDamageSignature__DelegateSignature
{
	struct AActor* DamagedActor;  // 0x0 (0x0)
	float Damage;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)
	struct AController* InstigatedBy;  // 0x10 (0x10)
	struct FVector HitLocation;  // 0x18 (0x18)
	struct UPrimitiveComponent* FHitComponent;  // 0x30 (0x30)
	struct FName BoneName;  // 0x38 (0x38)
	struct FVector ShotFromDirection;  // 0x40 (0x40)
	struct UDamageType* DamageType;  // 0x58 (0x58)
	struct AActor* DamageCauser;  // 0x60 (0x60)


}; 
 
 // Function Engine.KismetRenderingLibrary.ReadRenderTargetRawPixel
struct FReadRenderTargetRawPixel
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct UTextureRenderTarget2D* TextureRenderTarget;  // 0x8 (0x8)
	int32_t X;  // 0x10 (0x10)
	int32_t Y;  // 0x14 (0x14)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bNormalize : 1;  // 0x18 (0x18)
	char pad_25[3];  // 0x19 (0x19)
	struct FLinearColor ReturnValue;  // 0x1C (0x1C)
	char pad_44[4];  // 0x2C (0x2C)


}; 
 
 // SparseDelegateFunction Engine.TakeRadialDamageSignature__DelegateSignature
struct FTakeRadialDamageSignature__DelegateSignature
{
	struct AActor* DamagedActor;  // 0x0 (0x0)
	float Damage;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)
	struct UDamageType* DamageType;  // 0x10 (0x10)
	struct FVector Origin;  // 0x18 (0x18)
	struct FHitResult HitInfo;  // 0x30 (0x30)
	struct AController* InstigatedBy;  // 0x118 (0x118)
	struct AActor* DamageCauser;  // 0x120 (0x120)


}; 
 
 // ScriptStruct Engine.CurveTableRowHandle
struct FCurveTableRowHandle
{
	struct UCurveTable* CurveTable;  // 0x0 (0x0)
	struct FName RowName;  // 0x8 (0x8)


}; 
 
 // Function Engine.SplineComponent.ClearSplinePoints
struct FClearSplinePoints
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bUpdateSpline : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.SceneComponent.GetAttachSocketName
struct FGetAttachSocketName
{
	struct FName ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.VSize
struct FVSize
{
	struct FVector A;  // 0x0 (0x0)
	double ReturnValue;  // 0x18 (0x18)


}; 
 
 // ScriptStruct Engine.AnimUpdateRateParameters
struct FAnimUpdateRateParameters
{
	char pad_0[1];  // 0x0 (0x0)
	uint8_t ShiftBucket;  // 0x1 (0x1)
	char bInterpolateSkippedFrames : 1;  // 0x2 (0x2)
	char bShouldUseLodMap : 1;  // 0x2 (0x2)
	char bShouldUseMinLod : 1;  // 0x2 (0x2)
	char bSkipUpdate : 1;  // 0x2 (0x2)
	char bSkipEvaluation : 1;  // 0x2 (0x2)
	char pad_2_1 : 3;  // 0x2 (0x2)
	char pad_3[2];  // 0x3 (0x3)
	int32_t UpdateRate;  // 0x4 (0x4)
	int32_t EvaluationRate;  // 0x8 (0x8)
	float TickedPoseOffestTime;  // 0xC (0xC)
	float AdditionalTime;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)
	int32_t BaseNonRenderedUpdateRate;  // 0x18 (0x18)
	int32_t MaxEvalRateForInterpolation;  // 0x1C (0x1C)
	struct TArray<float> BaseVisibleDistanceFactorThesholds;  // 0x20 (0x20)
	struct TMap<int32_t, int32_t> LODToFrameSkipMap;  // 0x30 (0x30)
	int32_t SkippedUpdateFrames;  // 0x80 (0x80)
	int32_t SkippedEvalFrames;  // 0x84 (0x84)


}; 
 
 // Function Engine.SceneComponent.K2_AddRelativeLocation
struct FK2_AddRelativeLocation
{
	struct FVector DeltaLocation;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bSweep : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)
	struct FHitResult SweepHitResult;  // 0x20 (0x20)
	char pad_264_1 : 7;  // 0x108 (0x108)
	bool bTeleport : 1;  // 0x108 (0x108)
	char pad_265[7];  // 0x109 (0x109)


}; 
 
 // Function Engine.KismetMathLibrary.GetForwardVector
struct FGetForwardVector
{
	struct FRotator InRot;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.SceneComponent.GetShouldUpdatePhysicsVolume
struct FGetShouldUpdatePhysicsVolume
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.CompressedRichCurve
struct FCompressedRichCurve
{
	char pad_0[24];  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.AnimSlotDesc
struct FAnimSlotDesc
{
	struct FName SlotName;  // 0x0 (0x0)
	int32_t NumChannels;  // 0x8 (0x8)


}; 
 
 // Function Engine.SkeletalMeshSocket.GetSocketLocation
struct FGetSocketLocation
{
	struct USkeletalMeshComponent* SkelComp;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.PlayerCameraManager.GetFOVAngle
struct FGetFOVAngle
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SceneComponent.IsSimulatingPhysics
struct FIsSimulatingPhysics
{
	struct FName BoneName;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.PhysicsHandleComponent.SetAngularStiffness
struct FSetAngularStiffness
{
	float NewAngularStiffness;  // 0x0 (0x0)


}; 
 
 // Function Engine.ForceFeedbackComponent.BP_GetAttenuationSettingsToApply
struct FBP_GetAttenuationSettingsToApply
{
	struct FForceFeedbackAttenuationSettings OutAttenuationSettings;  // 0x0 (0x0)
	char pad_192_1 : 7;  // 0xC0 (0xC0)
	bool ReturnValue : 1;  // 0xC0 (0xC0)
	char pad_193[7];  // 0xC1 (0xC1)


}; 
 
 // ScriptStruct Engine.PassiveSoundMixModifier
struct FPassiveSoundMixModifier
{
	struct USoundMix* SoundMix;  // 0x0 (0x0)
	float MinVolumeThreshold;  // 0x8 (0x8)
	float MaxVolumeThreshold;  // 0xC (0xC)


}; 
 
 // Function Engine.SceneComponent.K2_AddLocalOffset
struct FK2_AddLocalOffset
{
	struct FVector DeltaLocation;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bSweep : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)
	struct FHitResult SweepHitResult;  // 0x20 (0x20)
	char pad_264_1 : 7;  // 0x108 (0x108)
	bool bTeleport : 1;  // 0x108 (0x108)
	char pad_265[7];  // 0x109 (0x109)


}; 
 
 // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogAlbedo
struct FSetVolumetricFogAlbedo
{
	struct FColor NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.SetCollisionObjectType
struct FSetCollisionObjectType
{
	enum class ECollisionChannel Channel;  // 0x0 (0x0)


}; 
 
 // Function Engine.SceneComponent.K2_AddRelativeRotation
struct FK2_AddRelativeRotation
{
	struct FRotator DeltaRotation;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bSweep : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)
	struct FHitResult SweepHitResult;  // 0x20 (0x20)
	char pad_264_1 : 7;  // 0x108 (0x108)
	bool bTeleport : 1;  // 0x108 (0x108)
	char pad_265[7];  // 0x109 (0x109)


}; 
 
 // Function Engine.KismetMathLibrary.Subtract_Vector2DVector2D
struct FSubtract_Vector2DVector2D
{
	struct FVector2D A;  // 0x0 (0x0)
	struct FVector2D B;  // 0x10 (0x10)
	struct FVector2D ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.SceneComponent.K2_AddWorldRotation
struct FK2_AddWorldRotation
{
	struct FRotator DeltaRotation;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bSweep : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)
	struct FHitResult SweepHitResult;  // 0x20 (0x20)
	char pad_264_1 : 7;  // 0x108 (0x108)
	bool bTeleport : 1;  // 0x108 (0x108)
	char pad_265[7];  // 0x109 (0x109)


}; 
 
 // Function Engine.Actor.K2_AddActorLocalRotation
struct FK2_AddActorLocalRotation
{
	struct FRotator DeltaRotation;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bSweep : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)
	struct FHitResult SweepHitResult;  // 0x20 (0x20)
	char pad_264_1 : 7;  // 0x108 (0x108)
	bool bTeleport : 1;  // 0x108 (0x108)
	char pad_265[7];  // 0x109 (0x109)


}; 
 
 // Function Engine.SceneComponent.K2_AddWorldTransform
struct FK2_AddWorldTransform
{
	struct FTransform DeltaTransform;  // 0x0 (0x0)
	char pad_96_1 : 7;  // 0x60 (0x60)
	bool bSweep : 1;  // 0x60 (0x60)
	char pad_97[7];  // 0x61 (0x61)
	struct FHitResult SweepHitResult;  // 0x68 (0x68)
	char pad_336_1 : 7;  // 0x150 (0x150)
	bool bTeleport : 1;  // 0x150 (0x150)
	char pad_337[15];  // 0x151 (0x151)


}; 
 
 // Function Engine.Actor.K2_AddActorLocalTransform
struct FK2_AddActorLocalTransform
{
	struct FTransform NewTransform;  // 0x0 (0x0)
	char pad_96_1 : 7;  // 0x60 (0x60)
	bool bSweep : 1;  // 0x60 (0x60)
	char pad_97[7];  // 0x61 (0x61)
	struct FHitResult SweepHitResult;  // 0x68 (0x68)
	char pad_336_1 : 7;  // 0x150 (0x150)
	bool bTeleport : 1;  // 0x150 (0x150)
	char pad_337[15];  // 0x151 (0x151)


}; 
 
 // ScriptStruct Engine.LensSettings
struct FLensSettings
{
	struct FLensBloomSettings Bloom;  // 0x0 (0x0)
	struct FLensImperfectionSettings Imperfections;  // 0xC0 (0xC0)
	float ChromaticAberration;  // 0xE0 (0xE0)
	char pad_228[4];  // 0xE4 (0xE4)


}; 
 
 // Function Engine.SceneComponent.K2_GetComponentScale
struct FK2_GetComponentScale
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SceneComponent.K2_SetRelativeLocationAndRotation
struct FK2_SetRelativeLocationAndRotation
{
	struct FVector NewLocation;  // 0x0 (0x0)
	struct FRotator NewRotation;  // 0x18 (0x18)
	char pad_48_1 : 7;  // 0x30 (0x30)
	bool bSweep : 1;  // 0x30 (0x30)
	char pad_49[7];  // 0x31 (0x31)
	struct FHitResult SweepHitResult;  // 0x38 (0x38)
	char pad_288_1 : 7;  // 0x120 (0x120)
	bool bTeleport : 1;  // 0x120 (0x120)
	char pad_289[7];  // 0x121 (0x121)


}; 
 
 // Function Engine.KismetRenderingLibrary.CalculateProjectionMatrix
struct FCalculateProjectionMatrix
{
	struct FMinimalViewInfo MinimalViewInfo;  // 0x0 (0x0)
	struct FMatrix ReturnValue;  // 0x7C0 (0x7C0)


}; 
 
 // Function Engine.SceneComponent.K2_SetRelativeTransform
struct FK2_SetRelativeTransform
{
	struct FTransform NewTransform;  // 0x0 (0x0)
	char pad_96_1 : 7;  // 0x60 (0x60)
	bool bSweep : 1;  // 0x60 (0x60)
	char pad_97[7];  // 0x61 (0x61)
	struct FHitResult SweepHitResult;  // 0x68 (0x68)
	char pad_336_1 : 7;  // 0x150 (0x150)
	bool bTeleport : 1;  // 0x150 (0x150)
	char pad_337[15];  // 0x151 (0x151)


}; 
 
 // Function Engine.LightComponent.SetAffectTranslucentLighting
struct FSetAffectTranslucentLighting
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.Character.StopAnimMontage
struct FStopAnimMontage
{
	struct UAnimMontage* AnimMontage;  // 0x0 (0x0)


}; 
 
 // Function Engine.SceneComponent.K2_SetWorldLocationAndRotation
struct FK2_SetWorldLocationAndRotation
{
	struct FVector NewLocation;  // 0x0 (0x0)
	struct FRotator NewRotation;  // 0x18 (0x18)
	char pad_48_1 : 7;  // 0x30 (0x30)
	bool bSweep : 1;  // 0x30 (0x30)
	char pad_49[7];  // 0x31 (0x31)
	struct FHitResult SweepHitResult;  // 0x38 (0x38)
	char pad_288_1 : 7;  // 0x120 (0x120)
	bool bTeleport : 1;  // 0x120 (0x120)
	char pad_289[7];  // 0x121 (0x121)


}; 
 
 // Function Engine.GameModeBase.MustSpectate
struct FMustSpectate
{
	struct APlayerController* NewPlayerController;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.SceneComponent.K2_SetWorldTransform
struct FK2_SetWorldTransform
{
	struct FTransform NewTransform;  // 0x0 (0x0)
	char pad_96_1 : 7;  // 0x60 (0x60)
	bool bSweep : 1;  // 0x60 (0x60)
	char pad_97[7];  // 0x61 (0x61)
	struct FHitResult SweepHitResult;  // 0x68 (0x68)
	char pad_336_1 : 7;  // 0x150 (0x150)
	bool bTeleport : 1;  // 0x150 (0x150)
	char pad_337[15];  // 0x151 (0x151)


}; 
 
 // ScriptStruct Engine.MaterialOverrideNanite
struct FMaterialOverrideNanite
{
	struct TSoftObjectPtr<UMaterialInterface> OverrideMaterialRef;  // 0x0 (0x0)
	char pad_48_1 : 7;  // 0x30 (0x30)
	bool bEnableOverride : 1;  // 0x30 (0x30)
	char pad_49[7];  // 0x31 (0x31)
	struct UMaterialInterface* OverrideMaterial;  // 0x38 (0x38)


}; 
 
 // ScriptStruct Engine.SoundWaveSpectralDataPerSound
struct FSoundWaveSpectralDataPerSound
{
	struct TArray<struct FSoundWaveSpectralData> SpectralData;  // 0x0 (0x0)
	float PlaybackTime;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)
	struct USoundWave* SoundWave;  // 0x18 (0x18)


}; 
 
 // Function Engine.BlueprintPathsLibrary.ProjectConfigDir
struct FProjectConfigDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.GetActorTimeDilation
struct FGetActorTimeDilation
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.SoundTimecodeOffset
struct FSoundTimecodeOffset
{
	double NumOfSecondsSinceMidnight;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.WeightedBlendable
struct FWeightedBlendable
{
	float Weight;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct UObject* Object;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.AnimNode_LinkedAnimLayer
// Size: 0xC8(Inherited: 0xB8)
struct FAnimNode_LinkedAnimLayer : FAnimNode_LinkedAnimGraph
{
	UAnimLayerInterface* Interface;  // 0xB8 (0xB8)
	struct FName Layer;  // 0xC0 (0xC0)


}; 
 
 // Function Engine.PrimitiveComponent.AddVelocityChangeImpulseAtLocation
struct FAddVelocityChangeImpulseAtLocation
{
	struct FVector Impulse;  // 0x0 (0x0)
	struct FVector Location;  // 0x18 (0x18)
	struct FName BoneName;  // 0x30 (0x30)


}; 
 
 // Function Engine.SceneComponent.SetShouldUpdatePhysicsVolume
struct FSetShouldUpdatePhysicsVolume
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bInShouldUpdatePhysicsVolume : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.CameraShakeBase.GetRootShakePattern
struct FGetRootShakePattern
{
	struct UCameraShakePattern* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SceneComponent.SetVisibility
struct FSetVisibility
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewVisibility : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool bPropagateToChildren : 1;  // 0x1 (0x1)


}; 
 
 // ScriptStruct Engine.POV
struct FPOV
{
	struct FVector Location;  // 0x0 (0x0)
	struct FRotator Rotation;  // 0x18 (0x18)
	float FOV;  // 0x30 (0x30)
	char pad_52[4];  // 0x34 (0x34)


}; 
 
 // Function Engine.AtmosphericFogComponent.DisableSunDisk
struct FDisableSunDisk
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool NewSunDisk : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.SceneComponent.SetWorldScale3D
struct FSetWorldScale3D
{
	struct FVector NewScale;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineComponent.GetUpVectorAtTime
struct FGetUpVectorAtTime
{
	float Time;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x4 (0x4)
	char pad_5_1 : 7;  // 0x5 (0x5)
	bool bUseConstantVelocity : 1;  // 0x5 (0x5)
	char pad_6[2];  // 0x6 (0x6)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.SceneComponent.ToggleVisibility
struct FToggleVisibility
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bPropagateToChildren : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.PhysicsThreadLibrary.AddForce
struct FAddForce
{
	struct FBodyInstanceAsyncPhysicsTickHandle Handle;  // 0x0 (0x0)
	struct FVector Force;  // 0x8 (0x8)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool bAccelChange : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.BlueprintPathsLibrary.EnterpriseFeaturePackDir
struct FEnterpriseFeaturePackDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.AddForceAtLocationLocal
struct FAddForceAtLocationLocal
{
	struct FVector Force;  // 0x0 (0x0)
	struct FVector Location;  // 0x18 (0x18)
	struct FName BoneName;  // 0x30 (0x30)


}; 
 
 // ScriptStruct Engine.BlueprintComponentDelegateBinding
struct FBlueprintComponentDelegateBinding
{
	struct FName ComponentPropertyName;  // 0x0 (0x0)
	struct FName DelegatePropertyName;  // 0x8 (0x8)
	struct FName FunctionNameToBind;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_ClampSizeMax2D
struct FVector_ClampSizeMax2D
{
	struct FVector A;  // 0x0 (0x0)
	double Max;  // 0x18 (0x18)
	struct FVector ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.PrimitiveComponent.AddImpulseAtLocation
struct FAddImpulseAtLocation
{
	struct FVector Impulse;  // 0x0 (0x0)
	struct FVector Location;  // 0x18 (0x18)
	struct FName BoneName;  // 0x30 (0x30)


}; 
 
 // ScriptStruct Engine.InputScaleBiasClamp
struct FInputScaleBiasClamp
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bMapRange : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool bClampResult : 1;  // 0x1 (0x1)
	char pad_2_1 : 7;  // 0x2 (0x2)
	bool bInterpResult : 1;  // 0x2 (0x2)
	char pad_3[1];  // 0x3 (0x3)
	struct FInputRange InRange;  // 0x4 (0x4)
	struct FInputRange OutRange;  // 0xC (0xC)
	float Scale;  // 0x14 (0x14)
	float Bias;  // 0x18 (0x18)
	float ClampMin;  // 0x1C (0x1C)
	float ClampMax;  // 0x20 (0x20)
	float InterpSpeedIncreasing;  // 0x24 (0x24)
	float InterpSpeedDecreasing;  // 0x28 (0x28)
	char pad_44[4];  // 0x2C (0x2C)


}; 
 
 // Function Engine.PrimitiveComponent.AddRadialForce
struct FAddRadialForce
{
	struct FVector Origin;  // 0x0 (0x0)
	float Radius;  // 0x18 (0x18)
	float Strength;  // 0x1C (0x1C)
	enum class ERadialImpulseFalloff Falloff;  // 0x20 (0x20)
	char pad_33_1 : 7;  // 0x21 (0x21)
	bool bAccelChange : 1;  // 0x21 (0x21)
	char pad_34[6];  // 0x22 (0x22)


}; 
 
 // Function Engine.KismetMathLibrary.FindRelativeLookAtRotation
struct FFindRelativeLookAtRotation
{
	struct FTransform StartTransform;  // 0x0 (0x0)
	struct FVector TargetLocation;  // 0x60 (0x60)
	struct FRotator ReturnValue;  // 0x78 (0x78)


}; 
 
 // Function Engine.PrimitiveComponent.AddRadialImpulse
struct FAddRadialImpulse
{
	struct FVector Origin;  // 0x0 (0x0)
	float Radius;  // 0x18 (0x18)
	float Strength;  // 0x1C (0x1C)
	enum class ERadialImpulseFalloff Falloff;  // 0x20 (0x20)
	char pad_33_1 : 7;  // 0x21 (0x21)
	bool bVelChange : 1;  // 0x21 (0x21)
	char pad_34[6];  // 0x22 (0x22)


}; 
 
 // Function Engine.ParticleSystemComponent.GetNumActiveParticles
struct FGetNumActiveParticles
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.AddTorqueInDegrees
struct FAddTorqueInDegrees
{
	struct FVector Torque;  // 0x0 (0x0)
	struct FName BoneName;  // 0x18 (0x18)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool bAccelChange : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.SplineComponent.FindRotationClosestToWorldLocation
struct FFindRotationClosestToWorldLocation
{
	struct FVector WorldLocation;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)
	struct FRotator ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.PrimitiveComponent.AddTorqueInRadians
struct FAddTorqueInRadians
{
	struct FVector Torque;  // 0x0 (0x0)
	struct FName BoneName;  // 0x18 (0x18)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool bAccelChange : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // ScriptStruct Engine.SoundGroup
struct FSoundGroup
{
	enum class ESoundGroup SoundGroup;  // 0x0 (0x0)
	char pad_1[7];  // 0x1 (0x1)
	struct FString DisplayName;  // 0x8 (0x8)
	char bAlwaysDecompressOnLoad : 1;  // 0x18 (0x18)
	char pad_24_1 : 7;  // 0x18 (0x18)
	char pad_25[4];  // 0x19 (0x19)
	float DecompressedDuration;  // 0x1C (0x1C)


}; 
 
 // Function Engine.AnimSingleNodeInstance.SetBlendSpacePosition
struct FSetBlendSpacePosition
{
	struct FVector InPosition;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineComponent.GetDirectionAtSplineInputKey
struct FGetDirectionAtSplineInputKey
{
	float InKey;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.PrimitiveComponent.CanCharacterStepUp
struct FCanCharacterStepUp
{
	struct APawn* Pawn;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // ScriptStruct Engine.NonBlendableIntegerAnimationAttribute
// Size: 0x4(Inherited: 0x4)
struct FNonBlendableIntegerAnimationAttribute : FIntegerAnimationAttribute
{


}; 
 
 // Function Engine.Actor.HasAuthority
struct FHasAuthority
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.BodyInstanceAsyncPhysicsTickHandle
struct FBodyInstanceAsyncPhysicsTickHandle
{
	char pad_0[8];  // 0x0 (0x0)


}; 
 
 // Function Engine.CharacterMovementComponent.SetGroupsToIgnore
struct FSetGroupsToIgnore
{
	int32_t GroupFlags;  // 0x0 (0x0)


}; 
 
 // Function Engine.Character.ClientVeryShortAdjustPosition
struct FClientVeryShortAdjustPosition
{
	float Timestamp;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector NewLoc;  // 0x8 (0x8)
	struct UPrimitiveComponent* NewBase;  // 0x20 (0x20)
	struct FName NewBaseBoneName;  // 0x28 (0x28)
	char pad_48_1 : 7;  // 0x30 (0x30)
	bool bHasBase : 1;  // 0x30 (0x30)
	char pad_49_1 : 7;  // 0x31 (0x31)
	bool bBaseRelativePosition : 1;  // 0x31 (0x31)
	char ServerMovementMode;  // 0x32 (0x32)
	char pad_51[5];  // 0x33 (0x33)


}; 
 
 // Function Engine.PrimitiveComponent.GetCollisionProfileName
struct FGetCollisionProfileName
{
	struct FName ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Quat_IsIdentity
struct FQuat_IsIdentity
{
	struct FQuat Q;  // 0x0 (0x0)
	float Tolerance;  // 0x20 (0x20)
	char pad_36_1 : 7;  // 0x24 (0x24)
	bool ReturnValue : 1;  // 0x24 (0x24)
	char pad_37[11];  // 0x25 (0x25)


}; 
 
 // Function Engine.PrimitiveComponent.GetNumMaterials
struct FGetNumMaterials
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.GetCustomPrimitiveDataIndexForScalarParameter
struct FGetCustomPrimitiveDataIndexForScalarParameter
{
	struct FName ParameterName;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.HLODSubActor
struct FHLODSubActor
{
	char pad_0[1];  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Quat_UnrotateVector
struct FQuat_UnrotateVector
{
	struct FQuat Q;  // 0x0 (0x0)
	struct FVector V;  // 0x20 (0x20)
	struct FVector ReturnValue;  // 0x38 (0x38)


}; 
 
 // ScriptStruct Engine.VectorSpringState
struct FVectorSpringState
{
	char pad_0[56];  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.AudioComponentParam
// Size: 0xA8(Inherited: 0xA0)
struct FAudioComponentParam : FAudioParameter
{
	struct USoundWave* SoundWaveParam;  // 0xA0 (0xA0)


}; 
 
 // Function Engine.PrimitiveComponent.GetCustomPrimitiveDataIndexForVectorParameter
struct FGetCustomPrimitiveDataIndexForVectorParameter
{
	struct FName ParameterName;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.PrimitiveComponent.GetInertiaTensor
struct FGetInertiaTensor
{
	struct FName BoneName;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.PrimitiveComponent.GetLinearDamping
struct FGetLinearDamping
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEndFraction
struct FGetInstanceAssetPlayerTimeFromEndFraction
{
	int32_t AssetPlayerIndex;  // 0x0 (0x0)
	float ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.PrimitiveComponent.GetMass
struct FGetMass
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.GetMaterialFromCollisionFaceIndex
struct FGetMaterialFromCollisionFaceIndex
{
	int32_t FaceIndex;  // 0x0 (0x0)
	int32_t SectionIndex;  // 0x4 (0x4)
	struct UMaterialInterface* ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.MaterialInstanceDynamic.CopyParameterOverrides
struct FCopyParameterOverrides
{
	struct UMaterialInstance* MaterialInstance;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.GetOverlappingActors
struct FGetOverlappingActors
{
	struct TArray<struct AActor*> OverlappingActors;  // 0x0 (0x0)
	AActor* ClassFilter;  // 0x10 (0x10)


}; 
 
 // Function Engine.ImportanceSamplingLibrary.NextSobolCell3D
struct FNextSobolCell3D
{
	int32_t Index;  // 0x0 (0x0)
	int32_t NumCells;  // 0x4 (0x4)
	struct FVector PreviousValue;  // 0x8 (0x8)
	struct FVector ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.AnimInstance.GetActiveCurveNames
struct FGetActiveCurveNames
{
	uint8_t CurveType;  // 0x0 (0x0)
	char pad_1[7];  // 0x1 (0x1)
	struct TArray<struct FName> OutNames;  // 0x8 (0x8)


}; 
 
 // Function Engine.PrimitiveComponent.GetPhysicsAngularVelocityInDegrees
struct FGetPhysicsAngularVelocityInDegrees
{
	struct FName BoneName;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.PrimitiveComponent.IgnoreActorWhenMoving
struct FIgnoreActorWhenMoving
{
	struct AActor* Actor;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bShouldIgnore : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.KismetMathLibrary.IsLeapYear
struct FIsLeapYear
{
	int32_t Year;  // 0x0 (0x0)
	char pad_4_1 : 7;  // 0x4 (0x4)
	bool ReturnValue : 1;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)


}; 
 
 // Function Engine.BlueprintMapLibrary.Map_Keys
struct FMap_Keys
{
	struct TMap<int32_t, int32_t> TargetMap;  // 0x0 (0x0)
	struct TArray<int32_t> Keys;  // 0x50 (0x50)


}; 
 
 // ScriptStruct Engine.VirtualTextureSpacePoolConfig
struct FVirtualTextureSpacePoolConfig
{
	int32_t MinTileSize;  // 0x0 (0x0)
	int32_t MaxTileSize;  // 0x4 (0x4)
	struct TArray<enum class EPixelFormat> Formats;  // 0x8 (0x8)
	int32_t SizeInMegabyte;  // 0x18 (0x18)
	char pad_28_1 : 7;  // 0x1C (0x1C)
	bool bEnableResidencyMipMapBias : 1;  // 0x1C (0x1C)
	char pad_29_1 : 7;  // 0x1D (0x1D)
	bool bAllowSizeScale : 1;  // 0x1D (0x1D)
	char pad_30[2];  // 0x1E (0x1E)
	uint32_t ScalabilityGroup;  // 0x20 (0x20)
	int32_t MinScaledSizeInMegabyte;  // 0x24 (0x24)
	int32_t MaxScaledSizeInMegabyte;  // 0x28 (0x28)
	char pad_44[4];  // 0x2C (0x2C)


}; 
 
 // Function Engine.PrimitiveComponent.IsAnyRigidBodyAwake
struct FIsAnyRigidBodyAwake
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.AudioParameterConversionStatics.IntegerToAudioParameter
struct FIntegerToAudioParameter
{
	struct FName Name;  // 0x0 (0x0)
	int32_t Integer;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)
	struct FAudioParameter ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.Controller.IsLocalPlayerController
struct FIsLocalPlayerController
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.ParticleSystemComponent.GetNamedMaterial
struct FGetNamedMaterial
{
	struct FName InName;  // 0x0 (0x0)
	struct UMaterialInterface* ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.Actor.IsOverlappingActor
struct FIsOverlappingActor
{
	struct AActor* Other;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.Actor.GetHorizontalDistanceTo
struct FGetHorizontalDistanceTo
{
	struct AActor* OtherActor;  // 0x0 (0x0)
	float ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.SkeletalMeshComponent.GetTransformAttribute_Ref
struct FGetTransformAttribute_Ref
{
	struct FName BoneName;  // 0x0 (0x0)
	struct FName AttributeName;  // 0x8 (0x8)
	struct FTransform OutValue;  // 0x10 (0x10)
	uint8_t LookupType;  // 0x70 (0x70)
	char pad_113_1 : 7;  // 0x71 (0x71)
	bool ReturnValue : 1;  // 0x71 (0x71)
	char pad_114[14];  // 0x72 (0x72)


}; 
 
 // Function Engine.PrimitiveComponent.SetCustomPrimitiveDataFloat
struct FSetCustomPrimitiveDataFloat
{
	int32_t DataIndex;  // 0x0 (0x0)
	float Value;  // 0x4 (0x4)


}; 
 
 // Function Engine.PrimitiveComponent.K2_IsCollisionEnabled
struct FK2_IsCollisionEnabled
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.K2_IsQueryCollisionEnabled
struct FK2_IsQueryCollisionEnabled
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.K2_LineTraceComponent
struct FK2_LineTraceComponent
{
	struct FVector TraceStart;  // 0x0 (0x0)
	struct FVector TraceEnd;  // 0x18 (0x18)
	char pad_48_1 : 7;  // 0x30 (0x30)
	bool bTraceComplex : 1;  // 0x30 (0x30)
	char pad_49_1 : 7;  // 0x31 (0x31)
	bool bShowTrace : 1;  // 0x31 (0x31)
	char pad_50_1 : 7;  // 0x32 (0x32)
	bool bPersistentShowTrace : 1;  // 0x32 (0x32)
	char pad_51[5];  // 0x33 (0x33)
	struct FVector HitLocation;  // 0x38 (0x38)
	struct FVector HitNormal;  // 0x50 (0x50)
	struct FName BoneName;  // 0x68 (0x68)
	struct FHitResult OutHit;  // 0x70 (0x70)
	char pad_344_1 : 7;  // 0x158 (0x158)
	bool ReturnValue : 1;  // 0x158 (0x158)
	char pad_345[7];  // 0x159 (0x159)


}; 
 
 // Function Engine.PhysicsConstraintComponent.SetAngularBreakable
struct FSetAngularBreakable
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bAngularBreakable : 1;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	float AngularBreakThreshold;  // 0x4 (0x4)


}; 
 
 // Function Engine.PrimitiveComponent.K2_SphereOverlapComponent
struct FK2_SphereOverlapComponent
{
	struct FVector InSphereCentre;  // 0x0 (0x0)
	float InSphereRadius;  // 0x18 (0x18)
	char pad_28_1 : 7;  // 0x1C (0x1C)
	bool bTraceComplex : 1;  // 0x1C (0x1C)
	char pad_29_1 : 7;  // 0x1D (0x1D)
	bool bShowTrace : 1;  // 0x1D (0x1D)
	char pad_30_1 : 7;  // 0x1E (0x1E)
	bool bPersistentShowTrace : 1;  // 0x1E (0x1E)
	char pad_31[1];  // 0x1F (0x1F)
	struct FVector HitLocation;  // 0x20 (0x20)
	struct FVector HitNormal;  // 0x38 (0x38)
	struct FName BoneName;  // 0x50 (0x50)
	struct FHitResult OutHit;  // 0x58 (0x58)
	char pad_320_1 : 7;  // 0x140 (0x140)
	bool ReturnValue : 1;  // 0x140 (0x140)
	char pad_321[7];  // 0x141 (0x141)


}; 
 
 // Function Engine.CharacterMovementComponent.SetGroupsToAvoid
struct FSetGroupsToAvoid
{
	int32_t GroupFlags;  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.PutRigidBodyToSleep
struct FPutRigidBodyToSleep
{
	struct FName BoneName;  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.SetRenderInMainPass
struct FSetRenderInMainPass
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.GetStreamingSourcePriority
struct FGetStreamingSourcePriority
{
	uint8_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.MeshComponent.SetOverlayMaterial
struct FSetOverlayMaterial
{
	struct UMaterialInterface* NewOverlayMaterial;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.SetAutoDestroyWhenFinished
struct FSetAutoDestroyWhenFinished
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bVal : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInDegrees
struct FSetAllPhysicsAngularVelocityInDegrees
{
	struct FVector NewAngVel;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bAddToCurrent : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // ScriptStruct Engine.KeyHandleMap
struct FKeyHandleMap
{
	char pad_0[96];  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInRadians
struct FSetAllPhysicsAngularVelocityInRadians
{
	struct FVector NewAngVel;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bAddToCurrent : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.PrimitiveComponent.SetAllPhysicsLinearVelocity
struct FSetAllPhysicsLinearVelocity
{
	struct FVector NewVel;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bAddToCurrent : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.PlayerController.ClientIgnoreLookInput
struct FClientIgnoreLookInput
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bIgnore : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.SetAllUseCCD
struct FSetAllUseCCD
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool InUseCCD : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.ExponentialHeightFogComponent.SetSecondFogDensity
struct FSetSecondFogDensity
{
	float Value;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.TransformCurve
// Size: 0x4E0(Inherited: 0x18)
struct FTransformCurve : FAnimCurveBase
{
	struct FVectorCurve TranslationCurve;  // 0x18 (0x18)
	struct FVectorCurve RotationCurve;  // 0x1B0 (0x1B0)
	struct FVectorCurve ScaleCurve;  // 0x348 (0x348)


}; 
 
 // Function Engine.KismetMathLibrary.HSVToRGBLinear
struct FHSVToRGBLinear
{
	struct FLinearColor HSV;  // 0x0 (0x0)
	struct FLinearColor ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.VEase
struct FVEase
{
	struct FVector A;  // 0x0 (0x0)
	struct FVector B;  // 0x18 (0x18)
	float Alpha;  // 0x30 (0x30)
	enum class EEasingFunc EasingFunc;  // 0x34 (0x34)
	char pad_53[3];  // 0x35 (0x35)
	float BlendExp;  // 0x38 (0x38)
	int32_t Steps;  // 0x3C (0x3C)
	struct FVector ReturnValue;  // 0x40 (0x40)


}; 
 
 // Function Engine.PhysicsHandleComponent.SetAngularDamping
struct FSetAngularDamping
{
	float NewAngularDamping;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerInput.GetOuterAPlayerController
struct FGetOuterAPlayerController
{
	struct APlayerController* ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.AnimationActiveTransitionEntry
struct FAnimationActiveTransitionEntry
{
	char pad_0[184];  // 0x0 (0x0)
	struct UBlendProfile* BlendProfile;  // 0xB8 (0xB8)
	char pad_192[8];  // 0xC0 (0xC0)


}; 
 
 // ScriptStruct Engine.BookmarkBaseJumpToSettings
struct FBookmarkBaseJumpToSettings
{
	char pad_0[1];  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.SetBoundsScale
struct FSetBoundsScale
{
	float NewBoundsScale;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.PoseData
struct FPoseData
{
	struct TArray<struct FTransform> LocalSpacePose;  // 0x0 (0x0)
	struct TArray<float> CurveData;  // 0x10 (0x10)


}; 
 
 // Function Engine.PrimitiveComponent.SetCastHiddenShadow
struct FSetCastHiddenShadow
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool NewCastHiddenShadow : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.LinearColor_Yellow
struct FLinearColor_Yellow
{
	struct FLinearColor ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.SetCastShadow
struct FSetCastShadow
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool NewCastShadow : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.CheatManager.DebugCapsuleSweepComplex
struct FDebugCapsuleSweepComplex
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bTraceComplex : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.LightComponent.SetBloomMaxBrightness
struct FSetBloomMaxBrightness
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.VOIPTalker.GetVoiceLevel
struct FGetVoiceLevel
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.Character.K2_OnEndCrouch
struct FK2_OnEndCrouch
{
	float HalfHeightAdjust;  // 0x0 (0x0)
	float ScaledHalfHeightAdjust;  // 0x4 (0x4)


}; 
 
 // Function Engine.KismetTextLibrary.AsCurrency_Integer
struct FAsCurrency_Integer
{
	int32_t Value;  // 0x0 (0x0)
	enum class ERoundingMode RoundingMode;  // 0x4 (0x4)
	char pad_5_1 : 7;  // 0x5 (0x5)
	bool bAlwaysSign : 1;  // 0x5 (0x5)
	char pad_6_1 : 7;  // 0x6 (0x6)
	bool bUseGrouping : 1;  // 0x6 (0x6)
	char pad_7[1];  // 0x7 (0x7)
	int32_t MinimumIntegralDigits;  // 0x8 (0x8)
	int32_t MaximumIntegralDigits;  // 0xC (0xC)
	int32_t MinimumFractionalDigits;  // 0x10 (0x10)
	int32_t MaximumFractionalDigits;  // 0x14 (0x14)
	struct FString CurrencyCode;  // 0x18 (0x18)
	struct FText ReturnValue;  // 0x28 (0x28)


}; 
 
 // Function Engine.InputSettings.RemoveActionMapping
struct FRemoveActionMapping
{
	struct FInputActionKeyMapping KeyMapping;  // 0x0 (0x0)
	char pad_40_1 : 7;  // 0x28 (0x28)
	bool bForceRebuildKeymaps : 1;  // 0x28 (0x28)
	char pad_41[7];  // 0x29 (0x29)


}; 
 
 // Function Engine.PrimitiveComponent.SetExcludeFromLightAttachmentGroup
struct FSetExcludeFromLightAttachmentGroup
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bInExcludeFromLightAttachmentGroup : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.SetCenterOfMass
struct FSetCenterOfMass
{
	struct FVector CenterOfMassOffset;  // 0x0 (0x0)
	struct FName BoneName;  // 0x18 (0x18)


}; 
 
 // Function Engine.ConstraintInstanceBlueprintLibrary.GetLinearPlasticity
struct FGetLinearPlasticity
{
	struct FConstraintInstanceAccessor Accessor;  // 0x0 (0x0)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bLinearPlasticity : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)
	float LinearPlasticityThreshold;  // 0x10 (0x10)
	enum class EConstraintPlasticityType PlasticityType;  // 0x14 (0x14)
	char pad_21[3];  // 0x15 (0x15)


}; 
 
 // Function Engine.KismetMathLibrary.BreakVector3f
struct FBreakVector3f
{
	struct FVector3f InVec;  // 0x0 (0x0)
	float X;  // 0xC (0xC)
	float Y;  // 0x10 (0x10)
	float Z;  // 0x14 (0x14)


}; 
 
 // Function Engine.PrimitiveComponent.SetCollisionEnabled
struct FSetCollisionEnabled
{
	enum class ECollisionEnabled NewType;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.SkeletalMeshClothBuildParams
struct FSkeletalMeshClothBuildParams
{
	struct TWeakObjectPtr<UClothingAssetBase> TargetAsset;  // 0x0 (0x0)
	int32_t TargetLod;  // 0x8 (0x8)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bRemapParameters : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)
	struct FString AssetName;  // 0x10 (0x10)
	int32_t LODIndex;  // 0x20 (0x20)
	int32_t SourceSection;  // 0x24 (0x24)
	char pad_40_1 : 7;  // 0x28 (0x28)
	bool bRemoveFromMesh : 1;  // 0x28 (0x28)
	char pad_41[7];  // 0x29 (0x29)
	struct TSoftObjectPtr<UPhysicsAsset> PhysicsAsset;  // 0x30 (0x30)


}; 
 
 // Function Engine.SkinnedMeshComponent.FindClosestBone_K2
struct FFindClosestBone_K2
{
	struct FVector TestLocation;  // 0x0 (0x0)
	struct FVector BoneLocation;  // 0x18 (0x18)
	float IgnoreScale;  // 0x30 (0x30)
	char pad_52_1 : 7;  // 0x34 (0x34)
	bool bRequirePhysicsAsset : 1;  // 0x34 (0x34)
	char pad_53[3];  // 0x35 (0x35)
	struct FName ReturnValue;  // 0x38 (0x38)


}; 
 
 // Function Engine.PrimitiveComponent.SetCollisionProfileName
struct FSetCollisionProfileName
{
	struct FName InCollisionProfileName;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bUpdateOverlaps : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // ScriptStruct Engine.ActorFolderSet
struct FActorFolderSet
{
	struct TSet<struct UActorFolder*> ActorFolders;  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.SetCollisionResponseToChannel
struct FSetCollisionResponseToChannel
{
	enum class ECollisionChannel Channel;  // 0x0 (0x0)
	enum class ECollisionResponse NewResponse;  // 0x1 (0x1)


}; 
 
 // Function Engine.PrimitiveComponent.SetConstraintMode
struct FSetConstraintMode
{
	enum class EDOFMode ConstraintMode;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.AnimSubsystem
struct FAnimSubsystem
{
	char pad_0[8];  // 0x0 (0x0)


}; 
 
 // Function Engine.GameUserSettings.SetFoliageQuality
struct FSetFoliageQuality
{
	int32_t Value;  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.SetCustomDepthStencilValue
struct FSetCustomDepthStencilValue
{
	int32_t Value;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMeshComponent.LinkAnimClassLayers
struct FLinkAnimClassLayers
{
	UAnimInstance* InClass;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineComponent.SetDefaultUpVector
struct FSetDefaultUpVector
{
	struct FVector UpVector;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.PrimitiveComponent.SetCustomDepthStencilWriteMask
struct FSetCustomDepthStencilWriteMask
{
	uint8_t WriteMaskBit;  // 0x0 (0x0)


}; 
 
 // Function Engine.LightComponent.SetLightFunctionDisabledBrightness
struct FSetLightFunctionDisabledBrightness
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerCameraManager.StopAllInstancesOfCameraShake
struct FStopAllInstancesOfCameraShake
{
	UCameraShakeBase* Shake;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bImmediately : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // ScriptStruct Engine.SlotAnimationTrack
struct FSlotAnimationTrack
{
	struct FName SlotName;  // 0x0 (0x0)
	struct FAnimTrack AnimTrack;  // 0x8 (0x8)


}; 
 
 // Function Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataVector3
struct FSetDefaultCustomPrimitiveDataVector3
{
	int32_t DataIndex;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector Value;  // 0x8 (0x8)


}; 
 
 // Function Engine.PlayerController.ClientReturnToMainMenuWithTextReason
struct FClientReturnToMainMenuWithTextReason
{
	struct FText ReturnReason;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.NamedVector
struct FNamedVector
{
	struct FVector Value;  // 0x0 (0x0)
	struct FName Name;  // 0x18 (0x18)


}; 
 
 // Function Engine.AnimInstance.WasAnimNotifyNameTriggeredInSourceState
struct FWasAnimNotifyNameTriggeredInSourceState
{
	int32_t MachineIndex;  // 0x0 (0x0)
	int32_t StateIndex;  // 0x4 (0x4)
	struct FName NotifyName;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[3];  // 0x11 (0x11)


}; 
 
 // Function Engine.GameUserSettings.IsDynamicResolutionEnabled
struct FIsDynamicResolutionEnabled
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.AnimInstanceProxy
struct FAnimInstanceProxy
{
	char pad_0[2176];  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataVector4
struct FSetDefaultCustomPrimitiveDataVector4
{
	int32_t DataIndex;  // 0x0 (0x0)
	char pad_4[12];  // 0x4 (0x4)
	struct FVector4 Value;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.PerBoneBlendWeight
struct FPerBoneBlendWeight
{
	int32_t SourceIndex;  // 0x0 (0x0)
	float BlendWeight;  // 0x4 (0x4)


}; 
 
 // Function Engine.PrimitiveComponent.SetEnableGravity
struct FSetEnableGravity
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bGravityEnabled : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.SetGenerateOverlapEvents
struct FSetGenerateOverlapEvents
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bInGenerateOverlapEvents : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.NavigationLinkBase
struct FNavigationLinkBase
{
	float LeftProjectHeight;  // 0x0 (0x0)
	float MaxFallDownLength;  // 0x4 (0x4)
	char pad_8[4];  // 0x8 (0x8)
	float SnapRadius;  // 0xC (0xC)
	float SnapHeight;  // 0x10 (0x10)
	struct FNavAgentSelector SupportedAgents;  // 0x14 (0x14)
	char bSupportsAgent0 : 1;  // 0x18 (0x18)
	char bSupportsAgent1 : 1;  // 0x18 (0x18)
	char bSupportsAgent2 : 1;  // 0x18 (0x18)
	char bSupportsAgent3 : 1;  // 0x18 (0x18)
	char bSupportsAgent4 : 1;  // 0x18 (0x18)
	char bSupportsAgent5 : 1;  // 0x18 (0x18)
	char bSupportsAgent6 : 1;  // 0x18 (0x18)
	char bSupportsAgent7 : 1;  // 0x18 (0x18)
	char bSupportsAgent8 : 1;  // 0x19 (0x19)
	char bSupportsAgent9 : 1;  // 0x19 (0x19)
	char bSupportsAgent10 : 1;  // 0x19 (0x19)
	char bSupportsAgent11 : 1;  // 0x19 (0x19)
	char bSupportsAgent12 : 1;  // 0x19 (0x19)
	char bSupportsAgent13 : 1;  // 0x19 (0x19)
	char bSupportsAgent14 : 1;  // 0x19 (0x19)
	char bSupportsAgent15 : 1;  // 0x19 (0x19)
	char pad_26[2];  // 0x1A (0x1A)
	enum class ENavLinkDirection Direction;  // 0x1C (0x1C)
	char bUseSnapHeight : 1;  // 0x1D (0x1D)
	char bSnapToCheapestArea : 1;  // 0x1D (0x1D)
	char bCustomFlag0 : 1;  // 0x1D (0x1D)
	char bCustomFlag1 : 1;  // 0x1D (0x1D)
	char bCustomFlag2 : 1;  // 0x1D (0x1D)
	char bCustomFlag3 : 1;  // 0x1D (0x1D)
	char bCustomFlag4 : 1;  // 0x1D (0x1D)
	char bCustomFlag5 : 1;  // 0x1D (0x1D)
	char bCustomFlag6 : 1;  // 0x1E (0x1E)
	char bCustomFlag7 : 1;  // 0x1E (0x1E)
	char pad_30_1 : 6;  // 0x1E (0x1E)
	char pad_31[2];  // 0x1F (0x1F)
	UNavAreaBase* AreaClass;  // 0x20 (0x20)
	char pad_40[8];  // 0x28 (0x28)


}; 
 
 // Function Engine.KismetMathLibrary.DegTan
struct FDegTan
{
	double A;  // 0x0 (0x0)
	double ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.PrimitiveComponent.SetTranslucencySortDistanceOffset
struct FSetTranslucencySortDistanceOffset
{
	float NewTranslucencySortDistanceOffset;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.HardwareCursorReference
struct FHardwareCursorReference
{
	struct FName CursorPath;  // 0x0 (0x0)
	struct FVector2D HotSpot;  // 0x8 (0x8)


}; 
 
 // Function Engine.DirectionalLightComponent.SetLightShaftOverrideDirection
struct FSetLightShaftOverrideDirection
{
	struct FVector NewValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.AnimCurveParam
struct FAnimCurveParam
{
	struct FName Name;  // 0x0 (0x0)
	char pad_8[4];  // 0x8 (0x8)


}; 
 
 // Function Engine.AmbientSound.AdjustVolume
struct FAdjustVolume
{
	float AdjustVolumeDuration;  // 0x0 (0x0)
	float AdjustVolumeLevel;  // 0x4 (0x4)


}; 
 
 // Function Engine.PoseableMeshComponent.SetBoneLocationByName
struct FSetBoneLocationByName
{
	struct FName BoneName;  // 0x0 (0x0)
	struct FVector InLocation;  // 0x8 (0x8)
	enum class EBoneSpaces BoneSpace;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.PrimitiveComponent.SetLightAttachmentsAsGroup
struct FSetLightAttachmentsAsGroup
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bInLightAttachmentsAsGroup : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.ComponentReference
// Size: 0x28(Inherited: 0x20)
struct FComponentReference : FBaseComponentReference
{
	struct TWeakObjectPtr<AActor> OtherActor;  // 0x20 (0x20)


}; 
 
 // Function Engine.LightComponent.SetLightingChannels
struct FSetLightingChannels
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bChannel0 : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool bChannel1 : 1;  // 0x1 (0x1)
	char pad_2_1 : 7;  // 0x2 (0x2)
	bool bChannel2 : 1;  // 0x2 (0x2)


}; 
 
 // ScriptStruct Engine.MemberReference
struct FMemberReference
{
	struct UObject* MemberParent;  // 0x0 (0x0)
	struct FString MemberScope;  // 0x8 (0x8)
	struct FName MemberName;  // 0x18 (0x18)
	struct FGuid MemberGuid;  // 0x20 (0x20)
	char pad_48_1 : 7;  // 0x30 (0x30)
	bool bSelfContext : 1;  // 0x30 (0x30)
	char pad_49_1 : 7;  // 0x31 (0x31)
	bool bWasDeprecated : 1;  // 0x31 (0x31)
	char pad_50[6];  // 0x32 (0x32)


}; 
 
 // Function Engine.PhysicsHandleComponent.SetLinearDamping
struct FSetLinearDamping
{
	float NewLinearDamping;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineComponent.GetSplineLength
struct FGetSplineLength
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.VolumetricCloudComponent.SetMaterial
struct FSetMaterial
{
	struct UMaterialInterface* NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMeshComponent.SetUpdateClothInEditor
struct FSetUpdateClothInEditor
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool NewUpdateState : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameUserSettings.GetAntiAliasingQuality
struct FGetAntiAliasingQuality
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.SetOwnerNoSee
struct FSetOwnerNoSee
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewOwnerNoSee : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.AnimationCurveIdentifier
struct FAnimationCurveIdentifier
{
	char pad_0[16];  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.WorldPartitionPerWorldSettings
struct FWorldPartitionPerWorldSettings
{
	char pad_0[1];  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.SetPhysicsAngularVelocityInDegrees
struct FSetPhysicsAngularVelocityInDegrees
{
	struct FVector NewAngVel;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bAddToCurrent : 1;  // 0x18 (0x18)
	char pad_25[3];  // 0x19 (0x19)
	struct FName BoneName;  // 0x1C (0x1C)
	char pad_36[4];  // 0x24 (0x24)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_Vector2DToVector
struct FConv_Vector2DToVector
{
	struct FVector2D InVector2D;  // 0x0 (0x0)
	float Z;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)
	struct FVector ReturnValue;  // 0x18 (0x18)


}; 
 
 // ScriptStruct Engine.StatColorMapEntry
struct FStatColorMapEntry
{
	float In;  // 0x0 (0x0)
	struct FColor Out;  // 0x4 (0x4)


}; 
 
 // Function Engine.AnimSingleNodeInstance.SetPreviewCurveOverride
struct FSetPreviewCurveOverride
{
	struct FName PoseName;  // 0x0 (0x0)
	float Value;  // 0x8 (0x8)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bRemoveIfZero : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)


}; 
 
 // Function Engine.PrimitiveComponent.SetPhysicsAngularVelocityInRadians
struct FSetPhysicsAngularVelocityInRadians
{
	struct FVector NewAngVel;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bAddToCurrent : 1;  // 0x18 (0x18)
	char pad_25[3];  // 0x19 (0x19)
	struct FName BoneName;  // 0x1C (0x1C)
	char pad_36[4];  // 0x24 (0x24)


}; 
 
 // Function Engine.TextRenderComponent.K2_SetText
struct FK2_SetText
{
	struct FText Value;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.GetActorForwardVector
struct FGetActorForwardVector
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineComponent.FindDirectionClosestToWorldLocation
struct FFindDirectionClosestToWorldLocation
{
	struct FVector WorldLocation;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)
	struct FVector ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.PrimitiveComponent.SetPhysicsLinearVelocity
struct FSetPhysicsLinearVelocity
{
	struct FVector NewVel;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bAddToCurrent : 1;  // 0x18 (0x18)
	char pad_25[3];  // 0x19 (0x19)
	struct FName BoneName;  // 0x1C (0x1C)
	char pad_36[4];  // 0x24 (0x24)


}; 
 
 // ScriptStruct Engine.RuntimeFloatCurve
struct FRuntimeFloatCurve
{
	struct FRichCurve EditorCurveData;  // 0x0 (0x0)
	struct UCurveFloat* ExternalCurve;  // 0x80 (0x80)


}; 
 
 // Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInRadians
struct FSetPhysicsMaxAngularVelocityInRadians
{
	float NewMaxAngVel;  // 0x0 (0x0)
	char pad_4_1 : 7;  // 0x4 (0x4)
	bool bAddToCurrent : 1;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)
	struct FName BoneName;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetStringTableLibrary.GetRegisteredStringTables
struct FGetRegisteredStringTables
{
	struct TArray<struct FName> ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.AudioReverbEffect
// Size: 0x48(Inherited: 0x8)
struct FAudioReverbEffect : FAudioEffectParameters
{
	char pad_8[64];  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_DoubleToVector
struct FConv_DoubleToVector
{
	double InDouble;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetInternationalizationLibrary.GetCurrentAssetGroupCulture
struct FGetCurrentAssetGroupCulture
{
	struct FName AssetGroup;  // 0x0 (0x0)
	struct FString ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.PoseableMeshComponent.GetBoneScaleByName
struct FGetBoneScaleByName
{
	struct FName BoneName;  // 0x0 (0x0)
	enum class EBoneSpaces BoneSpace;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)
	struct FVector ReturnValue;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.BroadphaseSettings
struct FBroadphaseSettings
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bUseMBPOnClient : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool bUseMBPOnServer : 1;  // 0x1 (0x1)
	char pad_2_1 : 7;  // 0x2 (0x2)
	bool bUseMBPOuterBounds : 1;  // 0x2 (0x2)
	char pad_3[5];  // 0x3 (0x3)
	struct FBox MBPBounds;  // 0x8 (0x8)
	struct FBox MBPOuterBounds;  // 0x40 (0x40)
	uint32_t MBPNumSubdivs;  // 0x78 (0x78)
	char pad_124[4];  // 0x7C (0x7C)


}; 
 
 // Function Engine.PrimitiveComponent.SetReceivesDecals
struct FSetReceivesDecals
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewReceivesDecals : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameplayStatics.SetBaseSoundMix
struct FSetBaseSoundMix
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct USoundMix* InSoundMix;  // 0x8 (0x8)


}; 
 
 // Function Engine.PrimitiveComponent.SetRenderCustomDepth
struct FSetRenderCustomDepth
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.ExponentialHeightFogComponent.SetVolumetricFog
struct FSetVolumetricFog
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewValue : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.TextSizingParameters
struct FTextSizingParameters
{
	float DrawX;  // 0x0 (0x0)
	float DrawY;  // 0x4 (0x4)
	float DrawXL;  // 0x8 (0x8)
	float DrawYL;  // 0xC (0xC)
	struct FVector2D Scaling;  // 0x10 (0x10)
	struct UFont* DrawFont;  // 0x20 (0x20)
	struct FVector2D SpacingAdjust;  // 0x28 (0x28)


}; 
 
 // ScriptStruct Engine.NewLevelInstanceParams
struct FNewLevelInstanceParams
{
	uint8_t Type;  // 0x0 (0x0)
	uint8_t PivotType;  // 0x1 (0x1)
	char pad_2[6];  // 0x2 (0x2)
	struct AActor* PivotActor;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool bAlwaysShowDialog : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)
	struct UWorld* TemplateWorld;  // 0x18 (0x18)
	struct FString LevelPackageName;  // 0x20 (0x20)
	char pad_48_1 : 7;  // 0x30 (0x30)
	bool bPromptForSave : 1;  // 0x30 (0x30)
	char pad_49[7];  // 0x31 (0x31)
	AActor* LevelInstanceClass;  // 0x38 (0x38)
	char pad_64_1 : 7;  // 0x40 (0x40)
	bool bExternalActors : 1;  // 0x40 (0x40)
	char pad_65_1 : 7;  // 0x41 (0x41)
	bool bForceExternalActors : 1;  // 0x41 (0x41)
	char pad_66_1 : 7;  // 0x42 (0x42)
	bool bHideCreationType : 1;  // 0x42 (0x42)
	char pad_67[5];  // 0x43 (0x43)


}; 
 
 // ScriptStruct Engine.ExposedValueHandler
struct FExposedValueHandler
{
	struct TArray<struct FExposedValueCopyRecord> CopyRecords;  // 0x0 (0x0)
	struct UFunction* Function;  // 0x10 (0x10)
	char pad_24[8];  // 0x18 (0x18)
	struct FName BoundFunction;  // 0x20 (0x20)


}; 
 
 // Function Engine.ParticleSystemComponent.SetBeamSourceStrength
struct FSetBeamSourceStrength
{
	int32_t EmitterIndex;  // 0x0 (0x0)
	float NewSourceStrength;  // 0x4 (0x4)
	int32_t SourceIndex;  // 0x8 (0x8)


}; 
 
 // Function Engine.PrimitiveComponent.SetRenderInDepthPass
struct FSetRenderInDepthPass
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.PrimitiveComponent.SetScalarParameterForCustomPrimitiveData
struct FSetScalarParameterForCustomPrimitiveData
{
	struct FName ParameterName;  // 0x0 (0x0)
	float Value;  // 0x8 (0x8)


}; 
 
 // Function Engine.PrimitiveComponent.SetSimulatePhysics
struct FSetSimulatePhysics
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bSimulate : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimInstance.Montage_SetPosition
struct FMontage_SetPosition
{
	struct UAnimMontage* Montage;  // 0x0 (0x0)
	float NewPosition;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.PrimitiveComponent.SetTranslucentSortPriority
struct FSetTranslucentSortPriority
{
	int32_t NewTranslucentSortPriority;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.PrecomputedLightInstanceData
// Size: 0x140(Inherited: 0xB8)
struct FPrecomputedLightInstanceData : FSceneComponentInstanceData
{
	char pad_184[8];  // 0xB8 (0xB8)
	struct FTransform Transform;  // 0xC0 (0xC0)
	struct FGuid LightGuid;  // 0x120 (0x120)
	int32_t PreviewShadowMapChannel;  // 0x130 (0x130)
	char pad_308[12];  // 0x134 (0x134)


}; 
 
 // Function Engine.Actor.FinishAddComponent
struct FFinishAddComponent
{
	struct UActorComponent* Component;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bManualAttachment : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)
	struct FTransform RelativeTransform;  // 0x10 (0x10)


}; 
 
 // Function Engine.CapsuleComponent.SetCapsuleHalfHeight
struct FSetCapsuleHalfHeight
{
	float HalfHeight;  // 0x0 (0x0)
	char pad_4_1 : 7;  // 0x4 (0x4)
	bool bUpdateOverlaps : 1;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)


}; 
 
 // Function Engine.LightComponent.SetLightFColor
struct FSetLightFColor
{
	struct FColor NewLightColor;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.VLerp
struct FVLerp
{
	struct FVector A;  // 0x0 (0x0)
	struct FVector B;  // 0x18 (0x18)
	float Alpha;  // 0x30 (0x30)
	char pad_52[4];  // 0x34 (0x34)
	struct FVector ReturnValue;  // 0x38 (0x38)


}; 
 
 // Function Engine.PrimitiveComponent.SetUseCCD
struct FSetUseCCD
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool InUseCCD : 1;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	struct FName BoneName;  // 0x4 (0x4)


}; 
 
 // ScriptStruct Engine.LightmassPrimitiveSettings
struct FLightmassPrimitiveSettings
{
	char bUseTwoSidedLighting : 1;  // 0x0 (0x0)
	char bShadowIndirectOnly : 1;  // 0x0 (0x0)
	char bUseEmissiveForStaticLighting : 1;  // 0x0 (0x0)
	char bUseVertexNormalForHemisphereGather : 1;  // 0x0 (0x0)
	char pad_0_1 : 4;  // 0x0 (0x0)
	char pad_1[4];  // 0x1 (0x1)
	float EmissiveLightFalloffExponent;  // 0x4 (0x4)
	float EmissiveLightExplicitInfluenceRadius;  // 0x8 (0x8)
	float EmissiveBoost;  // 0xC (0xC)
	float DiffuseBoost;  // 0x10 (0x10)
	float FullyOccludedSamplesFraction;  // 0x14 (0x14)


}; 
 
 // Function Engine.PrimitiveComponent.SetVectorParameterForDefaultCustomPrimitiveData
struct FSetVectorParameterForDefaultCustomPrimitiveData
{
	struct FName ParameterName;  // 0x0 (0x0)
	char pad_8[8];  // 0x8 (0x8)
	struct FVector4 Value;  // 0x10 (0x10)


}; 
 
 // Function Engine.PrimitiveComponent.WakeRigidBody
struct FWakeRigidBody
{
	struct FName BoneName;  // 0x0 (0x0)


}; 
 
 // Function Engine.CharacterMovementComponent.SetCrouchedHalfHeight
struct FSetCrouchedHalfHeight
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.SceneComponentInstanceData
// Size: 0xB8(Inherited: 0x68)
struct FSceneComponentInstanceData : FActorComponentInstanceData
{
	struct TMap<struct USceneComponent*, struct FTransform> AttachedInstanceComponents;  // 0x68 (0x68)


}; 
 
 // Function Engine.KismetMathLibrary.Matrix_GetTransposed
struct FMatrix_GetTransposed
{
	struct FMatrix M;  // 0x0 (0x0)
	struct FMatrix ReturnValue;  // 0x80 (0x80)


}; 
 
 // Function Engine.GameplayStatics.DeactivateReverbEffect
struct FDeactivateReverbEffect
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FName TagName;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.BodyInstance
// Size: 0x190(Inherited: 0x18)
struct FBodyInstance : FBodyInstanceCore
{
	char pad_24[6];  // 0x18 (0x18)
	enum class ECollisionChannel ObjectType;  // 0x1E (0x1E)
	char pad_31[1];  // 0x1F (0x1F)
	enum class ECollisionEnabled CollisionEnabled;  // 0x20 (0x20)
	char pad_33[56];  // 0x21 (0x21)
	uint8_t SleepFamily;  // 0x59 (0x59)
	enum class EDOFMode DOFMode;  // 0x5A (0x5A)
	char bUseCCD : 1;  // 0x5B (0x5B)
	char bIgnoreAnalyticCollisions : 1;  // 0x5B (0x5B)
	char bNotifyRigidBodyCollision : 1;  // 0x5B (0x5B)
	char pad_91_1 : 1;  // 0x5B (0x5B)
	char bSmoothEdgeCollisions : 1;  // 0x5B (0x5B)
	char bLockTranslation : 1;  // 0x5B (0x5B)
	char bLockRotation : 1;  // 0x5B (0x5B)
	char bLockXTranslation : 1;  // 0x5B (0x5B)
	char bLockYTranslation : 1;  // 0x5C (0x5C)
	char bLockZTranslation : 1;  // 0x5C (0x5C)
	char bLockXRotation : 1;  // 0x5C (0x5C)
	char bLockYRotation : 1;  // 0x5C (0x5C)
	char bLockZRotation : 1;  // 0x5C (0x5C)
	char bOverrideMaxAngularVelocity : 1;  // 0x5C (0x5C)
	char pad_92_1 : 2;  // 0x5C (0x5C)
	char bOverrideMaxDepenetrationVelocity : 1;  // 0x5D (0x5D)
	char bOverrideWalkableSlopeOnInstance : 1;  // 0x5D (0x5D)
	char bInterpolateWhenSubStepping : 1;  // 0x5D (0x5D)
	char pad_93_1 : 1;  // 0x5D (0x5D)
	char bInertiaConditioning : 1;  // 0x5D (0x5D)
	char pad_93_2 : 3;  // 0x5D (0x5D)
	char pad_94[27];  // 0x5E (0x5E)
	struct FName CollisionProfileName;  // 0x78 (0x78)
	char PositionSolverIterationCount;  // 0x80 (0x80)
	char VelocitySolverIterationCount;  // 0x81 (0x81)
	char pad_130[6];  // 0x82 (0x82)
	struct FCollisionResponse CollisionResponses;  // 0x88 (0x88)
	float MaxDepenetrationVelocity;  // 0xB8 (0xB8)
	float MassInKgOverride;  // 0xBC (0xBC)
	char pad_192[8];  // 0xC0 (0xC0)
	float LinearDamping;  // 0xC8 (0xC8)
	float AngularDamping;  // 0xCC (0xCC)
	struct FVector CustomDOFPlaneNormal;  // 0xD0 (0xD0)
	struct FVector COMNudge;  // 0xE8 (0xE8)
	float MassScale;  // 0x100 (0x100)
	char pad_260[4];  // 0x104 (0x104)
	struct FVector InertiaTensorScale;  // 0x108 (0x108)
	char pad_288[16];  // 0x120 (0x120)
	struct FWalkableSlopeOverride WalkableSlopeOverride;  // 0x130 (0x130)
	struct UPhysicalMaterial* PhysMaterialOverride;  // 0x140 (0x140)
	float MaxAngularVelocity;  // 0x148 (0x148)
	float CustomSleepThresholdMultiplier;  // 0x14C (0x14C)
	float StabilizationThresholdMultiplier;  // 0x150 (0x150)
	float PhysicsBlendWeight;  // 0x154 (0x154)
	char pad_344[56];  // 0x158 (0x158)


}; 
 
 // Function Engine.GameplayStatics.EnableLiveStreaming
struct FEnableLiveStreaming
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool Enable : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.GetActorTickInterval
struct FGetActorTickInterval
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.BlueprintInputDelegateBinding
struct FBlueprintInputDelegateBinding
{
	char bConsumeInput : 1;  // 0x0 (0x0)
	char bExecuteWhenPaused : 1;  // 0x0 (0x0)
	char bOverrideParentBinding : 1;  // 0x0 (0x0)
	char pad_0_1 : 5;  // 0x0 (0x0)
	char pad_1[4];  // 0x1 (0x1)


}; 
 
 // ScriptStruct Engine.RootMotionMovementParams
struct FRootMotionMovementParams
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bHasRootMotion : 1;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	float BlendWeight;  // 0x4 (0x4)
	char pad_8[8];  // 0x8 (0x8)
	struct FTransform RootMotionTransform;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.CollisionResponse
struct FCollisionResponse
{
	struct FCollisionResponseContainer ResponseToChannels;  // 0x0 (0x0)
	struct TArray<struct FResponseChannel> ResponseArray;  // 0x20 (0x20)


}; 
 
 // Function Engine.SkeletalMesh.SetMinLODForQualityLevels
struct FSetMinLODForQualityLevels
{
	struct TMap<uint8_t, int32_t> QualityLevelMinimumLODs;  // 0x0 (0x0)
	int32_t Default;  // 0x50 (0x50)
	char pad_84[4];  // 0x54 (0x54)


}; 
 
 // ScriptStruct Engine.InputClampConstants
struct FInputClampConstants
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bClampResult : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool bInterpResult : 1;  // 0x1 (0x1)
	char pad_2[2];  // 0x2 (0x2)
	float ClampMin;  // 0x4 (0x4)
	float ClampMax;  // 0x8 (0x8)
	float InterpSpeedIncreasing;  // 0xC (0xC)
	float InterpSpeedDecreasing;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.CustomPrimitiveData
struct FCustomPrimitiveData
{
	struct TArray<float> Data;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.LightingChannels
struct FLightingChannels
{
	char bChannel0 : 1;  // 0x0 (0x0)
	char bChannel1 : 1;  // 0x0 (0x0)
	char bChannel2 : 1;  // 0x0 (0x0)
	char pad_0_1 : 5;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Log
struct FLog
{
	double A;  // 0x0 (0x0)
	double Base;  // 0x8 (0x8)
	double ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.BlueprintPathsLibrary.ProjectPersistentDownloadDir
struct FProjectPersistentDownloadDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.HUD.AddHitBox
struct FAddHitBox
{
	struct FVector2D Position;  // 0x0 (0x0)
	struct FVector2D Size;  // 0x10 (0x10)
	struct FName InName;  // 0x20 (0x20)
	char pad_40_1 : 7;  // 0x28 (0x28)
	bool bConsumesInput : 1;  // 0x28 (0x28)
	char pad_41[3];  // 0x29 (0x29)
	int32_t Priority;  // 0x2C (0x2C)


}; 
 
 // Function Engine.MeshComponent.GetMaterialSlotNames
struct FGetMaterialSlotNames
{
	struct TArray<struct FName> ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.LevelNameAndTime
struct FLevelNameAndTime
{
	struct FString LevelName;  // 0x0 (0x0)
	uint32_t LevelChangeTimeInMS;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)


}; 
 
 // ScriptStruct Engine.ComponentSync
struct FComponentSync
{
	struct FName Name;  // 0x0 (0x0)
	uint8_t SyncOption;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // ScriptStruct Engine.AnimSubsystem_BlendSpaceGraph
// Size: 0x18(Inherited: 0x8)
struct FAnimSubsystem_BlendSpaceGraph : FAnimSubsystem
{
	struct TArray<struct UBlendSpace*> BlendSpaces;  // 0x8 (0x8)


}; 
 
 // Function Engine.MeshComponent.IsMaterialSlotNameValid
struct FIsMaterialSlotNameValid
{
	struct FName MaterialSlotName;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // ScriptStruct Engine.MeshMergingSettings
struct FMeshMergingSettings
{
	int32_t TargetLightMapResolution;  // 0x0 (0x0)
	uint8_t OutputUVs[8];  // 0x4 (0x4)
	struct FMaterialProxySettings MaterialSettings;  // 0xC (0xC)
	int32_t GutterSize;  // 0xA0 (0xA0)
	uint8_t LODSelectionType;  // 0xA4 (0xA4)
	char pad_165[3];  // 0xA5 (0xA5)
	int32_t SpecificLOD;  // 0xA8 (0xA8)
	char bGenerateLightMapUV : 1;  // 0xAC (0xAC)
	char bComputedLightMapResolution : 1;  // 0xAC (0xAC)
	char bPivotPointAtZero : 1;  // 0xAC (0xAC)
	char bMergePhysicsData : 1;  // 0xAC (0xAC)
	char bMergeMaterials : 1;  // 0xAC (0xAC)
	char bCreateMergedMaterial : 1;  // 0xAC (0xAC)
	char bBakeVertexDataToMesh : 1;  // 0xAC (0xAC)
	char bUseVertexDataForBakingMaterial : 1;  // 0xAC (0xAC)
	char bUseTextureBinning : 1;  // 0xAD (0xAD)
	char bReuseMeshLightmapUVs : 1;  // 0xAD (0xAD)
	char bMergeEquivalentMaterials : 1;  // 0xAD (0xAD)
	char bUseLandscapeCulling : 1;  // 0xAD (0xAD)
	char bIncludeImposters : 1;  // 0xAD (0xAD)
	char bSupportRayTracing : 1;  // 0xAD (0xAD)
	char bAllowDistanceField : 1;  // 0xAD (0xAD)
	char pad_173_1 : 1;  // 0xAD (0xAD)
	char pad_174[3];  // 0xAE (0xAE)
	struct FMeshNaniteSettings NaniteSettings;  // 0xB0 (0xB0)
	char pad_204[4];  // 0xCC (0xCC)


}; 
 
 // Function Engine.Actor.PrestreamTextures
struct FPrestreamTextures
{
	float Seconds;  // 0x0 (0x0)
	char pad_4_1 : 7;  // 0x4 (0x4)
	bool bEnableStreaming : 1;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)
	int32_t CinematicTextureGroups;  // 0x8 (0x8)


}; 
 
 // Function Engine.MeshComponent.SetOverlayMaterialMaxDrawDistance
struct FSetOverlayMaterialMaxDrawDistance
{
	float InMaxDrawDistance;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.NetDriverDefinition
struct FNetDriverDefinition
{
	struct FName DefName;  // 0x0 (0x0)
	struct FName DriverClassName;  // 0x8 (0x8)
	struct FName DriverClassNameFallback;  // 0x10 (0x10)
	int32_t MaxChannelsOverride;  // 0x18 (0x18)


}; 
 
 // ScriptStruct Engine.NamedFloat
struct FNamedFloat
{
	float Value;  // 0x0 (0x0)
	struct FName Name;  // 0x4 (0x4)


}; 
 
 // Function Engine.MeshComponent.SetScalarParameterValueOnMaterials
struct FSetScalarParameterValueOnMaterials
{
	struct FName ParameterName;  // 0x0 (0x0)
	float ParameterValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.DataLayerInstance.GetInitialRuntimeState
struct FGetInitialRuntimeState
{
	uint8_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.BoneReductionSetting
struct FBoneReductionSetting
{
	struct TArray<struct FName> BonesToRemove;  // 0x0 (0x0)


}; 
 
 // Function Engine.Character.CanJumpInternal
struct FCanJumpInternal
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.CurveFloat.GetFloatValue
struct FGetFloatValue
{
	float InTime;  // 0x0 (0x0)
	float ReturnValue;  // 0x4 (0x4)


}; 
 
 // ScriptStruct Engine.TableRowBase
struct FTableRowBase
{
	char pad_0[8];  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimationDataController.SetTransformCurveKeys
struct FSetTransformCurveKeys
{
	struct FAnimationCurveIdentifier CurveId;  // 0x0 (0x0)
	struct TArray<struct FTransform> TransformValues;  // 0x10 (0x10)
	struct TArray<float> TimeKeys;  // 0x20 (0x20)
	char pad_48_1 : 7;  // 0x30 (0x30)
	bool bShouldTransact : 1;  // 0x30 (0x30)
	char pad_49_1 : 7;  // 0x31 (0x31)
	bool ReturnValue : 1;  // 0x31 (0x31)
	char pad_50[6];  // 0x32 (0x32)


}; 
 
 // ScriptStruct Engine.CanvasIcon
struct FCanvasIcon
{
	struct UTexture* Texture;  // 0x0 (0x0)
	float U;  // 0x8 (0x8)
	float V;  // 0xC (0xC)
	float UL;  // 0x10 (0x10)
	float VL;  // 0x14 (0x14)


}; 
 
 // Function Engine.SkeletalMeshComponent.SetAnimationMode
struct FSetAnimationMode
{
	enum class EAnimationMode InAnimationMode;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.WeightedBlendables
struct FWeightedBlendables
{
	struct TArray<struct FWeightedBlendable> Array;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineComponent.SetTangentColor
struct FSetTangentColor
{
	struct FLinearColor TangentColor;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.BakedAnimationState
struct FBakedAnimationState
{
	struct FName StateName;  // 0x0 (0x0)
	struct TArray<struct FBakedStateExitTransition> Transitions;  // 0x8 (0x8)
	int32_t StateRootNodeIndex;  // 0x18 (0x18)
	int32_t StartNotify;  // 0x1C (0x1C)
	int32_t EndNotify;  // 0x20 (0x20)
	int32_t FullyBlendedNotify;  // 0x24 (0x24)
	char pad_40_1 : 7;  // 0x28 (0x28)
	bool bIsAConduit : 1;  // 0x28 (0x28)
	char pad_41[3];  // 0x29 (0x29)
	int32_t EntryRuleNodeIndex;  // 0x2C (0x2C)
	struct TArray<int32_t> PlayerNodeIndices;  // 0x30 (0x30)
	struct TArray<int32_t> LayerNodeIndices;  // 0x40 (0x40)
	char pad_80_1 : 7;  // 0x50 (0x50)
	bool bAlwaysResetOnEntry : 1;  // 0x50 (0x50)
	char pad_81[7];  // 0x51 (0x51)


}; 
 
 // ScriptStruct Engine.InputBlendPose
struct FInputBlendPose
{
	struct TArray<struct FBranchFilter> BranchFilters;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.AnimNode_Base
struct FAnimNode_Base
{
	char pad_0[16];  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.PoseLinkBase
struct FPoseLinkBase
{
	char pad_0[8];  // 0x0 (0x0)
	int32_t LinkID;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // ScriptStruct Engine.PoseLink
// Size: 0x10(Inherited: 0x10)
struct FPoseLink : FPoseLinkBase
{


}; 
 
 // Function Engine.GameplayStatics.RebaseZeroOriginOntoLocal
struct FRebaseZeroOriginOntoLocal
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector WorldLocation;  // 0x8 (0x8)
	struct FVector ReturnValue;  // 0x20 (0x20)


}; 
 
 // ScriptStruct Engine.InputRange
struct FInputRange
{
	float Min;  // 0x0 (0x0)
	float Max;  // 0x4 (0x4)


}; 
 
 // ScriptStruct Engine.MarkerSyncData
struct FMarkerSyncData
{
	struct TArray<struct FAnimSyncMarker> AuthoredSyncMarkers;  // 0x0 (0x0)
	char pad_16[16];  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetInputLibrary.InputEvent_IsLeftControlDown
struct FInputEvent_IsLeftControlDown
{
	struct FInputEvent Input;  // 0x0 (0x0)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.CharacterMovementComponent.GetAnalogInputModifier
struct FGetAnalogInputModifier
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.AnimSubsystemInstance
struct FAnimSubsystemInstance
{
	char pad_0[8];  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.RandomPointInBoundingBox
struct FRandomPointInBoundingBox
{
	struct FVector Center;  // 0x0 (0x0)
	struct FVector HalfSize;  // 0x18 (0x18)
	struct FVector ReturnValue;  // 0x30 (0x30)


}; 
 
 // ScriptStruct Engine.InputAlphaBoolBlend
struct FInputAlphaBoolBlend
{
	float BlendInTime;  // 0x0 (0x0)
	float BlendOutTime;  // 0x4 (0x4)
	uint8_t BlendOption;  // 0x8 (0x8)
	char pad_9_1 : 7;  // 0x9 (0x9)
	bool bInitialized : 1;  // 0x9 (0x9)
	char pad_10[6];  // 0xA (0xA)
	struct UCurveFloat* CustomCurve;  // 0x10 (0x10)
	struct FAlphaBlend AlphaBlend;  // 0x18 (0x18)


}; 
 
 // ScriptStruct Engine.InputScaleBias
struct FInputScaleBias
{
	float Scale;  // 0x0 (0x0)
	float Bias;  // 0x4 (0x4)


}; 
 
 // Function Engine.GameplayStatics.CreateSound2D
struct FCreateSound2D
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct USoundBase* Sound;  // 0x8 (0x8)
	float VolumeMultiplier;  // 0x10 (0x10)
	float PitchMultiplier;  // 0x14 (0x14)
	float StartTime;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)
	struct USoundConcurrency* ConcurrencySettings;  // 0x20 (0x20)
	char pad_40_1 : 7;  // 0x28 (0x28)
	bool bPersistAcrossLevelTransition : 1;  // 0x28 (0x28)
	char pad_41_1 : 7;  // 0x29 (0x29)
	bool bAutoDestroy : 1;  // 0x29 (0x29)
	char pad_42[6];  // 0x2A (0x2A)
	struct UAudioComponent* ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.AnimInstance.GetTimeToClosestMarker
struct FGetTimeToClosestMarker
{
	struct FName SyncGroup;  // 0x0 (0x0)
	struct FName MarkerName;  // 0x8 (0x8)
	float OutMarkerTime;  // 0x10 (0x10)
	char pad_20_1 : 7;  // 0x14 (0x14)
	bool ReturnValue : 1;  // 0x14 (0x14)
	char pad_21[3];  // 0x15 (0x15)


}; 
 
 // ScriptStruct Engine.AnimNode_SequencePlayer
// Size: 0x48(Inherited: 0x40)
struct FAnimNode_SequencePlayer : FAnimNode_SequencePlayerBase
{
	struct UAnimSequenceBase* Sequence;  // 0x40 (0x40)


}; 
 
 // ScriptStruct Engine.RealCurve
// Size: 0x70(Inherited: 0x68)
struct FRealCurve : FIndexedCurve
{
	float DefaultValue;  // 0x68 (0x68)
	enum class ERichCurveExtrapolation PreInfinityExtrap;  // 0x6C (0x6C)
	enum class ERichCurveExtrapolation PostInfinityExtrap;  // 0x6D (0x6D)
	char pad_110[2];  // 0x6E (0x6E)


}; 
 
 // Function Engine.CharacterMovementComponent.GetLastUpdateLocation
struct FGetLastUpdateLocation
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.Pawn.PawnMakeNoise
struct FPawnMakeNoise
{
	float Loudness;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector NoiseLocation;  // 0x8 (0x8)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool bUseNoiseMakerLocation : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)
	struct AActor* NoiseMaker;  // 0x28 (0x28)


}; 
 
 // ScriptStruct Engine.RichCurve
// Size: 0x80(Inherited: 0x70)
struct FRichCurve : FRealCurve
{
	struct TArray<struct FRichCurveKey> Keys;  // 0x70 (0x70)


}; 
 
 // ScriptStruct Engine.MovementProperties
struct FMovementProperties
{
	char bCanCrouch : 1;  // 0x0 (0x0)
	char bCanJump : 1;  // 0x0 (0x0)
	char bCanWalk : 1;  // 0x0 (0x0)
	char bCanSwim : 1;  // 0x0 (0x0)
	char bCanFly : 1;  // 0x0 (0x0)
	char pad_0_1 : 3;  // 0x0 (0x0)


}; 
 
 // Function Engine.DataTableFunctionLibrary.EvaluateCurveTableRow
struct FEvaluateCurveTableRow
{
	struct UCurveTable* CurveTable;  // 0x0 (0x0)
	struct FName RowName;  // 0x8 (0x8)
	float InXY;  // 0x10 (0x10)
	enum class EEvaluateCurveTableResult OutResult;  // 0x14 (0x14)
	char pad_21[3];  // 0x15 (0x15)
	float OutXY;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)
	struct FString ContextString;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetMathLibrary.MinOfFloatArray
struct FMinOfFloatArray
{
	struct TArray<float> FloatArray;  // 0x0 (0x0)
	int32_t IndexOfMinValue;  // 0x10 (0x10)
	float MinValue;  // 0x14 (0x14)


}; 
 
 // ScriptStruct Engine.RichCurveKey
struct FRichCurveKey
{
	enum class ERichCurveInterpMode InterpMode;  // 0x0 (0x0)
	enum class ERichCurveTangentMode TangentMode;  // 0x1 (0x1)
	enum class ERichCurveTangentWeightMode TangentWeightMode;  // 0x2 (0x2)
	char pad_3[1];  // 0x3 (0x3)
	float Time;  // 0x4 (0x4)
	float Value;  // 0x8 (0x8)
	float ArriveTangent;  // 0xC (0xC)
	float ArriveTangentWeight;  // 0x10 (0x10)
	float LeaveTangent;  // 0x14 (0x14)
	float LeaveTangentWeight;  // 0x18 (0x18)


}; 
 
 // ScriptStruct Engine.FloatSpringState
struct FFloatSpringState
{
	char pad_0[12];  // 0x0 (0x0)


}; 
 
 // Function Engine.SkinnedMeshComponent.GetVertexOffsetUsage
struct FGetVertexOffsetUsage
{
	int32_t LODIndex;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x4 (0x4)


}; 
 
 // ScriptStruct Engine.TTTrackId
struct FTTTrackId
{
	int32_t TrackType;  // 0x0 (0x0)
	int32_t TrackIndex;  // 0x4 (0x4)


}; 
 
 // ScriptStruct Engine.QuaternionSpringState
struct FQuaternionSpringState
{
	char pad_0[64];  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.BreakVector4
struct FBreakVector4
{
	struct FVector4 InVec;  // 0x0 (0x0)
	double X;  // 0x20 (0x20)
	double Y;  // 0x28 (0x28)
	double Z;  // 0x30 (0x30)
	double W;  // 0x38 (0x38)


}; 
 
 // Function Engine.SkinnedMeshComponent.GetRefPoseTransform
struct FGetRefPoseTransform
{
	int32_t BoneIndex;  // 0x0 (0x0)
	char pad_4[12];  // 0x4 (0x4)
	struct FTransform ReturnValue;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.PSCPool
struct FPSCPool
{
	struct TArray<struct FPSCPoolElem> FreeElements;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.PerPlatformBool
struct FPerPlatformBool
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool Default : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.SoftComponentReference
// Size: 0x50(Inherited: 0x20)
struct FSoftComponentReference : FBaseComponentReference
{
	struct TSoftObjectPtr<AActor> OtherActor;  // 0x20 (0x20)


}; 
 
 // ScriptStruct Engine.SoundModulationDestinationSettings
struct FSoundModulationDestinationSettings
{
	float Value;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct USoundModulatorBase* Modulator;  // 0x8 (0x8)
	struct TSet<struct USoundModulatorBase*> Modulators;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.AnimNodeReference
struct FAnimNodeReference
{
	char pad_0[16];  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Vector4_DotProduct
struct FVector4_DotProduct
{
	struct FVector4 A;  // 0x0 (0x0)
	struct FVector4 B;  // 0x20 (0x20)
	double ReturnValue;  // 0x40 (0x40)
	char pad_72[8];  // 0x48 (0x48)


}; 
 
 // Function Engine.Character.K2_UpdateCustomMovement
struct FK2_UpdateCustomMovement
{
	float DeltaTime;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.AnimNode_AssetPlayerBase
// Size: 0x38(Inherited: 0x10)
struct FAnimNode_AssetPlayerBase : FAnimNode_AssetPlayerRelevancyBase
{
	char pad_16[16];  // 0x10 (0x10)
	float BlendWeight;  // 0x20 (0x20)
	float InternalTimeAccumulator;  // 0x24 (0x24)
	char pad_40[16];  // 0x28 (0x28)


}; 
 
 // Function Engine.GameplayStatics.PopSoundMixModifier
struct FPopSoundMixModifier
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct USoundMix* InSoundMixModifier;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.TTLinearColorTrack
// Size: 0x28(Inherited: 0x20)
struct FTTLinearColorTrack : FTTPropertyTrack
{
	struct UCurveLinearColor* CurveLinearColor;  // 0x20 (0x20)


}; 
 
 // ScriptStruct Engine.AnimationErrorStats
struct FAnimationErrorStats
{
	char pad_0[16];  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineComponent.GetWorldLocationAtDistanceAlongSpline
struct FGetWorldLocationAtDistanceAlongSpline
{
	float Distance;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.PoseSnapshot
struct FPoseSnapshot
{
	struct TArray<struct FTransform> LocalTransforms;  // 0x0 (0x0)
	struct TArray<struct FName> BoneNames;  // 0x10 (0x10)
	struct FName SkeletalMeshName;  // 0x20 (0x20)
	struct FName SnapshotName;  // 0x28 (0x28)
	char pad_48_1 : 7;  // 0x30 (0x30)
	bool bIsValid : 1;  // 0x30 (0x30)
	char pad_49[7];  // 0x31 (0x31)


}; 
 
 // Function Engine.Actor.GetActorScale3D
struct FGetActorScale3D
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.SocketReference
struct FSocketReference
{
	char pad_0[96];  // 0x0 (0x0)
	struct FName SocketName;  // 0x60 (0x60)
	char pad_104[8];  // 0x68 (0x68)


}; 
 
 // Function Engine.Actor.GetInputAxisValue
struct FGetInputAxisValue
{
	struct FName InputAxisName;  // 0x0 (0x0)
	float ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetTextLibrary.TextToUpper
struct FTextToUpper
{
	struct FText InText;  // 0x0 (0x0)
	struct FText ReturnValue;  // 0x18 (0x18)


}; 
 
 // ScriptStruct Engine.InstanceCacheDataBase
struct FInstanceCacheDataBase
{
	char pad_0[8];  // 0x0 (0x0)
	struct TArray<char> SavedProperties;  // 0x8 (0x8)
	struct FDataCacheDuplicatedObjectData UniqueTransientPackage;  // 0x18 (0x18)
	struct TArray<struct FDataCacheDuplicatedObjectData> DuplicatedObjects;  // 0x28 (0x28)
	struct TArray<struct UObject*> ReferencedObjects;  // 0x38 (0x38)
	struct TArray<struct FName> ReferencedNames;  // 0x48 (0x48)


}; 
 
 // Function Engine.SplineComponent.GetTimeAtDistanceAlongSpline
struct FGetTimeAtDistanceAlongSpline
{
	float Distance;  // 0x0 (0x0)
	float ReturnValue;  // 0x4 (0x4)


}; 
 
 // ScriptStruct Engine.ActorComponentInstanceData
// Size: 0x68(Inherited: 0x58)
struct FActorComponentInstanceData : FInstanceCacheDataBase
{
	struct UObject* SourceComponentTemplate;  // 0x58 (0x58)
	uint8_t SourceComponentCreationMethod;  // 0x60 (0x60)
	char pad_97[3];  // 0x61 (0x61)
	int32_t SourceComponentTypeSerializedIndex;  // 0x64 (0x64)


}; 
 
 // Function Engine.Actor.ActorHasTag
struct FActorHasTag
{
	struct FName Tag;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.CharacterMovementComponent.GetCrouchedHalfHeight
struct FGetCrouchedHalfHeight
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.AddComponent
struct FAddComponent
{
	struct FName TemplateName;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bManualAttachment : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)
	struct FTransform RelativeTransform;  // 0x10 (0x10)
	struct UObject* ComponentTemplateContext;  // 0x70 (0x70)
	char pad_120_1 : 7;  // 0x78 (0x78)
	bool bDeferredFinish : 1;  // 0x78 (0x78)
	char pad_121[7];  // 0x79 (0x79)
	struct UActorComponent* ReturnValue;  // 0x80 (0x80)
	char pad_136[8];  // 0x88 (0x88)


}; 
 
 // Function Engine.Actor.AddComponentByClass
struct FAddComponentByClass
{
	UActorComponent* Class;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bManualAttachment : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)
	struct FTransform RelativeTransform;  // 0x10 (0x10)
	char pad_112_1 : 7;  // 0x70 (0x70)
	bool bDeferredFinish : 1;  // 0x70 (0x70)
	char pad_113[7];  // 0x71 (0x71)
	struct UActorComponent* ReturnValue;  // 0x78 (0x78)


}; 
 
 // Function Engine.TimelineComponent.IsLooping
struct FIsLooping
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.Character.ClientAdjustRootMotionSourcePosition
struct FClientAdjustRootMotionSourcePosition
{
	float Timestamp;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FRootMotionSourceGroup ServerRootMotion;  // 0x8 (0x8)
	char pad_80_1 : 7;  // 0x50 (0x50)
	bool bHasAnimRootMotion : 1;  // 0x50 (0x50)
	char pad_81[3];  // 0x51 (0x51)
	float ServerMontageTrackPosition;  // 0x54 (0x54)
	struct FVector ServerLoc;  // 0x58 (0x58)
	struct FVector_NetQuantizeNormal ServerRotation;  // 0x70 (0x70)
	float ServerVelZ;  // 0x88 (0x88)
	char pad_140[4];  // 0x8C (0x8C)
	struct UPrimitiveComponent* ServerBase;  // 0x90 (0x90)
	struct FName ServerBoneName;  // 0x98 (0x98)
	char pad_160_1 : 7;  // 0xA0 (0xA0)
	bool bHasBase : 1;  // 0xA0 (0xA0)
	char pad_161_1 : 7;  // 0xA1 (0xA1)
	bool bBaseRelativePosition : 1;  // 0xA1 (0xA1)
	char ServerMovementMode;  // 0xA2 (0xA2)
	char pad_163[5];  // 0xA3 (0xA3)


}; 
 
 // ScriptStruct Engine.FontImportOptionsData
struct FFontImportOptionsData
{
	struct FString FontName;  // 0x0 (0x0)
	float Height;  // 0x10 (0x10)
	char bEnableAntialiasing : 1;  // 0x14 (0x14)
	char bEnableBold : 1;  // 0x14 (0x14)
	char bEnableItalic : 1;  // 0x14 (0x14)
	char bEnableUnderline : 1;  // 0x14 (0x14)
	char bAlphaOnly : 1;  // 0x14 (0x14)
	char pad_20_1 : 3;  // 0x14 (0x14)
	char pad_21[4];  // 0x15 (0x15)
	enum class EFontImportCharacterSet CharacterSet;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)
	struct FString Chars;  // 0x20 (0x20)
	struct FString UnicodeRange;  // 0x30 (0x30)
	struct FString CharsFilePath;  // 0x40 (0x40)
	struct FString CharsFileWildcard;  // 0x50 (0x50)
	char bCreatePrintableOnly : 1;  // 0x60 (0x60)
	char bIncludeASCIIRange : 1;  // 0x60 (0x60)
	char pad_96_1 : 6;  // 0x60 (0x60)
	char pad_97[4];  // 0x61 (0x61)
	struct FLinearColor ForegroundColor;  // 0x64 (0x64)
	char bEnableDropShadow : 1;  // 0x74 (0x74)
	char pad_116_1 : 7;  // 0x74 (0x74)
	char pad_117[4];  // 0x75 (0x75)
	int32_t TexturePageWidth;  // 0x78 (0x78)
	int32_t TexturePageMaxHeight;  // 0x7C (0x7C)
	int32_t XPadding;  // 0x80 (0x80)
	int32_t YPadding;  // 0x84 (0x84)
	int32_t ExtendBoxTop;  // 0x88 (0x88)
	int32_t ExtendBoxBottom;  // 0x8C (0x8C)
	int32_t ExtendBoxRight;  // 0x90 (0x90)
	int32_t ExtendBoxLeft;  // 0x94 (0x94)
	char bEnableLegacyMode : 1;  // 0x98 (0x98)
	char pad_152_1 : 7;  // 0x98 (0x98)
	char pad_153[4];  // 0x99 (0x99)
	int32_t Kerning;  // 0x9C (0x9C)
	char bUseDistanceFieldAlpha : 1;  // 0xA0 (0xA0)
	char pad_160_1 : 7;  // 0xA0 (0xA0)
	char pad_161[4];  // 0xA1 (0xA1)
	int32_t DistanceFieldScaleFactor;  // 0xA4 (0xA4)
	float DistanceFieldScanRadiusScale;  // 0xA8 (0xA8)
	char pad_172[4];  // 0xAC (0xAC)


}; 
 
 // Function Engine.GameUserSettings.GetFrameRateLimit
struct FGetFrameRateLimit
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.DetachRootComponentFromParent
struct FDetachRootComponentFromParent
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bMaintainWorldPosition : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetStringLibrary.Conv_InputDeviceIdToString
struct FConv_InputDeviceIdToString
{
	struct FInputDeviceId InDeviceID;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FString ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.Actor.GetActorEyesViewPoint
struct FGetActorEyesViewPoint
{
	struct FVector OutLocation;  // 0x0 (0x0)
	struct FRotator OutRotation;  // 0x18 (0x18)


}; 
 
 // Function Engine.Actor.ReceiveActorOnClicked
struct FReceiveActorOnClicked
{
	struct FKey ButtonPressed;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetInputLibrary.Key_IsDigital
struct FKey_IsDigital
{
	struct FKey Key;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool ReturnValue : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.Actor.GetActorRightVector
struct FGetActorRightVector
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.GetActorUpVector
struct FGetActorUpVector
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.ConstraintProfileProperties
struct FConstraintProfileProperties
{
	float ProjectionLinearTolerance;  // 0x0 (0x0)
	float ProjectionAngularTolerance;  // 0x4 (0x4)
	float ProjectionLinearAlpha;  // 0x8 (0x8)
	float ProjectionAngularAlpha;  // 0xC (0xC)
	float ShockPropagationAlpha;  // 0x10 (0x10)
	float LinearBreakThreshold;  // 0x14 (0x14)
	float LinearPlasticityThreshold;  // 0x18 (0x18)
	float AngularBreakThreshold;  // 0x1C (0x1C)
	float AngularPlasticityThreshold;  // 0x20 (0x20)
	float ContactTransferScale;  // 0x24 (0x24)
	struct FLinearConstraint LinearLimit;  // 0x28 (0x28)
	struct FConeConstraint ConeLimit;  // 0x44 (0x44)
	struct FTwistConstraint TwistLimit;  // 0x64 (0x64)
	char bDisableCollision : 1;  // 0x80 (0x80)
	char bParentDominates : 1;  // 0x80 (0x80)
	char bEnableShockPropagation : 1;  // 0x80 (0x80)
	char bEnableProjection : 1;  // 0x80 (0x80)
	char bAngularBreakable : 1;  // 0x80 (0x80)
	char bAngularPlasticity : 1;  // 0x80 (0x80)
	char bLinearBreakable : 1;  // 0x80 (0x80)
	char bLinearPlasticity : 1;  // 0x80 (0x80)
	char pad_129[7];  // 0x81 (0x81)
	struct FLinearDriveConstraint LinearDrive;  // 0x88 (0x88)
	struct FAngularDriveConstraint AngularDrive;  // 0xF0 (0xF0)
	enum class EConstraintPlasticityType LinearPlasticityType;  // 0x158 (0x158)
	char pad_345[7];  // 0x159 (0x159)


}; 
 
 // Function Engine.KismetTextLibrary.AsTimeZoneDate_DateTime
struct FAsTimeZoneDate_DateTime
{
	struct FDateTime InDateTime;  // 0x0 (0x0)
	struct FString InTimeZone;  // 0x8 (0x8)
	struct FText ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.PointLightComponent.SetLightFalloffExponent
struct FSetLightFalloffExponent
{
	float NewLightFalloffExponent;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.GetAllChildActors
struct FGetAllChildActors
{
	struct TArray<struct AActor*> ChildActors;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool bIncludeDescendants : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // ScriptStruct Engine.AssetManagerRedirect
struct FAssetManagerRedirect
{
	struct FString Old;  // 0x0 (0x0)
	struct FString New;  // 0x10 (0x10)


}; 
 
 // Function Engine.Actor.GetAttachedActors
struct FGetAttachedActors
{
	struct TArray<struct AActor*> OutActors;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool bResetArray : 1;  // 0x10 (0x10)
	char pad_17_1 : 7;  // 0x11 (0x11)
	bool bRecursivelyIncludeAttachedActors : 1;  // 0x11 (0x11)
	char pad_18[6];  // 0x12 (0x12)


}; 
 
 // ScriptStruct Engine.NamedNetDriver
struct FNamedNetDriver
{
	struct UNetDriver* NetDriver;  // 0x0 (0x0)
	char pad_8[8];  // 0x8 (0x8)


}; 
 
 // Function Engine.Actor.GetAttachParentActor
struct FGetAttachParentActor
{
	struct AActor* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.GetComponentByClass
struct FGetComponentByClass
{
	UActorComponent* ComponentClass;  // 0x0 (0x0)
	struct UActorComponent* ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.GameplayStatics.SetSubtitlesEnabled
struct FSetSubtitlesEnabled
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bEnabled : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.GetComponentsByInterface
struct FGetComponentsByInterface
{
	UInterface* Interface;  // 0x0 (0x0)
	struct TArray<struct UActorComponent*> ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.Actor.K2_GetActorLocation
struct FK2_GetActorLocation
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineComponent.DivideSplineIntoPolylineRecursiveWithDistances
struct FDivideSplineIntoPolylineRecursiveWithDistances
{
	float StartDistanceAlongSpline;  // 0x0 (0x0)
	float EndDistanceAlongSpline;  // 0x4 (0x4)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)
	float MaxSquareDistanceFromSpline;  // 0xC (0xC)
	struct TArray<struct FVector> OutPoints;  // 0x10 (0x10)
	struct TArray<double> OutDistancesAlongSpline;  // 0x20 (0x20)
	char pad_48_1 : 7;  // 0x30 (0x30)
	bool ReturnValue : 1;  // 0x30 (0x30)
	char pad_49[7];  // 0x31 (0x31)


}; 
 
 // Function Engine.Actor.GetInstigator
struct FGetInstigator
{
	struct APawn* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.GetLevelTransform
struct FGetLevelTransform
{
	struct FTransform ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineComponent.GetTangentAtSplinePoint
struct FGetTangentAtSplinePoint
{
	int32_t PointIndex;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.Actor.GetLocalRole
struct FGetLocalRole
{
	enum class ENetRole ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameUserSettings.IsScreenResolutionDirty
struct FIsScreenResolutionDirty
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.GetRayTracingGroupId
struct FGetRayTracingGroupId
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetArrayLibrary.Array_RemoveItem
struct FArray_RemoveItem
{
	struct TArray<int32_t> TargetArray;  // 0x0 (0x0)
	int32_t Item;  // 0x10 (0x10)
	char pad_20_1 : 7;  // 0x14 (0x14)
	bool ReturnValue : 1;  // 0x14 (0x14)
	char pad_21[3];  // 0x15 (0x15)


}; 
 
 // Function Engine.KismetMathLibrary.Matrix_GetScaleVector
struct FMatrix_GetScaleVector
{
	struct FMatrix M;  // 0x0 (0x0)
	float Tolerance;  // 0x80 (0x80)
	char pad_132[4];  // 0x84 (0x84)
	struct FVector ReturnValue;  // 0x88 (0x88)


}; 
 
 // Function Engine.Actor.GetVelocity
struct FGetVelocity
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.IsActorTickEnabled
struct FIsActorTickEnabled
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.VirtualBone
struct FVirtualBone
{
	struct FName SourceBoneName;  // 0x0 (0x0)
	struct FName TargetBoneName;  // 0x8 (0x8)
	struct FName VirtualBoneName;  // 0x10 (0x10)


}; 
 
 // Function Engine.DataTableFunctionLibrary.GetDataTableColumnAsString
struct FGetDataTableColumnAsString
{
	struct UDataTable* DataTable;  // 0x0 (0x0)
	struct FName PropertyName;  // 0x8 (0x8)
	struct TArray<struct FString> ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.BreakRotIntoAxes
struct FBreakRotIntoAxes
{
	struct FRotator InRot;  // 0x0 (0x0)
	struct FVector X;  // 0x18 (0x18)
	struct FVector Y;  // 0x30 (0x30)
	struct FVector Z;  // 0x48 (0x48)


}; 
 
 // Function Engine.Actor.IsChildActor
struct FIsChildActor
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.K2_AddActorWorldRotation
struct FK2_AddActorWorldRotation
{
	struct FRotator DeltaRotation;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bSweep : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)
	struct FHitResult SweepHitResult;  // 0x20 (0x20)
	char pad_264_1 : 7;  // 0x108 (0x108)
	bool bTeleport : 1;  // 0x108 (0x108)
	char pad_265[7];  // 0x109 (0x109)


}; 
 
 // Function Engine.HUD.GetOwningPawn
struct FGetOwningPawn
{
	struct APawn* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.K2_AddActorWorldTransform
struct FK2_AddActorWorldTransform
{
	struct FTransform DeltaTransform;  // 0x0 (0x0)
	char pad_96_1 : 7;  // 0x60 (0x60)
	bool bSweep : 1;  // 0x60 (0x60)
	char pad_97[7];  // 0x61 (0x61)
	struct FHitResult SweepHitResult;  // 0x68 (0x68)
	char pad_336_1 : 7;  // 0x150 (0x150)
	bool bTeleport : 1;  // 0x150 (0x150)
	char pad_337[15];  // 0x151 (0x151)


}; 
 
 // Function Engine.KismetInputLibrary.Key_GetNavigationDirectionFromKey
struct FKey_GetNavigationDirectionFromKey
{
	struct FKeyEvent InKeyEvent;  // 0x0 (0x0)
	uint8_t ReturnValue;  // 0x40 (0x40)
	char pad_65[7];  // 0x41 (0x41)


}; 
 
 // Function Engine.KismetInputLibrary.Key_IsValid
struct FKey_IsValid
{
	struct FKey Key;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool ReturnValue : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.GameModeBase.PlayerCanRestart
struct FPlayerCanRestart
{
	struct APlayerController* Player;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.Actor.K2_AddActorWorldTransformKeepScale
struct FK2_AddActorWorldTransformKeepScale
{
	struct FTransform DeltaTransform;  // 0x0 (0x0)
	char pad_96_1 : 7;  // 0x60 (0x60)
	bool bSweep : 1;  // 0x60 (0x60)
	char pad_97[7];  // 0x61 (0x61)
	struct FHitResult SweepHitResult;  // 0x68 (0x68)
	char pad_336_1 : 7;  // 0x150 (0x150)
	bool bTeleport : 1;  // 0x150 (0x150)
	char pad_337[15];  // 0x151 (0x151)


}; 
 
 // ScriptStruct Engine.BPVariableMetaDataEntry
struct FBPVariableMetaDataEntry
{
	struct FName DataKey;  // 0x0 (0x0)
	struct FString DataValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.AudioComponent.GetCookedFFTDataForAllPlayingSounds
struct FGetCookedFFTDataForAllPlayingSounds
{
	struct TArray<struct FSoundWaveSpectralDataPerSound> OutSoundWaveSpectralData;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // ScriptStruct Engine.RollbackNetStartupActorInfo
struct FRollbackNetStartupActorInfo
{
	char pad_0[8];  // 0x0 (0x0)
	struct UObject* Archetype;  // 0x8 (0x8)
	char pad_16[176];  // 0x10 (0x10)
	struct TArray<struct UObject*> ObjReferences;  // 0xC0 (0xC0)


}; 
 
 // Function Engine.Actor.K2_AttachRootComponentTo
struct FK2_AttachRootComponentTo
{
	struct USceneComponent* InParent;  // 0x0 (0x0)
	struct FName InSocketName;  // 0x8 (0x8)
	enum class EAttachLocation AttachLocationType;  // 0x10 (0x10)
	char pad_17_1 : 7;  // 0x11 (0x11)
	bool bWeldSimulatedBodies : 1;  // 0x11 (0x11)
	char pad_18[6];  // 0x12 (0x12)


}; 
 
 // Function Engine.Actor.K2_AttachToActor
struct FK2_AttachToActor
{
	struct AActor* ParentActor;  // 0x0 (0x0)
	struct FName SocketName;  // 0x8 (0x8)
	uint8_t LocationRule;  // 0x10 (0x10)
	uint8_t RotationRule;  // 0x11 (0x11)
	uint8_t ScaleRule;  // 0x12 (0x12)
	char pad_19_1 : 7;  // 0x13 (0x13)
	bool bWeldSimulatedBodies : 1;  // 0x13 (0x13)
	char pad_20[4];  // 0x14 (0x14)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_IsUnit
struct FVector_IsUnit
{
	struct FVector A;  // 0x0 (0x0)
	float SquaredLenthTolerance;  // 0x18 (0x18)
	char pad_28_1 : 7;  // 0x1C (0x1C)
	bool ReturnValue : 1;  // 0x1C (0x1C)
	char pad_29[3];  // 0x1D (0x1D)


}; 
 
 // Function Engine.Actor.K2_OnEndViewTarget
struct FK2_OnEndViewTarget
{
	struct APlayerController* PC;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.FloatCurve
// Size: 0x98(Inherited: 0x18)
struct FFloatCurve : FAnimCurveBase
{
	struct FRichCurve FloatCurve;  // 0x18 (0x18)


}; 
 
 // Function Engine.Actor.K2_SetActorRelativeLocation
struct FK2_SetActorRelativeLocation
{
	struct FVector NewRelativeLocation;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bSweep : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)
	struct FHitResult SweepHitResult;  // 0x20 (0x20)
	char pad_264_1 : 7;  // 0x108 (0x108)
	bool bTeleport : 1;  // 0x108 (0x108)
	char pad_265[7];  // 0x109 (0x109)


}; 
 
 // ScriptStruct Engine.ImportanceTexture
struct FImportanceTexture
{
	struct FIntPoint Size;  // 0x0 (0x0)
	int32_t NumMips;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)
	struct TArray<float> MarginalCDF;  // 0x10 (0x10)
	struct TArray<float> ConditionalCDF;  // 0x20 (0x20)
	struct TArray<struct FColor> TextureData;  // 0x30 (0x30)
	struct TWeakObjectPtr<UTexture2D> Texture;  // 0x40 (0x40)
	enum class EImportanceWeight Weighting;  // 0x48 (0x48)
	char pad_73[7];  // 0x49 (0x49)


}; 
 
 // Function Engine.Actor.K2_SetActorRelativeRotation
struct FK2_SetActorRelativeRotation
{
	struct FRotator NewRelativeRotation;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bSweep : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)
	struct FHitResult SweepHitResult;  // 0x20 (0x20)
	char pad_264_1 : 7;  // 0x108 (0x108)
	bool bTeleport : 1;  // 0x108 (0x108)
	char pad_265[7];  // 0x109 (0x109)


}; 
 
 // Function Engine.Actor.K2_SetActorRelativeTransform
struct FK2_SetActorRelativeTransform
{
	struct FTransform NewRelativeTransform;  // 0x0 (0x0)
	char pad_96_1 : 7;  // 0x60 (0x60)
	bool bSweep : 1;  // 0x60 (0x60)
	char pad_97[7];  // 0x61 (0x61)
	struct FHitResult SweepHitResult;  // 0x68 (0x68)
	char pad_336_1 : 7;  // 0x150 (0x150)
	bool bTeleport : 1;  // 0x150 (0x150)
	char pad_337[15];  // 0x151 (0x151)


}; 
 
 // ScriptStruct Engine.InstancedStaticMeshLightMapInstanceData
struct FInstancedStaticMeshLightMapInstanceData
{
	struct FTransform Transform;  // 0x0 (0x0)
	struct TArray<struct FGuid> MapBuildDataIds;  // 0x60 (0x60)


}; 
 
 // ScriptStruct Engine.ISMClientInstance
struct FISMClientInstance
{
	struct TArray<int32_t> ComponentIndices;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.K2_SetActorRotation
struct FK2_SetActorRotation
{
	struct FRotator NewRotation;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bTeleportPhysics : 1;  // 0x18 (0x18)
	char pad_25_1 : 7;  // 0x19 (0x19)
	bool ReturnValue : 1;  // 0x19 (0x19)
	char pad_26[6];  // 0x1A (0x1A)


}; 
 
 // Function Engine.Actor.K2_SetActorTransform
struct FK2_SetActorTransform
{
	struct FTransform NewTransform;  // 0x0 (0x0)
	char pad_96_1 : 7;  // 0x60 (0x60)
	bool bSweep : 1;  // 0x60 (0x60)
	char pad_97[7];  // 0x61 (0x61)
	struct FHitResult SweepHitResult;  // 0x68 (0x68)
	char pad_336_1 : 7;  // 0x150 (0x150)
	bool bTeleport : 1;  // 0x150 (0x150)
	char pad_337_1 : 7;  // 0x151 (0x151)
	bool ReturnValue : 1;  // 0x151 (0x151)
	char pad_338[14];  // 0x152 (0x152)


}; 
 
 // Function Engine.AnimationDataController.GetModel
struct FGetModel
{
	struct UAnimDataModel* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.InstancedStaticMeshComponent.AddInstances
struct FAddInstances
{
	struct TArray<struct FTransform> InstanceTransforms;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool bShouldReturnIndices : 1;  // 0x10 (0x10)
	char pad_17_1 : 7;  // 0x11 (0x11)
	bool bWorldSpace : 1;  // 0x11 (0x11)
	char pad_18[6];  // 0x12 (0x12)
	struct TArray<int32_t> ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.Actor.K2_TeleportTo
struct FK2_TeleportTo
{
	struct FVector DestLocation;  // 0x0 (0x0)
	struct FRotator DestRotation;  // 0x18 (0x18)
	char pad_48_1 : 7;  // 0x30 (0x30)
	bool ReturnValue : 1;  // 0x30 (0x30)
	char pad_49[7];  // 0x31 (0x31)


}; 
 
 // Function Engine.SplineComponent.FindTransformClosestToWorldLocation
struct FFindTransformClosestToWorldLocation
{
	struct FVector WorldLocation;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x18 (0x18)
	char pad_25_1 : 7;  // 0x19 (0x19)
	bool bUseScale : 1;  // 0x19 (0x19)
	char pad_26[6];  // 0x1A (0x1A)
	struct FTransform ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.PawnNoiseEmitterComponent.MakeNoise
struct FMakeNoise
{
	struct AActor* NoiseMaker;  // 0x0 (0x0)
	float Loudness;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)
	struct FVector NoiseLocation;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.Vector4_Normalize3
struct FVector4_Normalize3
{
	struct FVector4 A;  // 0x0 (0x0)
	float Tolerance;  // 0x20 (0x20)
	char pad_36[12];  // 0x24 (0x24)


}; 
 
 // Function Engine.KismetMathLibrary.NotEqual_Vector2DVector2D
struct FNotEqual_Vector2DVector2D
{
	struct FVector2D A;  // 0x0 (0x0)
	struct FVector2D B;  // 0x10 (0x10)
	float ErrorTolerance;  // 0x20 (0x20)
	char pad_36_1 : 7;  // 0x24 (0x24)
	bool ReturnValue : 1;  // 0x24 (0x24)
	char pad_37[3];  // 0x25 (0x25)


}; 
 
 // Function Engine.KismetTextLibrary.TextTrimPreceding
struct FTextTrimPreceding
{
	struct FText InText;  // 0x0 (0x0)
	struct FText ReturnValue;  // 0x18 (0x18)


}; 
 
 // ScriptStruct Engine.DelegateArray
struct FDelegateArray
{
	struct TArray<struct FDelegate> Delegates;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.ReceiveActorEndOverlap
struct FReceiveActorEndOverlap
{
	struct AActor* OtherActor;  // 0x0 (0x0)


}; 
 
 // Function Engine.VolumetricCloudComponent.SetShadowViewSampleCountScale
struct FSetShadowViewSampleCountScale
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimInstance.ResetDynamics
struct FResetDynamics
{
	uint8_t InTeleportType;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.ReceiveActorOnInputTouchBegin
struct FReceiveActorOnInputTouchBegin
{
	enum class ETouchIndex FingerIndex;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.ReceiveActorOnInputTouchEnter
struct FReceiveActorOnInputTouchEnter
{
	enum class ETouchIndex FingerIndex;  // 0x0 (0x0)


}; 
 
 // Function Engine.CameraModifier.IsDisabled
struct FIsDisabled
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.AnimSyncMarker
struct FAnimSyncMarker
{
	struct FName MarkerName;  // 0x0 (0x0)
	float Time;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_BoolToFloat
struct FConv_BoolToFloat
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool InBool : 1;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	float ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.Actor.ReceiveActorOnReleased
struct FReceiveActorOnReleased
{
	struct FKey ButtonReleased;  // 0x0 (0x0)


}; 
 
 // Function Engine.InstancedStaticMeshComponent.AddInstanceWorldSpace
struct FAddInstanceWorldSpace
{
	struct FTransform WorldTransform;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x60 (0x60)
	char pad_100[12];  // 0x64 (0x64)


}; 
 
 // ScriptStruct Engine.TransformBaseConstraint
struct FTransformBaseConstraint
{
	struct TArray<struct FRigTransformConstraint> TransformConstraints;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.ReceiveAnyDamage
struct FReceiveAnyDamage
{
	float Damage;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct UDamageType* DamageType;  // 0x8 (0x8)
	struct AController* InstigatedBy;  // 0x10 (0x10)
	struct AActor* DamageCauser;  // 0x18 (0x18)


}; 
 
 // Function Engine.SplineComponent.SetRotationAtSplinePoint
struct FSetRotationAtSplinePoint
{
	int32_t PointIndex;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FRotator InRotation;  // 0x8 (0x8)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x20 (0x20)
	char pad_33_1 : 7;  // 0x21 (0x21)
	bool bUpdateSpline : 1;  // 0x21 (0x21)
	char pad_34[6];  // 0x22 (0x22)


}; 
 
 // Function Engine.TextRenderComponent.SetTextMaterial
struct FSetTextMaterial
{
	struct UMaterialInterface* Material;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPathsLibrary.CloudDir
struct FCloudDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.ReceivePointDamage
struct FReceivePointDamage
{
	float Damage;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct UDamageType* DamageType;  // 0x8 (0x8)
	struct FVector HitLocation;  // 0x10 (0x10)
	struct FVector HitNormal;  // 0x28 (0x28)
	struct UPrimitiveComponent* HitComponent;  // 0x40 (0x40)
	struct FName BoneName;  // 0x48 (0x48)
	struct FVector ShotFromDirection;  // 0x50 (0x50)
	struct AController* InstigatedBy;  // 0x68 (0x68)
	struct AActor* DamageCauser;  // 0x70 (0x70)
	struct FHitResult HitInfo;  // 0x78 (0x78)


}; 
 
 // Function Engine.AnimationDataController.SetCurveColor
struct FSetCurveColor
{
	struct FAnimationCurveIdentifier CurveId;  // 0x0 (0x0)
	struct FLinearColor Color;  // 0x10 (0x10)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool bShouldTransact : 1;  // [x20 ([x20)
	char pad_33_1 : 7;  // 0001 (000523221] ted: 0x18)
)
	bool ReturnValue : 1;  // 0x21 (0x21)
	char pad_34[2];  // 0x22 (0x22)


}; 
 
 // Function Engine.SkeletalMeshSocket.InitializeSocketFromLocation
struct FInitializeSocketFromLocation
{
	struct USkeletalMeshComponent* SkelComp;  // 0x0 (0x0)
	struct FVector WorldLocation;  // 0x8 (0x8)
	struct FVector WorldNormal;  // 0x20 (0x20)


}; 
 
 // ScriptStruct Engine.Node
struct FNode
{
	struct FName Name;  // 0x0 (0x0)
	struct FName ParentName;  // 0x8 (0x8)
	struct FTransform Transform;  // 0x10 (0x10)
	struct FString DisplayName;  // 0x70 (0x70)
	char pad_128_1 : 7;  // 0x80 (0x80)
	bool bAdvanced : 1;  // 0x80 (0x80)
	char pad_129[15];  // 0x81 (0x81)


}; 
 
 // Function Engine.KismetMathLibrary.InRange_FloatFloat
struct FInRange_FloatFloat
{
	double Value;  // 0x0 (0x0)
	double Min;  // 0x8 (0x8)
	double Max;  // 0x10 (0x10)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool InclusiveMin : 1;  // 0x18 (0x18)
	char pad_25_1 : 7;  // 0x19 (0x19)
	bool InclusiveMax : 1;  // 0x19 (0x19)
	char pad_26_1 : 7;  // 0x1A (0x1A)
	bool ReturnValue : 1;  // 0x1A (0x1A)
	char pad_27[5];  // 0x1B (0x1B)


}; 
 
 // Function Engine.Actor.ReceiveRadialDamage
struct FReceiveRadialDamage
{
	float DamageReceived;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct UDamageType* DamageType;  // 0x8 (0x8)
	struct FVector Origin;  // 0x10 (0x10)
	struct FHitResult HitInfo;  // 0x28 (0x28)
	struct AController* InstigatedBy;  // 0x110 (0x110)
	struct AActor* DamageCauser;  // 0x118 (0x118)


}; 
 
 // Function Engine.PlayerController.LocalTravel
struct FLocalTravel
{
	struct FString URL;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimInstance.Montage_Resume
struct FMontage_Resume
{
	struct UAnimMontage* Montage;  // 0x0 (0x0)


}; 
 
 // Function Engine.Character.IsJumpProvidingForce
struct FIsJumpProvidingForce
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.AttenuationSubmixSendSettings
struct FAttenuationSubmixSendSettings
{
	struct USoundSubmixBase* Submix;  // 0x0 (0x0)
	uint8_t SubmixSendMethod;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)
	float SubmixSendLevelMin;  // 0xC (0xC)
	float SubmixSendLevelMax;  // 0x10 (0x10)
	float SubmixSendDistanceMin;  // 0x14 (0x14)
	float SubmixSendDistanceMax;  // 0x18 (0x18)
	float ManualSubmixSendLevel;  // 0x1C (0x1C)
	struct FRuntimeFloatCurve CustomSubmixSendCurve;  // 0x20 (0x20)


}; 
 
 // ScriptStruct Engine.PerBoneInterpolation
struct FPerBoneInterpolation
{
	struct FBoneReference BoneReference;  // 0x0 (0x0)
	float InterpolationSpeedPerSec;  // 0x10 (0x10)


}; 
 
 // Function Engine.CharacterMovementComponent.IsWalkable
struct FIsWalkable
{
	struct FHitResult Hit;  // 0x0 (0x0)
	char pad_232_1 : 7;  // 0xE8 (0xE8)
	bool ReturnValue : 1;  // 0xE8 (0xE8)
	char pad_233[7];  // 0xE9 (0xE9)


}; 
 
 // Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInDegreesFromStream
struct FRandomUnitVectorInEllipticalConeInDegreesFromStream
{
	struct FVector ConeDir;  // 0x0 (0x0)
	float MaxYawInDegrees;  // 0x18 (0x18)
	float MaxPitchInDegrees;  // 0x1C (0x1C)
	struct FRandomStream Stream;  // 0x20 (0x20)
	struct FVector ReturnValue;  // 0x28 (0x28)


}; 
 
 // Function Engine.Actor.SetActorTickInterval
struct FSetActorTickInterval
{
	float TickInterval;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Wrap
struct FWrap
{
	int32_t Value;  // 0x0 (0x0)
	int32_t Min;  // 0x4 (0x4)
	int32_t Max;  // 0x8 (0x8)
	int32_t ReturnValue;  // 0xC (0xC)


}; 
 
 // Function Engine.Pawn.AddControllerYawInput
struct FAddControllerYawInput
{
	float Val;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.SetLifeSpan
struct FSetLifeSpan
{
	float InLifespan;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.RigConfiguration
struct FRigConfiguration
{
	struct URig* Rig;  // 0x0 (0x0)
	struct TArray<struct FNameMapping> BoneMappingTable;  // 0x8 (0x8)


}; 
 
 // Function Engine.Actor.SetOwner
struct FSetOwner
{
	struct AActor* NewOwner;  // 0x0 (0x0)


}; 
 
 // Function Engine.Actor.SetReplicateMovement
struct FSetReplicateMovement
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bInReplicateMovement : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.RepMovement
struct FRepMovement
{
	struct FVector LinearVelocity;  // 0x0 (0x0)
	struct FVector AngularVelocity;  // 0x18 (0x18)
	struct FVector Location;  // 0x30 (0x30)
	struct FRotator Rotation;  // 0x48 (0x48)
	char bSimulatedPhysicSleep : 1;  // 0x60 (0x60)
	char bRepPhysics : 1;  // 0x60 (0x60)
	char pad_96_1 : 6;  // 0x60 (0x60)
	char pad_97[4];  // 0x61 (0x61)
	int32_t ServerFrame;  // 0x64 (0x64)
	int32_t ServerPhysicsHandle;  // 0x68 (0x68)
	uint8_t LocationQuantizationLevel;  // 0x6C (0x6C)
	uint8_t VelocityQuantizationLevel;  // 0x6D (0x6D)
	uint8_t RotationQuantizationLevel;  // 0x6E (0x6E)
	char pad_111[1];  // 0x6F (0x6F)


}; 
 
 // ScriptStruct Engine.ISMComponentDescriptor
struct FISMComponentDescriptor
{
	char pad_0[1];  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.ActorTickFunction
// Size: 0x30(Inherited: 0x28)
struct FActorTickFunction : FTickFunction
{
	char pad_40[8];  // 0x28 (0x28)


}; 
 
 // ScriptStruct Engine.KShapeElem
struct FKShapeElem
{
	char pad_0[8];  // 0x0 (0x0)
	float RestOffset;  // 0x8 (0x8)
	struct FName Name;  // 0xC (0xC)
	char pad_20[4];  // 0x14 (0x14)
	char bContributeToMass : 1;  // 0x18 (0x18)
	char pad_24_1 : 7;  // 0x18 (0x18)
	enum class ECollisionEnabled CollisionEnabled;  // 0x19 (0x19)
	char pad_26[22];  // 0x1A (0x1A)


}; 
 
 // ScriptStruct Engine.KSphylElem
// Size: 0x68(Inherited: 0x30)
struct FKSphylElem : FKShapeElem
{
	struct FVector Center;  // 0x30 (0x30)
	struct FRotator Rotation;  // 0x48 (0x48)
	float Radius;  // 0x60 (0x60)
	float Length;  // 0x64 (0x64)


}; 
 
 // ScriptStruct Engine.InertializationPose
struct FInertializationPose
{
	char pad_0[208];  // 0x0 (0x0)


}; 
 
 // Function Engine.Character.CanJump
struct FCanJump
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.KBoxElem
// Size: 0x70(Inherited: 0x30)
struct FKBoxElem : FKShapeElem
{
	struct FVector Center;  // 0x30 (0x30)
	struct FRotator Rotation;  // 0x48 (0x48)
	float X;  // 0x60 (0x60)
	float Y;  // 0x64 (0x64)
	float Z;  // 0x68 (0x68)
	char pad_108[4];  // 0x6C (0x6C)


}; 
 
 // Function Engine.KismetTextLibrary.TextFromStringTable
struct FTextFromStringTable
{
	struct FName TableId;  // 0x0 (0x0)
	struct FString Key;  // 0x8 (0x8)
	struct FText ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.PlayerController.ClientUnmutePlayer
struct FClientUnmutePlayer
{
	struct FUniqueNetIdRepl PlayerId;  // 0x0 (0x0)


}; 
 
 // Function Engine.Character.ServerMoveDual
struct FServerMoveDual
{
	float TimeStamp0;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector_NetQuantize10 InAccel0;  // 0x8 (0x8)
	char PendingFlags;  // 0x20 (0x20)
	char pad_33[3];  // 0x21 (0x21)
	uint32_t View0;  // 0x24 (0x24)
	float Timestamp;  // 0x28 (0x28)
	char pad_44[4];  // 0x2C (0x2C)
	struct FVector_NetQuantize10 InAccel;  // 0x30 (0x30)
	struct FVector_NetQuantize100 ClientLoc;  // 0x48 (0x48)
	char NewFlags;  // 0x60 (0x60)
	char ClientRoll;  // 0x61 (0x61)
	char pad_98[2];  // 0x62 (0x62)
	uint32_t View;  // 0x64 (0x64)
	struct UPrimitiveComponent* ClientMovementBase;  // 0x68 (0x68)
	struct FName ClientBaseBoneName;  // 0x70 (0x70)
	char ClientMovementMode;  // 0x78 (0x78)
	char pad_121[7];  // 0x79 (0x79)


}; 
 
 // ScriptStruct Engine.NamedColor
struct FNamedColor
{
	struct FColor Value;  // 0x0 (0x0)
	struct FName Name;  // 0x4 (0x4)


}; 
 
 // Function Engine.KismetMathLibrary.RandomUnitVectorInConeInRadians
struct FRandomUnitVectorInConeInRadians
{
	struct FVector ConeDir;  // 0x0 (0x0)
	float ConeHalfAngleInRadians;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)
	struct FVector ReturnValue;  // 0x20 (0x20)


}; 
 
 // ScriptStruct Engine.NamedTransform
struct FNamedTransform
{
	struct FTransform Value;  // 0x0 (0x0)
	struct FName Name;  // 0x60 (0x60)
	char pad_104[8];  // 0x68 (0x68)


}; 
 
 // Function Engine.AnimInstance.Montage_Stop
struct FMontage_Stop
{
	float InBlendOutTime;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct UAnimMontage* Montage;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.CurveRenamedPayload
// Size: 0x20(Inherited: 0x10)
struct FCurveRenamedPayload : FCurvePayload
{
	struct FAnimationCurveIdentifier NewIdentifier;  // 0x10 (0x10)


}; 
 
 // Function Engine.AnimationDataController.SetTransformCurveKey
struct FSetTransformCurveKey
{
	struct FAnimationCurveIdentifier CurveId;  // 0x0 (0x0)
	float Time;  // 0x10 (0x10)
	char pad_20[12];  // 0x14 (0x14)
	struct FTransform Value;  // 0x20 (0x20)
	char pad_128_1 : 7;  // 0x80 (0x80)
	bool bShouldTransact : 1;  // 0x80 (0x80)
	char pad_129_1 : 7;  // 0x81 (0x81)
	bool ReturnValue : 1;  // 0x81 (0x81)
	char pad_130[14];  // 0x82 (0x82)


}; 
 
 // Function Engine.KismetMathLibrary.Vector4_Negated
struct FVector4_Negated
{
	struct FVector4 A;  // 0x0 (0x0)
	struct FVector4 ReturnValue;  // 0x20 (0x20)


}; 
 
 // ScriptStruct Engine.CurveTrack
struct FCurveTrack
{
	struct FName CurveName;  // 0x0 (0x0)
	struct TArray<float> CurveWeights;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.MaterialSpriteElement
struct FMaterialSpriteElement
{
	struct UMaterialInterface* Material;  // 0x0 (0x0)
	struct UCurveFloat* DistanceToOpacityCurve;  // 0x8 (0x8)
	char bSizeIsInScreenSpace : 1;  // 0x10 (0x10)
	char pad_16_1 : 7;  // 0x10 (0x10)
	char pad_17[4];  // 0x11 (0x11)
	float BaseSizeX;  // 0x14 (0x14)
	float BaseSizeY;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)
	struct UCurveFloat* DistanceToSizeCurve;  // 0x20 (0x20)


}; 
 
 // ScriptStruct Engine.ComponentSpacePose
struct FComponentSpacePose
{
	struct TArray<struct FTransform> Transforms;  // 0x0 (0x0)
	struct TArray<struct FName> Names;  // 0x10 (0x10)


}; 
 
 // Function Engine.SkinnedMeshComponent.GetDeltaTransformFromRefPose
struct FGetDeltaTransformFromRefPose
{
	struct FName BoneName;  // 0x0 (0x0)
	struct FName BaseName;  // 0x8 (0x8)
	struct FTransform ReturnValue;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.AnimCurveBase
struct FAnimCurveBase
{
	struct FName LastObservedName;  // 0x0 (0x0)
	struct FSmartName Name;  // 0x8 (0x8)
	int32_t CurveTypeFlags;  // 0x14 (0x14)


}; 
 
 // Function Engine.KismetMathLibrary.EqualEqual_ClassClass
struct FEqualEqual_ClassClass
{
	UObject* A;  // 0x0 (0x0)
	UObject* B;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // ScriptStruct Engine.SmartName
struct FSmartName
{
	struct FName DisplayName;  // 0x0 (0x0)
	char pad_8[4];  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.Greater_DoubleDouble
struct FGreater_DoubleDouble
{
	double A;  // 0x0 (0x0)
	double B;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.PhysicsConstraintComponent.SetLinearPlasticity
struct FSetLinearPlasticity
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bLinearPlasticity : 1;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	float LinearPlasticityThreshold;  // 0x4 (0x4)
	enum class EConstraintPlasticityType PlasticityType;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // ScriptStruct Engine.VectorCurve
// Size: 0x198(Inherited: 0x18)
struct FVectorCurve : FAnimCurveBase
{
	struct FRichCurve FloatCurves[3];  // 0x18 (0x18)


}; 
 
 // ScriptStruct Engine.FontRenderInfo
struct FFontRenderInfo
{
	char bClipText : 1;  // 0x0 (0x0)
	char bEnableShadow : 1;  // 0x0 (0x0)
	char pad_0_1 : 6;  // 0x0 (0x0)
	char pad_1[8];  // 0x1 (0x1)
	struct FDepthFieldGlowInfo GlowInfo;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.EmptyPayload
struct FEmptyPayload
{
	char pad_0[1];  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.AnimationTrackPayload
// Size: 0x8(Inherited: 0x1)
struct FAnimationTrackPayload : FEmptyPayload
{
	struct FName Name;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.SequenceLengthChangedPayload
// Size: 0xC(Inherited: 0x1)
struct FSequenceLengthChangedPayload : FEmptyPayload
{
	float PreviousLength;  // 0x0 (0x0)
	float T0;  // 0x4 (0x4)
	float T1;  // 0x8 (0x8)


}; 
 
 // Function Engine.AnimInstance.Montage_PlayWithBlendIn
struct FMontage_PlayWithBlendIn
{
	struct UAnimMontage* MontageToPlay;  // 0x0 (0x0)
	struct FAlphaBlendArgs BlendIn;  // 0x8 (0x8)
	float InPlayRate;  // 0x18 (0x18)
	uint8_t ReturnValueType;  // 0x1C (0x1C)
	char pad_29[3];  // 0x1D (0x1D)
	float InTimeToStartMontageAt;  // 0x20 (0x20)
	char pad_36_1 : 7;  // 0x24 (0x24)
	bool bStopAllMontages : 1;  // 0x24 (0x24)
	char pad_37[3];  // 0x25 (0x25)
	float ReturnValue;  // 0x28 (0x28)
	char pad_44[4];  // 0x2C (0x2C)


}; 
 
 // ScriptStruct Engine.AnimBlueprintMutableData
struct FAnimBlueprintMutableData
{
	char pad_0[1];  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.FMod
struct FFMod
{
	double Dividend;  // 0x0 (0x0)
	double Divisor;  // 0x8 (0x8)
	double Remainder;  // 0x10 (0x10)
	int32_t ReturnValue;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)


}; 
 
 // ScriptStruct Engine.FrameRateChangedPayload
// Size: 0x8(Inherited: 0x1)
struct FFrameRateChangedPayload : FEmptyPayload
{
	struct FFrameRate PreviousFrameRate;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameUserSettings.ApplyResolutionSettings
struct FApplyResolutionSettings
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bCheckForCommandLineOverrides : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.AnimationAttributeIdentifier
struct FAnimationAttributeIdentifier
{
	struct FName Name;  // 0x0 (0x0)
	struct FName BoneName;  // 0x8 (0x8)
	int32_t BoneIndex;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)
	struct UScriptStruct* ScriptStruct;  // 0x18 (0x18)
	struct FSoftObjectPath ScriptStructPath;  // 0x20 (0x20)


}; 
 
 // ScriptStruct Engine.AnimLinkableElement
struct FAnimLinkableElement
{
	char pad_0[8];  // 0x0 (0x0)
	struct UAnimMontage* LinkedMontage;  // 0x8 (0x8)
	int32_t SlotIndex;  // 0x10 (0x10)
	int32_t SegmentIndex;  // 0x14 (0x14)
	enum class EAnimLinkMethod LinkMethod;  // 0x18 (0x18)
	enum class EAnimLinkMethod CachedLinkMethod;  // 0x19 (0x19)
	char pad_26[2];  // 0x1A (0x1A)
	float SegmentBeginTime;  // 0x1C (0x1C)
	float SegmentLength;  // 0x20 (0x20)
	float LinkValue;  // 0x24 (0x24)
	struct UAnimSequenceBase* LinkedSequence;  // 0x28 (0x28)


}; 
 
 // ScriptStruct Engine.PrimaryAssetRulesOverride
struct FPrimaryAssetRulesOverride
{
	struct FPrimaryAssetId PrimaryAssetId;  // 0x0 (0x0)
	struct FPrimaryAssetRules Rules;  // 0x10 (0x10)


}; 
 
 // Function Engine.PlayerCameraManager.AddCameraLensEffect
struct FAddCameraLensEffect
{
	AEmitterCameraLensEffectBase* LensEffectEmitterClass;  // 0x0 (0x0)
	struct AEmitterCameraLensEffectBase* ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.PlayerController.GetSpectatorPawn
struct FGetSpectatorPawn
{
	struct ASpectatorPawn* ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.PrimaryAssetRules
struct FPrimaryAssetRules
{
	int32_t Priority;  // 0x0 (0x0)
	int32_t ChunkId;  // 0x4 (0x4)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bApplyRecursively : 1;  // 0x8 (0x8)
	uint8_t CookRule;  // 0x9 (0x9)
	char pad_10[2];  // 0xA (0xA)


}; 
 
 // Function Engine.PlayerState.ReceiveCopyProperties
struct FReceiveCopyProperties
{
	struct APlayerState* NewPlayerState;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.PerlinNoise1D
struct FPerlinNoise1D
{
	float Value;  // 0x0 (0x0)
	float ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.Controller.GetControlRotation
struct FGetControlRotation
{
	struct FRotator ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.InterpolationParameter
struct FInterpolationParameter
{
	float InterpolationTime;  // 0x0 (0x0)
	float DampingRatio;  // 0x4 (0x4)
	float MaxSpeed;  // 0x8 (0x8)
	enum class EFilterInterpolationType InterpolationType;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)


}; 
 
 // Function Engine.WindDirectionalSourceComponent.SetMaximumGustAmount
struct FSetMaximumGustAmount
{
	float InNewMaxGust;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.RandomPointInBoundingBoxFromStream
struct FRandomPointInBoundingBoxFromStream
{
	struct FVector Center;  // 0x0 (0x0)
	struct FVector HalfSize;  // 0x18 (0x18)
	struct FRandomStream Stream;  // 0x30 (0x30)
	struct FVector ReturnValue;  // 0x38 (0x38)


}; 
 
 // Function Engine.TypedElementWorldInterface.NotifyMovementStarted
struct FNotifyMovementStarted
{
	struct FScriptTypedElementHandle InElementHandle;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByClass
struct FGetLinkedAnimLayerInstanceByClass
{
	UAnimInstance* InClass;  // 0x0 (0x0)
	struct UAnimInstance* ReturnValue;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.BlendSample
struct FBlendSample
{
	struct UAnimSequence* Animation;  // 0x0 (0x0)
	struct FVector SampleValue;  // 0x8 (0x8)
	float RateScale;  // 0x20 (0x20)
	char pad_36[4];  // 0x24 (0x24)


}; 
 
 // ScriptStruct Engine.BlendSpaceTriangle
struct FBlendSpaceTriangle
{
	int32_t SampleIndices[3];  // 0x0 (0x0)
	char pad_12[4];  // 0xC (0xC)
	struct FVector2D Vertices[3];  // 0x10 (0x10)
	struct FBlendSpaceTriangleEdgeInfo EdgeInfo[3];  // 0x40 (0x40)


}; 
 
 // Function Engine.SceneCaptureCube.OnInterpToggle
struct FOnInterpToggle
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bEnable : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlatformInputDeviceMapperLibrary.IsInputDeviceMappedToUnpairedUser
struct FIsInputDeviceMappedToUnpairedUser
{
	struct FInputDeviceId InputDevice;  // 0x0 (0x0)
	char pad_4_1 : 7;  // 0x4 (0x4)
	bool ReturnValue : 1;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)


}; 
 
 // ScriptStruct Engine.BlendSpaceData
struct FBlendSpaceData
{
	struct TArray<struct FBlendSpaceSegment> Segments;  // 0x0 (0x0)
	struct TArray<struct FBlendSpaceTriangle> Triangles;  // 0x10 (0x10)


}; 
 
 // Function Engine.TimelineComponent.GetIgnoreTimeDilation
struct FGetIgnoreTimeDilation
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.ConstraintDrive
struct FConstraintDrive
{
	float Stiffness;  // 0x0 (0x0)
	float Damping;  // 0x4 (0x4)
	float MaxForce;  // 0x8 (0x8)
	char bEnablePositionDrive : 1;  // 0xC (0xC)
	char bEnableVelocityDrive : 1;  // 0xC (0xC)
	char pad_12_1 : 6;  // 0xC (0xC)
	char pad_13[4];  // 0xD (0xD)


}; 
 
 // ScriptStruct Engine.GridBlendSample
struct FGridBlendSample
{
	struct FEditorElement GridElement;  // 0x0 (0x0)
	float BlendWeight;  // 0x18 (0x18)


}; 
 
 // Function Engine.ParticleSystem.ContainsEmitterType
struct FContainsEmitterType
{
	UObject* TypeData;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.KismetMathLibrary.ClassIsChildOf
struct FClassIsChildOf
{
	UObject* TestClass;  // 0x0 (0x0)
	UObject* ParentClass;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // ScriptStruct Engine.BPVariableDescription
struct FBPVariableDescription
{
	struct FName VarName;  // 0x0 (0x0)
	struct FGuid VarGuid;  // 0x8 (0x8)
	struct FEdGraphPinType VarType;  // 0x18 (0x18)
	struct FString FriendlyName;  // 0x70 (0x70)
	struct FText Category;  // 0x80 (0x80)
	uint64_t PropertyFlags;  // 0x98 (0x98)
	struct FName RepNotifyFunc;  // 0xA0 (0xA0)
	enum class ELifetimeCondition ReplicationCondition;  // 0xA8 (0xA8)
	char pad_169[7];  // 0xA9 (0xA9)
	struct TArray<struct FBPVariableMetaDataEntry> MetaDataArray;  // 0xB0 (0xB0)
	struct FString DefaultValue;  // 0xC0 (0xC0)


}; 
 
 // Function Engine.SkinnedMeshComponent.GetSkeletalMesh_DEPRECATED
struct FGetSkeletalMesh_DEPRECATED
{
	struct USkeletalMesh* ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.EdGraphPinType
struct FEdGraphPinType
{
	struct FName PinCategory;  // 0x0 (0x0)
	struct FName PinSubCategory;  // 0x8 (0x8)
	struct TWeakObjectPtr<UObject> PinSubCategoryObject;  // 0x10 (0x10)
	struct FSimpleMemberReference PinSubCategoryMemberReference;  // 0x18 (0x18)
	struct FEdGraphTerminalType PinValueType;  // 0x38 (0x38)
	uint8_t ContainerType;  // 0x54 (0x54)
	char bIsArray : 1;  // 0x55 (0x55)
	char bIsReference : 1;  // 0x55 (0x55)
	char bIsConst : 1;  // 0x55 (0x55)
	char bIsWeakPointer : 1;  // 0x55 (0x55)
	char bIsUObjectWrapper : 1;  // 0x55 (0x55)
	char bSerializeAsSinglePrecisionFloat : 1;  // 0x55 (0x55)
	char pad_85_1 : 2;  // 0x55 (0x55)
	char pad_86[3];  // 0x56 (0x56)


}; 
 
 // ScriptStruct Engine.StaticComponentMaskValue
struct FStaticComponentMaskValue
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool R : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool G : 1;  // 0x1 (0x1)
	char pad_2_1 : 7;  // 0x2 (0x2)
	bool B : 1;  // 0x2 (0x2)
	char pad_3_1 : 7;  // 0x3 (0x3)
	bool A : 1;  // 0x3 (0x3)


}; 
 
 // ScriptStruct Engine.EdGraphTerminalType
struct FEdGraphTerminalType
{
	struct FName TerminalCategory;  // 0x0 (0x0)
	struct FName TerminalSubCategory;  // 0x8 (0x8)
	struct TWeakObjectPtr<UObject> TerminalSubCategoryObject;  // 0x10 (0x10)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bTerminalIsConst : 1;  // 0x18 (0x18)
	char pad_25_1 : 7;  // 0x19 (0x19)
	bool bTerminalIsWeakPointer : 1;  // 0x19 (0x19)
	char pad_26_1 : 7;  // 0x1A (0x1A)
	bool bTerminalIsUObjectWrapper : 1;  // 0x1A (0x1A)
	char pad_27[1];  // 0x1B (0x1B)


}; 
 
 // ScriptStruct Engine.WorldPartitionRuntimeCellDebugInfo
struct FWorldPartitionRuntimeCellDebugInfo
{
	struct FString Name;  // 0x0 (0x0)
	struct FName GridName;  // 0x10 (0x10)
	int64_t CoordX;  // 0x18 (0x18)
	int64_t CoordY;  // 0x20 (0x20)
	int64_t CoordZ;  // 0x28 (0x28)


}; 
 
 // ScriptStruct Engine.ChildActorComponentInstanceData
// Size: 0xF8(Inherited: 0xB8)
struct FChildActorComponentInstanceData : FSceneComponentInstanceData
{
	AActor* ChildActorClass;  // 0xB8 (0xB8)
	struct FName ChildActorName;  // 0xC0 (0xC0)
	struct TArray<struct FChildActorAttachedActorInfo> AttachedActors;  // 0xC8 (0xC8)
	char pad_216[32];  // 0xD8 (0xD8)


}; 
 
 // ScriptStruct Engine.BPEditorBookmarkNode
struct FBPEditorBookmarkNode
{
	struct FGuid NodeGuid;  // 0x0 (0x0)
	struct FGuid ParentGuid;  // 0x10 (0x10)
	struct FText DisplayName;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetMathLibrary.ToSign2D
struct FToSign2D
{
	struct FVector2D A;  // 0x0 (0x0)
	struct FVector2D ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.SplineComponent.SetSelectedSplineSegmentColor
struct FSetSelectedSplineSegmentColor
{
	struct FLinearColor SegmentColor;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintMapLibrary.Map_Clear
struct FMap_Clear
{
	struct TMap<int32_t, int32_t> TargetMap;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Add_Vector4Vector4
struct FAdd_Vector4Vector4
{
	struct FVector4 A;  // 0x0 (0x0)
	struct FVector4 B;  // 0x20 (0x20)
	struct FVector4 ReturnValue;  // 0x40 (0x40)


}; 
 
 // Function Engine.KismetMathLibrary.Negated2D
struct FNegated2D
{
	struct FVector2D A;  // 0x0 (0x0)
	struct FVector2D ReturnValue;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.Bookmark2DJumpToSettings
struct FBookmark2DJumpToSettings
{
	char pad_0[1];  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.StreamedAudioPlatformData
struct FStreamedAudioPlatformData
{
	char pad_0[24];  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.And_IntInt
struct FAnd_IntInt
{
	int32_t A;  // 0x0 (0x0)
	int32_t B;  // 0x4 (0x4)
	int32_t ReturnValue;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.GeomSelection
struct FGeomSelection
{
	int32_t Type;  // 0x0 (0x0)
	int32_t Index;  // 0x4 (0x4)
	int32_t SelectionIndex;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.StringAnimationAttribute
struct FStringAnimationAttribute
{
	struct FString Value;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.VectorAnimationAttribute
struct FVectorAnimationAttribute
{
	struct FVector Value;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameUserSettings.GetGlobalIlluminationQuality
struct FGetGlobalIlluminationQuality
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.AmbientSound.FadeIn
struct FFadeIn
{
	float FadeInDuration;  // 0x0 (0x0)
	float FadeVolumeLevel;  // 0x4 (0x4)


}; 
 
 // ScriptStruct Engine.QuaternionAnimationAttribute
struct FQuaternionAnimationAttribute
{
	struct FQuat Value;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_GetAbsMax
struct FVector_GetAbsMax
{
	struct FVector A;  // 0x0 (0x0)
	double ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.CheatManager.StreamLevelOut
struct FStreamLevelOut
{
	struct FName PackageName;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.InputActionSpeechMapping
struct FInputActionSpeechMapping
{
	struct FName ActionName;  // 0x0 (0x0)
	struct FName SpeechKeyword;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.ReferencePose
struct FReferencePose
{
	struct FName PoseName;  // 0x0 (0x0)
	struct TArray<struct FTransform> ReferencePose;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.RandomUnitVectorFromStream
struct FRandomUnitVectorFromStream
{
	struct FRandomStream Stream;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.NonBlendableVectorAnimationAttribute
// Size: 0x18(Inherited: 0x18)
struct FNonBlendableVectorAnimationAttribute : FVectorAnimationAttribute
{


}; 
 
 // ScriptStruct Engine.MaterialLayersFunctions
// Size: 0x100(Inherited: 0x20)
struct FMaterialLayersFunctions : FMaterialLayersFunctionsRuntimeData
{
	struct FMaterialLayersFunctionsEditorOnlyData EditorOnly;  // 0x20 (0x20)
	struct TArray<bool> LayerStates;  // 0x90 (0x90)
	struct TArray<struct FText> LayerNames;  // 0xA0 (0xA0)
	struct TArray<bool> RestrictToLayerRelatives;  // 0xB0 (0xB0)
	struct TArray<bool> RestrictToBlendRelatives;  // 0xC0 (0xC0)
	struct TArray<struct FGuid> LayerGuids;  // 0xD0 (0xD0)
	struct TArray<uint8_t> LayerLinkStates;  // 0xE0 (0xE0)
	struct TArray<struct FGuid> DeletedParentLayerGuids;  // 0xF0 (0xF0)


}; 
 
 // Function Engine.GameplayStatics.DeleteGameInSlot
struct FDeleteGameInSlot
{
	struct FString SlotName;  // 0x0 (0x0)
	int32_t UserIndex;  // 0x10 (0x10)
	char pad_20_1 : 7;  // 0x14 (0x14)
	bool ReturnValue : 1;  // 0x14 (0x14)
	char pad_21[3];  // 0x15 (0x15)


}; 
 
 // ScriptStruct Engine.ForceFeedbackParameters
struct FForceFeedbackParameters
{
	struct FName Tag;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bLooping : 1;  // 0x8 (0x8)
	char pad_9_1 : 7;  // 0x9 (0x9)
	bool bIgnoreTimeDilation : 1;  // 0x9 (0x9)
	char pad_10_1 : 7;  // 0xA (0xA)
	bool bPlayWhilePaused : 1;  // 0xA (0xA)
	char pad_11[1];  // 0xB (0xB)


}; 
 
 // Function Engine.Character.ServerMovePacked
struct FServerMovePacked
{
	struct FCharacterServerMovePackedBits PackedBits;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.NotEqualExactly_VectorVector
struct FNotEqualExactly_VectorVector
{
	struct FVector A;  // 0x0 (0x0)
	struct FVector B;  // 0x18 (0x18)
	char pad_48_1 : 7;  // 0x30 (0x30)
	bool ReturnValue : 1;  // 0x30 (0x30)
	char pad_49[7];  // 0x31 (0x31)


}; 
 
 // ScriptStruct Engine.NonBlendableFloatAnimationAttribute
// Size: 0x4(Inherited: 0x4)
struct FNonBlendableFloatAnimationAttribute : FFloatAnimationAttribute
{


}; 
 
 // ScriptStruct Engine.WrappedStringElement
struct FWrappedStringElement
{
	struct FString Value;  // 0x0 (0x0)
	struct FVector2D LineExtent;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.CharacterNetworkSerializationPackedBits
struct FCharacterNetworkSerializationPackedBits
{
	char pad_0[152];  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.SoundSourceBusSendInfo
struct FSoundSourceBusSendInfo
{
	uint8_t SourceBusSendLevelControlMethod;  // 0x0 (0x0)
	char pad_1[7];  // 0x1 (0x1)
	struct USoundSourceBus* SoundSourceBus;  // 0x8 (0x8)
	struct UAudioBus* AudioBus;  // 0x10 (0x10)
	float SendLevel;  // 0x18 (0x18)
	float MinSendLevel;  // 0x1C (0x1C)
	float MaxSendLevel;  // 0x20 (0x20)
	float MinSendDistance;  // 0x24 (0x24)
	float MaxSendDistance;  // 0x28 (0x28)
	char pad_44[4];  // 0x2C (0x2C)
	struct FRuntimeFloatCurve CustomSendLevelCurve;  // 0x30 (0x30)


}; 
 
 // ScriptStruct Engine.CharacterServerMovePackedBits
// Size: 0x98(Inherited: 0x98)
struct FCharacterServerMovePackedBits : FCharacterNetworkSerializationPackedBits
{


}; 
 
 // Function Engine.SkinnedMeshComponent.GetBoneIndex
struct FGetBoneIndex
{
	struct FName BoneName;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetRenderingLibrary.ReadRenderTargetUV
struct FReadRenderTargetUV
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct UTextureRenderTarget2D* TextureRenderTarget;  // 0x8 (0x8)
	float U;  // 0x10 (0x10)
	float V;  // 0x14 (0x14)
	struct FColor ReturnValue;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)


}; 
 
 // Function Engine.KismetArrayLibrary.Array_Resize
struct FArray_Resize
{
	struct TArray<int32_t> TargetArray;  // 0x0 (0x0)
	int32_t Size;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)


}; 
 
 // ScriptStruct Engine.ParticleBurst
struct FParticleBurst
{
	int32_t Count;  // 0x0 (0x0)
	int32_t CountLow;  // 0x4 (0x4)
	float Time;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.CharacterNetworkSerializationPackedBitsNetSerializerConfig
// Size: 0x8(Inherited: 0x1)
struct FCharacterNetworkSerializationPackedBitsNetSerializerConfig : FNetSerializerConfig
{
	uint32_t MaxAllowedDataBits;  // 0x0 (0x0)
	uint32_t MaxAllowedObjectReferences;  // 0x4 (0x4)


}; 
 
 // ScriptStruct Engine.MeshUVChannelInfo
struct FMeshUVChannelInfo
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bInitialized : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool bOverrideDensities : 1;  // 0x1 (0x1)
	char pad_2[2];  // 0x2 (0x2)
	float LocalUVDensities[4];  // 0x4 (0x4)


}; 
 
 // Function Engine.SplineComponent.AddSplineLocalPoint
struct FAddSplineLocalPoint
{
	struct FVector Position;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.StaticMeshVertexColorLODData
struct FStaticMeshVertexColorLODData
{
	struct TArray<struct FPaintedVertex> PaintedVertices;  // 0x0 (0x0)
	struct TArray<struct FColor> VertexBufferColors;  // 0x10 (0x10)
	uint32_t LODIndex;  // 0x20 (0x20)
	char pad_36[4];  // 0x24 (0x24)


}; 
 
 // Function Engine.AudioComponent.SetAudioBusSendPostEffect
struct FSetAudioBusSendPostEffect
{
	struct UAudioBus* AudioBus;  // 0x0 (0x0)
	float AudioBusSendLevel;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // ScriptStruct Engine.CustomAttributeSetting
struct FCustomAttributeSetting
{
	struct FString Name;  // 0x0 (0x0)
	struct FString Meaning;  // 0x10 (0x10)


}; 
 
 // Function Engine.ParticleSystemComponent.GetBeamSourceTangent
struct FGetBeamSourceTangent
{
	int32_t EmitterIndex;  // 0x0 (0x0)
	int32_t SourceIndex;  // 0x4 (0x4)
	struct FVector OutTangentPoint;  // 0x8 (0x8)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // ScriptStruct Engine.BakedCustomAttributePerBoneData
struct FBakedCustomAttributePerBoneData
{
	char pad_0[1];  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.InstancedStaticMeshComponentInstanceData
// Size: 0x190(Inherited: 0xB8)
struct FInstancedStaticMeshComponentInstanceData : FSceneComponentInstanceData
{
	struct UStaticMesh* StaticMesh;  // 0xB8 (0xB8)
	struct FInstancedStaticMeshLightMapInstanceData CachedStaticLighting;  // 0xC0 (0xC0)
	struct TArray<struct FInstancedStaticMeshInstanceData> PerInstanceSMData;  // 0x130 (0x130)
	struct TArray<float> PerInstanceSMCustomData;  // 0x140 (0x140)
	char pad_336[32];  // 0x150 (0x150)
	int32_t InstancingRandomSeed;  // 0x170 (0x170)
	char pad_372[4];  // 0x174 (0x174)
	struct TArray<struct FInstancedStaticMeshRandomSeed> AdditionalRandomSeeds;  // 0x178 (0x178)
	char pad_392_1 : 7;  // 0x188 (0x188)
	bool bHasPerInstanceHitProxies : 1;  // 0x188 (0x188)
	char pad_393[7];  // 0x189 (0x189)


}; 
 
 // Function Engine.Character.IsPlayingNetworkedRootMotionMontage
struct FIsPlayingNetworkedRootMotionMontage
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.DebugDisplayProperty
struct FDebugDisplayProperty
{
	struct UObject* Obj;  // 0x0 (0x0)
	UObject* WithinClass;  // 0x8 (0x8)
	char pad_16[16];  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.TimelineVectorTrack
struct FTimelineVectorTrack
{
	struct UCurveVector* VectorCurve;  // 0x0 (0x0)
	struct FDelegate InterpFunc;  // 0x8 (0x8)
	struct FName TrackName;  // 0x18 (0x18)
	struct FName VectorPropertyName;  // 0x20 (0x20)
	char pad_40[24];  // 0x28 (0x28)


}; 
 
 // Function Engine.SkeletalMeshComponent.GetSkeletalCenterOfMass
struct FGetSkeletalCenterOfMass
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.ForceFeedbackComponent.SetForceFeedbackEffect
struct FSetForceFeedbackEffect
{
	struct UForceFeedbackEffect* NewForceFeedbackEffect;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.RawDistributionVector
// Size: 0x60(Inherited: 0x20)
struct FRawDistributionVector : FRawDistribution
{
	float MinValue;  // 0x20 (0x20)
	float MaxValue;  // 0x24 (0x24)
	struct FVector MinValueVec;  // 0x28 (0x28)
	struct FVector MaxValueVec;  // 0x40 (0x40)
	struct UDistributionVector* Distribution;  // 0x58 (0x58)


}; 
 
 // ScriptStruct Engine.EdGraphPinReference
struct FEdGraphPinReference
{
	struct TWeakObjectPtr<UEdGraphNode> OwningNode;  // 0x0 (0x0)
	struct FGuid PinId;  // 0x8 (0x8)


}; 
 
 // Function Engine.StaticMesh.RemoveSocket
struct FRemoveSocket
{
	struct UStaticMeshSocket* Socket;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.CameraExposureSettings
struct FCameraExposureSettings
{
	enum class EAutoExposureMethod Method;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	float LowPercent;  // 0x4 (0x4)
	float HighPercent;  // 0x8 (0x8)
	float MinBrightness;  // 0xC (0xC)
	float MaxBrightness;  // 0x10 (0x10)
	float SpeedUp;  // 0x14 (0x14)
	float SpeedDown;  // 0x18 (0x18)
	float Bias;  // 0x1C (0x1C)
	struct UCurveFloat* BiasCurve;  // 0x20 (0x20)
	struct UTexture* MeterMask;  // 0x28 (0x28)
	float HistogramLogMin;  // 0x30 (0x30)
	float HistogramLogMax;  // 0x34 (0x34)
	float CalibrationConstant;  // 0x38 (0x38)
	char ApplyPhysicalCameraExposure : 1;  // 0x3C (0x3C)
	char pad_60_1 : 7;  // 0x3C (0x3C)
	char pad_61[4];  // 0x3D (0x3D)


}; 
 
 // ScriptStruct Engine.EdGraphSchemaAction_NewNode
// Size: 0x108(Inherited: 0x100)
struct FEdGraphSchemaAction_NewNode : FEdGraphSchemaAction
{
	struct UEdGraphNode* NodeTemplate;  // 0x100 (0x100)


}; 
 
 // Function Engine.KismetMathLibrary.Normal
struct FNormal
{
	struct FVector A;  // 0x0 (0x0)
	float Tolerance;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)
	struct FVector ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_AddBounded
struct FVector_AddBounded
{
	struct FVector A;  // 0x0 (0x0)
	struct FVector InAddVect;  // 0x18 (0x18)
	float InRadius;  // 0x30 (0x30)
	char pad_52[4];  // 0x34 (0x34)


}; 
 
 // ScriptStruct Engine.FullyLoadedPackagesInfo
struct FFullyLoadedPackagesInfo
{
	enum class EFullyLoadPackageType FullyLoadType;  // 0x0 (0x0)
	char pad_1[7];  // 0x1 (0x1)
	struct FString Tag;  // 0x8 (0x8)
	struct TArray<struct FName> PackagesToLoad;  // 0x18 (0x18)
	struct TArray<struct UObject*> LoadedObjects;  // 0x28 (0x28)


}; 
 
 // Function Engine.KismetMathLibrary.NotEqual_DateTimeDateTime
struct FNotEqual_DateTimeDateTime
{
	struct FDateTime A;  // 0x0 (0x0)
	struct FDateTime B;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // ScriptStruct Engine.LightmassPointLightSettings
// Size: 0xC(Inherited: 0xC)
struct FLightmassPointLightSettings : FLightmassLightSettings
{


}; 
 
 // ScriptStruct Engine.IrisNetDriverConfig
struct FIrisNetDriverConfig
{
	struct FName NetDriverDefinition;  // 0x0 (0x0)
	struct FName NetDriverName;  // 0x8 (0x8)
	struct FString NetDriverWildcardName;  // 0x10 (0x10)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool bEnableIris : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.KismetMathLibrary.Add_LinearColorLinearColor
struct FAdd_LinearColorLinearColor
{
	struct FLinearColor A;  // 0x0 (0x0)
	struct FLinearColor B;  // 0x10 (0x10)
	struct FLinearColor ReturnValue;  // 0x20 (0x20)


}; 
 
 // ScriptStruct Engine.BuildPromotionTestSettings
struct FBuildPromotionTestSettings
{
	struct FFilePath DefaultStaticMeshAsset;  // 0x0 (0x0)
	struct FBuildPromotionImportWorkflowSettings ImportWorkflow;  // 0x10 (0x10)
	struct FBuildPromotionOpenAssetSettings OpenAssets;  // 0x160 (0x160)
	struct FBuildPromotionNewProjectSettings NewProjectSettings;  // 0x1C0 (0x1C0)
	struct FFilePath SourceControlMaterial;  // 0x1E0 (0x1E0)


}; 
 
 // ScriptStruct Engine.SectionReference
struct FSectionReference
{
	int32_t SectionIndex;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlatformInputDeviceMapperLibrary.NotEqual_PlatformUserId
struct FNotEqual_PlatformUserId
{
	struct FPlatformUserId A;  // 0x0 (0x0)
	struct FPlatformUserId B;  // 0x4 (0x4)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.KismetMathLibrary.MakeVector2D
struct FMakeVector2D
{
	double X;  // 0x0 (0x0)
	double Y;  // 0x8 (0x8)
	struct FVector2D ReturnValue;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.WorldContext
struct FWorldContext
{
	char pad_0[192];  // 0x0 (0x0)
	struct FURL LastURL;  // 0xC0 (0xC0)
	struct FURL LastRemoteURL;  // 0x128 (0x128)
	struct UPendingNetGame* PendingNetGame;  // 0x190 (0x190)
	struct TArray<struct FFullyLoadedPackagesInfo> PackagesToFullyLoad;  // 0x198 (0x198)
	char pad_424[16];  // 0x1A8 (0x1A8)
	struct TArray<struct ULevel*> LoadedLevelsForPendingMapChange;  // 0x1B8 (0x1B8)
	char pad_456[24];  // 0x1C8 (0x1C8)
	struct TArray<struct UObjectReferencer*> ObjectReferencers;  // 0x1E0 (0x1E0)
	struct TArray<struct FLevelStreamingStatus> PendingLevelStreamingStatusUpdates;  // 0x1F0 (0x1F0)
	struct UGameViewportClient* GameViewport;  // 0x200 (0x200)
	struct UGameInstance* OwningGameInstance;  // 0x208 (0x208)
	struct TArray<struct FNamedNetDriver> ActiveNetDrivers;  // 0x210 (0x210)
	char pad_544[168];  // 0x220 (0x220)


}; 
 
 // Function Engine.PlayerController.ServerUpdateMultipleLevelsVisibility
struct FServerUpdateMultipleLevelsVisibility
{
	struct TArray<struct FUpdateLevelVisibilityLevelInfo> LevelVisibilities;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.StatColorMapping
struct FStatColorMapping
{
	struct FString StatName;  // 0x0 (0x0)
	struct TArray<struct FStatColorMapEntry> ColorMap;  // 0x10 (0x10)
	char DisableBlend : 1;  // 0x20 (0x20)
	char pad_32_1 : 7;  // 0x20 (0x20)
	char pad_33[8];  // 0x21 (0x21)


}; 
 
 // Function Engine.GameUserSettings.GetFoliageQuality
struct FGetFoliageQuality
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.ArrowComponent.SetArrowColor
struct FSetArrowColor
{
	struct FLinearColor NewColor;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.ClassRedirect
struct FClassRedirect
{
	struct FName ObjectName;  // 0x0 (0x0)
	struct FName OldClassName;  // 0x8 (0x8)
	struct FName NewClassName;  // 0x10 (0x10)
	struct FName OldSubobjName;  // 0x18 (0x18)
	struct FName NewSubobjName;  // 0x20 (0x20)
	struct FName NewClassClass;  // 0x28 (0x28)
	struct FName NewClassPackage;  // 0x30 (0x30)
	char pad_56_1 : 7;  // 0x38 (0x38)
	bool InstanceOnly : 1;  // 0x38 (0x38)
	char pad_57[3];  // 0x39 (0x39)


}; 
 
 // ScriptStruct Engine.StructRedirect
struct FStructRedirect
{
	struct FName OldStructName;  // 0x0 (0x0)
	struct FName NewStructName;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.Redirector
struct FRedirector
{
	struct FName OldName;  // 0x0 (0x0)
	struct FName NewName;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.StringCurveKey
struct FStringCurveKey
{
	float Time;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FString Value;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.TickPrerequisite
struct FTickPrerequisite
{
	char pad_0[16];  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.StrataMaterialInfo
struct FStrataMaterialInfo
{
	uint16_t ShadingModelField;  // 0x0 (0x0)
	char bHasShadingModelFromExpression;  // 0x2 (0x2)
	char pad_3[1];  // 0x3 (0x3)
	uint32_t ConnectedProperties;  // 0x4 (0x4)
	struct TArray<struct USubsurfaceProfile*> SubsurfaceProfiles;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.NetworkEmulationProfileDescription
struct FNetworkEmulationProfileDescription
{
	struct FString ProfileName;  // 0x0 (0x0)
	struct FString ToolTip;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.RigidBodyErrorCorrection
struct FRigidBodyErrorCorrection
{
	float PingExtrapolation;  // 0x0 (0x0)
	float PingLimit;  // 0x4 (0x4)
	float ErrorPerLinearDifference;  // 0x8 (0x8)
	float ErrorPerAngularDifference;  // 0xC (0xC)
	float MaxRestoredStateError;  // 0x10 (0x10)
	float MaxLinearHardSnapDistance;  // 0x14 (0x14)
	float PositionLerp;  // 0x18 (0x18)
	float AngleLerp;  // 0x1C (0x1C)
	float LinearVelocityCoefficient;  // 0x20 (0x20)
	float AngularVelocityCoefficient;  // 0x24 (0x24)
	float ErrorAccumulationSeconds;  // 0x28 (0x28)
	float ErrorAccumulationDistanceSq;  // 0x2C (0x2C)
	float ErrorAccumulationSimilarity;  // 0x30 (0x30)


}; 
 
 // ScriptStruct Engine.RigidBodyContactInfo
struct FRigidBodyContactInfo
{
	struct FVector ContactPosition;  // 0x0 (0x0)
	struct FVector ContactNormal;  // 0x18 (0x18)
	float ContactPenetration;  // 0x30 (0x30)
	char pad_52_1 : 7;  // 0x34 (0x34)
	bool bContactProbe : 1;  // 0x34 (0x34)
	char pad_53[3];  // 0x35 (0x35)
	struct UPhysicalMaterial* PhysMaterial[2];  // 0x38 (0x38)


}; 
 
 // ScriptStruct Engine.CollisionImpactData
struct FCollisionImpactData
{
	struct TArray<struct FRigidBodyContactInfo> ContactInfos;  // 0x0 (0x0)
	struct FVector TotalNormalImpulse;  // 0x10 (0x10)
	struct FVector TotalFrictionImpulse;  // 0x28 (0x28)
	char pad_64_1 : 7;  // 0x40 (0x40)
	bool bIsVelocityDeltaUnderThreshold : 1;  // 0x40 (0x40)
	char pad_65[7];  // 0x41 (0x41)


}; 
 
 // ScriptStruct Engine.FractureEffect
struct FFractureEffect
{
	struct UParticleSystem* ParticleSystem;  // 0x0 (0x0)
	struct USoundBase* Sound;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.BasedPosition
struct FBasedPosition
{
	struct AActor* Base;  // 0x0 (0x0)
	struct FVector Position;  // 0x8 (0x8)
	struct FVector CachedBaseLocation;  // 0x20 (0x20)
	struct FRotator CachedBaseRotation;  // 0x38 (0x38)
	struct FVector CachedTransPosition;  // 0x50 (0x50)


}; 
 
 // Function Engine.DataLayer.Equals
struct FEquals
{
	struct FActorDataLayer ActorDataLayer;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // ScriptStruct Engine.LightmassDebugOptions
struct FLightmassDebugOptions
{
	char bDebugMode : 1;  // 0x0 (0x0)
	char bStatsEnabled : 1;  // 0x0 (0x0)
	char bGatherBSPSurfacesAcrossComponents : 1;  // 0x0 (0x0)
	char pad_0_1 : 5;  // 0x0 (0x0)
	char pad_1[4];  // 0x1 (0x1)
	float CoplanarTolerance;  // 0x4 (0x4)
	char bUseImmediateImport : 1;  // 0x8 (0x8)
	char bImmediateProcessMappings : 1;  // 0x8 (0x8)
	char bSortMappings : 1;  // 0x8 (0x8)
	char bDumpBinaryFiles : 1;  // 0x8 (0x8)
	char bDebugMaterials : 1;  // 0x8 (0x8)
	char bPadMappings : 1;  // 0x8 (0x8)
	char bDebugPaddings : 1;  // 0x8 (0x8)
	char bOnlyCalcDebugTexelMappings : 1;  // 0x8 (0x8)
	char bUseRandomColors : 1;  // 0x9 (0x9)
	char bColorBordersGreen : 1;  // 0x9 (0x9)
	char bColorByExecutionTime : 1;  // 0x9 (0x9)
	char pad_9_1 : 5;  // 0x9 (0x9)
	char pad_10[3];  // 0xA (0xA)
	float ExecutionTimeDivisor;  // 0xC (0xC)


}; 
 
 // ScriptStruct Engine.DataDrivenConsoleVariable
struct FDataDrivenConsoleVariable
{
	uint8_t Type;  // 0x0 (0x0)
	char pad_1[7];  // 0x1 (0x1)
	struct FString Name;  // 0x8 (0x8)
	struct FString ToolTip;  // 0x18 (0x18)
	float DefaultValueFloat;  // 0x28 (0x28)
	int32_t DefaultValueInt;  // 0x2C (0x2C)
	char pad_48_1 : 7;  // 0x30 (0x30)
	bool DefaultValueBool : 1;  // 0x30 (0x30)
	char pad_49[31];  // 0x31 (0x31)


}; 
 
 // ScriptStruct Engine.SwarmDebugOptions
struct FSwarmDebugOptions
{
	char bDistributionEnabled : 1;  // 0x0 (0x0)
	char bForceContentExport : 1;  // 0x0 (0x0)
	char bInitialized : 1;  // 0x0 (0x0)
	char pad_0_1 : 5;  // 0x0 (0x0)
	char pad_1[4];  // 0x1 (0x1)


}; 
 
 // Function Engine.PlayerCameraManager.StopCameraShake
struct FStopCameraShake
{
	struct UCameraShakeBase* ShakeInstance;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bImmediately : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.SplineComponent.DivideSplineIntoPolylineRecursive
struct FDivideSplineIntoPolylineRecursive
{
	float StartDistanceAlongSpline;  // 0x0 (0x0)
	float EndDistanceAlongSpline;  // 0x4 (0x4)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)
	float MaxSquareDistanceFromSpline;  // 0xC (0xC)
	struct TArray<struct FVector> OutPoints;  // 0x10 (0x10)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // ScriptStruct Engine.MTDResult
struct FMTDResult
{
	struct FVector Direction;  // 0x0 (0x0)
	float Distance;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)


}; 
 
 // ScriptStruct Engine.MeshBuildSettings
struct FMeshBuildSettings
{
	char bUseMikkTSpace : 1;  // 0x0 (0x0)
	char bRecomputeNormals : 1;  // 0x0 (0x0)
	char bRecomputeTangents : 1;  // 0x0 (0x0)
	char bComputeWeightedNormals : 1;  // 0x0 (0x0)
	char bRemoveDegenerates : 1;  // 0x0 (0x0)
	char bBuildReversedIndexBuffer : 1;  // 0x0 (0x0)
	char bUseHighPrecisionTangentBasis : 1;  // 0x0 (0x0)
	char bUseFullPrecisionUVs : 1;  // 0x0 (0x0)
	char bUseBackwardsCompatibleF16TruncUVs : 1;  // 0x1 (0x1)
	char bGenerateLightmapUVs : 1;  // 0x1 (0x1)
	char bGenerateDistanceFieldAsIfTwoSided : 1;  // 0x1 (0x1)
	char bSupportFaceRemap : 1;  // 0x1 (0x1)
	char pad_1_1 : 4;  // 0x1 (0x1)
	char pad_2[3];  // 0x2 (0x2)
	int32_t MinLightmapResolution;  // 0x4 (0x4)
	int32_t SrcLightmapIndex;  // 0x8 (0x8)
	int32_t DstLightmapIndex;  // 0xC (0xC)
	float BuildScale;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)
	struct FVector BuildScale3D;  // 0x18 (0x18)
	float DistanceFieldResolutionScale;  // 0x30 (0x30)
	char pad_52[4];  // 0x34 (0x34)
	struct UStaticMesh* DistanceFieldReplacementMesh;  // 0x38 (0x38)
	int32_t MaxLumenMeshCards;  // 0x40 (0x40)
	char pad_68[4];  // 0x44 (0x44)


}; 
 
 // Function Engine.KismetTextLibrary.EqualEqual_IgnoreCase_TextText
struct FEqualEqual_IgnoreCase_TextText
{
	struct FText A;  // 0x0 (0x0)
	struct FText B;  // 0x18 (0x18)
	char pad_48_1 : 7;  // 0x30 (0x30)
	bool ReturnValue : 1;  // 0x30 (0x30)
	char pad_49[7];  // 0x31 (0x31)


}; 
 
 // ScriptStruct Engine.SkeletalMeshBuildSettings
struct FSkeletalMeshBuildSettings
{
	char bRecomputeNormals : 1;  // 0x0 (0x0)
	char bRecomputeTangents : 1;  // 0x0 (0x0)
	char bUseMikkTSpace : 1;  // 0x0 (0x0)
	char bComputeWeightedNormals : 1;  // 0x0 (0x0)
	char bRemoveDegenerates : 1;  // 0x0 (0x0)
	char bUseHighPrecisionTangentBasis : 1;  // 0x0 (0x0)
	char bUseFullPrecisionUVs : 1;  // 0x0 (0x0)
	char bUseBackwardsCompatibleF16TruncUVs : 1;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	float ThresholdPosition;  // 0x4 (0x4)
	float ThresholdTangentNormal;  // 0x8 (0x8)
	float ThresholdUV;  // 0xC (0xC)
	float MorphThresholdPosition;  // 0x10 (0x10)


}; 
 
 // Function Engine.PlayerState.ReceiveOverrideWith
struct FReceiveOverrideWith
{
	struct APlayerState* OldPlayerState;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.MaxOfIntArray
struct FMaxOfIntArray
{
	struct TArray<int32_t> IntArray;  // 0x0 (0x0)
	int32_t IndexOfMaxValue;  // 0x10 (0x10)
	int32_t MaxValue;  // 0x14 (0x14)


}; 
 
 // ScriptStruct Engine.MeshNaniteSettings
struct FMeshNaniteSettings
{
	char bEnabled : 1;  // 0x0 (0x0)
	char bPreserveArea : 1;  // 0x0 (0x0)
	char pad_0_1 : 6;  // 0x0 (0x0)
	char pad_1[4];  // 0x1 (0x1)
	int32_t PositionPrecision;  // 0x4 (0x4)
	uint32_t TargetMinimumResidencyInKB;  // 0x8 (0x8)
	float KeepPercentTriangles;  // 0xC (0xC)
	float TrimRelativeError;  // 0x10 (0x10)
	float FallbackPercentTriangles;  // 0x14 (0x14)
	float FallbackRelativeError;  // 0x18 (0x18)


}; 
 
 // ScriptStruct Engine.PredictProjectilePathParams
struct FPredictProjectilePathParams
{
	struct FVector StartLocation;  // 0x0 (0x0)
	struct FVector LaunchVelocity;  // 0x18 (0x18)
	char pad_48_1 : 7;  // 0x30 (0x30)
	bool bTraceWithCollision : 1;  // 0x30 (0x30)
	char pad_49[3];  // 0x31 (0x31)
	float ProjectileRadius;  // 0x34 (0x34)
	float MaxSimTime;  // 0x38 (0x38)
	char pad_60_1 : 7;  // 0x3C (0x3C)
	bool bTraceWithChannel : 1;  // 0x3C (0x3C)
	enum class ECollisionChannel TraceChannel;  // 0x3D (0x3D)
	char pad_62[2];  // 0x3E (0x3E)
	struct TArray<enum class EObjectTypeQuery> ObjectTypes;  // 0x40 (0x40)
	struct TArray<struct AActor*> ActorsToIgnore;  // 0x50 (0x50)
	float SimFrequency;  // 0x60 (0x60)
	float OverrideGravityZ;  // 0x64 (0x64)
	enum class EDrawDebugTrace DrawDebugType;  // 0x68 (0x68)
	char pad_105[3];  // 0x69 (0x69)
	float DrawDebugTime;  // 0x6C (0x6C)
	char pad_112_1 : 7;  // 0x70 (0x70)
	bool bTraceComplex : 1;  // 0x70 (0x70)
	char pad_113[7];  // 0x71 (0x71)


}; 
 
 // ScriptStruct Engine.AnimSequenceTrackContainer
struct FAnimSequenceTrackContainer
{
	struct TArray<struct FRawAnimSequenceTrack> AnimationTracks;  // 0x0 (0x0)
	struct TArray<struct FName> TrackNames;  // 0x10 (0x10)


}; 
 
 // Function Engine.PlayerState.GetScore
struct FGetScore
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.PredictProjectilePathResult
struct FPredictProjectilePathResult
{
	struct TArray<struct FPredictProjectilePathPointData> PathData;  // 0x0 (0x0)
	struct FPredictProjectilePathPointData LastTraceDestination;  // 0x10 (0x10)
	struct FHitResult HitResult;  // 0x48 (0x48)


}; 
 
 // ScriptStruct Engine.ActiveHapticFeedbackEffect
struct FActiveHapticFeedbackEffect
{
	struct UHapticFeedbackEffect_Base* HapticEffect;  // 0x0 (0x0)
	char pad_8[64];  // 0x8 (0x8)


}; 
 
 // Function Engine.CameraComponent.SetProjectionMode
struct FSetProjectionMode
{
	enum class ECameraProjectionMode InProjectionMode;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_IsZero
struct FVector_IsZero
{
	struct FVector A;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool ReturnValue : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // ScriptStruct Engine.ClusterNode
struct FClusterNode
{
	struct FVector3f BoundMin;  // 0x0 (0x0)
	int32_t FirstChild;  // 0xC (0xC)
	struct FVector3f BoundMax;  // 0x10 (0x10)
	int32_t LastChild;  // 0x1C (0x1C)
	int32_t FirstInstance;  // 0x20 (0x20)
	int32_t LastInstance;  // 0x24 (0x24)
	struct FVector3f MinInstanceScale;  // 0x28 (0x28)
	struct FVector3f MaxInstanceScale;  // 0x34 (0x34)


}; 
 
 // ScriptStruct Engine.InstancedStaticMeshInstanceData
struct FInstancedStaticMeshInstanceData
{
	struct FMatrix Transform;  // 0x0 (0x0)


}; 
 
 // Function Engine.MaterialParameterCollection.GetVectorParameterDefaultValue
struct FGetVectorParameterDefaultValue
{
	struct FName ParameterName;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bParameterFound : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)
	struct FLinearColor ReturnValue;  // 0xC (0xC)


}; 
 
 // ScriptStruct Engine.InstancedStaticMeshMappingInfo
struct FInstancedStaticMeshMappingInfo
{
	char pad_0[8];  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.InstancedStaticMeshRandomSeed
struct FInstancedStaticMeshRandomSeed
{
	int32_t StartInstanceIndex;  // 0x0 (0x0)
	int32_t RandomSeed;  // 0x4 (0x4)


}; 
 
 // ScriptStruct Engine.UniqueNetIdReplNetSerializerStringStruct
struct FUniqueNetIdReplNetSerializerStringStruct
{
	struct FString String;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.LinearColor_Distance
struct FLinearColor_Distance
{
	struct FLinearColor C1;  // 0x0 (0x0)
	struct FLinearColor C2;  // 0x10 (0x10)
	float ReturnValue;  // 0x20 (0x20)


}; 
 
 // ScriptStruct Engine.ISMClientInstanceManagerData
struct FISMClientInstanceManagerData
{
	char pad_0[16];  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.ParameterGroupData
struct FParameterGroupData
{
	struct FString GroupName;  // 0x0 (0x0)
	int32_t GroupSortPriority;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)


}; 
 
 // Function Engine.VolumetricCloudComponent.SetShadowReflectionSampleCountScale
struct FSetShadowReflectionSampleCountScale
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintMapLibrary.Map_IsEmpty
struct FMap_IsEmpty
{
	struct TMap<int32_t, int32_t> TargetMap;  // 0x0 (0x0)
	char pad_80_1 : 7;  // 0x50 (0x50)
	bool ReturnValue : 1;  // 0x50 (0x50)
	char pad_81[7];  // 0x51 (0x51)


}; 
 
 // ScriptStruct Engine.CustomInput
struct FCustomInput
{
	struct FName InputName;  // 0x0 (0x0)
	struct FExpressionInput Input;  // 0x8 (0x8)


}; 
 
 // Function Engine.AnimInstance.TryGetPawnOwner
struct FTryGetPawnOwner
{
	struct APawn* ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.CustomOutput
struct FCustomOutput
{
	struct FName OutputName;  // 0x0 (0x0)
	enum class ECustomMaterialOutputType OutputType;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.AnimInstance.Montage_JumpToSectionsEnd
struct FMontage_JumpToSectionsEnd
{
	struct FName SectionName;  // 0x0 (0x0)
	struct UAnimMontage* Montage;  // 0x8 (0x8)


}; 
 
 // Function Engine.BlueprintPathsLibrary.ProjectPluginsDir
struct FProjectPluginsDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkinnedMeshComponent.TransformFromBoneSpace
struct FTransformFromBoneSpace
{
	struct FName BoneName;  // 0x0 (0x0)
	struct FVector InPosition;  // 0x8 (0x8)
	struct FRotator InRotation;  // 0x20 (0x20)
	struct FVector OutPosition;  // 0x38 (0x38)
	struct FRotator OutRotation;  // 0x50 (0x50)


}; 
 
 // Function Engine.TypedElementWorldInterface.IsTemplateElement
struct FIsTemplateElement
{
	struct FScriptTypedElementHandle InElementHandle;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // ScriptStruct Engine.ExternalToolDefinition
struct FExternalToolDefinition
{
	struct FString ToolName;  // 0x0 (0x0)
	struct FFilePath ExecutablePath;  // 0x10 (0x10)
	struct FString CommandLineOptions;  // 0x20 (0x20)
	struct FDirectoryPath WorkingDirectory;  // 0x30 (0x30)
	struct FString ScriptExtension;  // 0x40 (0x40)
	struct FDirectoryPath ScriptDirectory;  // 0x50 (0x50)


}; 
 
 // ScriptStruct Engine.FunctionExpressionInput
struct FFunctionExpressionInput
{
	struct UMaterialExpressionFunctionInput* ExpressionInput;  // 0x0 (0x0)
	struct FGuid ExpressionInputId;  // 0x8 (0x8)
	struct FExpressionInput Input;  // 0x18 (0x18)


}; 
 
 // Function Engine.VisualLoggerKismetLibrary.LogText
struct FLogText
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FString Text;  // 0x8 (0x8)
	struct FName LogCategory;  // 0x18 (0x18)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool bAddToMessageLog : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // ScriptStruct Engine.FunctionExpressionOutput
struct FFunctionExpressionOutput
{
	struct UMaterialExpressionFunctionOutput* ExpressionOutput;  // 0x0 (0x0)
	struct FGuid ExpressionOutputId;  // 0x8 (0x8)
	struct FExpressionOutput Output;  // 0x18 (0x18)
	char pad_52[4];  // 0x34 (0x34)


}; 
 
 // ScriptStruct Engine.SplinePoint
struct FSplinePoint
{
	float InputKey;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector Position;  // 0x8 (0x8)
	struct FVector ArriveTangent;  // 0x20 (0x20)
	struct FVector LeaveTangent;  // 0x38 (0x38)
	struct FRotator Rotation;  // 0x50 (0x50)
	struct FVector Scale;  // 0x68 (0x68)
	enum class ESplinePointType Type;  // 0x80 (0x80)
	char pad_129[7];  // 0x81 (0x81)


}; 
 
 // ScriptStruct Engine.MaterialInstanceBasePropertyOverrides
struct FMaterialInstanceBasePropertyOverrides
{
	char bOverride_OpacityMaskClipValue : 1;  // 0x0 (0x0)
	char bOverride_BlendMode : 1;  // 0x0 (0x0)
	char bOverride_ShadingModel : 1;  // 0x0 (0x0)
	char bOverride_DitheredLODTransition : 1;  // 0x0 (0x0)
	char bOverride_CastDynamicShadowAsMasked : 1;  // 0x0 (0x0)
	char bOverride_TwoSided : 1;  // 0x0 (0x0)
	char bOverride_OutputTranslucentVelocity : 1;  // 0x0 (0x0)
	char TwoSided : 1;  // 0x0 (0x0)
	char DitheredLODTransition : 1;  // 0x1 (0x1)
	char bCastDynamicShadowAsMasked : 1;  // 0x1 (0x1)
	char bOutputTranslucentVelocity : 1;  // 0x1 (0x1)
	char pad_1_1 : 5;  // 0x1 (0x1)
	enum class EBlendMode BlendMode;  // 0x2 (0x2)
	enum class EMaterialShadingModel ShadingModel;  // 0x3 (0x3)
	float OpacityMaskClipValue;  // 0x4 (0x4)


}; 
 
 // ScriptStruct Engine.LightmassMaterialInterfaceSettings
struct FLightmassMaterialInterfaceSettings
{
	float EmissiveBoost;  // 0x0 (0x0)
	float DiffuseBoost;  // 0x4 (0x4)
	float ExportResolutionScale;  // 0x8 (0x8)
	char bCastShadowAsMasked : 1;  // 0xC (0xC)
	char bOverrideCastShadowAsMasked : 1;  // 0xC (0xC)
	char bOverrideEmissiveBoost : 1;  // 0xC (0xC)
	char bOverrideDiffuseBoost : 1;  // 0xC (0xC)
	char bOverrideExportResolutionScale : 1;  // 0xC (0xC)
	char pad_12_1 : 3;  // 0xC (0xC)
	char pad_13[4];  // 0xD (0xD)


}; 
 
 // Function Engine.Character.GetBaseRotationOffsetRotator
struct FGetBaseRotationOffsetRotator
{
	struct FRotator ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.MaterialLayersFunctionsEditorOnlyData
struct FMaterialLayersFunctionsEditorOnlyData
{
	struct TArray<bool> LayerStates;  // 0x0 (0x0)
	struct TArray<struct FText> LayerNames;  // 0x10 (0x10)
	struct TArray<bool> RestrictToLayerRelatives;  // 0x20 (0x20)
	struct TArray<bool> RestrictToBlendRelatives;  // 0x30 (0x30)
	struct TArray<struct FGuid> LayerGuids;  // 0x40 (0x40)
	struct TArray<uint8_t> LayerLinkStates;  // 0x50 (0x50)
	struct TArray<struct FGuid> DeletedParentLayerGuids;  // 0x60 (0x60)


}; 
 
 // ScriptStruct Engine.MaterialProxySettings
struct FMaterialProxySettings
{
	enum class ETextureSizingType TextureSizingType;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	struct FIntPoint TextureSize;  // 0x4 (0x4)
	float TargetTexelDensityPerMeter;  // 0xC (0xC)
	float MeshMaxScreenSizePercent;  // 0x10 (0x10)
	float MeshMinDrawDistance;  // 0x14 (0x14)
	float GutterSpace;  // 0x18 (0x18)
	float MetallicConstant;  // 0x1C (0x1C)
	float RoughnessConstant;  // 0x20 (0x20)
	float AnisotropyConstant;  // 0x24 (0x24)
	float SpecularConstant;  // 0x28 (0x28)
	float OpacityConstant;  // 0x2C (0x2C)
	float OpacityMaskConstant;  // 0x30 (0x30)
	float AmbientOcclusionConstant;  // 0x34 (0x34)
	enum class EMaterialMergeType MaterialMergeType;  // 0x38 (0x38)
	enum class EBlendMode BlendMode;  // 0x39 (0x39)
	char bAllowTwoSidedMaterial : 1;  // 0x3A (0x3A)
	char bNormalMap : 1;  // 0x3A (0x3A)
	char bTangentMap : 1;  // 0x3A (0x3A)
	char bMetallicMap : 1;  // 0x3A (0x3A)
	char bRoughnessMap : 1;  // 0x3A (0x3A)
	char bAnisotropyMap : 1;  // 0x3A (0x3A)
	char bSpecularMap : 1;  // 0x3A (0x3A)
	char bEmissiveMap : 1;  // 0x3A (0x3A)
	char bOpacityMap : 1;  // 0x3B (0x3B)
	char bOpacityMaskMap : 1;  // 0x3B (0x3B)
	char bAmbientOcclusionMap : 1;  // 0x3B (0x3B)
	char pad_59_1 : 5;  // 0x3B (0x3B)
	struct FIntPoint DiffuseTextureSize;  // 0x3C (0x3C)
	struct FIntPoint NormalTextureSize;  // 0x44 (0x44)
	struct FIntPoint TangentTextureSize;  // 0x4C (0x4C)
	struct FIntPoint MetallicTextureSize;  // 0x54 (0x54)
	struct FIntPoint RoughnessTextureSize;  // 0x5C (0x5C)
	struct FIntPoint AnisotropyTextureSize;  // 0x64 (0x64)
	struct FIntPoint SpecularTextureSize;  // 0x6C (0x6C)
	struct FIntPoint EmissiveTextureSize;  // 0x74 (0x74)
	struct FIntPoint OpacityTextureSize;  // 0x7C (0x7C)
	struct FIntPoint OpacityMaskTextureSize;  // 0x84 (0x84)
	struct FIntPoint AmbientOcclusionTextureSize;  // 0x8C (0x8C)


}; 
 
 // Function Engine.TwitterIntegrationBase.TwitterRequest
struct FTwitterRequest
{
	struct FString URL;  // 0x0 (0x0)
	struct TArray<struct FString> ParamKeysAndValues;  // 0x10 (0x10)
	enum class ETwitterRequestMethod RequestMethod;  // 0x20 (0x20)
	char pad_33[3];  // 0x21 (0x21)
	int32_t AccountIndex;  // 0x24 (0x24)
	char pad_40_1 : 7;  // 0x28 (0x28)
	bool ReturnValue : 1;  // 0x28 (0x28)
	char pad_41[7];  // 0x29 (0x29)


}; 
 
 // ScriptStruct Engine.CollectionParameterBase
struct FCollectionParameterBase
{
	struct FName ParameterName;  // 0x0 (0x0)
	struct FGuid ID;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.CollectionScalarParameter
// Size: 0x1C(Inherited: 0x18)
struct FCollectionScalarParameter : FCollectionParameterBase
{
	float DefaultValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetMathLibrary.ProjectVectorOnToVector
struct FProjectVectorOnToVector
{
	struct FVector V;  // 0x0 (0x0)
	struct FVector Target;  // 0x18 (0x18)
	struct FVector ReturnValue;  // 0x30 (0x30)


}; 
 
 // ScriptStruct Engine.CollectionVectorParameter
// Size: 0x28(Inherited: 0x18)
struct FCollectionVectorParameter : FCollectionParameterBase
{
	struct FLinearColor DefaultValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.TypedElementWorldInterface.CanDeleteElement
struct FCanDeleteElement
{
	struct FScriptTypedElementHandle InElementHandle;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // ScriptStruct Engine.PurchaseInfo
struct FPurchaseInfo
{
	struct FString Identifier;  // 0x0 (0x0)
	struct FString DisplayName;  // 0x10 (0x10)
	struct FString DisplayDescription;  // 0x20 (0x20)
	struct FString DisplayPrice;  // 0x30 (0x30)


}; 
 
 // ScriptStruct Engine.NavAgentSelector
struct FNavAgentSelector
{
	char bSupportsAgent0 : 1;  // 0x0 (0x0)
	char bSupportsAgent1 : 1;  // 0x0 (0x0)
	char bSupportsAgent2 : 1;  // 0x0 (0x0)
	char bSupportsAgent3 : 1;  // 0x0 (0x0)
	char bSupportsAgent4 : 1;  // 0x0 (0x0)
	char bSupportsAgent5 : 1;  // 0x0 (0x0)
	char bSupportsAgent6 : 1;  // 0x0 (0x0)
	char bSupportsAgent7 : 1;  // 0x0 (0x0)
	char bSupportsAgent8 : 1;  // 0x1 (0x1)
	char bSupportsAgent9 : 1;  // 0x1 (0x1)
	char bSupportsAgent10 : 1;  // 0x1 (0x1)
	char bSupportsAgent11 : 1;  // 0x1 (0x1)
	char bSupportsAgent12 : 1;  // 0x1 (0x1)
	char bSupportsAgent13 : 1;  // 0x1 (0x1)
	char bSupportsAgent14 : 1;  // 0x1 (0x1)
	char bSupportsAgent15 : 1;  // 0x1 (0x1)
	char pad_2[2];  // 0x2 (0x2)


}; 
 
 // Function Engine.KismetMathLibrary.MakeVector_NetQuantize10
struct FMakeVector_NetQuantize10
{
	double X;  // 0x0 (0x0)
	double Y;  // 0x8 (0x8)
	double Z;  // 0x10 (0x10)
	struct FVector_NetQuantize10 ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetMathLibrary.Matrix_GetRotator
struct FMatrix_GetRotator
{
	struct FMatrix M;  // 0x0 (0x0)
	struct FRotator ReturnValue;  // 0x80 (0x80)
	char pad_152[8];  // 0x98 (0x98)


}; 
 
 // Function Engine.SplineComponent.GetDirectionAtTime
struct FGetDirectionAtTime
{
	float Time;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x4 (0x4)
	char pad_5_1 : 7;  // 0x5 (0x5)
	bool bUseConstantVelocity : 1;  // 0x5 (0x5)
	char pad_6[2];  // 0x6 (0x6)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.CameraShakeSourceComponent.StopAllCameraShakes
struct FStopAllCameraShakes
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bImmediately : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineComponent.FindInputKeyClosestToWorldLocation
struct FFindInputKeyClosestToWorldLocation
{
	struct FVector WorldLocation;  // 0x0 (0x0)
	float ReturnValue;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)


}; 
 
 // ScriptStruct Engine.NavigationLink
// Size: 0x60(Inherited: 0x30)
struct FNavigationLink : FNavigationLinkBase
{
	struct FVector Left;  // 0x30 (0x30)
	struct FVector Right;  // 0x48 (0x48)


}; 
 
 // ScriptStruct Engine.AnimTrack
struct FAnimTrack
{
	struct TArray<struct FAnimSegment> AnimSegments;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.NavigationSegmentLink
// Size: 0x90(Inherited: 0x30)
struct FNavigationSegmentLink : FNavigationLinkBase
{
	struct FVector LeftStart;  // 0x30 (0x30)
	struct FVector LeftEnd;  // 0x48 (0x48)
	struct FVector RightStart;  // 0x60 (0x60)
	struct FVector RightEnd;  // 0x78 (0x78)


}; 
 
 // Function Engine.HealthSnapshotBlueprintLibrary.LogPerformanceSnapshot
struct FLogPerformanceSnapshot
{
	struct FString SnapshotTitle;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool bResetStats : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // ScriptStruct Engine.OverlapResult
struct FOverlapResult
{
	struct FActorInstanceHandle OverlapObjectHandle;  // 0x0 (0x0)
	struct TWeakObjectPtr<UPrimitiveComponent> Component;  // 0x18 (0x18)
	char pad_32[4];  // 0x20 (0x20)
	char bBlockingHit : 1;  // 0x24 (0x24)
	char pad_36_1 : 7;  // 0x24 (0x24)
	char pad_37[4];  // 0x25 (0x25)


}; 
 
 // Function Engine.ParticleSystemComponent.SetTemplate
struct FSetTemplate
{
	struct UParticleSystem* NewTemplate;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMeshComponent.OverrideAnimationData
struct FOverrideAnimationData
{
	struct UAnimationAsset* InAnimToPlay;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bIsLooping : 1;  // 0x8 (0x8)
	char pad_9_1 : 7;  // 0x9 (0x9)
	bool bIsPlaying : 1;  // 0x9 (0x9)
	char pad_10[2];  // 0xA (0xA)
	float Position;  // 0xC (0xC)
	float PlayRate;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)


}; 
 
 // Function Engine.KismetStringLibrary.Reverse
struct FReverse
{
	struct FString SourceString;  // 0x0 (0x0)
	struct FString ReturnValue;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.ParticleRandomSeedInfo
struct FParticleRandomSeedInfo
{
	struct FName ParameterName;  // 0x0 (0x0)
	char bGetSeedFromInstance : 1;  // 0x8 (0x8)
	char bInstanceSeedIsIndex : 1;  // 0x8 (0x8)
	char bResetSeedOnEmitterLooping : 1;  // 0x8 (0x8)
	char bRandomlySelectSeedArray : 1;  // 0x8 (0x8)
	char pad_8_1 : 4;  // 0x8 (0x8)
	char pad_9[8];  // 0x9 (0x9)
	struct TArray<int32_t> RandomSeeds;  // 0x10 (0x10)


}; 
 
 // Function Engine.SkeletalMeshComponent.PlayAnimation
struct FPlayAnimation
{
	struct UAnimationAsset* NewAnimToPlay;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bLooping : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // ScriptStruct Engine.BeamModifierOptions
struct FBeamModifierOptions
{
	char bModify : 1;  // 0x0 (0x0)
	char bScale : 1;  // 0x0 (0x0)
	char Block : 1;  // 0x0 (0x0)
	char pad_0_1 : 5;  // 0x0 (0x0)
	char pad_1[4];  // 0x1 (0x1)


}; 
 
 // ScriptStruct Engine.BranchingPointMarker
struct FBranchingPointMarker
{
	int32_t NotifyIndex;  // 0x0 (0x0)
	float TriggerTime;  // 0x4 (0x4)
	enum class EAnimNotifyEventType NotifyEventType;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.PlayerController.GetHitResultUnderCursorByChannel
struct FGetHitResultUnderCursorByChannel
{
	enum class ETraceTypeQuery TraceChannel;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool bTraceComplex : 1;  // 0x1 (0x1)
	char pad_2[6];  // 0x2 (0x2)
	struct FHitResult HitResult;  // 0x8 (0x8)
	char pad_240_1 : 7;  // 0xF0 (0xF0)
	bool ReturnValue : 1;  // 0xF0 (0xF0)
	char pad_241[7];  // 0xF1 (0xF1)


}; 
 
 // ScriptStruct Engine.ParticleEvent_GenerateInfo
struct FParticleEvent_GenerateInfo
{
	enum class EParticleEventType Type;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	int32_t Frequency;  // 0x4 (0x4)
	int32_t ParticleFrequency;  // 0x8 (0x8)
	char FirstTimeOnly : 1;  // 0xC (0xC)
	char LastTimeOnly : 1;  // 0xC (0xC)
	char UseReflectedImpactVector : 1;  // 0xC (0xC)
	char bUseOrbitOffset : 1;  // 0xC (0xC)
	char pad_12_1 : 4;  // 0xC (0xC)
	char pad_13[4];  // 0xD (0xD)
	struct FName CustomName;  // 0x10 (0x10)
	struct TArray<struct UParticleModuleEventSendToGame*> ParticleModuleEventsToSendToGame;  // 0x18 (0x18)


}; 
 
 // ScriptStruct Engine.LocationBoneSocketInfo
struct FLocationBoneSocketInfo
{
	struct FName BoneSocketName;  // 0x0 (0x0)
	struct FVector Offset;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.OrbitOptions
struct FOrbitOptions
{
	char bProcessDuringSpawn : 1;  // 0x0 (0x0)
	char bProcessDuringUpdate : 1;  // 0x0 (0x0)
	char bUseEmitterTime : 1;  // 0x0 (0x0)
	char pad_0_1 : 5;  // 0x0 (0x0)
	char pad_1[4];  // 0x1 (0x1)


}; 
 
 // ScriptStruct Engine.EmitterDynamicParameter
struct FEmitterDynamicParameter
{
	struct FName ParamName;  // 0x0 (0x0)
	char bUseEmitterTime : 1;  // 0x8 (0x8)
	char bSpawnTimeOnly : 1;  // 0x8 (0x8)
	char pad_8_1 : 6;  // 0x8 (0x8)
	char pad_9[4];  // 0x9 (0x9)
	enum class EEmitterDynamicParameterValue ValueMethod;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)
	char bScaleVelocityByParamValue : 1;  // 0x10 (0x10)
	char pad_16_1 : 7;  // 0x10 (0x10)
	char pad_17[8];  // 0x11 (0x11)
	struct FRawDistributionFloat ParamValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.AnimInstance.Montage_GetBlendTime
struct FMontage_GetBlendTime
{
	struct UAnimMontage* Montage;  // 0x0 (0x0)
	float ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.Canvas.K2_DrawPolygon
struct FK2_DrawPolygon
{
	struct UTexture* RenderTexture;  // 0x0 (0x0)
	struct FVector2D ScreenPosition;  // 0x8 (0x8)
	struct FVector2D Radius;  // 0x18 (0x18)
	int32_t NumberOfSides;  // 0x28 (0x28)
	struct FLinearColor RenderColor;  // 0x2C (0x2C)
	char pad_60[4];  // 0x3C (0x3C)


}; 
 
 // ScriptStruct Engine.BeamTargetData
struct FBeamTargetData
{
	struct FName TargetName;  // 0x0 (0x0)
	float TargetPercentage;  // 0x8 (0x8)


}; 
 
 // Function Engine.AnimInstance.GetInstanceTransitionTimeElapsedFraction
struct FGetInstanceTransitionTimeElapsedFraction
{
	int32_t MachineIndex;  // 0x0 (0x0)
	int32_t TransitionIndex;  // 0x4 (0x4)
	float ReturnValue;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.GPUSpriteLocalVectorFieldInfo
struct FGPUSpriteLocalVectorFieldInfo
{
	struct UVectorField* Field;  // 0x0 (0x0)
	char pad_8[8];  // 0x8 (0x8)
	struct FTransform Transform;  // 0x10 (0x10)
	struct FRotator MinInitialRotation;  // 0x70 (0x70)
	struct FRotator MaxInitialRotation;  // 0x88 (0x88)
	struct FRotator RotationRate;  // 0xA0 (0xA0)
	float Intensity;  // 0xB8 (0xB8)
	float Tightness;  // 0xBC (0xBC)
	char bIgnoreComponentTransform : 1;  // 0xC0 (0xC0)
	char bTileX : 1;  // 0xC0 (0xC0)
	char bTileY : 1;  // 0xC0 (0xC0)
	char bTileZ : 1;  // 0xC0 (0xC0)
	char bUseFixDT : 1;  // 0xC0 (0xC0)
	char pad_192_1 : 3;  // 0xC0 (0xC0)
	char pad_193[16];  // 0xC1 (0xC1)


}; 
 
 // Function Engine.AnimInstance.Montage_GetPosition
struct FMontage_GetPosition
{
	struct UAnimMontage* Montage;  // 0x0 (0x0)
	float ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.KismetMathLibrary.LinePlaneIntersection
struct FLinePlaneIntersection
{
	struct FVector LineStart;  // 0x0 (0x0)
	struct FVector LineEnd;  // 0x18 (0x18)
	struct FPlane APlane;  // 0x30 (0x30)
	float T;  // 0x50 (0x50)
	char pad_84[4];  // 0x54 (0x54)
	struct FVector Intersection;  // 0x58 (0x58)
	char pad_112_1 : 7;  // 0x70 (0x70)
	bool ReturnValue : 1;  // 0x70 (0x70)
	char pad_113[15];  // 0x71 (0x71)


}; 
 
 // ScriptStruct Engine.GPUSpriteEmitterInfo
struct FGPUSpriteEmitterInfo
{
	struct UParticleModuleRequired* RequiredModule;  // 0x0 (0x0)
	struct UParticleModuleSpawn* SpawnModule;  // 0x8 (0x8)
	struct UParticleModuleSpawnPerUnit* SpawnPerUnitModule;  // 0x10 (0x10)
	struct TArray<struct UParticleModule*> SpawnModules;  // 0x18 (0x18)
	char pad_40[8];  // 0x28 (0x28)
	struct FGPUSpriteLocalVectorFieldInfo LocalVectorField;  // 0x30 (0x30)
	struct FFloatDistribution VectorFieldScale;  // 0x100 (0x100)
	struct FFloatDistribution DragCoefficient;  // 0x120 (0x120)
	struct FFloatDistribution PointAttractorStrength;  // 0x140 (0x140)
	struct FFloatDistribution Resilience;  // 0x160 (0x160)
	struct FVector ConstantAcceleration;  // 0x180 (0x180)
	struct FVector PointAttractorPosition;  // 0x198 (0x198)
	float PointAttractorRadiusSq;  // 0x1B0 (0x1B0)
	char pad_436[4];  // 0x1B4 (0x1B4)
	struct FVector OrbitOffsetBase;  // 0x1B8 (0x1B8)
	struct FVector OrbitOffsetRange;  // 0x1D0 (0x1D0)
	struct FVector2D InvMaxSize;  // 0x1E8 (0x1E8)
	float InvRotationRateScale;  // 0x1F8 (0x1F8)
	float MaxLifetime;  // 0x1FC (0x1FC)
	int32_t MaxParticleCount;  // 0x200 (0x200)
	enum class EParticleScreenAlignment ScreenAlignment;  // 0x204 (0x204)
	enum class EParticleAxisLock LockAxisFlag;  // 0x205 (0x205)
	char pad_518[2];  // 0x206 (0x206)
	char bEnableCollision : 1;  // 0x208 (0x208)
	char pad_520_1 : 7;  // 0x208 (0x208)
	char pad_521[4];  // 0x209 (0x209)
	enum class EParticleCollisionMode CollisionMode;  // 0x20C (0x20C)
	char pad_525[3];  // 0x20D (0x20D)
	char bRemoveHMDRoll : 1;  // 0x210 (0x210)
	char pad_528_1 : 7;  // 0x210 (0x210)
	char pad_529[4];  // 0x211 (0x211)
	float MinFacingCameraBlendDistance;  // 0x214 (0x214)
	float MaxFacingCameraBlendDistance;  // 0x218 (0x218)
	char pad_540[4];  // 0x21C (0x21C)
	struct FRawDistributionVector DynamicColor;  // 0x220 (0x220)
	struct FRawDistributionFloat DynamicAlpha;  // 0x280 (0x280)
	struct FRawDistributionVector DynamicColorScale;  // 0x2B0 (0x2B0)
	struct FRawDistributionFloat DynamicAlphaScale;  // 0x310 (0x310)
	char pad_832[16];  // 0x340 (0x340)


}; 
 
 // ScriptStruct Engine.GPUSpriteResourceData
struct FGPUSpriteResourceData
{
	struct TArray<struct FColor> QuantizedColorSamples;  // 0x0 (0x0)
	struct TArray<struct FColor> QuantizedMiscSamples;  // 0x10 (0x10)
	struct TArray<struct FColor> QuantizedSimulationAttrSamples;  // 0x20 (0x20)
	struct FVector4 ColorScale;  // 0x30 (0x30)
	struct FVector4 ColorBias;  // 0x50 (0x50)
	struct FVector4 MiscScale;  // 0x70 (0x70)
	struct FVector4 MiscBias;  // 0x90 (0x90)
	struct FVector4 SimulationAttrCurveScale;  // 0xB0 (0xB0)
	struct FVector4 SimulationAttrCurveBias;  // 0xD0 (0xD0)
	struct FVector4 SubImageSize;  // 0xF0 (0xF0)
	struct FVector4 SizeBySpeed;  // 0x110 (0x110)
	struct FVector ConstantAcceleration;  // 0x130 (0x130)
	struct FVector OrbitOffsetBase;  // 0x148 (0x148)
	struct FVector OrbitOffsetRange;  // 0x160 (0x160)
	struct FVector OrbitFrequencyBase;  // 0x178 (0x178)
	struct FVector OrbitFrequencyRange;  // 0x190 (0x190)
	struct FVector OrbitPhaseBase;  // 0x1A8 (0x1A8)
	struct FVector OrbitPhaseRange;  // 0x1C0 (0x1C0)
	float GlobalVectorFieldScale;  // 0x1D8 (0x1D8)
	float GlobalVectorFieldTightness;  // 0x1DC (0x1DC)
	float PerParticleVectorFieldScale;  // 0x1E0 (0x1E0)
	float PerParticleVectorFieldBias;  // 0x1E4 (0x1E4)
	float DragCoefficientScale;  // 0x1E8 (0x1E8)
	float DragCoefficientBias;  // 0x1EC (0x1EC)
	float ResilienceScale;  // 0x1F0 (0x1F0)
	float ResilienceBias;  // 0x1F4 (0x1F4)
	float CollisionRadiusScale;  // 0x1F8 (0x1F8)
	float CollisionRadiusBias;  // 0x1FC (0x1FC)
	float CollisionTimeBias;  // 0x200 (0x200)
	float CollisionRandomSpread;  // 0x204 (0x204)
	float CollisionRandomDistribution;  // 0x208 (0x208)
	float OneMinusFriction;  // 0x20C (0x20C)
	float RotationRateScale;  // 0x210 (0x210)
	float CameraMotionBlurAmount;  // 0x214 (0x214)
	enum class EParticleScreenAlignment ScreenAlignment;  // 0x218 (0x218)
	enum class EParticleAxisLock LockAxisFlag;  // 0x219 (0x219)
	char pad_538[6];  // 0x21A (0x21A)
	struct FVector2D PivotOffset;  // 0x220 (0x220)
	char bRemoveHMDRoll : 1;  // 0x230 (0x230)
	char pad_560_1 : 7;  // 0x230 (0x230)
	char pad_561[4];  // 0x231 (0x231)
	float MinFacingCameraBlendDistance;  // 0x234 (0x234)
	float MaxFacingCameraBlendDistance;  // 0x238 (0x238)
	char pad_572[4];  // 0x23C (0x23C)


}; 
 
 // Function Engine.LevelStreaming.IsLevelLoaded
struct FIsLevelLoaded
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.ParticleSystemLOD
struct FParticleSystemLOD
{
	char pad_0[1];  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.NamedEmitterMaterial
struct FNamedEmitterMaterial
{
	struct FName Name;  // 0x0 (0x0)
	struct UMaterialInterface* Material;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.ParticleSysParam
struct FParticleSysParam
{
	struct FName Name;  // 0x0 (0x0)
	enum class EParticleSysParamType ParamType;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)
	float Scalar;  // 0xC (0xC)
	float Scalar_Low;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)
	struct FVector Vector;  // 0x18 (0x18)
	struct FVector Vector_Low;  // 0x30 (0x30)
	struct FColor Color;  // 0x48 (0x48)
	char pad_76[4];  // 0x4C (0x4C)
	struct AActor* Actor;  // 0x50 (0x50)
	struct UMaterialInterface* Material;  // 0x58 (0x58)
	char pad_96[128];  // 0x60 (0x60)


}; 
 
 // ScriptStruct Engine.TViewTarget
struct FTViewTarget
{
	struct AActor* Target;  // 0x0 (0x0)
	char pad_8[8];  // 0x8 (0x8)
	struct FMinimalViewInfo POV;  // 0x10 (0x10)
	struct APlayerState* PlayerState;  // 0x7D0 (0x7D0)
	char pad_2008[8];  // 0x7D8 (0x7D8)


}; 
 
 // Function Engine.GameUserSettings.GetGameUserSettings
struct FGetGameUserSettings
{
	struct UGameUserSettings* ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.AnimNode_SequencePlayer_Standalone
// Size: 0x98(Inherited: 0x40)
struct FAnimNode_SequencePlayer_Standalone : FAnimNode_SequencePlayerBase
{
	struct FName GroupName;  // 0x40 (0x40)
	enum class EAnimGroupRole GroupRole;  // 0x48 (0x48)
	uint8_t Method;  // 0x49 (0x49)
	char pad_74_1 : 7;  // 0x4A (0x4A)
	bool bIgnoreForRelevancyTest : 1;  // 0x4A (0x4A)
	char pad_75[5];  // 0x4B (0x4B)
	struct UAnimSequenceBase* Sequence;  // 0x50 (0x50)
	float PlayRateBasis;  // 0x58 (0x58)
	float PlayRate;  // 0x5C (0x5C)
	struct FInputScaleBiasClampConstants PlayRateScaleBiasClampConstants;  // 0x60 (0x60)
	float StartPosition;  // 0x8C (0x8C)
	char pad_144_1 : 7;  // 0x90 (0x90)
	bool bLoopAnimation : 1;  // 0x90 (0x90)
	char pad_145_1 : 7;  // 0x91 (0x91)
	bool bStartFromMatchingPose : 1;  // 0x91 (0x91)
	char pad_146[6];  // 0x92 (0x92)


}; 
 
 // ScriptStruct Engine.ViewTargetTransitionParams
struct FViewTargetTransitionParams
{
	float BlendTime;  // 0x0 (0x0)
	enum class EViewTargetBlendFunction BlendFunction;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)
	float BlendExp;  // 0x8 (0x8)
	char bLockOutgoing : 1;  // 0xC (0xC)
	char pad_12_1 : 7;  // 0xC (0xC)
	char pad_13[4];  // 0xD (0xD)


}; 
 
 // Function Engine.SplineComponent.GetRightVectorAtSplineInputKey
struct FGetRightVectorAtSplineInputKey
{
	float InKey;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.RepMovementNetSerializerConfig
// Size: 0x1(Inherited: 0x1)
struct FRepMovementNetSerializerConfig : FNetSerializerConfig
{


}; 
 
 // Function Engine.KismetMathLibrary.DateTimeMaxValue
struct FDateTimeMaxValue
{
	struct FDateTime ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.ClientReceiveLocalizedMessage
struct FClientReceiveLocalizedMessage
{
	ULocalMessage* Message;  // 0x0 (0x0)
	int32_t SWITCH;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)
	struct APlayerState* RelatedPlayerState_2;  // 0x10 (0x10)
	struct APlayerState* RelatedPlayerState_3;  // 0x18 (0x18)
	struct UObject* OptionalObject;  // 0x20 (0x20)


}; 
 
 // Function Engine.StaticMeshComponent.SetStaticMesh
struct FSetStaticMesh
{
	struct UStaticMesh* NewMesh;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // ScriptStruct Engine.ReverbSettings
struct FReverbSettings
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bApplyReverb : 1;  // 0x0 (0x0)
	char pad_1[7];  // 0x1 (0x1)
	struct UReverbEffect* ReverbEffect;  // 0x8 (0x8)
	struct USoundEffectSubmixPreset* ReverbPluginEffect;  // 0x10 (0x10)
	float Volume;  // 0x18 (0x18)
	float FadeTime;  // 0x1C (0x1C)


}; 
 
 // Function Engine.SkinnedMeshComponent.SetRenderStatic
struct FSetRenderStatic
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.BreakBoxSphereBounds
struct FBreakBoxSphereBounds
{
	struct FBoxSphereBounds InBoxSphereBounds;  // 0x0 (0x0)
	struct FVector Origin;  // 0x38 (0x38)
	struct FVector BoxExtent;  // 0x50 (0x50)
	float SphereRadius;  // 0x68 (0x68)
	char pad_108[4];  // 0x6C (0x6C)


}; 
 
 // ScriptStruct Engine.ColorGradingSettings
struct FColorGradingSettings
{
	struct FColorGradePerRangeSettings Global;  // 0x0 (0x0)
	struct FColorGradePerRangeSettings Shadows;  // 0xA0 (0xA0)
	struct FColorGradePerRangeSettings Midtones;  // 0x140 (0x140)
	struct FColorGradePerRangeSettings Highlights;  // 0x1E0 (0x1E0)
	float ShadowsMax;  // 0x280 (0x280)
	float HighlightsMin;  // 0x284 (0x284)
	float HighlightsMax;  // 0x288 (0x288)
	char pad_652[4];  // 0x28C (0x28C)


}; 
 
 // ScriptStruct Engine.ConvolutionBloomSettings
struct FConvolutionBloomSettings
{
	struct UTexture2D* Texture;  // 0x0 (0x0)
	float ScatterDispersion;  // 0x8 (0x8)
	float Size;  // 0xC (0xC)
	struct FVector2D CenterUV;  // 0x10 (0x10)
	float PreFilterMin;  // 0x20 (0x20)
	float PreFilterMax;  // 0x24 (0x24)
	float PreFilterMult;  // 0x28 (0x28)
	float BufferScale;  // 0x2C (0x2C)


}; 
 
 // Function Engine.KismetMathLibrary.MakePulsatingValue
struct FMakePulsatingValue
{
	float InCurrentTime;  // 0x0 (0x0)
	float InPulsesPerSecond;  // 0x4 (0x4)
	float InPhase;  // 0x8 (0x8)
	float ReturnValue;  // 0xC (0xC)


}; 
 
 // Function Engine.GameplayStatics.ApplyRadialDamage
struct FApplyRadialDamage
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	float BaseDamage;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)
	struct FVector Origin;  // 0x10 (0x10)
	float DamageRadius;  // 0x28 (0x28)
	char pad_44[4];  // 0x2C (0x2C)
	UDamageType* DamageTypeClass;  // 0x30 (0x30)
	struct TArray<struct AActor*> IgnoreActors;  // 0x38 (0x38)
	struct AActor* DamageCauser;  // 0x48 (0x48)
	struct AController* InstigatedByController;  // 0x50 (0x50)
	char pad_88_1 : 7;  // 0x58 (0x58)
	bool bDoFullDamage : 1;  // 0x58 (0x58)
	enum class ECollisionChannel DamagePreventionChannel;  // 0x59 (0x59)
	char pad_90_1 : 7;  // 0x5A (0x5A)
	bool ReturnValue : 1;  // 0x5A (0x5A)
	char pad_91[5];  // 0x5B (0x5B)


}; 
 
 // ScriptStruct Engine.LensImperfectionSettings
struct FLensImperfectionSettings
{
	struct UTexture* DirtMask;  // 0x0 (0x0)
	float DirtMaskIntensity;  // 0x8 (0x8)
	struct FLinearColor DirtMaskTint;  // 0xC (0xC)
	char pad_28[4];  // 0x1C (0x1C)


}; 
 
 // ScriptStruct Engine.BuildPromotionNewProjectSettings
struct FBuildPromotionNewProjectSettings
{
	struct FDirectoryPath NewProjectFolderOverride;  // 0x0 (0x0)
	struct FString NewProjectNameOverride;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.SkeletalMeshLODInfo
struct FSkeletalMeshLODInfo
{
	struct FPerPlatformFloat ScreenSize;  // 0x0 (0x0)
	float LODHysteresis;  // 0x4 (0x4)
	struct TArray<int32_t> LODMaterialMap;  // 0x8 (0x8)
	struct FSkeletalMeshBuildSettings BuildSettings;  // 0x18 (0x18)
	struct FSkeletalMeshOptimizationSettings ReductionSettings;  // 0x2C (0x2C)
	struct TArray<struct FBoneReference> BonesToRemove;  // 0x68 (0x68)
	struct TArray<struct FBoneReference> BonesToPrioritize;  // 0x78 (0x78)
	struct TArray<struct FSectionReference> SectionsToPrioritize;  // 0x88 (0x88)
	float WeightOfPrioritization;  // 0x98 (0x98)
	char pad_156[4];  // 0x9C (0x9C)
	struct UAnimSequence* BakePose;  // 0xA0 (0xA0)
	struct UAnimSequence* BakePoseOverride;  // 0xA8 (0xA8)
	struct FString SourceImportFilename;  // 0xB0 (0xB0)
	uint8_t SkinCacheUsage;  // 0xC0 (0xC0)
	char pad_193[3];  // 0xC1 (0xC1)
	float MorphTargetPositionErrorTolerance;  // 0xC4 (0xC4)
	char bHasBeenSimplified : 1;  // 0xC8 (0xC8)
	char bHasPerLODVertexColors : 1;  // 0xC8 (0xC8)
	char bAllowCPUAccess : 1;  // 0xC8 (0xC8)
	char bSupportUniformlyDistributedSampling : 1;  // 0xC8 (0xC8)
	char pad_200_1 : 4;  // 0xC8 (0xC8)
	char pad_201[8];  // 0xC9 (0xC9)


}; 
 
 // ScriptStruct Engine.SkeletalMaterial
struct FSkeletalMaterial
{
	struct UMaterialInterface* MaterialInterface;  // 0x0 (0x0)
	struct FName MaterialSlotName;  // 0x8 (0x8)
	struct FMeshUVChannelInfo UVChannelData;  // 0x10 (0x10)
	char pad_36[4];  // 0x24 (0x24)


}; 
 
 // ScriptStruct Engine.SkelMeshComponentLODInfo
struct FSkelMeshComponentLODInfo
{
	struct TArray<bool> HiddenMaterials;  // 0x0 (0x0)
	char pad_16[24];  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.PrecomputedSkyLightInstanceData
// Size: 0x170(Inherited: 0xB8)
struct FPrecomputedSkyLightInstanceData : FSceneComponentInstanceData
{
	struct FGuid LightGuid;  // 0xB8 (0xB8)
	float AverageBrightness;  // 0xC8 (0xC8)
	char pad_204[164];  // 0xCC (0xCC)


}; 
 
 // ScriptStruct Engine.TextureFormatSettings
struct FTextureFormatSettings
{
	enum class TextureCompressionSettings CompressionSettings;  // 0x0 (0x0)
	char CompressionNoAlpha : 1;  // 0x1 (0x1)
	char CompressionForceAlpha : 1;  // 0x1 (0x1)
	char CompressionNone : 1;  // 0x1 (0x1)
	char CompressionYCoCg : 1;  // 0x1 (0x1)
	char SRGB : 1;  // 0x1 (0x1)
	char pad_1_1 : 3;  // 0x1 (0x1)


}; 
 
 // Function Engine.KismetMathLibrary.MakeDateTime
struct FMakeDateTime
{
	int32_t Year;  // 0x0 (0x0)
	int32_t Month;  // 0x4 (0x4)
	int32_t Day;  // 0x8 (0x8)
	int32_t Hour;  // 0xC (0xC)
	int32_t Minute;  // 0x10 (0x10)
	int32_t Second;  // 0x14 (0x14)
	int32_t Millisecond;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)
	struct FDateTime ReturnValue;  // 0x20 (0x20)


}; 
 
 // ScriptStruct Engine.SoundAttenuationPluginSettings
struct FSoundAttenuationPluginSettings
{
	struct TArray<struct USpatializationPluginSourceSettingsBase*> SpatializationPluginSettingsArray;  // 0x0 (0x0)
	struct TArray<struct UOcclusionPluginSourceSettingsBase*> OcclusionPluginSettingsArray;  // 0x10 (0x10)
	struct TArray<struct UReverbPluginSourceSettingsBase*> ReverbPluginSettingsArray;  // 0x20 (0x20)
	struct TArray<struct USourceDataOverridePluginSourceSettingsBase*> SourceDataOverridePluginSettingsArray;  // 0x30 (0x30)


}; 
 
 // ScriptStruct Engine.SourceEffectChainEntry
struct FSourceEffectChainEntry
{
	struct USoundEffectSourcePreset* Preset;  // 0x0 (0x0)
	char bBypass : 1;  // 0x8 (0x8)
	char pad_8_1 : 7;  // 0x8 (0x8)
	char pad_9[8];  // 0x9 (0x9)


}; 
 
 // Function Engine.GameplayStatics.GetPlayerControllerFromID
struct FGetPlayerControllerFromID
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	int32_t ControllerId;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)
	struct APlayerController* ReturnValue;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.CharacterMovementComponentPostPhysicsTickFunction
// Size: 0x30(Inherited: 0x28)
struct FCharacterMovementComponentPostPhysicsTickFunction : FTickFunction
{
	char pad_40[8];  // 0x28 (0x28)


}; 
 
 // ScriptStruct Engine.ModulatorContinuousParams
struct FModulatorContinuousParams
{
	struct FName ParameterName;  // 0x0 (0x0)
	float Default;  // 0x8 (0x8)
	float MinInput;  // 0xC (0xC)
	float MaxInput;  // 0x10 (0x10)
	float MinOutput;  // 0x14 (0x14)
	float MaxOutput;  // 0x18 (0x18)
	enum class ModulationParamMode ParamMode;  // 0x1C (0x1C)
	char pad_29[3];  // 0x1D (0x1D)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_ByteToFloat
struct FConv_ByteToFloat
{
	char InByte;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	float ReturnValue;  // 0x4 (0x4)


}; 
 
 // ScriptStruct Engine.PoseDataContainer
struct FPoseDataContainer
{
	struct TArray<struct FSmartName> PoseNames;  // 0x0 (0x0)
	struct TArray<struct FName> Tracks;  // 0x10 (0x10)
	struct TArray<int32_t> TrackBoneIndices;  // 0x20 (0x20)
	struct TArray<struct FPoseAssetInfluences> TrackPoseInfluenceIndices;  // 0x30 (0x30)
	struct TArray<struct FPoseData> Poses;  // 0x40 (0x40)
	struct TArray<struct FAnimCurveBase> Curves;  // 0x50 (0x50)


}; 
 
 // Function Engine.SceneCaptureComponent.RemoveShowOnlyActorComponents
struct FRemoveShowOnlyActorComponents
{
	struct AActor* InActor;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bIncludeFromChildActors : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // ScriptStruct Engine.CompressedTrack
struct FCompressedTrack
{
	struct TArray<char> ByteStream;  // 0x0 (0x0)
	struct TArray<float> Times;  // 0x10 (0x10)
	float Mins[3];  // 0x20 (0x20)
	float Ranges[3];  // 0x2C (0x2C)


}; 
 
 // ScriptStruct Engine.SoundWaveEnvelopeDataPerSound
struct FSoundWaveEnvelopeDataPerSound
{
	float Envelope;  // 0x0 (0x0)
	float PlaybackTime;  // 0x4 (0x4)
	struct USoundWave* SoundWave;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.SoundWaveSpectralTimeData
struct FSoundWaveSpectralTimeData
{
	struct TArray<struct FSoundWaveSpectralDataEntry> Data;  // 0x0 (0x0)
	float TimeSec;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)


}; 
 
 // ScriptStruct Engine.SoundWaveCuePoint
struct FSoundWaveCuePoint
{
	int32_t CuePointID;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FString Label;  // 0x8 (0x8)
	int32_t FramePosition;  // 0x18 (0x18)
	int32_t FrameLength;  // 0x1C (0x1C)


}; 
 
 // ScriptStruct Engine.RadialDamageParams
struct FRadialDamageParams
{
	float BaseDamage;  // 0x0 (0x0)
	float MinimumDamage;  // 0x4 (0x4)
	float InnerRadius;  // 0x8 (0x8)
	float OuterRadius;  // 0xC (0xC)
	float DamageFalloff;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.SoundWaveTimecodeInfo
struct FSoundWaveTimecodeInfo
{
	uint64_t NumSamplesSinceMidnight;  // 0x0 (0x0)
	uint32_t NumSamplesPerSecond;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)
	struct FString Description;  // 0x10 (0x10)
	struct FString OriginatorTime;  // 0x20 (0x20)
	struct FString OriginatorDate;  // 0x30 (0x30)
	struct FString OriginatorDescription;  // 0x40 (0x40)
	struct FString OriginatorReference;  // 0x50 (0x50)
	struct FFrameRate TimecodeRate;  // 0x60 (0x60)
	char pad_104_1 : 7;  // 0x68 (0x68)
	bool bTimecodeIsDropFrame : 1;  // 0x68 (0x68)
	char pad_105[7];  // 0x69 (0x69)


}; 
 
 // Function Engine.LightComponent.SetIESBrightnessScale
struct FSetIESBrightnessScale
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.StaticMeshOptimizationSettings
struct FStaticMeshOptimizationSettings
{
	enum class EOptimizationType ReductionMethod;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	float NumOfTrianglesPercentage;  // 0x4 (0x4)
	float MaxDeviationPercentage;  // 0x8 (0x8)
	float WeldingThreshold;  // 0xC (0xC)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool bRecalcNormals : 1;  // 0x10 (0x10)
	char pad_17[3];  // 0x11 (0x11)
	float NormalsThreshold;  // 0x14 (0x14)
	char SilhouetteImportance;  // 0x18 (0x18)
	char TextureImportance;  // 0x19 (0x19)
	char ShadingImportance;  // 0x1A (0x1A)
	char pad_27[1];  // 0x1B (0x1B)


}; 
 
 // Function Engine.Pawn.AddControllerPitchInput
struct FAddControllerPitchInput
{
	float Val;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.MulticastRecordOptions
struct FMulticastRecordOptions
{
	struct FString FuncPathName;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool bServerSkip : 1;  // 0x10 (0x10)
	char pad_17_1 : 7;  // 0x11 (0x11)
	bool bClientSkip : 1;  // 0x11 (0x11)
	char pad_18[6];  // 0x12 (0x12)


}; 
 
 // ScriptStruct Engine.PropertyAccessIndirectionChain
struct FPropertyAccessIndirectionChain
{
	struct TFieldPath<FNone> Property;  // 0x0 (0x0)
	int32_t IndirectionStartIndex;  // 0x20 (0x20)
	int32_t IndirectionEndIndex;  // 0x24 (0x24)


}; 
 
 // ScriptStruct Engine.MeshSectionInfoMap
struct FMeshSectionInfoMap
{
	struct TMap<uint32_t, struct FMeshSectionInfo> Map;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.MaterialRemapIndex
struct FMaterialRemapIndex
{
	uint32_t ImportVersionKey;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct TArray<int32_t> MaterialRemap;  // 0x8 (0x8)


}; 
 
 // Function Engine.PhysicsConstraintComponent.GetCurrentTwist
struct FGetCurrentTwist
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.StaticParameterBase
struct FStaticParameterBase
{
	struct FMaterialParameterInfo ParameterInfo;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool bOverride : 1;  // 0x10 (0x10)
	char pad_17[3];  // 0x11 (0x11)
	struct FGuid ExpressionGUID;  // 0x14 (0x14)


}; 
 
 // Function Engine.KismetArrayLibrary.Array_Add
struct FArray_Add
{
	struct TArray<int32_t> TargetArray;  // 0x0 (0x0)
	int32_t NewItem;  // 0x10 (0x10)
	int32_t ReturnValue;  // 0x14 (0x14)


}; 
 
 // ScriptStruct Engine.StaticSwitchParameter
// Size: 0x28(Inherited: 0x24)
struct FStaticSwitchParameter : FStaticParameterBase
{
	char pad_36_1 : 7;  // 0x24 (0x24)
	bool Value : 1;  // 0x24 (0x24)
	char pad_37[3];  // 0x25 (0x25)


}; 
 
 // Function Engine.KismetTextLibrary.TextTrimTrailing
struct FTextTrimTrailing
{
	struct FText InText;  // 0x0 (0x0)
	struct FText ReturnValue;  // 0x18 (0x18)


}; 
 
 // ScriptStruct Engine.WorldPartitionRuntimeCellObjectMapping
struct FWorldPartitionRuntimeCellObjectMapping
{
	char pad_0[1];  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.StaticTerrainLayerWeightParameter
struct FStaticTerrainLayerWeightParameter
{
	struct FMaterialParameterInfo ParameterInfo;  // 0x0 (0x0)
	struct FGuid ExpressionGUID;  // 0x10 (0x10)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool bOverride : 1;  // 0x20 (0x20)
	char pad_33[3];  // 0x21 (0x21)
	struct FName LayerName;  // 0x24 (0x24)
	int32_t WeightmapIndex;  // 0x2C (0x2C)
	char pad_48_1 : 7;  // 0x30 (0x30)
	bool bWeightBasedBlend : 1;  // 0x30 (0x30)
	char pad_49[3];  // 0x31 (0x31)


}; 
 
 // ScriptStruct Engine.ComponentOverrideRecord
struct FComponentOverrideRecord
{
	 ComponentClass;  // 0x0 (0x0)
	struct UActorComponent* ComponentTemplate;  // 0x8 (0x8)
	struct FComponentKey ComponentKey;  // 0x10 (0x10)
	struct FBlueprintCookedComponentInstancingData CookedComponentInstancingData;  // 0x30 (0x30)


}; 
 
 // ScriptStruct Engine.StaticMaterialLayersParameter
// Size: 0x128(Inherited: 0x24)
struct FStaticMaterialLayersParameter : FStaticParameterBase
{
	char pad_36[4];  // 0x24 (0x24)
	struct FMaterialLayersFunctions Value;  // 0x28 (0x28)


}; 
 
 // Function Engine.GameplayStatics.ApplyDamage
struct FApplyDamage
{
	struct AActor* DamagedActor;  // 0x0 (0x0)
	float BaseDamage;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)
	struct AController* EventInstigator;  // 0x10 (0x10)
	struct AActor* DamageCauser;  // 0x18 (0x18)
	UDamageType* DamageTypeClass;  // 0x20 (0x20)
	float ReturnValue;  // 0x28 (0x28)
	char pad_44[4];  // 0x2C (0x2C)


}; 
 
 // ScriptStruct Engine.StaticParameterSetRuntimeData
struct FStaticParameterSetRuntimeData
{
	struct FMaterialLayersFunctionsRuntimeData MaterialLayers;  // 0x0 (0x0)
	char bHasMaterialLayers : 1;  // 0x20 (0x20)
	char pad_32_1 : 7;  // 0x20 (0x20)
	char pad_33[8];  // 0x21 (0x21)


}; 
 
 // Function Engine.Controller.SetInitialLocationAndRotation
struct FSetInitialLocationAndRotation
{
	struct FVector NewLocation;  // 0x0 (0x0)
	struct FRotator NewRotation;  // 0x18 (0x18)


}; 
 
 // ScriptStruct Engine.StaticParameterSetEditorOnlyData
struct FStaticParameterSetEditorOnlyData
{
	struct TArray<struct FStaticSwitchParameter> StaticSwitchParameters;  // 0x0 (0x0)
	struct TArray<struct FStaticComponentMaskParameter> StaticComponentMaskParameters;  // 0x10 (0x10)
	struct TArray<struct FStaticTerrainLayerWeightParameter> TerrainLayerWeightParameters;  // 0x20 (0x20)
	struct FMaterialLayersFunctionsEditorOnlyData MaterialLayers;  // 0x30 (0x30)


}; 
 
 // Function Engine.ReplaySubsystem.IsPlaying
struct FIsPlaying
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.StaticParameterSet
// Size: 0x28(Inherited: 0x28)
struct FStaticParameterSet : FStaticParameterSetRuntimeData
{


}; 
 
 // ScriptStruct Engine.TextureSource
struct FTextureSource
{
	char pad_0[104];  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.EditorImportWorkflowDefinition
struct FEditorImportWorkflowDefinition
{
	struct FFilePath ImportFilePath;  // 0x0 (0x0)
	struct TArray<struct FImportFactorySettingValues> FactorySettings;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.TextureSourceColorSettings
struct FTextureSourceColorSettings
{
	uint8_t EncodingOverride;  // 0x0 (0x0)
	uint8_t ColorSpace;  // 0x1 (0x1)
	char pad_2[6];  // 0x2 (0x2)
	struct FVector2D RedChromaticityCoordinate;  // 0x8 (0x8)
	struct FVector2D GreenChromaticityCoordinate;  // 0x18 (0x18)
	struct FVector2D BlueChromaticityCoordinate;  // 0x28 (0x28)
	struct FVector2D WhiteChromaticityCoordinate;  // 0x38 (0x38)
	uint8_t ChromaticAdaptationMethod;  // 0x48 (0x48)
	char pad_73[7];  // 0x49 (0x49)


}; 
 
 // ScriptStruct Engine.StreamingTextureBuildInfo
struct FStreamingTextureBuildInfo
{
	uint32_t PackedRelativeBox;  // 0x0 (0x0)
	int32_t TextureLevelIndex;  // 0x4 (0x4)
	float TexelFactor;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.TimelineEventEntry
struct FTimelineEventEntry
{
	float Time;  // 0x0 (0x0)
	struct FDelegate EventFunc;  // 0x4 (0x4)


}; 
 
 // ScriptStruct Engine.TimelineFloatTrack
struct FTimelineFloatTrack
{
	struct UCurveFloat* FloatCurve;  // 0x0 (0x0)
	struct FDelegate InterpFunc;  // 0x8 (0x8)
	struct FName TrackName;  // 0x18 (0x18)
	struct FName FloatPropertyName;  // 0x20 (0x20)
	char pad_40[24];  // 0x28 (0x28)


}; 
 
 // Function Engine.AnimInstance.WasAnimNotifyStateActiveInAnyState
struct FWasAnimNotifyStateActiveInAnyState
{
	UAnimNotifyState* AnimNotifyStateType;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.PlayerController.AddRollInput
struct FAddRollInput
{
	float Val;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.GetInputKeyTimeDown
struct FGetInputKeyTimeDown
{
	struct FKey Key;  // 0x0 (0x0)
	float ReturnValue;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)


}; 
 
 // Function Engine.KismetMathLibrary.DegAcos
struct FDegAcos
{
	double A;  // 0x0 (0x0)
	double ReturnValue;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.TimelineLinearColorTrack
struct FTimelineLinearColorTrack
{
	struct UCurveLinearColor* LinearColorCurve;  // 0x0 (0x0)
	struct FDelegate InterpFunc;  // 0x8 (0x8)
	struct FName TrackName;  // 0x18 (0x18)
	struct FName LinearColorPropertyName;  // 0x20 (0x20)
	char pad_40[24];  // 0x28 (0x28)


}; 
 
 // Function Engine.GameplayStatics.SetSoundClassDistanceScale
struct FSetSoundClassDistanceScale
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct USoundClass* SoundClass;  // 0x8 (0x8)
	float DistanceAttenuationScale;  // 0x10 (0x10)
	float TimeSec;  // 0x14 (0x14)


}; 
 
 // Function Engine.GameplayStatics.SpawnDialogueAttached
struct FSpawnDialogueAttached
{
	struct UDialogueWave* Dialogue;  // 0x0 (0x0)
	struct FDialogueContext Context;  // 0x8 (0x8)
	struct USceneComponent* AttachToComponent;  // 0x20 (0x20)
	struct FName AttachPointName;  // 0x28 (0x28)
	struct FVector Location;  // 0x30 (0x30)
	struct FRotator Rotation;  // 0x48 (0x48)
	enum class EAttachLocation LocationType;  // 0x60 (0x60)
	char pad_97_1 : 7;  // 0x61 (0x61)
	bool bStopWhenAttachedToDestroyed : 1;  // 0x61 (0x61)
	char pad_98[2];  // 0x62 (0x62)
	float VolumeMultiplier;  // 0x64 (0x64)
	float PitchMultiplier;  // 0x68 (0x68)
	float StartTime;  // 0x6C (0x6C)
	struct USoundAttenuation* AttenuationSettings;  // 0x70 (0x70)
	char pad_120_1 : 7;  // 0x78 (0x78)
	bool bAutoDestroy : 1;  // 0x78 (0x78)
	char pad_121[7];  // 0x79 (0x79)
	struct UAudioComponent* ReturnValue;  // 0x80 (0x80)


}; 
 
 // Function Engine.GameplayStatics.SpawnEmitterAttached
struct FSpawnEmitterAttached
{
	struct UParticleSystem* EmitterTemplate;  // 0x0 (0x0)
	struct USceneComponent* AttachToComponent;  // 0x8 (0x8)
	struct FName AttachPointName;  // 0x10 (0x10)
	struct FVector Location;  // 0x18 (0x18)
	struct FRotator Rotation;  // 0x30 (0x30)
	struct FVector Scale;  // 0x48 (0x48)
	enum class EAttachLocation LocationType;  // 0x60 (0x60)
	char pad_97_1 : 7;  // 0x61 (0x61)
	bool bAutoDestroy : 1;  // 0x61 (0x61)
	uint8_t PoolingMethod;  // 0x62 (0x62)
	char pad_99_1 : 7;  // 0x63 (0x63)
	bool bAutoActivate : 1;  // 0x63 (0x63)
	char pad_100[4];  // 0x64 (0x64)
	struct UParticleSystemComponent* ReturnValue;  // 0x68 (0x68)


}; 
 
 // Function Engine.AnimInstance.GetInstanceTransitionTimeElapsed
struct FGetInstanceTransitionTimeElapsed
{
	int32_t MachineIndex;  // 0x0 (0x0)
	int32_t TransitionIndex;  // 0x4 (0x4)
	float ReturnValue;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.Timeline
struct FTimeline
{
	enum class ETimelineLengthMode LengthMode;  // 0x0 (0x0)
	char bLooping : 1;  // 0x1 (0x1)
	char bReversePlayback : 1;  // 0x1 (0x1)
	char bPlaying : 1;  // 0x1 (0x1)
	char pad_1_1 : 5;  // 0x1 (0x1)
	char pad_2[3];  // 0x2 (0x2)
	float Length;  // 0x4 (0x4)
	float PlayRate;  // 0x8 (0x8)
	float Position;  // 0xC (0xC)
	struct TArray<struct FTimelineEventEntry> Events;  // 0x10 (0x10)
	struct TArray<struct FTimelineVectorTrack> InterpVectors;  // 0x20 (0x20)
	struct TArray<struct FTimelineFloatTrack> InterpFloats;  // 0x30 (0x30)
	struct TArray<struct FTimelineLinearColorTrack> InterpLinearColors;  // 0x40 (0x40)
	struct FDelegate TimelinePostUpdateFunc;  // 0x50 (0x50)
	struct FDelegate TimelineFinishedFunc;  // 0x60 (0x60)
	struct TWeakObjectPtr<UObject> PropertySetObject;  // 0x70 (0x70)
	struct FName DirectionPropertyName;  // 0x78 (0x78)
	char pad_128[24];  // 0x80 (0x80)


}; 
 
 // ScriptStruct Engine.UniqueNetIdReplNetSerializerConfig
// Size: 0x1(Inherited: 0x1)
struct FUniqueNetIdReplNetSerializerConfig : FNetSerializerConfig
{


}; 
 
 // ScriptStruct Engine.ActorContainerID
struct FActorContainerID
{
	uint64_t ID;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.StreamingSourceShape
struct FStreamingSourceShape
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bUseGridLoadingRange : 1;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	float Radius;  // 0x4 (0x4)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bIsSector : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)
	float SectorAngle;  // 0xC (0xC)
	struct FVector Location;  // 0x10 (0x10)
	struct FRotator Rotation;  // 0x28 (0x28)


}; 
 
 // Function Engine.KismetMathLibrary.Subtract_DateTimeDateTime
struct FSubtract_DateTimeDateTime
{
	struct FDateTime A;  // 0x0 (0x0)
	struct FDateTime B;  // 0x8 (0x8)
	struct FTimespan ReturnValue;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.WorldPartitionStreamingQuerySource
struct FWorldPartitionStreamingQuerySource
{
	struct FVector Location;  // 0x0 (0x0)
	float Radius;  // 0x18 (0x18)
	char pad_28_1 : 7;  // 0x1C (0x1C)
	bool bUseGridLoadingRange : 1;  // 0x1C (0x1C)
	char pad_29[3];  // 0x1D (0x1D)
	struct TArray<struct FName> DataLayers;  // 0x20 (0x20)
	char pad_48_1 : 7;  // 0x30 (0x30)
	bool bDataLayersOnly : 1;  // 0x30 (0x30)
	char pad_49_1 : 7;  // 0x31 (0x31)
	bool bSpatialQuery : 1;  // 0x31 (0x31)
	char pad_50[86];  // 0x32 (0x32)


}; 
 
 // Function Engine.KismetTextLibrary.StringTableIdAndKeyFromText
struct FStringTableIdAndKeyFromText
{
	struct FText Text;  // 0x0 (0x0)
	struct FName OutTableId;  // 0x18 (0x18)
	struct FString OutKey;  // 0x20 (0x20)
	char pad_48_1 : 7;  // 0x30 (0x30)
	bool ReturnValue : 1;  // 0x30 (0x30)
	char pad_49[7];  // 0x31 (0x31)


}; 
 
 // ScriptStruct Engine.LightmassWorldInfoSettings
struct FLightmassWorldInfoSettings
{
	float StaticLightingLevelScale;  // 0x0 (0x0)
	int32_t NumIndirectLightingBounces;  // 0x4 (0x4)
	int32_t NumSkyLightingBounces;  // 0x8 (0x8)
	float IndirectLightingQuality;  // 0xC (0xC)
	float IndirectLightingSmoothness;  // 0x10 (0x10)
	struct FColor EnvironmentColor;  // 0x14 (0x14)
	float EnvironmentIntensity;  // 0x18 (0x18)
	float EmissiveBoost;  // 0x1C (0x1C)
	float DiffuseBoost;  // 0x20 (0x20)
	enum class EVolumeLightingMethod VolumeLightingMethod;  // 0x24 (0x24)
	char bUseAmbientOcclusion : 1;  // 0x25 (0x25)
	char bGenerateAmbientOcclusionMaterialMask : 1;  // 0x25 (0x25)
	char bVisualizeMaterialDiffuse : 1;  // 0x25 (0x25)
	char bVisualizeAmbientOcclusion : 1;  // 0x25 (0x25)
	char bCompressLightmaps : 1;  // 0x25 (0x25)
	char pad_37_1 : 3;  // 0x25 (0x25)
	char pad_38[3];  // 0x26 (0x26)
	float VolumetricLightmapDetailCellSize;  // 0x28 (0x28)
	float VolumetricLightmapMaximumBrickMemoryMb;  // 0x2C (0x2C)
	float VolumetricLightmapSphericalHarmonicSmoothing;  // 0x30 (0x30)
	float VolumeLightSamplePlacementScale;  // 0x34 (0x34)
	float DirectIlluminationOcclusionFraction;  // 0x38 (0x38)
	float IndirectIlluminationOcclusionFraction;  // 0x3C (0x3C)
	float OcclusionExponent;  // 0x40 (0x40)
	float FullyOccludedSamplesFraction;  // 0x44 (0x44)
	float MaxOcclusionDistance;  // 0x48 (0x48)


}; 
 
 // Function Engine.KismetMathLibrary.GreaterEqual_ByteByte
struct FGreaterEqual_ByteByte
{
	char A;  // 0x0 (0x0)
	char B;  // 0x1 (0x1)
	char pad_2_1 : 7;  // 0x2 (0x2)
	bool ReturnValue : 1;  // 0x2 (0x2)


}; 
 
 // Function Engine.GameplayStatics.ApplyPointDamage
struct FApplyPointDamage
{
	struct AActor* DamagedActor;  // 0x0 (0x0)
	float BaseDamage;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)
	struct FVector HitFromDirection;  // 0x10 (0x10)
	struct FHitResult HitInfo;  // 0x28 (0x28)
	struct AController* EventInstigator;  // 0x110 (0x110)
	struct AActor* DamageCauser;  // 0x118 (0x118)
	UDamageType* DamageTypeClass;  // 0x120 (0x120)
	float ReturnValue;  // 0x128 (0x128)
	char pad_300[4];  // 0x12C (0x12C)


}; 
 
 // Function Engine.PhysicsConstraintComponent.SetAngularDriveMode
struct FSetAngularDriveMode
{
	enum class EAngularDriveMode DriveMode;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.NetViewer
struct FNetViewer
{
	struct UNetConnection* Connection;  // 0x0 (0x0)
	struct AActor* InViewer;  // 0x8 (0x8)
	struct AActor* ViewTarget;  // 0x10 (0x10)
	struct FVector ViewLocation;  // 0x18 (0x18)
	struct FVector ViewDir;  // 0x30 (0x30)


}; 
 
 // ScriptStruct Engine.HierarchicalSimplification
struct FHierarchicalSimplification
{
	float TransitionScreenSize;  // 0x0 (0x0)
	float OverrideDrawDistance;  // 0x4 (0x4)
	char bUseOverrideDrawDistance : 1;  // 0x8 (0x8)
	char bAllowSpecificExclusion : 1;  // 0x8 (0x8)
	char bOnlyGenerateClustersForVolumes : 1;  // 0x8 (0x8)
	char bReusePreviousLevelClusters : 1;  // 0x8 (0x8)
	char pad_8_1 : 4;  // 0x8 (0x8)
	uint8_t SimplificationMethod;  // 0x9 (0x9)
	char pad_10[2];  // 0xA (0xA)
	struct FMeshProxySettings ProxySetting;  // 0xC (0xC)
	struct FMeshMergingSettings MergeSetting;  // 0xDC (0xDC)
	struct FMeshApproximationSettings ApproximateSettings;  // 0x1AC (0x1AC)
	float DesiredBoundRadius;  // 0x2C4 (0x2C4)
	float DesiredFillingPercentage;  // 0x2C8 (0x2C8)
	int32_t MinNumberOfActorsToBuild;  // 0x2CC (0x2CC)


}; 
 
 // Function Engine.AnimInstance.QueryAndMarkTransitionEvent
struct FQueryAndMarkTransitionEvent
{
	int32_t MachineIndex;  // 0x0 (0x0)
	int32_t TransitionIndex;  // 0x4 (0x4)
	struct FName EventName;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[3];  // 0x11 (0x11)


}; 
 
 // ScriptStruct Engine.MeshApproximationSettings
struct FMeshApproximationSettings
{
	uint8_t OutputType;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	float ApproximationAccuracy;  // 0x4 (0x4)
	int32_t ClampVoxelDimension;  // 0x8 (0x8)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bAttemptAutoThickening : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)
	float TargetMinThicknessMultiplier;  // 0x10 (0x10)
	char pad_20_1 : 7;  // 0x14 (0x14)
	bool bIgnoreTinyParts : 1;  // 0x14 (0x14)
	char pad_21[3];  // 0x15 (0x15)
	float TinyPartSizeMultiplier;  // 0x18 (0x18)
	uint8_t BaseCapping;  // 0x1C (0x1C)
	char pad_29[3];  // 0x1D (0x1D)
	float WindingThreshold;  // 0x20 (0x20)
	char pad_36_1 : 7;  // 0x24 (0x24)
	bool bFillGaps : 1;  // 0x24 (0x24)
	char pad_37[3];  // 0x25 (0x25)
	float GapDistance;  // 0x28 (0x28)
	uint8_t OcclusionMethod;  // 0x2C (0x2C)
	char pad_45_1 : 7;  // 0x2D (0x2D)
	bool bOccludeFromBottom : 1;  // 0x2D (0x2D)
	uint8_t SimplifyMethod;  // 0x2E (0x2E)
	char pad_47[1];  // 0x2F (0x2F)
	int32_t TargetTriCount;  // 0x30 (0x30)
	float TrianglesPerM;  // 0x34 (0x34)
	float GeometricDeviation;  // 0x38 (0x38)
	uint8_t GroundClipping;  // 0x3C (0x3C)
	char pad_61[3];  // 0x3D (0x3D)
	float GroundClippingZHeight;  // 0x40 (0x40)
	char pad_68_1 : 7;  // 0x44 (0x44)
	bool bEstimateHardNormals : 1;  // 0x44 (0x44)
	char pad_69[3];  // 0x45 (0x45)
	float HardNormalAngle;  // 0x48 (0x48)
	uint8_t UVGenerationMethod;  // 0x4C (0x4C)
	char pad_77[3];  // 0x4D (0x4D)
	int32_t InitialPatchCount;  // 0x50 (0x50)
	float CurvatureAlignment;  // 0x54 (0x54)
	float MergingThreshold;  // 0x58 (0x58)
	float MaxAngleDeviation;  // 0x5C (0x5C)
	char pad_96_1 : 7;  // 0x60 (0x60)
	bool bGenerateNaniteEnabledMesh : 1;  // 0x60 (0x60)
	char pad_97[3];  // 0x61 (0x61)
	float NaniteProxyTrianglePercent;  // 0x64 (0x64)
	char pad_104_1 : 7;  // 0x68 (0x68)
	bool bSupportRayTracing : 1;  // 0x68 (0x68)
	char pad_105_1 : 7;  // 0x69 (0x69)
	bool bAllowDistanceField : 1;  // 0x69 (0x69)
	char pad_106[2];  // 0x6A (0x6A)
	int32_t MultiSamplingAA;  // 0x6C (0x6C)
	int32_t RenderCaptureResolution;  // 0x70 (0x70)
	struct FMaterialProxySettings MaterialSettings;  // 0x74 (0x74)
	float CaptureFieldOfView;  // 0x108 (0x108)
	float NearPlaneDist;  // 0x10C (0x10C)
	char pad_272_1 : 7;  // 0x110 (0x110)
	bool bUseRenderLODMeshes : 1;  // 0x110 (0x110)
	char pad_273_1 : 7;  // 0x111 (0x111)
	bool bEnableSimplifyPrePass : 1;  // 0x111 (0x111)
	char pad_274_1 : 7;  // 0x112 (0x112)
	bool bEnableParallelBaking : 1;  // 0x112 (0x112)
	char pad_275_1 : 7;  // 0x113 (0x113)
	bool bPrintDebugMessages : 1;  // 0x113 (0x113)
	char pad_276_1 : 7;  // 0x114 (0x114)
	bool bEmitFullDebugMesh : 1;  // 0x114 (0x114)
	char pad_277[3];  // 0x115 (0x115)


}; 
 
 // ScriptStruct Engine.MeshProxySettings
struct FMeshProxySettings
{
	int32_t ScreenSize;  // 0x0 (0x0)
	float VoxelSize;  // 0x4 (0x4)
	struct FMaterialProxySettings MaterialSettings;  // 0x8 (0x8)
	float MergeDistance;  // 0x9C (0x9C)
	struct FColor UnresolvedGeometryColor;  // 0xA0 (0xA0)
	float MaxRayCastDist;  // 0xA4 (0xA4)
	float HardAngleThreshold;  // 0xA8 (0xA8)
	int32_t LightMapResolution;  // 0xAC (0xAC)
	enum class EProxyNormalComputationMethod NormalCalculationMethod;  // 0xB0 (0xB0)
	enum class ELandscapeCullingPrecision LandscapeCullingPrecision;  // 0xB1 (0xB1)
	char bCalculateCorrectLODModel : 1;  // 0xB2 (0xB2)
	char bOverrideVoxelSize : 1;  // 0xB2 (0xB2)
	char bOverrideTransferDistance : 1;  // 0xB2 (0xB2)
	char bUseHardAngleThreshold : 1;  // 0xB2 (0xB2)
	char bComputeLightMapResolution : 1;  // 0xB2 (0xB2)
	char bRecalculateNormals : 1;  // 0xB2 (0xB2)
	char bUseLandscapeCulling : 1;  // 0xB2 (0xB2)
	char bSupportRayTracing : 1;  // 0xB2 (0xB2)
	char bAllowDistanceField : 1;  // 0xB3 (0xB3)
	char bReuseMeshLightmapUVs : 1;  // 0xB3 (0xB3)
	char bGroupIdenticalMeshesForBaking : 1;  // 0xB3 (0xB3)
	char bCreateCollision : 1;  // 0xB3 (0xB3)
	char bAllowVertexColors : 1;  // 0xB3 (0xB3)
	char bGenerateLightmapUVs : 1;  // 0xB3 (0xB3)
	char pad_179_1 : 2;  // 0xB3 (0xB3)
	struct FMeshNaniteSettings NaniteSettings;  // 0xB4 (0xB4)


}; 
 
 // ScriptStruct Engine.AttributeKey
struct FAttributeKey
{
	float Time;  // 0x0 (0x0)
	char pad_4[20];  // 0x4 (0x4)


}; 
 
 // Function Engine.KismetInternationalizationLibrary.SetCurrentLanguage
struct FSetCurrentLanguage
{
	struct FString culture;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool SaveToConfig : 1;  // 0x10 (0x10)
	char pad_17_1 : 7;  // 0x11 (0x11)
	bool ReturnValue : 1;  // 0x11 (0x11)
	char pad_18[6];  // 0x12 (0x12)


}; 
 
 // Function Engine.PhysicsConstraintComponent.SetConstraintReferenceFrame
struct FSetConstraintReferenceFrame
{
	enum class EConstraintFrame Frame;  // 0x0 (0x0)
	char pad_1[15];  // 0x1 (0x1)
	struct FTransform RefFrame;  // 0x10 (0x10)


}; 
 
 // Function Engine.StereoLayerComponent.GetTexture
struct FGetTexture
{
	struct UTexture* ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.AttributeCurve
// Size: 0xB0(Inherited: 0x68)
struct FAttributeCurve : FIndexedCurve
{
	struct TArray<struct FAttributeKey> Keys;  // 0x68 (0x68)
	struct FSoftObjectPath ScriptStructPath;  // 0x78 (0x78)
	struct UScriptStruct* ScriptStruct;  // 0x98 (0x98)
	char pad_160_1 : 7;  // 0xA0 (0xA0)
	bool bShouldInterpolate : 1;  // 0xA0 (0xA0)
	char pad_161[15];  // 0xA1 (0xA1)


}; 
 
 // Function Engine.BlueprintPathsLibrary.AutomationTransientDir
struct FAutomationTransientDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.QuartzTimeSignature
struct FQuartzTimeSignature
{
	int32_t NumBeats;  // 0x0 (0x0)
	uint8_t BeatType;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)
	struct TArray<struct FQuartzPulseOverrideStep> OptionalPulseOverride;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.QuartzTransportTimeStamp
struct FQuartzTransportTimeStamp
{
	int32_t Bars;  // 0x0 (0x0)
	int32_t Beat;  // 0x4 (0x4)
	float BeatFraction;  // 0x8 (0x8)
	float Seconds;  // 0xC (0xC)


}; 
 
 // Function Engine.AnimSingleNodeInstance.GetAnimationAsset
struct FGetAnimationAsset
{
	struct UAnimationAsset* ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.QuartzClockSettings
struct FQuartzClockSettings
{
	struct FQuartzTimeSignature TimeSignature;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bIgnoreLevelChange : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.AnimInstance.MontageSync_StopFollowing
struct FMontageSync_StopFollowing
{
	struct UAnimMontage* MontageFollower;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.ReplicatedStaticActorDestructionInfo
struct FReplicatedStaticActorDestructionInfo
{
	char pad_0[56];  // 0x0 (0x0)
	 ObjClass;  // 0x38 (0x38)


}; 
 
 // Function Engine.KismetMathLibrary.Less_TimespanTimespan
struct FLess_TimespanTimespan
{
	struct FTimespan A;  // 0x0 (0x0)
	struct FTimespan B;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // ScriptStruct Engine.QuartzQuantizationBoundary
struct FQuartzQuantizationBoundary
{
	uint8_t Quantization;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	float Multiplier;  // 0x4 (0x4)
	uint8_t CountingReferencePoint;  // 0x8 (0x8)
	char pad_9_1 : 7;  // 0x9 (0x9)
	bool bFireOnClockStart : 1;  // 0x9 (0x9)
	char pad_10_1 : 7;  // 0xA (0xA)
	bool bCancelCommandIfClockIsNotRunning : 1;  // 0xA (0xA)
	char pad_11_1 : 7;  // 0xB (0xB)
	bool bResetClockOnQueued : 1;  // 0xB (0xB)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bResumeClockOnQueued : 1;  // 0xC (0xC)
	char pad_13[19];  // 0xD (0xD)


}; 
 
 // Function Engine.SkeletalMeshComponent.GetAnimInstance
struct FGetAnimInstance
{
	struct UAnimInstance* ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.NavAvoidanceData
struct FNavAvoidanceData
{
	char pad_0[88];  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.NavAgentProperties
// Size: 0x38(Inherited: 0x1)
struct FNavAgentProperties : FMovementProperties
{
	char pad_1[3];  // 0x1 (0x1)
	float AgentRadius;  // 0x4 (0x4)
	float AgentHeight;  // 0x8 (0x8)
	float AgentStepHeight;  // 0xC (0xC)
	float NavWalkingSearchHeightScale;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)
	struct FSoftClassPath PreferredNavData;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetMathLibrary.InRange_Int64Int64
struct FInRange_Int64Int64
{
	int64_t Value;  // 0x0 (0x0)
	int64_t Min;  // 0x8 (0x8)
	int64_t Max;  // 0x10 (0x10)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool InclusiveMin : 1;  // 0x18 (0x18)
	char pad_25_1 : 7;  // 0x19 (0x19)
	bool InclusiveMax : 1;  // 0x19 (0x19)
	char pad_26_1 : 7;  // 0x1A (0x1A)
	bool ReturnValue : 1;  // 0x1A (0x1A)
	char pad_27[5];  // 0x1B (0x1B)


}; 
 
 // ScriptStruct Engine.NavDataConfig
// Size: 0x98(Inherited: 0x38)
struct FNavDataConfig : FNavAgentProperties
{
	struct FName Name;  // 0x38 (0x38)
	struct FColor Color;  // 0x40 (0x40)
	char pad_68[4];  // 0x44 (0x44)
	struct FVector DefaultQueryExtent;  // 0x48 (0x48)
	AActor* NavigationDataClass;  // 0x60 (0x60)
	struct TSoftClassPtr<UObject> NavDataClass;  // 0x68 (0x68)


}; 
 
 // Function Engine.GameUserSettings.GetVisualEffectQuality
struct FGetVisualEffectQuality
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.AlphaBlendArgs
struct FAlphaBlendArgs
{
	struct UCurveFloat* CustomCurve;  // 0x0 (0x0)
	float BlendTime;  // 0x8 (0x8)
	uint8_t BlendOption;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)


}; 
 
 // ScriptStruct Engine.BlendSampleData
struct FBlendSampleData
{
	int32_t SampleDataIndex;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct UAnimSequence* Animation;  // 0x8 (0x8)
	float TotalWeight;  // 0x10 (0x10)
	float WeightRate;  // 0x14 (0x14)
	float Time;  // 0x18 (0x18)
	float PreviousTime;  // 0x1C (0x1C)
	float SamplePlayRate;  // 0x20 (0x20)
	char pad_36[60];  // 0x24 (0x24)


}; 
 
 // Function Engine.SkeletalMeshComponent.AddImpulseToAllBodiesBelow
struct FAddImpulseToAllBodiesBelow
{
	struct FVector Impulse;  // 0x0 (0x0)
	struct FName BoneName;  // 0x18 (0x18)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool bVelChange : 1;  // 0x20 (0x20)
	char pad_33_1 : 7;  // 0x21 (0x21)
	bool bIncludeSelf : 1;  // 0x21 (0x21)
	char pad_34[6];  // 0x22 (0x22)


}; 
 
 // ScriptStruct Engine.BlendFilter
struct FBlendFilter
{
	char pad_0[16];  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.MarkerSyncAnimPosition
struct FMarkerSyncAnimPosition
{
	struct FName PreviousMarkerName;  // 0x0 (0x0)
	struct FName NextMarkerName;  // 0x8 (0x8)
	float PositionBetweenMarkers;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.AnimGroupInstance
struct FAnimGroupInstance
{
	char pad_0[120];  // 0x0 (0x0)


}; 
 
 // Function Engine.AudioComponent.SetSubmixSend
struct FSetSubmixSend
{
	struct USoundSubmixBase* Submix;  // 0x0 (0x0)
	float SendLevel;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // ScriptStruct Engine.AnimationRecordingSettings
struct FAnimationRecordingSettings
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bRecordInWorldSpace : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool bRemoveRootAnimation : 1;  // 0x1 (0x1)
	char pad_2_1 : 7;  // 0x2 (0x2)
	bool bAutoSaveAsset : 1;  // 0x2 (0x2)
	char pad_3[1];  // 0x3 (0x3)
	struct FFrameRate SampleFrameRate;  // 0x4 (0x4)
	float Length;  // 0xC (0xC)
	uint8_t Interpolation;  // 0x10 (0x10)
	enum class ERichCurveInterpMode InterpMode;  // 0x11 (0x11)
	enum class ERichCurveTangentMode TangentMode;  // 0x12 (0x12)
	char pad_19[1];  // 0x13 (0x13)
	char pad_20_1 : 7;  // 0x14 (0x14)
	bool bRecordTransforms : 1;  // 0x14 (0x14)
	char pad_21_1 : 7;  // 0x15 (0x15)
	bool bRecordMorphTargets : 1;  // 0x15 (0x15)
	char pad_22_1 : 7;  // 0x16 (0x16)
	bool bRecordAttributeCurves : 1;  // 0x16 (0x16)
	char pad_23_1 : 7;  // 0x17 (0x17)
	bool bRecordMaterialCurves : 1;  // 0x17 (0x17)
	struct TArray<struct FString> IncludeAnimationNames;  // 0x18 (0x18)
	struct TArray<struct FString> ExcludeAnimationNames;  // 0x28 (0x28)


}; 
 
 // ScriptStruct Engine.PropertyAccessPath
struct FPropertyAccessPath
{
	int32_t PathSegmentStartIndex;  // 0x0 (0x0)
	int32_t PathSegmentCount;  // 0x4 (0x4)


}; 
 
 // Function Engine.GameUserSettings.SetTextureQuality
struct FSetTextureQuality
{
	int32_t Value;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.StateMachineStateDebugData
struct FStateMachineStateDebugData
{
	char pad_0[16];  // 0x0 (0x0)


}; 
 
 // Function Engine.GameModeBase.CanSpectate
struct FCanSpectate
{
	struct APlayerController* Viewer;  // 0x0 (0x0)
	struct APlayerState* ViewTarget;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // ScriptStruct Engine.AnimBlueprintDebugData
struct FAnimBlueprintDebugData
{
	char pad_0[1];  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.AnimBlueprintConstantData
struct FAnimBlueprintConstantData
{
	char pad_0[1];  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Less_Int64Int64
struct FLess_Int64Int64
{
	int64_t A;  // 0x0 (0x0)
	int64_t B;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // ScriptStruct Engine.AnimBlueprintFunction
struct FAnimBlueprintFunction
{
	struct FName Name;  // 0x0 (0x0)
	struct FName Group;  // 0x8 (0x8)
	int32_t OutputPoseNodeIndex;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)
	struct TArray<struct FName> InputPoseNames;  // 0x18 (0x18)
	struct TArray<int32_t> InputPoseNodeIndices;  // 0x28 (0x28)
	char pad_56[56];  // 0x38 (0x38)
	char pad_112_1 : 7;  // 0x70 (0x70)
	bool bImplemented : 1;  // 0x70 (0x70)
	char pad_113[7];  // 0x71 (0x71)


}; 
 
 // Function Engine.SplineComponent.GetWorldRotationAtTime
struct FGetWorldRotationAtTime
{
	float Time;  // 0x0 (0x0)
	char pad_4_1 : 7;  // 0x4 (0x4)
	bool bUseConstantVelocity : 1;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)
	struct FRotator ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.RuntimeVirtualTexture.GetTileSize
struct FGetTileSize
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.GraphAssetPlayerInformation
struct FGraphAssetPlayerInformation
{
	struct TArray<int32_t> PlayerNodeIndices;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_FloatToDouble
struct FConv_FloatToDouble
{
	float InFloat;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	double ReturnValue;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.AnimGraphBlendOptions
struct FAnimGraphBlendOptions
{
	float BlendInTime;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct UBlendProfile* BlendInProfile;  // 0x8 (0x8)
	float BlendOutTime;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)
	struct UBlendProfile* BlendOutProfile;  // 0x18 (0x18)


}; 
 
 // ScriptStruct Engine.AnimSegment
struct FAnimSegment
{
	struct UAnimSequenceBase* AnimReference;  // 0x0 (0x0)
	float StartPos;  // 0x8 (0x8)
	float AnimStartTime;  // 0xC (0xC)
	float AnimEndTime;  // 0x10 (0x10)
	float AnimPlayRate;  // 0x14 (0x14)
	int32_t LoopingCount;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)


}; 
 
 // ScriptStruct Engine.SmartNameMapping
struct FSmartNameMapping
{
	char pad_0[112];  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.BoneAnimationTrack
struct FBoneAnimationTrack
{
	struct FRawAnimSequenceTrack InternalTrackData;  // 0x0 (0x0)
	int32_t BoneTreeIndex;  // 0x30 (0x30)
	struct FName Name;  // 0x34 (0x34)
	char pad_60[4];  // 0x3C (0x3C)


}; 
 
 // Function Engine.BlueprintPathsLibrary.ShouldSaveToUserDir
struct FShouldSaveToUserDir
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.AnimationCurveData
struct FAnimationCurveData
{
	struct TArray<struct FFloatCurve> FloatCurves;  // 0x0 (0x0)
	struct TArray<struct FTransformCurve> TransformCurves;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.AnimExecutionContext
struct FAnimExecutionContext
{
	char pad_0[16];  // 0x0 (0x0)


}; 
 
 // Function Engine.AsyncActionHandleSaveGame.AsyncLoadGameFromSlot
struct FAsyncLoadGameFromSlot
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FString SlotName;  // 0x8 (0x8)
	int32_t UserIndex;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)
	struct UAsyncActionHandleSaveGame* ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.SplineComponent.IsClosedLoop
struct FIsClosedLoop
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.AnimInitializationContext
// Size: 0x10(Inherited: 0x10)
struct FAnimInitializationContext : FAnimExecutionContext
{


}; 
 
 // ScriptStruct Engine.CameraShakeDuration
struct FCameraShakeDuration
{
	float Duration;  // 0x0 (0x0)
	uint8_t Type;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)


}; 
 
 // ScriptStruct Engine.AnimUpdateContext
// Size: 0x10(Inherited: 0x10)
struct FAnimUpdateContext : FAnimExecutionContext
{


}; 
 
 // Function Engine.CapsuleComponent.SetCapsuleRadius
struct FSetCapsuleRadius
{
	float Radius;  // 0x0 (0x0)
	char pad_4_1 : 7;  // 0x4 (0x4)
	bool bUpdateOverlaps : 1;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)


}; 
 
 // ScriptStruct Engine.AnimPoseContext
// Size: 0x10(Inherited: 0x10)
struct FAnimPoseContext : FAnimExecutionContext
{


}; 
 
 // Function Engine.PlayerController.GetHUD
struct FGetHUD
{
	struct AHUD* ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.AnimComponentSpacePoseContext
// Size: 0x10(Inherited: 0x10)
struct FAnimComponentSpacePoseContext : FAnimExecutionContext
{


}; 
 
 // Function Engine.KismetMathLibrary.DynamicWeightedMovingAverage_FRotator
struct FDynamicWeightedMovingAverage_FRotator
{
	struct FRotator CurrentSample;  // 0x0 (0x0)
	struct FRotator PreviousSample;  // 0x18 (0x18)
	float MaxDistance;  // 0x30 (0x30)
	float MinWeight;  // 0x34 (0x34)
	float MaxWeight;  // 0x38 (0x38)
	char pad_60[4];  // 0x3C (0x3C)
	struct FRotator ReturnValue;  // 0x40 (0x40)


}; 
 
 // ScriptStruct Engine.CompositeSection
// Size: 0x58(Inherited: 0x30)
struct FCompositeSection : FAnimLinkableElement
{
	struct FName SectionName;  // 0x30 (0x30)
	float StartTime;  // 0x38 (0x38)
	struct FName NextSectionName;  // 0x3C (0x3C)
	char pad_68[4];  // 0x44 (0x44)
	struct TArray<struct UAnimMetaData*> MetaData;  // 0x48 (0x48)


}; 
 
 // ScriptStruct Engine.BranchingPoint
// Size: 0x40(Inherited: 0x30)
struct FBranchingPoint : FAnimLinkableElement
{
	struct FName EventName;  // 0x30 (0x30)
	float DisplayTime;  // 0x38 (0x38)
	float TriggerTimeOffset;  // 0x3C (0x3C)


}; 
 
 // Function Engine.GameplayStatics.GetNumPlayerStates
struct FGetNumPlayerStates
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.KismetMathLibrary.FloatSpringInterp
struct FFloatSpringInterp
{
	float Current;  // 0x0 (0x0)
	float Target;  // 0x4 (0x4)
	struct FFloatSpringState SpringState;  // 0x8 (0x8)
	float Stiffness;  // 0x14 (0x14)
	float CriticalDampingFactor;  // 0x18 (0x18)
	float DeltaTime;  // 0x1C (0x1C)
	float Mass;  // 0x20 (0x20)
	float TargetVelocityAmount;  // 0x24 (0x24)
	char pad_40_1 : 7;  // 0x28 (0x28)
	bool bClamp : 1;  // 0x28 (0x28)
	char pad_41[3];  // 0x29 (0x29)
	float MinValue;  // 0x2C (0x2C)
	float MaxValue;  // 0x30 (0x30)
	char pad_52_1 : 7;  // 0x34 (0x34)
	bool bInitializeFromTarget : 1;  // 0x34 (0x34)
	char pad_53[3];  // 0x35 (0x35)
	float ReturnValue;  // 0x38 (0x38)


}; 
 
 // Function Engine.Canvas.K2_DrawTexture
struct FK2_DrawTexture
{
	struct UTexture* RenderTexture;  // 0x0 (0x0)
	struct FVector2D ScreenPosition;  // 0x8 (0x8)
	struct FVector2D ScreenSize;  // 0x18 (0x18)
	struct FVector2D CoordinatePosition;  // 0x28 (0x28)
	struct FVector2D CoordinateSize;  // 0x38 (0x38)
	struct FLinearColor RenderColor;  // 0x48 (0x48)
	enum class EBlendMode BlendMode;  // 0x58 (0x58)
	char pad_89[3];  // 0x59 (0x59)
	float Rotation;  // 0x5C (0x5C)
	struct FVector2D PivotPoint;  // 0x60 (0x60)


}; 
 
 // ScriptStruct Engine.AnimMontageInstance
struct FAnimMontageInstance
{
	struct UAnimMontage* Montage;  // 0x0 (0x0)
	char pad_8[32];  // 0x8 (0x8)
	char pad_40_1 : 7;  // 0x28 (0x28)
	bool bPlaying : 1;  // 0x28 (0x28)
	char pad_41[3];  // 0x29 (0x29)
	float DefaultBlendTimeMultiplier;  // 0x2C (0x2C)
	char pad_48[200];  // 0x30 (0x30)
	struct TArray<int32_t> NextSections;  // 0xF8 (0xF8)
	struct TArray<int32_t> PrevSections;  // 0x108 (0x108)
	char pad_280[16];  // 0x118 (0x118)
	struct TArray<struct FAnimNotifyEvent> ActiveStateBranchingPoints;  // 0x128 (0x128)
	float Position;  // 0x138 (0x138)
	float PlayRate;  // 0x13C (0x13C)
	struct FAlphaBlend Blend;  // 0x140 (0x140)
	char pad_368[52];  // 0x170 (0x170)
	int32_t DisableRootMotionCount;  // 0x1A4 (0x1A4)
	char pad_424[32];  // 0x1A8 (0x1A8)


}; 
 
 // ScriptStruct Engine.AnimNodeStructData
struct FAnimNodeStructData
{
	struct TMap<struct FName, int32_t> NameToIndexMap;  // 0x0 (0x0)
	int32_t NumProperties;  // 0x50 (0x50)
	char pad_84[4];  // 0x54 (0x54)


}; 
 
 // Function Engine.BlueprintSetLibrary.Set_Contains
struct FSet_Contains
{
	struct TSet<int32_t> TargetSet;  // 0x0 (0x0)
	int32_t ItemToFind;  // 0x50 (0x50)
	char pad_84_1 : 7;  // 0x54 (0x54)
	bool ReturnValue : 1;  // 0x54 (0x54)
	char pad_85[3];  // 0x55 (0x55)


}; 
 
 // Function Engine.LevelStreaming.GetIsRequestingUnloadAndRemoval
struct FGetIsRequestingUnloadAndRemoval
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.Controller.IsLookInputIgnored
struct FIsLookInputIgnored
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Subtract_Int64Int64
struct FSubtract_Int64Int64
{
	int64_t A;  // 0x0 (0x0)
	int64_t B;  // 0x8 (0x8)
	int64_t ReturnValue;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.AnimNode_ConvertComponentToLocalSpace
// Size: 0x20(Inherited: 0x10)
struct FAnimNode_ConvertComponentToLocalSpace : FAnimNode_Base
{
	struct FComponentSpacePoseLink ComponentPose;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.AnimNode_ApplyMeshSpaceAdditive
// Size: 0xD0(Inherited: 0x10)
struct FAnimNode_ApplyMeshSpaceAdditive : FAnimNode_Base
{
	struct FPoseLink Base;  // 0x10 (0x10)
	struct FPoseLink Additive;  // 0x20 (0x20)
	uint8_t AlphaInputType;  // 0x30 (0x30)
	char pad_49[3];  // 0x31 (0x31)
	float Alpha;  // 0x34 (0x34)
	char bAlphaBoolEnabled : 1;  // 0x38 (0x38)
	char pad_56_1 : 7;  // 0x38 (0x38)
	char pad_57[8];  // 0x39 (0x39)
	struct FInputAlphaBoolBlend AlphaBoolBlend;  // 0x40 (0x40)
	struct FName AlphaCurveName;  // 0x88 (0x88)
	struct FInputScaleBias AlphaScaleBias;  // 0x90 (0x90)
	struct FInputScaleBiasClamp AlphaScaleBiasClamp;  // 0x98 (0x98)
	int32_t LODThreshold;  // 0xC8 (0xC8)
	char pad_204[4];  // 0xCC (0xCC)


}; 
 
 // Function Engine.KismetMathLibrary.Vector4_Size3
struct FVector4_Size3
{
	struct FVector4 A;  // 0x0 (0x0)
	double ReturnValue;  // 0x20 (0x20)
	char pad_40[8];  // 0x28 (0x28)


}; 
 
 // ScriptStruct Engine.InertializationRequest
struct FInertializationRequest
{
	float Duration;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct UBlendProfile* BlendProfile;  // 0x8 (0x8)


}; 
 
 // Function Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationAtTime
struct FScheduleLocalNotificationAtTime
{
	struct FDateTime FireDateTime;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool LocalTime : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)
	struct FText Title;  // 0x10 (0x10)
	struct FText Body;  // 0x28 (0x28)
	struct FText Action;  // 0x40 (0x40)
	struct FString ActivationEvent;  // 0x58 (0x58)
	int32_t ReturnValue;  // 0x68 (0x68)
	char pad_108[4];  // 0x6C (0x6C)


}; 
 
 // ScriptStruct Engine.InertializationBoneDiff
struct FInertializationBoneDiff
{
	char pad_0[96];  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.InertializationCurveDiff
struct FInertializationCurveDiff
{
	char pad_0[8];  // 0x0 (0x0)


}; 
 
 // Function Engine.CharacterMovementComponent.SetGroupsToAvoidMask
struct FSetGroupsToAvoidMask
{
	struct FNavAvoidanceMask GroupMask;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineComponent.GetDistanceAlongSplineAtSplineInputKey
struct FGetDistanceAlongSplineAtSplineInputKey
{
	float InKey;  // 0x0 (0x0)
	float ReturnValue;  // 0x4 (0x4)


}; 
 
 // ScriptStruct Engine.InertializationPoseDiff
struct FInertializationPoseDiff
{
	char pad_0[40];  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.AnimNode_Inertialization
// Size: 0x100(Inherited: 0x10)
struct FAnimNode_Inertialization : FAnimNode_Base
{
	struct FPoseLink Source;  // 0x10 (0x10)
	struct UBlendProfile* DefaultBlendProfile;  // 0x20 (0x20)
	struct TArray<struct FName> FilteredCurves;  // 0x28 (0x28)
	char pad_56[104];  // 0x38 (0x38)
	struct TArray<struct FInertializationRequest> RequestQueue;  // 0xA0 (0xA0)
	char pad_176[80];  // 0xB0 (0xB0)


}; 
 
 // Function Engine.GameUserSettings.SetAntiAliasingQuality
struct FSetAntiAliasingQuality
{
	int32_t Value;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.AnimNode_LinkedAnimGraph
// Size: 0xB8(Inherited: 0x58)
struct FAnimNode_LinkedAnimGraph : FAnimNode_CustomProperty
{
	struct TArray<struct FPoseLink> InputPoses;  // 0x58 (0x58)
	struct TArray<struct FName> InputPoseNames;  // 0x68 (0x68)
	UAnimInstance* InstanceClass;  // 0x78 (0x78)
	char pad_128[24];  // 0x80 (0x80)
	struct UBlendProfile* PendingBlendOutProfile;  // 0x98 (0x98)
	char pad_160[8];  // 0xA0 (0xA0)
	struct UBlendProfile* PendingBlendInProfile;  // 0xA8 (0xA8)
	char bReceiveNotifiesFromLinkedInstances : 1;  // 0xB0 (0xB0)
	char bPropagateNotifiesToLinkedInstances : 1;  // 0xB0 (0xB0)
	char pad_176_1 : 6;  // 0xB0 (0xB0)
	char pad_177[8];  // 0xB1 (0xB1)


}; 
 
 // ScriptStruct Engine.AnimNode_SaveCachedPose
// Size: 0x108(Inherited: 0x10)
struct FAnimNode_SaveCachedPose : FAnimNode_Base
{
	struct FPoseLink Pose;  // 0x10 (0x10)
	struct FName CachePoseName;  // 0x20 (0x20)
	char pad_40[224];  // 0x28 (0x28)


}; 
 
 // Function Engine.KismetTextLibrary.Conv_TransformToText
struct FConv_TransformToText
{
	struct FTransform InTrans;  // 0x0 (0x0)
	struct FText ReturnValue;  // 0x60 (0x60)
	char pad_120[8];  // 0x78 (0x78)


}; 
 
 // ScriptStruct Engine.CameraLensInterfaceClassSupport
struct FCameraLensInterfaceClassSupport
{
	AActor* Class;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerCameraManager.StartCameraFade
struct FStartCameraFade
{
	float FromAlpha;  // 0x0 (0x0)
	float ToAlpha;  // 0x4 (0x4)
	float Duration;  // 0x8 (0x8)
	struct FLinearColor Color;  // 0xC (0xC)
	char pad_28_1 : 7;  // 0x1C (0x1C)
	bool bShouldFadeAudio : 1;  // 0x1C (0x1C)
	char pad_29_1 : 7;  // 0x1D (0x1D)
	bool bHoldWhenFinished : 1;  // 0x1D (0x1D)
	char pad_30[2];  // 0x1E (0x1E)


}; 
 
 // ScriptStruct Engine.InputScaleBiasClampConstants
struct FInputScaleBiasClampConstants
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bMapRange : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool bClampResult : 1;  // 0x1 (0x1)
	char pad_2_1 : 7;  // 0x2 (0x2)
	bool bInterpResult : 1;  // 0x2 (0x2)
	char pad_3[1];  // 0x3 (0x3)
	struct FInputRange InRange;  // 0x4 (0x4)
	struct FInputRange OutRange;  // 0xC (0xC)
	float Scale;  // 0x14 (0x14)
	float Bias;  // 0x18 (0x18)
	float ClampMin;  // 0x1C (0x1C)
	float ClampMax;  // 0x20 (0x20)
	float InterpSpeedIncreasing;  // 0x24 (0x24)
	float InterpSpeedDecreasing;  // 0x28 (0x28)


}; 
 
 // Function Engine.AudioComponent.HasCookedFFTData
struct FHasCookedFFTData
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.AnimationPotentialTransition
struct FAnimationPotentialTransition
{
	char pad_0[48];  // 0x0 (0x0)


}; 
 
 // Function Engine.ConstraintInstanceBlueprintLibrary.SetLinearLimits
struct FSetLinearLimits
{
	struct FConstraintInstanceAccessor Accessor;  // 0x0 (0x0)
	enum class ELinearConstraintMotion XMotion;  // 0xC (0xC)
	enum class ELinearConstraintMotion YMotion;  // 0xD (0xD)
	enum class ELinearConstraintMotion ZMotion;  // 0xE (0xE)
	char pad_15[1];  // 0xF (0xF)
	float Limit;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.AnimNode_StateMachine
// Size: 0xC8(Inherited: 0x10)
struct FAnimNode_StateMachine : FAnimNode_Base
{
	int32_t StateMachineIndexInClass;  // 0x10 (0x10)
	int32_t MaxTransitionsPerFrame;  // 0x14 (0x14)
	int32_t MaxTransitionsRequests;  // 0x18 (0x18)
	char pad_28_1 : 7;  // 0x1C (0x1C)
	bool bSkipFirstUpdateTransition : 1;  // 0x1C (0x1C)
	char pad_29_1 : 7;  // 0x1D (0x1D)
	bool bReinitializeOnBecomingRelevant : 1;  // 0x1D (0x1D)
	char pad_30_1 : 7;  // 0x1E (0x1E)
	bool bCreateNotifyMetaData : 1;  // 0x1E (0x1E)
	char pad_31_1 : 7;  // 0x1F (0x1F)
	bool bAllowConduitEntryStates : 1;  // 0x1F (0x1F)
	char pad_32[168];  // 0x20 (0x20)


}; 
 
 // ScriptStruct Engine.AnimNode_TransitionPoseEvaluator
// Size: 0xB8(Inherited: 0x10)
struct FAnimNode_TransitionPoseEvaluator : FAnimNode_Base
{
	char pad_16[136];  // 0x10 (0x10)
	int32_t FramesToCachePose;  // 0x98 (0x98)
	char pad_156[4];  // 0x9C (0x9C)
	enum class EEvaluatorDataSource DataSource;  // 0xA0 (0xA0)
	enum class EEvaluatorMode EvaluatorMode;  // 0xA1 (0xA1)
	char pad_162[22];  // 0xA2 (0xA2)


}; 
 
 // Function Engine.KismetMathLibrary.BMin
struct FBMin
{
	char A;  // 0x0 (0x0)
	char B;  // 0x1 (0x1)
	char ReturnValue;  // 0x2 (0x2)


}; 
 
 // Function Engine.LevelStreaming.IsStreamingStatePending
struct FIsStreamingStatePending
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Subtract_TimespanTimespan
struct FSubtract_TimespanTimespan
{
	struct FTimespan A;  // 0x0 (0x0)
	struct FTimespan B;  // 0x8 (0x8)
	struct FTimespan ReturnValue;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.AnimNode_TransitionResult
// Size: 0x28(Inherited: 0x10)
struct FAnimNode_TransitionResult : FAnimNode_Base
{
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool bCanEnterTransition : 1;  // 0x10 (0x10)
	char pad_17[23];  // 0x11 (0x11)


}; 
 
 // Function Engine.Character.UnCrouch
struct FUnCrouch
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bClientSimulation : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.AnimNotifyEventReference
struct FAnimNotifyEventReference
{
	char pad_0[24];  // 0x0 (0x0)
	struct UMirrorDataTable* MirrorTable;  // 0x18 (0x18)
	struct UObject* NotifySource;  // 0x20 (0x20)


}; 
 
 // ScriptStruct Engine.AnimNotifyArray
struct FAnimNotifyArray
{
	struct TArray<struct FAnimNotifyEventReference> Notifies;  // 0x0 (0x0)


}; 
 
 // Function Engine.AtmosphericFogComponent.SetDensityOffset
struct FSetDensityOffset
{
	float NewDensityOffset;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.NegateVector
struct FNegateVector
{
	struct FVector A;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x18 (0x18)


}; 
 
 // ScriptStruct Engine.AnimNotifyContext
struct FAnimNotifyContext
{
	char pad_0[24];  // 0x0 (0x0)


}; 
 
 // Function Engine.LightComponent.SetLightFunctionFadeDistance
struct FSetLightFunctionFadeDistance
{
	float NewLightFunctionFadeDistance;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.TranslationTrack
struct FTranslationTrack
{
	struct TArray<struct FVector3f> PosKeys;  // 0x0 (0x0)
	struct TArray<float> Times;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.RotationTrack
struct FRotationTrack
{
	struct TArray<struct FQuat4f> RotKeys;  // 0x0 (0x0)
	struct TArray<float> Times;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.ScaleTrack
struct FScaleTrack
{
	struct TArray<struct FVector3f> ScaleKeys;  // 0x0 (0x0)
	struct TArray<float> Times;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.AnimSubsystem_Tag
// Size: 0x60(Inherited: 0x8)
struct FAnimSubsystem_Tag : FAnimSubsystem
{
	struct TMap<struct FName, int32_t> NodeIndices;  // 0x8 (0x8)
	char pad_88[8];  // 0x58 (0x58)


}; 
 
 // Function Engine.GameUserSettings.GetShadowQuality
struct FGetShadowQuality
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.AnimSetMeshLinkup
struct FAnimSetMeshLinkup
{
	struct TArray<int32_t> BoneToTrackTable;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Subtract_IntPointInt
struct FSubtract_IntPointInt
{
	struct FIntPoint A;  // 0x0 (0x0)
	int32_t B;  // 0x8 (0x8)
	struct FIntPoint ReturnValue;  // 0xC (0xC)


}; 
 
 // Function Engine.PhysicsHandleComponent.GetTargetLocationAndRotation
struct FGetTargetLocationAndRotation
{
	struct FVector TargetLocation;  // 0x0 (0x0)
	struct FRotator TargetRotation;  // 0x18 (0x18)


}; 
 
 // ScriptStruct Engine.AnimNode_SingleNode
// Size: 0x30(Inherited: 0x10)
struct FAnimNode_SingleNode : FAnimNode_Base
{
	struct FPoseLink SourcePose;  // 0x10 (0x10)
	char pad_32[16];  // 0x20 (0x20)


}; 
 
 // ScriptStruct Engine.DPMatchingRulestructBase
struct FDPMatchingRulestructBase
{
	char pad_0[8];  // 0x0 (0x0)
	struct FString RuleName;  // 0x8 (0x8)
	struct TArray<struct FDPMatchingIfCondition> IfConditions;  // 0x18 (0x18)
	struct FString AppendFragments;  // 0x28 (0x28)
	struct FString SetUserVar;  // 0x38 (0x38)


}; 
 
 // ScriptStruct Engine.AnimationTransitionRule
struct FAnimationTransitionRule
{
	struct FName RuleToExecute;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool TransitionReturnVal : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)
	int32_t TransitionIndex;  // 0xC (0xC)


}; 
 
 // Function Engine.CameraComponent.SetUseFieldOfViewForLOD
struct FSetUseFieldOfViewForLOD
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bInUseFieldOfViewForLOD : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.AnimationStateBase
struct FAnimationStateBase
{
	struct FName StateName;  // 0x0 (0x0)


}; 
 
 // Function Engine.CameraComponent.SetConstraintAspectRatio
struct FSetConstraintAspectRatio
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bInConstrainAspectRatio : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.NavMovementComponent.IsFlying
struct FIsFlying
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.UpdateLevelStreamingLevelStatus
struct FUpdateLevelStreamingLevelStatus
{
	struct FName PackageName;  // 0x0 (0x0)
	int32_t LODIndex;  // 0x8 (0x8)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bNewShouldBeLoaded : 1;  // 0xC (0xC)
	char pad_13_1 : 7;  // 0xD (0xD)
	bool bNewShouldBeVisible : 1;  // 0xD (0xD)
	char pad_14_1 : 7;  // 0xE (0xE)
	bool bNewShouldBlockOnLoad : 1;  // 0xE (0xE)
	char pad_15[1];  // 0xF (0xF)


}; 
 
 // ScriptStruct Engine.AnimationTransitionBetweenStates
// Size: 0x40(Inherited: 0x8)
struct FAnimationTransitionBetweenStates : FAnimationStateBase
{
	int32_t PreviousState;  // 0x8 (0x8)
	int32_t NextState;  // 0xC (0xC)
	float CrossfadeDuration;  // 0x10 (0x10)
	int32_t StartNotify;  // 0x14 (0x14)
	int32_t EndNotify;  // 0x18 (0x18)
	int32_t InterruptNotify;  // 0x1C (0x1C)
	uint8_t BlendMode;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)
	struct UCurveFloat* CustomCurve;  // 0x28 (0x28)
	struct UBlendProfile* BlendProfile;  // 0x30 (0x30)
	enum class ETransitionLogicType LogicType;  // 0x38 (0x38)
	char pad_57[7];  // 0x39 (0x39)


}; 
 
 // Function Engine.AnimMontage.GetSectionIndex
struct FGetSectionIndex
{
	struct FName InSectionName;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetTextLibrary.EqualEqual_TextText
struct FEqualEqual_TextText
{
	struct FText A;  // 0x0 (0x0)
	struct FText B;  // 0x18 (0x18)
	char pad_48_1 : 7;  // 0x30 (0x30)
	bool ReturnValue : 1;  // 0x30 (0x30)
	char pad_49[7];  // 0x31 (0x31)


}; 
 
 // ScriptStruct Engine.BakedStateExitTransition
struct FBakedStateExitTransition
{
	int32_t CanTakeDelegateIndex;  // 0x0 (0x0)
	int32_t CustomResultNodeIndex;  // 0x4 (0x4)
	int32_t TransitionIndex;  // 0x8 (0x8)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bDesiredTransitionReturnValue : 1;  // 0xC (0xC)
	char pad_13_1 : 7;  // 0xD (0xD)
	bool bAutomaticRemainingTimeRule : 1;  // 0xD (0xD)
	char pad_14[2];  // 0xE (0xE)
	struct FName SyncGroupNameToRequireValidMarkersRule;  // 0x10 (0x10)
	struct TArray<int32_t> PoseEvaluatorLinks;  // 0x18 (0x18)


}; 
 
 // Function Engine.PlatformInputDeviceMapperLibrary.GetAllActiveUsers
struct FGetAllActiveUsers
{
	struct TArray<struct FPlatformUserId> OutUsers;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)


}; 
 
 // ScriptStruct Engine.ExposedValueCopyRecord
struct FExposedValueCopyRecord
{
	int32_t CopyIndex;  // 0x0 (0x0)
	uint8_t PostCopyOperation;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)


}; 
 
 // Function Engine.ExponentialHeightFogComponent.SetSecondFogHeightFalloff
struct FSetSecondFogHeightFalloff
{
	float Value;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.InverseTransformRotation
struct FInverseTransformRotation
{
	struct FTransform T;  // 0x0 (0x0)
	struct FRotator Rotation;  // 0x60 (0x60)
	struct FRotator ReturnValue;  // 0x78 (0x78)


}; 
 
 // ScriptStruct Engine.AnimSubsystemInstance_NodeRelevancy
// Size: 0xA8(Inherited: 0x8)
struct FAnimSubsystemInstance_NodeRelevancy : FAnimSubsystemInstance
{
	char pad_8[160];  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.AnimSubsystem_PropertyAccess
// Size: 0x80(Inherited: 0x8)
struct FAnimSubsystem_PropertyAccess : FAnimSubsystem
{
	struct FPropertyAccessLibrary Library;  // 0x8 (0x8)


}; 
 
 // Function Engine.GameplayStatics.AnnounceAccessibleString
struct FAnnounceAccessibleString
{
	struct FString AnnouncementString;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimInstance.StopSlotAnimation
struct FStopSlotAnimation
{
	float InBlendOutTime;  // 0x0 (0x0)
	struct FName SlotNodeName;  // 0x4 (0x4)


}; 
 
 // ScriptStruct Engine.PropertyAccessCopyBatch
struct FPropertyAccessCopyBatch
{
	struct TArray<struct FPropertyAccessCopy> Copies;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameplayStatics.SpawnSoundAtLocation
struct FSpawnSoundAtLocation
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct USoundBase* Sound;  // 0x8 (0x8)
	struct FVector Location;  // 0x10 (0x10)
	struct FRotator Rotation;  // 0x28 (0x28)
	float VolumeMultiplier;  // 0x40 (0x40)
	float PitchMultiplier;  // 0x44 (0x44)
	float StartTime;  // 0x48 (0x48)
	char pad_76[4];  // 0x4C (0x4C)
	struct USoundAttenuation* AttenuationSettings;  // 0x50 (0x50)
	struct USoundConcurrency* ConcurrencySettings;  // 0x58 (0x58)
	char pad_96_1 : 7;  // 0x60 (0x60)
	bool bAutoDestroy : 1;  // 0x60 (0x60)
	char pad_97[7];  // 0x61 (0x61)
	struct UAudioComponent* ReturnValue;  // 0x68 (0x68)


}; 
 
 // Function Engine.HUD.DrawLine
struct FDrawLine
{
	float StartScreenX;  // 0x0 (0x0)
	float StartScreenY;  // 0x4 (0x4)
	float EndScreenX;  // 0x8 (0x8)
	float EndScreenY;  // 0xC (0xC)
	struct FLinearColor LineColor;  // 0x10 (0x10)
	float LineThickness;  // 0x20 (0x20)


}; 
 
 // Function Engine.Pawn.GetController
struct FGetController
{
	struct AController* ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.PropertyAccessSegment
struct FPropertyAccessSegment
{
	struct FName Name;  // 0x0 (0x0)
	struct UStruct* Struct;  // 0x8 (0x8)
	struct TFieldPath<FNone> Property;  // 0x10 (0x10)
	struct UFunction* Function;  // 0x30 (0x30)
	int32_t ArrayIndex;  // 0x38 (0x38)
	uint16_t Flags;  // 0x3C (0x3C)
	char pad_62[2];  // 0x3E (0x3E)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_GetAbs
struct FVector_GetAbs
{
	struct FVector A;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x18 (0x18)


}; 
 
 // ScriptStruct Engine.AssetMapping
struct FAssetMapping
{
	struct UAnimationAsset* SourceAsset;  // 0x0 (0x0)
	struct UAnimationAsset* TargetAsset;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.SelectedFragmentProperties
struct FSelectedFragmentProperties
{
	struct FName Tag;  // 0x0 (0x0)
	struct FString Fragment;  // 0x8 (0x8)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bEnabled : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // ScriptStruct Engine.BlendProfileBoneEntry
struct FBlendProfileBoneEntry
{
	struct FBoneReference BoneReference;  // 0x0 (0x0)
	float BlendScale;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.CachedAnimStateData
struct FCachedAnimStateData
{
	struct FName StateMachineName;  // 0x0 (0x0)
	struct FName StateName;  // 0x8 (0x8)
	char pad_16[12];  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.InputClampState
struct FInputClampState
{
	char pad_0[8];  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetRenderingLibrary.ReadRenderTargetRawPixelArea
struct FReadRenderTargetRawPixelArea
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct UTextureRenderTarget2D* TextureRenderTarget;  // 0x8 (0x8)
	int32_t MinX;  // 0x10 (0x10)
	int32_t MinY;  // 0x14 (0x14)
	int32_t MaxX;  // 0x18 (0x18)
	int32_t MaxY;  // 0x1C (0x1C)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool bNormalize : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)
	struct TArray<struct FLinearColor> ReturnValue;  // 0x28 (0x28)


}; 
 
 // ScriptStruct Engine.CachedAnimAssetPlayerData
struct FCachedAnimAssetPlayerData
{
	struct FName StateMachineName;  // 0x0 (0x0)
	struct FName StateName;  // 0x8 (0x8)
	char pad_16[8];  // 0x10 (0x10)


}; 
 
 // Function Engine.CharacterMovementComponent.GetLastUpdateRequestedVelocity
struct FGetLastUpdateRequestedVelocity
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.CachedAnimTransitionData
struct FCachedAnimTransitionData
{
	struct FName StateMachineName;  // 0x0 (0x0)
	struct FName FromStateName;  // 0x8 (0x8)
	struct FName ToStateName;  // 0x10 (0x10)
	char pad_24[12];  // 0x18 (0x18)


}; 
 
 // Function Engine.GameModeBase.K2_OnLogout
struct FK2_OnLogout
{
	struct AController* ExitingController;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.NamedCurveValue
struct FNamedCurveValue
{
	struct FName Name;  // 0x0 (0x0)
	float Value;  // 0x8 (0x8)


}; 
 
 // Function Engine.AudioComponent.IsVirtualized
struct FIsVirtualized
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimInstance.MontageSync_Follow
struct FMontageSync_Follow
{
	struct UAnimMontage* MontageFollower;  // 0x0 (0x0)
	struct UAnimInstance* OtherAnimInstance;  // 0x8 (0x8)
	struct UAnimMontage* MontageLeader;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.MirrorTableRow
// Size: 0x20(Inherited: 0x8)
struct FMirrorTableRow : FTableRowBase
{
	struct FName Name;  // 0x8 (0x8)
	struct FName MirroredName;  // 0x10 (0x10)
	enum class EMirrorRowType MirrorEntryType;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.SplineComponent.GetScaleAtTime
struct FGetScaleAtTime
{
	float Time;  // 0x0 (0x0)
	char pad_4_1 : 7;  // 0x4 (0x4)
	bool bUseConstantVelocity : 1;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.Vector4_IsNormal3
struct FVector4_IsNormal3
{
	struct FVector4 A;  // 0x0 (0x0)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[15];  // 0x21 (0x21)


}; 
 
 // ScriptStruct Engine.MirrorFindReplaceExpression
struct FMirrorFindReplaceExpression
{
	struct FName FindExpression;  // 0x0 (0x0)
	struct FName ReplaceExpression;  // 0x8 (0x8)
	enum class EMirrorFindReplaceMethod FindReplaceMethod;  // 0x10 (0x10)
	char pad_17[3];  // 0x11 (0x11)


}; 
 
 // Function Engine.VisualLoggerKismetLibrary.LogLocation
struct FLogLocation
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector Location;  // 0x8 (0x8)
	struct FString Text;  // 0x20 (0x20)
	struct FLinearColor ObjectColor;  // 0x30 (0x30)
	float Radius;  // 0x40 (0x40)
	struct FName LogCategory;  // 0x44 (0x44)
	char pad_76_1 : 7;  // 0x4C (0x4C)
	bool bAddToMessageLog : 1;  // 0x4C (0x4C)
	char pad_77[3];  // 0x4D (0x4D)


}; 
 
 // ScriptStruct Engine.TrajectorySample
struct FTrajectorySample
{
	float AccumulatedSeconds;  // 0x0 (0x0)
	float AccumulatedDistance;  // 0x4 (0x4)
	char pad_8[8];  // 0x8 (0x8)
	struct FTransform Transform;  // 0x10 (0x10)
	struct FVector LinearVelocity;  // 0x70 (0x70)
	char pad_136[8];  // 0x88 (0x88)


}; 
 
 // ScriptStruct Engine.TrajectorySampleRange
struct FTrajectorySampleRange
{
	struct TArray<struct FTrajectorySample> Samples;  // 0x0 (0x0)
	int32_t SampleRate;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)


}; 
 
 // Function Engine.Emitter.SetVectorParameter
struct FSetVectorParameter
{
	struct FName ParameterName;  // 0x0 (0x0)
	struct FVector Param;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.NodeItem
struct FNodeItem
{
	struct FName ParentName;  // 0x0 (0x0)
	char pad_8[8];  // 0x8 (0x8)
	struct FTransform Transform;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.PoseAssetInfluence
struct FPoseAssetInfluence
{
	int32_t PoseIndex;  // 0x0 (0x0)
	int32_t BoneTransformIndex;  // 0x4 (0x4)


}; 
 
 // ScriptStruct Engine.SkinWeightProfileManagerTickFunction
// Size: 0x30(Inherited: 0x28)
struct FSkinWeightProfileManagerTickFunction : FTickFunction
{
	char pad_40[8];  // 0x28 (0x28)


}; 
 
 // ScriptStruct Engine.PoseAssetInfluences
struct FPoseAssetInfluences
{
	struct TArray<struct FPoseAssetInfluence> Influences;  // 0x0 (0x0)


}; 
 
 // Function Engine.LightComponent.SetUseTemperature
struct FSetUseTemperature
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewValue : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.PreviewAttachedObjectPair
struct FPreviewAttachedObjectPair
{
	struct TSoftObjectPtr<UObject> AttachedObject;  // 0x0 (0x0)
	struct UObject* Object;  // 0x30 (0x30)
	struct FName AttachedTo;  // 0x38 (0x38)


}; 
 
 // Function Engine.KismetMathLibrary.GetSeconds
struct FGetSeconds
{
	struct FTimespan A;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // ScriptStruct Engine.PreviewMeshCollectionEntry
struct FPreviewMeshCollectionEntry
{
	struct TSoftObjectPtr<USkeletalMesh> SkeletalMesh;  // 0x0 (0x0)
	struct TSoftObjectPtr<UAnimBlueprint> AnimBlueprint;  // 0x30 (0x30)


}; 
 
 // ScriptStruct Engine.AssetImportInfo
struct FAssetImportInfo
{
	char pad_0[1];  // 0x0 (0x0)


}; 
 
 // Function Engine.LightComponentBase.SetCastRaytracedShadows
struct FSetCastRaytracedShadows
{
	enum class ECastRayTracedShadow bNewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.InputComponent.IsControllerKeyDown
struct FIsControllerKeyDown
{
	struct FKey Key;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool ReturnValue : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // ScriptStruct Engine.RigTransformConstraint
struct FRigTransformConstraint
{
	enum class EConstraintTransform TranformType;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	struct FName ParentSpace;  // 0x4 (0x4)
	float Weight;  // 0xC (0xC)


}; 
 
 // ScriptStruct Engine.ScalarParameterAtlasInstanceData
struct FScalarParameterAtlasInstanceData
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bIsUsedAsAtlasPosition : 1;  // 0x0 (0x0)
	char pad_1[7];  // 0x1 (0x1)
	struct TSoftObjectPtr<UCurveLinearColor> Curve;  // 0x8 (0x8)
	struct TSoftObjectPtr<UCurveLinearColorAtlas> Atlas;  // 0x38 (0x38)


}; 
 
 // Function Engine.KismetMathLibrary.Matrix_GetScaledAxis
struct FMatrix_GetScaledAxis
{
	struct FMatrix M;  // 0x0 (0x0)
	enum class EAxis Axis;  // 0x80 (0x80)
	char pad_129[7];  // 0x81 (0x81)
	struct FVector ReturnValue;  // 0x88 (0x88)


}; 
 
 // Function Engine.AnimationDataController.SetCurveFlag
struct FSetCurveFlag
{
	struct FAnimationCurveIdentifier CurveId;  // 0x0 (0x0)
	enum class EAnimAssetCurveFlags Flag;  // 0x10 (0x10)
	char pad_17_1 : 7;  // 0x11 (0x11)
	bool bState : 1;  // 0x11 (0x11)
	char pad_18_1 : 7;  // 0x12 (0x12)
	bool bShouldTransact : 1;  // 0x12 (0x12)
	char pad_19_1 : 7;  // 0x13 (0x13)
	bool ReturnValue : 1;  // 0x13 (0x13)


}; 
 
 // Function Engine.AnimInstance.GetRelevantAnimTime
struct FGetRelevantAnimTime
{
	int32_t MachineIndex;  // 0x0 (0x0)
	int32_t StateIndex;  // 0x4 (0x4)
	float ReturnValue;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.TransformBase
struct FTransformBase
{
	struct FName Node;  // 0x0 (0x0)
	struct FTransformBaseConstraint Constraints[2];  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.EventGraphFastCallPair
struct FEventGraphFastCallPair
{
	struct UFunction* FunctionToPatch;  // 0x0 (0x0)
	int32_t EventGraphCallOffset;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // ScriptStruct Engine.AnimSlotGroup
struct FAnimSlotGroup
{
	struct FName GroupName;  // 0x0 (0x0)
	struct TArray<struct FName> SlotNames;  // 0x8 (0x8)


}; 
 
 // Function Engine.AnimationDataController.AddCurve
struct FAddCurve
{
	struct FAnimationCurveIdentifier CurveId;  // 0x0 (0x0)
	int32_t CurveFlags;  // 0x10 (0x10)
	char pad_20_1 : 7;  // 0x14 (0x14)
	bool bShouldTransact : 1;  // 0x14 (0x14)
	char pad_21_1 : 7;  // 0x15 (0x15)
	bool ReturnValue : 1;  // 0x15 (0x15)
	char pad_22[2];  // 0x16 (0x16)


}; 
 
 // ScriptStruct Engine.BoneNode
struct FBoneNode
{
	struct FName Name;  // 0x0 (0x0)
	int32_t ParentIndex;  // 0x8 (0x8)
	enum class EBoneTranslationRetargetingMode TranslationRetargetingMode;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)


}; 
 
 // ScriptStruct Engine.NameMapping
struct FNameMapping
{
	struct FName NodeName;  // 0x0 (0x0)
	struct FName BoneName;  // 0x8 (0x8)


}; 
 
 // Function Engine.GameplayStatics.GetWorldOriginLocation
struct FGetWorldOriginLocation
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FIntVector ReturnValue;  // 0x8 (0x8)
	char pad_20[4];  // 0x14 (0x14)


}; 
 
 // Function Engine.AnimInstance.ClearTransitionEvents
struct FClearTransitionEvents
{
	struct FName EventName;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineComponent.SetWorldLocationAtSplinePoint
struct FSetWorldLocationAtSplinePoint
{
	int32_t PointIndex;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector InLocation;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.DataTableCategoryHandle
struct FDataTableCategoryHandle
{
	struct UDataTable* DataTable;  // 0x0 (0x0)
	struct FName ColumnName;  // 0x8 (0x8)
	struct FName RowContents;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.SkinWeightProfileInfo
struct FSkinWeightProfileInfo
{
	struct FName Name;  // 0x0 (0x0)
	struct FPerPlatformBool DefaultProfile;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)
	struct FPerPlatformInt DefaultProfileFromLODIndex;  // 0xC (0xC)


}; 
 
 // ScriptStruct Engine.CurveMetaData
struct FCurveMetaData
{
	char pad_0[24];  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.ServerCamera
struct FServerCamera
{
	struct FName NewMode;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.VoiceSettings
struct FVoiceSettings
{
	struct USceneComponent* ComponentToAttachTo;  // 0x0 (0x0)
	struct USoundAttenuation* AttenuationSettings;  // 0x8 (0x8)
	struct USoundEffectSourcePresetChain* SourceEffectChain;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.GraphReference
struct FGraphReference
{
	struct UEdGraph* MacroGraph;  // 0x0 (0x0)
	struct UBlueprint* GraphBlueprint;  // 0x8 (0x8)
	struct FGuid GraphGuid;  // 0x10 (0x10)


}; 
 
 // Function Engine.SkeletalMeshComponent.ResetAnimInstanceDynamics
struct FResetAnimInstanceDynamics
{
	uint8_t InTeleportType;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.SmartNameContainer
struct FSmartNameContainer
{
	char pad_0[80];  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMesh.SetDefaultAnimatingRig
struct FSetDefaultAnimatingRig
{
	struct TSoftObjectPtr<UObject> InAnimatingRig;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.TimeStretchCurveMarker
struct FTimeStretchCurveMarker
{
	float Time[3];  // 0x0 (0x0)
	float Alpha;  // 0xC (0xC)


}; 
 
 // Function Engine.KismetNodeHelperLibrary.GetEnumeratorName
struct FGetEnumeratorName
{
	struct UEnum* Enum;  // 0x0 (0x0)
	char EnumeratorValue;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)
	struct FName ReturnValue;  // 0xC (0xC)
	char pad_20[4];  // 0x14 (0x14)


}; 
 
 // Function Engine.KismetMathLibrary.Matrix_RemoveTranslation
struct FMatrix_RemoveTranslation
{
	struct FMatrix M;  // 0x0 (0x0)
	struct FMatrix ReturnValue;  // 0x80 (0x80)


}; 
 
 // ScriptStruct Engine.TimeStretchCurve
struct FTimeStretchCurve
{
	float SamplingRate;  // 0x0 (0x0)
	float CurveValueMinPrecision;  // 0x4 (0x4)
	struct TArray<struct FTimeStretchCurveMarker> Markers;  // 0x8 (0x8)
	float Sum_dT_i_by_C_i[3];  // 0x18 (0x18)
	char pad_36[4];  // 0x24 (0x24)


}; 
 
 // ScriptStruct Engine.AnimCurveType
struct FAnimCurveType
{
	char pad_0[2];  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.TimeStretchCurveInstance
struct FTimeStretchCurveInstance
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bHasValidData : 1;  // 0x0 (0x0)
	char pad_1[47];  // 0x1 (0x1)


}; 
 
 // Function Engine.HUD.Deproject
struct FDeproject
{
	float ScreenX;  // 0x0 (0x0)
	float ScreenY;  // 0x4 (0x4)
	struct FVector WorldPosition;  // 0x8 (0x8)
	struct FVector WorldDirection;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetMathLibrary.Vector2D_Zero
struct FVector2D_Zero
{
	struct FVector2D ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.AnimGroupInfo
struct FAnimGroupInfo
{
	struct FName Name;  // 0x0 (0x0)
	struct FLinearColor Color;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.AnimParentNodeAssetOverride
struct FAnimParentNodeAssetOverride
{
	struct UAnimationAsset* NewAsset;  // 0x0 (0x0)
	struct FGuid ParentNodeGuid;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.AssetCompileData
struct FAssetCompileData
{
	struct TWeakObjectPtr<UObject> Asset;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Not_PreBool
struct FNot_PreBool
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool A : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool ReturnValue : 1;  // 0x1 (0x1)


}; 
 
 // Function Engine.KismetMathLibrary.MirrorVectorByNormal
struct FMirrorVectorByNormal
{
	struct FVector InVect;  // 0x0 (0x0)
	struct FVector InNormal;  // 0x18 (0x18)
	struct FVector ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.KismetMathLibrary.Quat_Inversed
struct FQuat_Inversed
{
	struct FQuat Q;  // 0x0 (0x0)
	struct FQuat ReturnValue;  // 0x20 (0x20)


}; 
 
 // ScriptStruct Engine.PrimaryAssetTypeInfo
struct FPrimaryAssetTypeInfo
{
	struct FName PrimaryAssetType;  // 0x0 (0x0)
	struct TSoftClassPtr<UObject> AssetBaseClass;  // 0x8 (0x8)
	 AssetBaseClassLoaded;  // 0x38 (0x38)
	char pad_64_1 : 7;  // 0x40 (0x40)
	bool bHasBlueprintClasses : 1;  // 0x40 (0x40)
	char pad_65_1 : 7;  // 0x41 (0x41)
	bool bIsEditorOnly : 1;  // 0x41 (0x41)
	char pad_66[6];  // 0x42 (0x42)
	struct TArray<struct FDirectoryPath> Directories;  // 0x48 (0x48)
	struct TArray<struct FSoftObjectPath> SpecificAssets;  // 0x58 (0x58)
	struct FPrimaryAssetRules Rules;  // 0x68 (0x68)
	char pad_116[4];  // 0x74 (0x74)
	struct TArray<struct FString> AssetScanPaths;  // 0x78 (0x78)
	char pad_136_1 : 7;  // 0x88 (0x88)
	bool bIsDynamicAsset : 1;  // 0x88 (0x88)
	char pad_137[3];  // 0x89 (0x89)
	int32_t NumberOfAssets;  // 0x8C (0x8C)


}; 
 
 // Function Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByGroup
struct FGetLinkedAnimLayerInstanceByGroup
{
	struct FName InGroup;  // 0x0 (0x0)
	struct UAnimInstance* ReturnValue;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.AssetManagerSearchRules
struct FAssetManagerSearchRules
{
	struct TArray<struct FString> AssetScanPaths;  // 0x0 (0x0)
	struct TArray<struct FString> IncludePatterns;  // 0x10 (0x10)
	struct TArray<struct FString> ExcludePatterns;  // 0x20 (0x20)
	 AssetBaseClass;  // 0x30 (0x30)
	char pad_56_1 : 7;  // 0x38 (0x38)
	bool bHasBlueprintClasses : 1;  // 0x38 (0x38)
	char pad_57_1 : 7;  // 0x39 (0x39)
	bool bForceSynchronousScan : 1;  // 0x39 (0x39)
	char pad_58_1 : 7;  // 0x3A (0x3A)
	bool bSkipVirtualPathExpansion : 1;  // 0x3A (0x3A)
	char pad_59_1 : 7;  // 0x3B (0x3B)
	bool bSkipManagerIncludeCheck : 1;  // 0x3B (0x3B)
	char pad_60[20];  // 0x3C (0x3C)


}; 
 
 // Function Engine.KismetMathLibrary.EqualEqual_Vector4Vector4
struct FEqualEqual_Vector4Vector4
{
	struct FVector4 A;  // 0x0 (0x0)
	struct FVector4 B;  // 0x20 (0x20)
	float ErrorTolerance;  // 0x40 (0x40)
	char pad_68_1 : 7;  // 0x44 (0x44)
	bool ReturnValue : 1;  // 0x44 (0x44)
	char pad_69[11];  // 0x45 (0x45)


}; 
 
 // ScriptStruct Engine.AudioEffectParameters
struct FAudioEffectParameters
{
	char pad_0[8];  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.LinearColor_White
struct FLinearColor_White
{
	struct FLinearColor ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.SoundDebugEntry
struct FSoundDebugEntry
{
	struct FName DebugName;  // 0x0 (0x0)
	struct FSoftObjectPath Sound;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.DefaultAudioBusSettings
struct FDefaultAudioBusSettings
{
	struct FSoftObjectPath AudioBus;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.AudioVolumeSubmixSendSettings
struct FAudioVolumeSubmixSendSettings
{
	uint8_t ListenerLocationState;  // 0x0 (0x0)
	uint8_t SourceLocationState;  // 0x1 (0x1)
	char pad_2[6];  // 0x2 (0x2)
	struct TArray<struct FSoundSubmixSendInfo> SubmixSends;  // 0x8 (0x8)


}; 
 
 // Function Engine.CharacterMovementComponent.K2_ComputeFloorDist
struct FK2_ComputeFloorDist
{
	struct FVector CapsuleLocation;  // 0x0 (0x0)
	float LineDistance;  // 0x18 (0x18)
	float SweepDistance;  // 0x1C (0x1C)
	float SweepRadius;  // 0x20 (0x20)
	char pad_36[4];  // 0x24 (0x24)
	struct FFindFloorResult FloorResult;  // 0x28 (0x28)


}; 
 
 // Function Engine.AnimInstance.WasAnimNotifyStateActiveInSourceState
struct FWasAnimNotifyStateActiveInSourceState
{
	int32_t MachineIndex;  // 0x0 (0x0)
	int32_t StateIndex;  // 0x4 (0x4)
	UAnimNotifyState* AnimNotifyStateType;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // ScriptStruct Engine.SplineCurves
struct FSplineCurves
{
	struct FInterpCurveVector Position;  // 0x0 (0x0)
	struct FInterpCurveQuat Rotation;  // 0x18 (0x18)
	struct FInterpCurveVector Scale;  // 0x30 (0x30)
	struct FInterpCurveFloat ReparamTable;  // 0x48 (0x48)
	struct USplineMetadata* MetaData;  // 0x60 (0x60)
	uint32_t Version;  // 0x68 (0x68)
	char pad_108[4];  // 0x6C (0x6C)


}; 
 
 // Function Engine.SplineComponent.GetWorldLocationAtTime
struct FGetWorldLocationAtTime
{
	float Time;  // 0x0 (0x0)
	char pad_4_1 : 7;  // 0x4 (0x4)
	bool bUseConstantVelocity : 1;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.AudioVolumeSubmixOverrideSettings
struct FAudioVolumeSubmixOverrideSettings
{
	struct USoundSubmix* Submix;  // 0x0 (0x0)
	struct TArray<struct USoundEffectSubmixPreset*> SubmixEffectChain;  // 0x8 (0x8)
	float CrossfadeTime;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)


}; 
 
 // Function Engine.GameUserSettings.GetRecommendedResolutionScale
struct FGetRecommendedResolutionScale
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.InteriorSettings
struct FInteriorSettings
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bIsWorldSettings : 1;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	float ExteriorVolume;  // 0x4 (0x4)
	float ExteriorTime;  // 0x8 (0x8)
	float ExteriorLPF;  // 0xC (0xC)
	float ExteriorLPFTime;  // 0x10 (0x10)
	float InteriorVolume;  // 0x14 (0x14)
	float InteriorTime;  // 0x18 (0x18)
	float InteriorLPF;  // 0x1C (0x1C)
	float InteriorLPFTime;  // 0x20 (0x20)


}; 
 
 // Function Engine.SplineComponent.SetUnselectedSplineSegmentColor
struct FSetUnselectedSplineSegmentColor
{
	struct FLinearColor SegmentColor;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.DamageEvent
struct FDamageEvent
{
	char pad_0[8];  // 0x0 (0x0)
	UDamageType* DamageTypeClass;  // 0x8 (0x8)


}; 
 
 // Function Engine.SplineComponent.AddSplinePointAtIndex
struct FAddSplinePointAtIndex
{
	struct FVector Position;  // 0x0 (0x0)
	int32_t Index;  // 0x18 (0x18)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x1C (0x1C)
	char pad_29_1 : 7;  // 0x1D (0x1D)
	bool bUpdateSpline : 1;  // 0x1D (0x1D)
	char pad_30[2];  // 0x1E (0x1E)


}; 
 
 // Function Engine.KismetNodeHelperLibrary.BitIsMarked
struct FBitIsMarked
{
	int32_t Data;  // 0x0 (0x0)
	int32_t Index;  // 0x4 (0x4)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // ScriptStruct Engine.NodeToCodeAssociation
struct FNodeToCodeAssociation
{
	char pad_0[20];  // 0x0 (0x0)


}; 
 
 // Function Engine.SceneCaptureComponent.HideComponent
struct FHideComponent
{
	struct UPrimitiveComponent* InComponent;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintSetLibrary.Set_Length
struct FSet_Length
{
	struct TSet<int32_t> TargetSet;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x50 (0x50)
	char pad_84[4];  // 0x54 (0x54)


}; 
 
 // Function Engine.CharacterMovementComponent.GetPerchRadiusThreshold
struct FGetPerchRadiusThreshold
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.DebuggingInfoForSingleFunction
struct FDebuggingInfoForSingleFunction
{
	char pad_0[400];  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimDataModel.GetAnimationSequence
struct FGetAnimationSequence
{
	struct UAnimSequence* ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.PointerToUberGraphFrame
struct FPointerToUberGraphFrame
{
	char pad_0[8];  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.BlueprintComponentChangedPropertyInfo
struct FBlueprintComponentChangedPropertyInfo
{
	struct FName PropertyName;  // 0x0 (0x0)
	int32_t ArrayIndex;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)
	struct UStruct* PropertyScope;  // 0x10 (0x10)


}; 
 
 // Function Engine.SkinnedMeshComponent.UnloadSkinWeightProfile
struct FUnloadSkinWeightProfile
{
	struct FName InProfileName;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.BlueprintCookedComponentInstancingData
struct FBlueprintCookedComponentInstancingData
{
	struct TArray<struct FBlueprintComponentChangedPropertyInfo> ChangedPropertyList;  // 0x0 (0x0)
	char pad_16[17];  // 0x10 (0x10)
	char pad_33_1 : 7;  // 0x21 (0x21)
	bool bHasValidCookedData : 1;  // 0x21 (0x21)
	char pad_34[38];  // 0x22 (0x22)


}; 
 
 // Function Engine.GameplayStatics.GetActorArrayBounds
struct FGetActorArrayBounds
{
	struct TArray<struct AActor*> Actors;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool bOnlyCollidingComponents : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)
	struct FVector Center;  // 0x18 (0x18)
	struct FVector BoxExtent;  // 0x30 (0x30)


}; 
 
 // Function Engine.SkeletalMeshComponent.GetCurrentJointAngles
struct FGetCurrentJointAngles
{
	struct FName InBoneName;  // 0x0 (0x0)
	float Swing1Angle;  // 0x8 (0x8)
	float TwistAngle;  // 0xC (0xC)
	float Swing2Angle;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.Quat_GetAxisZ
struct FQuat_GetAxisZ
{
	struct FQuat Q;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x20 (0x20)
	char pad_56[8];  // 0x38 (0x38)


}; 
 
 // ScriptStruct Engine.SolverIterations
struct FSolverIterations
{
	int32_t SolverIterations;  // 0x0 (0x0)
	int32_t JointIterations;  // 0x4 (0x4)
	int32_t CollisionIterations;  // 0x8 (0x8)
	int32_t SolverPushOutIterations;  // 0xC (0xC)
	int32_t JointPushOutIterations;  // 0x10 (0x10)
	int32_t CollisionPushOutIterations;  // 0x14 (0x14)


}; 
 
 // ScriptStruct Engine.BPComponentClassOverride
struct FBPComponentClassOverride
{
	struct FName ComponentName;  // 0x0 (0x0)
	 ComponentClass;  // 0x8 (0x8)


}; 
 
 // Function Engine.SplineComponent.GetScaleAtSplineInputKey
struct FGetScaleAtSplineInputKey
{
	float InKey;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.BookmarkJumpToSettings
// Size: 0x1(Inherited: 0x1)
struct FBookmarkJumpToSettings : FBookmarkBaseJumpToSettings
{


}; 
 
 // Function Engine.KismetMathLibrary.Conv_IntToBool
struct FConv_IntToBool
{
	int32_t inInt;  // 0x0 (0x0)
	char pad_4_1 : 7;  // 0x4 (0x4)
	bool ReturnValue : 1;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)


}; 
 
 // ScriptStruct Engine.BuilderPoly
struct FBuilderPoly
{
	struct TArray<int32_t> VertexIndices;  // 0x0 (0x0)
	int32_t Direction;  // 0x10 (0x10)
	struct FName ItemName;  // 0x14 (0x14)
	int32_t PolyFlags;  // 0x1C (0x1C)


}; 
 
 // Function Engine.RadialForceComponent.RemoveObjectTypeToAffect
struct FRemoveObjectTypeToAffect
{
	enum class EObjectTypeQuery ObjectType;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.LevelSimplificationDetails
struct FLevelSimplificationDetails
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bCreatePackagePerAsset : 1;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	float DetailsPercentage;  // 0x4 (0x4)
	struct FMaterialProxySettings StaticMeshMaterialSettings;  // 0x8 (0x8)
	char pad_156_1 : 7;  // 0x9C (0x9C)
	bool bOverrideLandscapeExportLOD : 1;  // 0x9C (0x9C)
	char pad_157[3];  // 0x9D (0x9D)
	int32_t LandscapeExportLOD;  // 0xA0 (0xA0)
	struct FMaterialProxySettings LandscapeMaterialSettings;  // 0xA4 (0xA4)
	char pad_312_1 : 7;  // 0x138 (0x138)
	bool bBakeFoliageToLandscape : 1;  // 0x138 (0x138)
	char pad_313_1 : 7;  // 0x139 (0x139)
	bool bBakeGrassToLandscape : 1;  // 0x139 (0x139)
	char pad_314[2];  // 0x13A (0x13A)


}; 
 
 // ScriptStruct Engine.PooledCameraShakes
struct FPooledCameraShakes
{
	struct TArray<struct UCameraShakeBase*> PooledShakes;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.ActiveCameraShakeInfo
struct FActiveCameraShakeInfo
{
	struct UCameraShakeBase* ShakeInstance;  // 0x0 (0x0)
	struct TWeakObjectPtr<UCameraShakeSourceComponent> ShakeSource;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool bIsCustomInitialized : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // ScriptStruct Engine.SoundModulationDefaultSettings
struct FSoundModulationDefaultSettings
{
	struct FSoundModulationDestinationSettings VolumeModulationDestination;  // 0x0 (0x0)
	struct FSoundModulationDestinationSettings PitchModulationDestination;  // 0x60 (0x60)
	struct FSoundModulationDestinationSettings HighpassModulationDestination;  // 0xC0 (0xC0)
	struct FSoundModulationDestinationSettings LowpassModulationDestination;  // 0x120 (0x120)


}; 
 
 // ScriptStruct Engine.CameraShakeStartParams
struct FCameraShakeStartParams
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bIsRestarting : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.CameraShakeScrubParams
struct FCameraShakeScrubParams
{
	float AbsoluteTime;  // 0x0 (0x0)
	float ShakeScale;  // 0x4 (0x4)
	float DynamicScale;  // 0x8 (0x8)
	float BlendingWeight;  // 0xC (0xC)
	struct FMinimalViewInfo POV;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.Cross_VectorVector
struct FCross_VectorVector
{
	struct FVector A;  // 0x0 (0x0)
	struct FVector B;  // 0x18 (0x18)
	struct FVector ReturnValue;  // 0x30 (0x30)


}; 
 
 // ScriptStruct Engine.CameraShakeUpdateResult
struct FCameraShakeUpdateResult
{
	char pad_0[1840];  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.SetViewTargetWithBlend
struct FSetViewTargetWithBlend
{
	struct AActor* NewViewTarget;  // 0x0 (0x0)
	float BlendTime;  // 0x8 (0x8)
	enum class EViewTargetBlendFunction BlendFunc;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)
	float BlendExp;  // 0x10 (0x10)
	char pad_20_1 : 7;  // 0x14 (0x14)
	bool bLockOutgoing : 1;  // 0x14 (0x14)
	char pad_21[3];  // 0x15 (0x15)


}; 
 
 // Function Engine.KismetInputLibrary.PointerEvent_GetPointerIndex
struct FPointerEvent_GetPointerIndex
{
	struct FPointerEvent Input;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x98 (0x98)
	char pad_156[4];  // 0x9C (0x9C)


}; 
 
 // Function Engine.KismetStringLibrary.IsEmpty
struct FIsEmpty
{
	struct FString InString;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // ScriptStruct Engine.CameraShakeStopParams
struct FCameraShakeStopParams
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bImmediately : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkyAtmosphereComponent.SetHeightFogContribution
struct FSetHeightFogContribution
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.CameraShakeInfo
struct FCameraShakeInfo
{
	struct FCameraShakeDuration Duration;  // 0x0 (0x0)
	float BlendIn;  // 0x8 (0x8)
	float BlendOut;  // 0xC (0xC)


}; 
 
 // ScriptStruct Engine.DummySpacerCameraTypes
struct FDummySpacerCameraTypes
{
	char pad_0[1];  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.RepRootMotionMontage
struct FRepRootMotionMontage
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bIsActive : 1;  // 0x0 (0x0)
	char pad_1[7];  // 0x1 (0x1)
	struct UAnimMontage* AnimMontage;  // 0x8 (0x8)
	float Position;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)
	struct FVector_NetQuantize100 Location;  // 0x18 (0x18)
	struct FRotator Rotation;  // 0x30 (0x30)
	struct UPrimitiveComponent* MovementBase;  // 0x48 (0x48)
	struct FName MovementBaseBoneName;  // 0x50 (0x50)
	char pad_88_1 : 7;  // 0x58 (0x58)
	bool bRelativePosition : 1;  // 0x58 (0x58)
	char pad_89_1 : 7;  // 0x59 (0x59)
	bool bRelativeRotation : 1;  // 0x59 (0x59)
	char pad_90[6];  // 0x5A (0x5A)
	struct FRootMotionSourceGroup AuthoritativeRootMotion;  // 0x60 (0x60)
	struct FVector_NetQuantize10 Acceleration;  // 0xA8 (0xA8)
	struct FVector_NetQuantize10 LinearVelocity;  // 0xC0 (0xC0)


}; 
 
 // Function Engine.StereoLayerShapeCylinder.SetOverlayArc
struct FSetOverlayArc
{
	float InOverlayArc;  // 0x0 (0x0)


}; 
 
 // Function Engine.HUD.ShowDebugForReticleTargetToggle
struct FShowDebugForReticleTargetToggle
{
	AActor* DesiredClass;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.RootMotionSourceSettings
struct FRootMotionSourceSettings
{
	char Flags;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineComponent.GetInputKeyValueAtDistanceAlongSpline
struct FGetInputKeyValueAtDistanceAlongSpline
{
	float Distance;  // 0x0 (0x0)
	float ReturnValue;  // 0x4 (0x4)


}; 
 
 // ScriptStruct Engine.StaticMeshComponentInstanceData
// Size: 0x170(Inherited: 0x130)
struct FStaticMeshComponentInstanceData : FPrimitiveComponentInstanceData
{
	struct UStaticMesh* StaticMesh;  // 0x130 (0x130)
	struct TArray<struct FStaticMeshVertexColorLODData> VertexColorLODs;  // 0x138 (0x138)
	struct TArray<struct FGuid> CachedStaticLighting;  // 0x148 (0x148)
	struct TArray<struct FStreamingTextureBuildInfo> StreamingTextureData;  // 0x158 (0x158)
	char pad_360[8];  // 0x168 (0x168)


}; 
 
 // ScriptStruct Engine.BasedMovementInfo
struct FBasedMovementInfo
{
	struct UPrimitiveComponent* MovementBase;  // 0x0 (0x0)
	struct FName BoneName;  // 0x8 (0x8)
	struct FVector_NetQuantize100 Location;  // 0x10 (0x10)
	struct FRotator Rotation;  // 0x28 (0x28)
	char pad_64_1 : 7;  // 0x40 (0x40)
	bool bServerHasBaseComponent : 1;  // 0x40 (0x40)
	char pad_65_1 : 7;  // 0x41 (0x41)
	bool bRelativeRotation : 1;  // 0x41 (0x41)
	char pad_66_1 : 7;  // 0x42 (0x42)
	bool bServerHasVelocity : 1;  // 0x42 (0x42)
	char pad_67[5];  // 0x43 (0x43)


}; 
 
 // ScriptStruct Engine.FindFloorResult
struct FFindFloorResult
{
	char bBlockingHit : 1;  // 0x0 (0x0)
	char bWalkableFloor : 1;  // 0x0 (0x0)
	char bLineTrace : 1;  // 0x0 (0x0)
	char pad_0_1 : 5;  // 0x0 (0x0)
	char pad_1[4];  // 0x1 (0x1)
	float FloorDist;  // 0x4 (0x4)
	float LineDist;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)
	struct FHitResult HitResult;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.Divide_DoubleDouble
struct FDivide_DoubleDouble
{
	double A;  // 0x0 (0x0)
	double B;  // 0x8 (0x8)
	double ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.Vector4_IsUnit3
struct FVector4_IsUnit3
{
	struct FVector4 A;  // 0x0 (0x0)
	float SquaredLenthTolerance;  // 0x20 (0x20)
	char pad_36_1 : 7;  // 0x24 (0x24)
	bool ReturnValue : 1;  // 0x24 (0x24)
	char pad_37[11];  // 0x25 (0x25)


}; 
 
 // ScriptStruct Engine.CollisionResponseTemplate
struct FCollisionResponseTemplate
{
	struct FName Name;  // 0x0 (0x0)
	enum class ECollisionEnabled CollisionEnabled;  // 0x8 (0x8)
	char pad_9[1];  // 0x9 (0x9)
	char pad_10_1 : 7;  // 0xA (0xA)
	bool bCanModify : 1;  // 0xA (0xA)
	char pad_11[33];  // 0xB (0xB)
	struct FName ObjectTypeName;  // 0x2C (0x2C)
	char pad_52[4];  // 0x34 (0x34)
	struct TArray<struct FResponseChannel> CustomResponses;  // 0x38 (0x38)


}; 
 
 // ScriptStruct Engine.CustomChannelSetup
struct FCustomChannelSetup
{
	enum class ECollisionChannel Channel;  // 0x0 (0x0)
	enum class ECollisionResponse DefaultResponse;  // 0x1 (0x1)
	char pad_2_1 : 7;  // 0x2 (0x2)
	bool bTraceType : 1;  // 0x2 (0x2)
	char pad_3_1 : 7;  // 0x3 (0x3)
	bool bStaticObject : 1;  // 0x3 (0x3)
	struct FName Name;  // 0x4 (0x4)


}; 
 
 // Function Engine.ExponentialHeightFogComponent.SetFogInscatteringColor
struct FSetFogInscatteringColor
{
	struct FLinearColor Value;  // 0x0 (0x0)


}; 
 
 // Function Engine.DirectionalLightComponent.SetLightSourceAngle
struct FSetLightSourceAngle
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimInstance.Montage_IsPlaying
struct FMontage_IsPlaying
{
	struct UAnimMontage* Montage;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // ScriptStruct Engine.CustomProfile
struct FCustomProfile
{
	struct FName Name;  // 0x0 (0x0)
	struct TArray<struct FResponseChannel> CustomResponses;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.ActorInstanceData
// Size: 0x60(Inherited: 0x58)
struct FActorInstanceData : FInstanceCacheDataBase
{
	AActor* ActorClass;  // 0x58 (0x58)


}; 
 
 // ScriptStruct Engine.BoneMirrorExport
struct FBoneMirrorExport
{
	struct FName BoneName;  // 0x0 (0x0)
	struct FName SourceBoneName;  // 0x8 (0x8)
	enum class EAxis BoneFlipAxis;  // 0x10 (0x10)
	char pad_17[3];  // 0x11 (0x11)


}; 
 
 // ScriptStruct Engine.CharacterMovementComponentPrePhysicsTickFunction
// Size: 0x30(Inherited: 0x28)
struct FCharacterMovementComponentPrePhysicsTickFunction : FTickFunction
{
	char pad_40[8];  // 0x28 (0x28)


}; 
 
 // ScriptStruct Engine.ChildActorAttachedActorInfo
struct FChildActorAttachedActorInfo
{
	struct TWeakObjectPtr<AActor> Actor;  // 0x0 (0x0)
	struct FName SocketName;  // 0x8 (0x8)
	struct FTransform RelativeTransform;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.CachedKeyToActionInfo
struct FCachedKeyToActionInfo
{
	struct TWeakObjectPtr<UPlayerInput> PlayerInput;  // 0x0 (0x0)
	char pad_8[104];  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.LODMappingData
struct FLODMappingData
{
	struct TArray<int32_t> Mapping;  // 0x0 (0x0)
	struct TArray<int32_t> InverseMapping;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.EngineShowFlagsSetting
struct FEngineShowFlagsSetting
{
	struct FString ShowFlagName;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool Enabled : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.KismetMathLibrary.Percent_FloatFloat
struct FPercent_FloatFloat
{
	double A;  // 0x0 (0x0)
	double B;  // 0x8 (0x8)
	double ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.SplineComponent.GetTangentAtTime
struct FGetTangentAtTime
{
	float Time;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x4 (0x4)
	char pad_5_1 : 7;  // 0x5 (0x5)
	bool bUseConstantVelocity : 1;  // 0x5 (0x5)
	char pad_6[2];  // 0x6 (0x6)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.SkeletalMeshComponentEndPhysicsTickFunction
// Size: 0x30(Inherited: 0x28)
struct FSkeletalMeshComponentEndPhysicsTickFunction : FTickFunction
{
	char pad_40[8];  // 0x28 (0x28)


}; 
 
 // Function Engine.CharacterMovementComponent.K2_GetWalkableFloorZ
struct FK2_GetWalkableFloorZ
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.SkeletalMeshComponentClothTickFunction
// Size: 0x30(Inherited: 0x28)
struct FSkeletalMeshComponentClothTickFunction : FTickFunction
{
	char pad_40[8];  // 0x28 (0x28)


}; 
 
 // Function Engine.SoundSubmix.StartEnvelopeFollowing
struct FStartEnvelopeFollowing
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.FInterpEaseInOut
struct FFInterpEaseInOut
{
	double A;  // 0x0 (0x0)
	double B;  // 0x8 (0x8)
	double Alpha;  // 0x10 (0x10)
	double Exponent;  // 0x18 (0x18)
	double ReturnValue;  // 0x20 (0x20)


}; 
 
 // ScriptStruct Engine.TentDistribution
struct FTentDistribution
{
	float TipAltitude;  // 0x0 (0x0)
	float TipValue;  // 0x4 (0x4)
	float Width;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.SplineMeshParams
struct FSplineMeshParams
{
	struct FVector StartPos;  // 0x0 (0x0)
	struct FVector StartTangent;  // 0x18 (0x18)
	struct FVector2D StartScale;  // 0x30 (0x30)
	float StartRoll;  // 0x40 (0x40)
	char pad_68[4];  // 0x44 (0x44)
	struct FVector2D StartOffset;  // 0x48 (0x48)
	struct FVector EndPos;  // 0x58 (0x58)
	struct FVector2D EndScale;  // 0x70 (0x70)
	struct FVector EndTangent;  // 0x80 (0x80)
	float EndRoll;  // 0x98 (0x98)
	char pad_156[4];  // 0x9C (0x9C)
	struct FVector2D EndOffset;  // 0xA0 (0xA0)


}; 
 
 // Function Engine.SkeletalMeshComponent.IsClothingSimulationSuspended
struct FIsClothingSimulationSuspended
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameplayStatics.PlayDialogueAtLocation
struct FPlayDialogueAtLocation
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct UDialogueWave* Dialogue;  // 0x8 (0x8)
	struct FDialogueContext Context;  // 0x10 (0x10)
	struct FVector Location;  // 0x28 (0x28)
	struct FRotator Rotation;  // 0x40 (0x40)
	float VolumeMultiplier;  // 0x58 (0x58)
	float PitchMultiplier;  // 0x5C (0x5C)
	float StartTime;  // 0x60 (0x60)
	char pad_100[4];  // 0x64 (0x64)
	struct USoundAttenuation* AttenuationSettings;  // 0x68 (0x68)


}; 
 
 // ScriptStruct Engine.SplineMeshInstanceData
// Size: 0x1D0(Inherited: 0x170)
struct FSplineMeshInstanceData : FStaticMeshComponentInstanceData
{
	struct FVector StartPos;  // 0x168 (0x168)
	struct FVector EndPos;  // 0x180 (0x180)
	struct FVector StartTangent;  // 0x198 (0x198)
	struct FVector EndTangent;  // 0x1B0 (0x1B0)


}; 
 
 // ScriptStruct Engine.StaticMeshComponentLODInfo
struct FStaticMeshComponentLODInfo
{
	char pad_0[144];  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.FieldCookedMetaDataStore
struct FFieldCookedMetaDataStore
{
	struct TMap<struct FName, struct FString> FieldMetaData;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkinnedMeshComponent.SetMeshDeformer
struct FSetMeshDeformer
{
	struct UMeshDeformer* InMeshDeformer;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.StructCookedMetaDataStore
struct FStructCookedMetaDataStore
{
	struct FObjectCookedMetaDataStore ObjectMetaData;  // 0x0 (0x0)
	struct TMap<struct FName, struct FFieldCookedMetaDataStore> PropertiesMetaData;  // 0x50 (0x50)


}; 
 
 // ScriptStruct Engine.ClientReceiveData
struct FClientReceiveData
{
	struct APlayerController* LocalPC;  // 0x0 (0x0)
	struct FName MessageType;  // 0x8 (0x8)
	int32_t MessageIndex;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)
	struct FString MessageString;  // 0x18 (0x18)
	struct APlayerState* RelatedPlayerState_2;  // 0x28 (0x28)
	struct APlayerState* RelatedPlayerState_3;  // 0x30 (0x30)
	struct UObject* OptionalObject;  // 0x38 (0x38)


}; 
 
 // Function Engine.ExponentialHeightFogComponent.SetFogCutoffDistance
struct FSetFogCutoffDistance
{
	float Value;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.GetMonth
struct FGetMonth
{
	struct FDateTime A;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // ScriptStruct Engine.CullDistanceSizePair
struct FCullDistanceSizePair
{
	float Size;  // 0x0 (0x0)
	float CullDistance;  // 0x4 (0x4)


}; 
 
 // Function Engine.ExponentialHeightFogComponent.SetFogDensity
struct FSetFogDensity
{
	float Value;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.CurveAtlasColorAdjustments
struct FCurveAtlasColorAdjustments
{
	char bChromaKeyTexture : 1;  // 0x0 (0x0)
	char pad_0_1 : 7;  // 0x0 (0x0)
	char pad_1[4];  // 0x1 (0x1)
	float AdjustBrightness;  // 0x4 (0x4)
	float AdjustBrightnessCurve;  // 0x8 (0x8)
	float AdjustVibrance;  // 0xC (0xC)
	float AdjustSaturation;  // 0x10 (0x10)
	float AdjustRGBCurve;  // 0x14 (0x14)
	float AdjustHue;  // 0x18 (0x18)
	float AdjustMinAlpha;  // 0x1C (0x1C)
	float AdjustMaxAlpha;  // 0x20 (0x20)


}; 
 
 // ScriptStruct Engine.RuntimeVectorCurve
struct FRuntimeVectorCurve
{
	struct FRichCurve VectorCurves[3];  // 0x0 (0x0)
	struct UCurveVector* ExternalCurve;  // 0x180 (0x180)


}; 
 
 // Function Engine.KismetMathLibrary.NotEqual_IntPointIntPoint
struct FNotEqual_IntPointIntPoint
{
	struct FIntPoint A;  // 0x0 (0x0)
	struct FIntPoint B;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[3];  // 0x11 (0x11)


}; 
 
 // ScriptStruct Engine.NameCurveKey
struct FNameCurveKey
{
	float Time;  // 0x0 (0x0)
	struct FName Value;  // 0x4 (0x4)


}; 
 
 // Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInDegrees
struct FRandomUnitVectorInEllipticalConeInDegrees
{
	struct FVector ConeDir;  // 0x0 (0x0)
	float MaxYawInDegrees;  // 0x18 (0x18)
	float MaxPitchInDegrees;  // 0x1C (0x1C)
	struct FVector ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.DataLayerSubsystem.GetDataLayerInstanceEffectiveRuntimeState
struct FGetDataLayerInstanceEffectiveRuntimeState
{
	struct UDataLayerAsset* InDataLayerAsset;  // 0x0 (0x0)
	uint8_t ReturnValue;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.ExponentialHeightFogComponent.SetNonDirectionalInscatteringColorDistance
struct FSetNonDirectionalInscatteringColorDistance
{
	float Value;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineComponent.GetTransformAtDistanceAlongSpline
struct FGetTransformAtDistanceAlongSpline
{
	float Distance;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x4 (0x4)
	char pad_5_1 : 7;  // 0x5 (0x5)
	bool bUseScale : 1;  // 0x5 (0x5)
	char pad_6[10];  // 0x6 (0x6)
	struct FTransform ReturnValue;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.NameCurve
// Size: 0x78(Inherited: 0x68)
struct FNameCurve : FIndexedCurve
{
	struct TArray<struct FNameCurveKey> Keys;  // 0x68 (0x68)


}; 
 
 // Function Engine.KismetMathLibrary.Set2D
struct FSet2D
{
	struct FVector2D A;  // 0x0 (0x0)
	double X;  // 0x10 (0x10)
	double Y;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetMathLibrary.Divide_LinearColorLinearColor
struct FDivide_LinearColorLinearColor
{
	struct FLinearColor A;  // 0x0 (0x0)
	struct FLinearColor B;  // 0x10 (0x10)
	struct FLinearColor ReturnValue;  // 0x20 (0x20)


}; 
 
 // ScriptStruct Engine.SimpleCurve
// Size: 0x88(Inherited: 0x70)
struct FSimpleCurve : FRealCurve
{
	enum class ERichCurveInterpMode InterpMode;  // 0x70 (0x70)
	char pad_113[7];  // 0x71 (0x71)
	struct TArray<struct FSimpleCurveKey> Keys;  // 0x78 (0x78)


}; 
 
 // Function Engine.AnimationDataController.CloseBracket
struct FCloseBracket
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bShouldTransact : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineComponent.SetScaleAtSplinePoint
struct FSetScaleAtSplinePoint
{
	int32_t PointIndex;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector InScaleVector;  // 0x8 (0x8)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool bUpdateSpline : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.GameplayStatics.GetRealTimeSeconds
struct FGetRealTimeSeconds
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	double ReturnValue;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.StringCurve
// Size: 0x88(Inherited: 0x68)
struct FStringCurve : FIndexedCurve
{
	struct FString DefaultValue;  // 0x68 (0x68)
	struct TArray<struct FStringCurveKey> Keys;  // 0x78 (0x78)


}; 
 
 // Function Engine.GameUserSettings.GetCurrentHDRDisplayNits
struct FGetCurrentHDRDisplayNits
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.HSVToRGB_Vector
struct FHSVToRGB_Vector
{
	struct FLinearColor HSV;  // 0x0 (0x0)
	struct FLinearColor RGB;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.NegateRotator
struct FNegateRotator
{
	struct FRotator A;  // 0x0 (0x0)
	struct FRotator ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetStringLibrary.Concat_StrStr
struct FConcat_StrStr
{
	struct FString A;  // 0x0 (0x0)
	struct FString B;  // 0x10 (0x10)
	struct FString ReturnValue;  // 0x20 (0x20)


}; 
 
 // ScriptStruct Engine.DebugCameraControllerSettingsViewModeIndex
struct FDebugCameraControllerSettingsViewModeIndex
{
	char pad_0[8];  // 0x0 (0x0)
	enum class EViewModeIndex ViewModeIndex;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // ScriptStruct Engine.DPMatchingIfCondition
struct FDPMatchingIfCondition
{
	struct FName Operator;  // 0x0 (0x0)
	struct FString Arg1;  // 0x8 (0x8)
	struct FString Arg2;  // 0x18 (0x18)


}; 
 
 // Function Engine.TextRenderComponent.SetFont
struct FSetFont
{
	struct UFont* Value;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.DPMatchingRulestructA
// Size: 0x68(Inherited: 0x48)
struct FDPMatchingRulestructA : FDPMatchingRulestructBase
{
	struct TArray<struct FDPMatchingRulestructBase> OnTrue;  // 0x48 (0x48)
	struct TArray<struct FDPMatchingRulestructBase> OnFalse;  // 0x58 (0x58)


}; 
 
 // ScriptStruct Engine.DPMatchingRulestructB
// Size: 0x68(Inherited: 0x48)
struct FDPMatchingRulestructB : FDPMatchingRulestructBase
{
	struct TArray<struct FDPMatchingRulestructA> OnTrue;  // 0x48 (0x48)
	struct TArray<struct FDPMatchingRulestructA> OnFalse;  // 0x58 (0x58)


}; 
 
 // Function Engine.BlueprintTypeConversions.ConvertFTransform3dToFTransform3f
struct FConvertFTransform3dToFTransform3f
{
	int32_t InFromData;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x4 (0x4)


}; 
 
 // ScriptStruct Engine.DPMatchingRulestructC
// Size: 0x68(Inherited: 0x48)
struct FDPMatchingRulestructC : FDPMatchingRulestructBase
{
	struct TArray<struct FDPMatchingRulestructB> OnTrue;  // 0x48 (0x48)
	struct TArray<struct FDPMatchingRulestructB> OnFalse;  // 0x58 (0x58)


}; 
 
 // Function Engine.CameraModifier.BlueprintModifyPostProcess
struct FBlueprintModifyPostProcess
{
	float DeltaTime;  // 0x0 (0x0)
	float PostProcessBlendWeight;  // 0x4 (0x4)
	char pad_8[8];  // 0x8 (0x8)
	struct FPostProcessSettings PostProcessSettings;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.LinearColor_SetFromHSV
struct FLinearColor_SetFromHSV
{
	struct FLinearColor InOutColor;  // 0x0 (0x0)
	float H;  // 0x10 (0x10)
	float S;  // 0x14 (0x14)
	float V;  // 0x18 (0x18)
	float A;  // 0x1C (0x1C)


}; 
 
 // ScriptStruct Engine.DPMatchingRulestructE
// Size: 0x68(Inherited: 0x48)
struct FDPMatchingRulestructE : FDPMatchingRulestructBase
{
	struct TArray<struct FDPMatchingRulestructD> OnTrue;  // 0x48 (0x48)
	struct TArray<struct FDPMatchingRulestructD> OnFalse;  // 0x58 (0x58)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_Vector2DToIntPoint
struct FConv_Vector2DToIntPoint
{
	struct FVector2D InVector2D;  // 0x0 (0x0)
	struct FIntPoint ReturnValue;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.DialogueContext
struct FDialogueContext
{
	struct UDialogueVoice* Speaker;  // 0x0 (0x0)
	struct TArray<struct UDialogueVoice*> Targets;  // 0x8 (0x8)


}; 
 
 // Function Engine.SkeletalMeshComponent.SetAllowedAnimCurvesEvaluation
struct FSetAllowedAnimCurvesEvaluation
{
	struct TArray<struct FName> List;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool bAllow : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.KismetMathLibrary.FindNearestPointsOnLineSegments
struct FFindNearestPointsOnLineSegments
{
	struct FVector Segment1Start;  // 0x0 (0x0)
	struct FVector Segment1End;  // 0x18 (0x18)
	struct FVector Segment2Start;  // 0x30 (0x30)
	struct FVector Segment2End;  // 0x48 (0x48)
	struct FVector Segment1Point;  // 0x60 (0x60)
	struct FVector Segment2Point;  // 0x78 (0x78)


}; 
 
 // Function Engine.DataLayerSubsystem.GetDataLayerEffectiveRuntimeState
struct FGetDataLayerEffectiveRuntimeState
{
	struct FActorDataLayer InDataLayer;  // 0x0 (0x0)
	uint8_t ReturnValue;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // ScriptStruct Engine.DialogueContextMapping
struct FDialogueContextMapping
{
	struct FDialogueContext Context;  // 0x0 (0x0)
	struct USoundWave* SoundWave;  // 0x18 (0x18)
	struct FString LocalizationKeyFormat;  // 0x20 (0x20)
	struct UDialogueSoundWaveProxy* Proxy;  // 0x30 (0x30)


}; 
 
 // Function Engine.PlayerState.IsOnlyASpectator
struct FIsOnlyASpectator
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.TypedElementDeletionOptions
struct FTypedElementDeletionOptions
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bVerifyDeletionCanHappen : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool bWarnAboutReferences : 1;  // 0x1 (0x1)
	char pad_2_1 : 7;  // 0x2 (0x2)
	bool bWarnAboutSoftReferences : 1;  // 0x2 (0x2)


}; 
 
 // ScriptStruct Engine.RadialDamageEvent
// Size: 0x50(Inherited: 0x10)
struct FRadialDamageEvent : FDamageEvent
{
	struct FRadialDamageParams Params;  // 0x10 (0x10)
	char pad_36[4];  // 0x24 (0x24)
	struct FVector Origin;  // 0x28 (0x28)
	struct TArray<struct FHitResult> ComponentHits;  // 0x40 (0x40)


}; 
 
 // Function Engine.AsyncPhysicsInputComponent.GetDataToWrite
struct FGetDataToWrite
{
	struct UAsyncPhysicsData* ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.RigidBodyState
struct FRigidBodyState
{
	struct FVector_NetQuantize100 Position;  // 0x0 (0x0)
	char pad_24[8];  // 0x18 (0x18)
	struct FQuat Quaternion;  // 0x20 (0x20)
	struct FVector_NetQuantize100 LinVel;  // 0x40 (0x40)
	struct FVector_NetQuantize100 AngVel;  // 0x58 (0x58)
	char Flags;  // 0x70 (0x70)
	char pad_113[15];  // 0x71 (0x71)


}; 
 
 // Function Engine.GameUserSettings.RunHardwareBenchmark
struct FRunHardwareBenchmark
{
	int32_t WorkScale;  // 0x0 (0x0)
	float CPUMultiplier;  // 0x4 (0x4)
	float GPUMultiplier;  // 0x8 (0x8)


}; 
 
 // Function Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstanceByTag
struct FGetLinkedAnimGraphInstanceByTag
{
	struct FName InTag;  // 0x0 (0x0)
	struct UAnimInstance* ReturnValue;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.ForceFeedbackChannelDetails
struct FForceFeedbackChannelDetails
{
	char bAffectsLeftLarge : 1;  // 0x0 (0x0)
	char bAffectsLeftSmall : 1;  // 0x0 (0x0)
	char bAffectsRightLarge : 1;  // 0x0 (0x0)
	char bAffectsRightSmall : 1;  // 0x0 (0x0)
	char pad_0_1 : 4;  // 0x0 (0x0)
	char pad_1[8];  // 0x1 (0x1)
	struct FRuntimeFloatCurve Curve;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.ActiveForceFeedbackEffect
struct FActiveForceFeedbackEffect
{
	struct UForceFeedbackEffect* ForceFeedbackEffect;  // 0x0 (0x0)
	char pad_8[16];  // 0x8 (0x8)


}; 
 
 // Function Engine.SoundWave.GetSoundAssetCompressionType
struct FGetSoundAssetCompressionType
{
	uint8_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Quat_Rotator
struct FQuat_Rotator
{
	struct FQuat Q;  // 0x0 (0x0)
	struct FRotator ReturnValue;  // 0x20 (0x20)
	char pad_56[8];  // 0x38 (0x38)


}; 
 
 // ScriptStruct Engine.RootMotionSourceStatus
struct FRootMotionSourceStatus
{
	char Flags;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.RootMotionFinishVelocitySettings
struct FRootMotionFinishVelocitySettings
{
	uint8_t Mode;  // 0x0 (0x0)
	char pad_1[7];  // 0x1 (0x1)
	struct FVector SetVelocity;  // 0x8 (0x8)
	float ClampVelocity;  // 0x20 (0x20)
	char pad_36[4];  // 0x24 (0x24)


}; 
 
 // ScriptStruct Engine.RootMotionSource
struct FRootMotionSource
{
	char pad_0[16];  // 0x0 (0x0)
	uint16_t Priority;  // 0x10 (0x10)
	uint16_t LocalID;  // 0x12 (0x12)
	uint8_t AccumulateMode;  // 0x14 (0x14)
	char pad_21[3];  // 0x15 (0x15)
	struct FName InstanceName;  // 0x18 (0x18)
	float StartTime;  // 0x20 (0x20)
	float CurrentTime;  // 0x24 (0x24)
	float PreviousTime;  // 0x28 (0x28)
	float Duration;  // 0x2C (0x2C)
	struct FRootMotionSourceStatus Status;  // 0x30 (0x30)
	struct FRootMotionSourceSettings Settings;  // 0x31 (0x31)
	char pad_50_1 : 7;  // 0x32 (0x32)
	bool bInLocalSpace : 1;  // 0x32 (0x32)
	char pad_51[13];  // 0x33 (0x33)
	struct FRootMotionMovementParams RootMotionParams;  // 0x40 (0x40)
	struct FRootMotionFinishVelocitySettings FinishVelocityParams;  // 0xB0 (0xB0)
	char pad_216[8];  // 0xD8 (0xD8)


}; 
 
 // ScriptStruct Engine.RootMotionSource_ConstantForce
// Size: 0x100(Inherited: 0xE0)
struct FRootMotionSource_ConstantForce : FRootMotionSource
{
	struct FVector Force;  // 0xD8 (0xD8)
	struct UCurveFloat* StrengthOverTime;  // 0xF0 (0xF0)


}; 
 
 // ScriptStruct Engine.RootMotionSource_RadialForce
// Size: 0x140(Inherited: 0xE0)
struct FRootMotionSource_RadialForce : FRootMotionSource
{
	struct FVector Location;  // 0xD8 (0xD8)
	struct AActor* LocationActor;  // 0xF0 (0xF0)
	float Radius;  // 0xF8 (0xF8)
	float Strength;  // 0xFC (0xFC)
	char pad_264_1 : 7;  // 0x108 (0x108)
	bool bIsPush : 1;  // 0x100 (0x100)
	char pad_265_1 : 7;  // 0x109 (0x109)
	bool bNoZForce : 1;  // 0x101 (0x101)
	struct UCurveFloat* StrengthDistanceFalloff;  // 0x108 (0x108)
	struct UCurveFloat* StrengthOverTime;  // 0x110 (0x110)
	char pad_282_1 : 7;  // 0x11A (0x11A)
	bool bUseFixedWorldDirection : 1;  // 0x118 (0x118)
	char pad_283[5];  // 0x11B (0x11B)
	struct FRotator FixedWorldDirection;  // 0x120 (0x120)
	char pad_312[8];  // 0x138 (0x138)


}; 
 
 // Function Engine.AnimInstance.Montage_StopGroupByName
struct FMontage_StopGroupByName
{
	float InBlendOutTime;  // 0x0 (0x0)
	struct FName GroupName;  // 0x4 (0x4)


}; 
 
 // Function Engine.WindDirectionalSourceComponent.SetRadius
struct FSetRadius
{
	float InNewRadius;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.RootMotionSource_MoveToForce
// Size: 0x120(Inherited: 0xE0)
struct FRootMotionSource_MoveToForce : FRootMotionSource
{
	struct FVector StartLocation;  // 0xD8 (0xD8)
	struct FVector TargetLocation;  // 0xF0 (0xF0)
	char pad_272_1 : 7;  // 0x110 (0x110)
	bool bRestrictSpeedToExpected : 1;  // 0x108 (0x108)
	struct UCurveVector* PathOffsetCurve;  // 0x110 (0x110)
	char pad_281[7];  // 0x119 (0x119)


}; 
 
 // ScriptStruct Engine.RootMotionSource_JumpForce
// Size: 0x130(Inherited: 0xE0)
struct FRootMotionSource_JumpForce : FRootMotionSource
{
	struct FRotator Rotation;  // 0xD8 (0xD8)
	float Distance;  // 0xF0 (0xF0)
	float Height;  // 0xF4 (0xF4)
	char pad_256_1 : 7;  // 0x100 (0x100)
	bool bDisableTimeout : 1;  // 0xF8 (0xF8)
	struct UCurveVector* PathOffsetCurve;  // 0x100 (0x100)
	struct UCurveFloat* TimeMappingCurve;  // 0x108 (0x108)
	char pad_273[31];  // 0x111 (0x111)


}; 
 
 // Function Engine.GameUserSettings.SetVSyncEnabled
struct FSetVSyncEnabled
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bEnable : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetArrayLibrary.Array_LastIndex
struct FArray_LastIndex
{
	struct TArray<int32_t> TargetArray;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)


}; 
 
 // Function Engine.GameUserSettings.SetFullscreenMode
struct FSetFullscreenMode
{
	enum class EWindowMode InFullscreenMode;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.TouchInputControl
struct FTouchInputControl
{
	struct UTexture2D* Image1;  // 0x0 (0x0)
	struct UTexture2D* Image2;  // 0x8 (0x8)
	struct FVector2D Center;  // 0x10 (0x10)
	struct FVector2D VisualSize;  // 0x20 (0x20)
	struct FVector2D ThumbSize;  // 0x30 (0x30)
	struct FVector2D InteractionSize;  // 0x40 (0x40)
	struct FVector2D InputScale;  // 0x50 (0x50)
	struct FKey MainInputKey;  // 0x60 (0x60)
	struct FKey AltInputKey;  // 0x78 (0x78)


}; 
 
 // ScriptStruct Engine.LevelCollection
struct FLevelCollection
{
	char pad_0[8];  // 0x0 (0x0)
	struct AGameStateBase* GameState;  // 0x8 (0x8)
	struct UNetDriver* NetDriver;  // 0x10 (0x10)
	struct UDemoNetDriver* DemoNetDriver;  // 0x18 (0x18)
	struct ULevel* PersistentLevel;  // 0x20 (0x20)
	struct TSet<struct ULevel*> Levels;  // 0x28 (0x28)


}; 
 
 // ScriptStruct Engine.NetLevelVisibilityTransactionId
struct FNetLevelVisibilityTransactionId
{
	uint32_t Data;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Transform_Determinant
struct FTransform_Determinant
{
	struct FTransform Transform;  // 0x0 (0x0)
	float ReturnValue;  // 0x60 (0x60)
	char pad_100[12];  // 0x64 (0x64)


}; 
 
 // ScriptStruct Engine.UpdateLevelVisibilityLevelInfo
struct FUpdateLevelVisibilityLevelInfo
{
	struct FName PackageName;  // 0x0 (0x0)
	struct FName Filename;  // 0x8 (0x8)
	struct FNetLevelVisibilityTransactionId VisibilityRequestId;  // 0x10 (0x10)
	char bIsVisible : 1;  // 0x14 (0x14)
	char bTryMakeVisible : 1;  // 0x14 (0x14)
	char pad_20_1 : 6;  // 0x14 (0x14)
	char pad_21[4];  // 0x15 (0x15)


}; 
 
 // Function Engine.Pawn.IsBotControlled
struct FIsBotControlled
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.ComponentKey
struct FComponentKey
{
	 OwnerClass;  // 0x0 (0x0)
	struct FName SCSVariableName;  // 0x8 (0x8)
	struct FGuid AssociatedGuid;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.BlueprintInputActionDelegateBinding
// Size: 0x18(Inherited: 0x4)
struct FBlueprintInputActionDelegateBinding : FBlueprintInputDelegateBinding
{
	struct FName InputActionName;  // 0x4 (0x4)
	enum class EInputEvent InputKeyEvent;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)
	struct FName FunctionNameToBind;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.Matrix_GetOrigin
struct FMatrix_GetOrigin
{
	struct FMatrix InMatrix;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x80 (0x80)
	char pad_152[8];  // 0x98 (0x98)


}; 
 
 // Function Engine.AnimationSettings.GetBoneCustomAttributeNamesToImport
struct FGetBoneCustomAttributeNamesToImport
{
	struct TArray<struct FString> ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.BlueprintInputAxisDelegateBinding
// Size: 0x14(Inherited: 0x4)
struct FBlueprintInputAxisDelegateBinding : FBlueprintInputDelegateBinding
{
	struct FName InputAxisName;  // 0x4 (0x4)
	struct FName FunctionNameToBind;  // 0xC (0xC)


}; 
 
 // Function Engine.GameUserSettings.GetDefaultResolutionScale
struct FGetDefaultResolutionScale
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.RGBToHSV_Vector
struct FRGBToHSV_Vector
{
	struct FLinearColor RGB;  // 0x0 (0x0)
	struct FLinearColor HSV;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.BlueprintInputTouchDelegateBinding
// Size: 0x10(Inherited: 0x4)
struct FBlueprintInputTouchDelegateBinding : FBlueprintInputDelegateBinding
{
	enum class EInputEvent InputKeyEvent;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)
	struct FName FunctionNameToBind;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.ISMClientData
struct FISMClientData
{
	struct TArray<struct FISMClientInstance> Instances;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMeshComponent.SetDisablePostProcessBlueprint
struct FSetDisablePostProcessBlueprint
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bInDisablePostProcess : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMeshComponent.SetSkeletalMeshAsset
struct FSetSkeletalMeshAsset
{
	struct USkeletalMesh* NewMesh;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimInstance.GetCurrentActiveMontage
struct FGetCurrentActiveMontage
{
	struct UAnimMontage* ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.ISMComponentData
struct FISMComponentData
{
	char pad_0[1];  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineComponent.GetLocationAtTime
struct FGetLocationAtTime
{
	float Time;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x4 (0x4)
	char pad_5_1 : 7;  // 0x5 (0x5)
	bool bUseConstantVelocity : 1;  // 0x5 (0x5)
	char pad_6[2];  // 0x6 (0x6)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.SlateModifierKeysState
struct FSlateModifierKeysState
{
	char ModifierKeysStateMask;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.LatentActionManager
struct FLatentActionManager
{
	char pad_0[96];  // 0x0 (0x0)


}; 
 
 // Function Engine.Pawn.AddMovementInput
struct FAddMovementInput
{
	struct FVector WorldDirection;  // 0x0 (0x0)
	float ScaleValue;  // 0x18 (0x18)
	char pad_28_1 : 7;  // 0x1C (0x1C)
	bool bForce : 1;  // 0x1C (0x1C)
	char pad_29[3];  // 0x1D (0x1D)


}; 
 
 // Function Engine.KismetMathLibrary.ClampInt64
struct FClampInt64
{
	int64_t Value;  // 0x0 (0x0)
	int64_t Min;  // 0x8 (0x8)
	int64_t Max;  // 0x10 (0x10)
	int64_t ReturnValue;  // 0x18 (0x18)


}; 
 
 // ScriptStruct Engine.StreamableTextureInstance
struct FStreamableTextureInstance
{
	char pad_0[72];  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.DynamicTextureInstance
// Size: 0x58(Inherited: 0x48)
struct FDynamicTextureInstance : FStreamableTextureInstance
{
	struct UTexture2D* Texture;  // 0x48 (0x48)
	char pad_80_1 : 7;  // 0x50 (0x50)
	bool bAttached : 1;  // 0x50 (0x50)
	char pad_81[3];  // 0x51 (0x51)
	float OriginalRadius;  // 0x54 (0x54)


}; 
 
 // Function Engine.GameplayStatics.GetNumLocalPlayerControllers
struct FGetNumLocalPlayerControllers
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // ScriptStruct Engine.HLODInstancingKey
struct FHLODInstancingKey
{
	struct UStaticMesh* StaticMesh;  // 0x0 (0x0)
	struct UMaterialInterface* Material;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.MaterialFunctionInfo
struct FMaterialFunctionInfo
{
	struct FGuid StateId;  // 0x0 (0x0)
	struct UMaterialFunctionInterface* Function;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.MaterialCachedParameterEntry
struct FMaterialCachedParameterEntry
{
	struct TSet<struct FMaterialParameterInfo> ParameterInfoSet;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.MaterialCachedParameterEditorEntry
struct FMaterialCachedParameterEditorEntry
{
	struct TArray<struct FMaterialCachedParameterEditorInfo> EditorInfo;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.MaterialCachedExpressionEditorOnlyData
struct FMaterialCachedExpressionEditorOnlyData
{
	struct FMaterialCachedParameterEntry EditorOnlyEntries[2];  // 0x0 (0x0)
	struct FMaterialCachedParameterEditorEntry EditorEntries[8];  // 0xA0 (0xA0)
	struct TArray<bool> StaticSwitchValues;  // 0x120 (0x120)
	struct TArray<struct FStaticComponentMaskValue> StaticComponentMaskValues;  // 0x130 (0x130)
	struct TArray<struct FVector2D> ScalarMinMaxValues;  // 0x140 (0x140)
	struct TArray<struct TSoftObjectPtr<UCurveLinearColor>> ScalarCurveValues;  // 0x150 (0x150)
	struct TArray<struct TSoftObjectPtr<UCurveLinearColorAtlas>> ScalarCurveAtlasValues;  // 0x160 (0x160)
	struct TArray<struct FParameterChannelNames> VectorChannelNameValues;  // 0x170 (0x170)
	struct TArray<bool> VectorUsedAsChannelMaskValues;  // 0x180 (0x180)
	struct TArray<struct FParameterChannelNames> TextureChannelNameValues;  // 0x190 (0x190)
	struct FMaterialLayersFunctionsEditorOnlyData MaterialLayers;  // 0x1A0 (0x1A0)
	struct TArray<struct FString> AssetPaths;  // 0x210 (0x210)
	struct TArray<struct FName> LandscapeLayerNames;  // 0x220 (0x220)


}; 
 
 // ScriptStruct Engine.MaterialCachedExpressionData
struct FMaterialCachedExpressionData
{
	struct FMaterialCachedParameterEntry RuntimeEntries[6];  // 0x0 (0x0)
	struct TArray<int32_t> ScalarPrimitiveDataIndexValues;  // 0x1E0 (0x1E0)
	struct TArray<int32_t> VectorPrimitiveDataIndexValues;  // 0x1F0 (0x1F0)
	struct TArray<float> ScalarValues;  // 0x200 (0x200)
	struct TArray<struct FLinearColor> VectorValues;  // 0x210 (0x210)
	struct TArray<struct FVector4d> DoubleVectorValues;  // 0x220 (0x220)
	struct TArray<struct TSoftObjectPtr<UTexture>> TextureValues;  // 0x230 (0x230)
	struct TArray<struct TSoftObjectPtr<UFont>> FontValues;  // 0x240 (0x240)
	struct TArray<int32_t> FontPageValues;  // 0x250 (0x250)
	struct TArray<struct TSoftObjectPtr<URuntimeVirtualTexture>> RuntimeVirtualTextureValues;  // 0x260 (0x260)
	struct TArray<struct UObject*> ReferencedTextures;  // 0x270 (0x270)
	struct TArray<struct FMaterialFunctionInfo> FunctionInfos;  // 0x280 (0x280)
	struct TArray<struct FMaterialParameterCollectionInfo> ParameterCollectionInfos;  // 0x290 (0x290)
	struct TArray<struct ULandscapeGrassType*> GrassTypes;  // 0x2A0 (0x2A0)
	struct FMaterialLayersFunctionsRuntimeData MaterialLayers;  // 0x2B0 (0x2B0)
	struct TArray<struct FName> DynamicParameterNames;  // 0x2D0 (0x2D0)
	struct TArray<bool> QualityLevelsUsed;  // 0x2E0 (0x2E0)
	char bHasMaterialLayers : 1;  // 0x2F0 (0x2F0)
	char bHasRuntimeVirtualTextureOutput : 1;  // 0x2F0 (0x2F0)
	char bHasSceneColor : 1;  // 0x2F0 (0x2F0)
	char bHasPerInstanceCustomData : 1;  // 0x2F0 (0x2F0)
	char bHasPerInstanceRandom : 1;  // 0x2F0 (0x2F0)
	char bHasVertexInterpolator : 1;  // 0x2F0 (0x2F0)
	char pad_752_1 : 2;  // 0x2F0 (0x2F0)
	char pad_753[4];  // 0x2F1 (0x2F1)
	uint32_t PropertyConnectedBitmask;  // 0x2F4 (0x2F4)


}; 
 
 // Function Engine.Exporter.RunAssetExportTask
struct FRunAssetExportTask
{
	struct UAssetExportTask* Task;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // ScriptStruct Engine.ScalarParameterValue
struct FScalarParameterValue
{
	struct FMaterialParameterInfo ParameterInfo;  // 0x0 (0x0)
	float ParameterValue;  // 0x10 (0x10)
	struct FGuid ExpressionGUID;  // 0x14 (0x14)


}; 
 
 // ScriptStruct Engine.DoubleVectorParameterValue
struct FDoubleVectorParameterValue
{
	struct FMaterialParameterInfo ParameterInfo;  // 0x0 (0x0)
	struct FVector4d ParameterValue;  // 0x10 (0x10)
	struct FGuid ExpressionGUID;  // 0x30 (0x30)


}; 
 
 // ScriptStruct Engine.TextureParameterValue
struct FTextureParameterValue
{
	struct FMaterialParameterInfo ParameterInfo;  // 0x0 (0x0)
	struct UTexture* ParameterValue;  // 0x10 (0x10)
	struct FGuid ExpressionGUID;  // 0x18 (0x18)


}; 
 
 // Function Engine.SkeletalMesh.GetSocketByIndex
struct FGetSocketByIndex
{
	int32_t Index;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct USkeletalMeshSocket* ReturnValue;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.RuntimeVirtualTextureParameterValue
struct FRuntimeVirtualTextureParameterValue
{
	struct FMaterialParameterInfo ParameterInfo;  // 0x0 (0x0)
	struct URuntimeVirtualTexture* ParameterValue;  // 0x10 (0x10)
	struct FGuid ExpressionGUID;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetMathLibrary.EqualExactly_Vector4Vector4
struct FEqualExactly_Vector4Vector4
{
	struct FVector4 A;  // 0x0 (0x0)
	struct FVector4 B;  // 0x20 (0x20)
	char pad_64_1 : 7;  // 0x40 (0x40)
	bool ReturnValue : 1;  // 0x40 (0x40)
	char pad_65[15];  // 0x41 (0x41)


}; 
 
 // ScriptStruct Engine.FontParameterValue
struct FFontParameterValue
{
	struct FMaterialParameterInfo ParameterInfo;  // 0x0 (0x0)
	struct UFont* FontValue;  // 0x10 (0x10)
	int32_t FontPage;  // 0x18 (0x18)
	struct FGuid ExpressionGUID;  // 0x1C (0x1C)
	char pad_44[4];  // 0x2C (0x2C)


}; 
 
 // ScriptStruct Engine.MeshReductionSettings
struct FMeshReductionSettings
{
	float PercentTriangles;  // 0x0 (0x0)
	float PercentVertices;  // 0x4 (0x4)
	float MaxDeviation;  // 0x8 (0x8)
	float PixelError;  // 0xC (0xC)
	float WeldingThreshold;  // 0x10 (0x10)
	float HardAngleThreshold;  // 0x14 (0x14)
	int32_t BaseLODModel;  // 0x18 (0x18)
	enum class EMeshFeatureImportance SilhouetteImportance;  // 0x1C (0x1C)
	enum class EMeshFeatureImportance TextureImportance;  // 0x1D (0x1D)
	enum class EMeshFeatureImportance ShadingImportance;  // 0x1E (0x1E)
	char bRecalculateNormals : 1;  // 0x1F (0x1F)
	char bGenerateUniqueLightmapUVs : 1;  // 0x1F (0x1F)
	char bKeepSymmetry : 1;  // 0x1F (0x1F)
	char bVisibilityAided : 1;  // 0x1F (0x1F)
	char bCullOccluded : 1;  // 0x1F (0x1F)
	char pad_31_1 : 3;  // 0x1F (0x1F)
	uint8_t TerminationCriterion;  // 0x20 (0x20)
	enum class EMeshFeatureImportance VisibilityAggressiveness;  // 0x21 (0x21)
	enum class EMeshFeatureImportance VertexColorImportance;  // 0x22 (0x22)
	char pad_35[1];  // 0x23 (0x23)


}; 
 
 // ScriptStruct Engine.MeshInstancingSettings
struct FMeshInstancingSettings
{
	AActor* ActorClassToUse;  // 0x0 (0x0)
	int32_t InstanceReplacementThreshold;  // 0x8 (0x8)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bSkipMeshesWithVertexColors : 1;  // 0xC (0xC)
	char pad_13_1 : 7;  // 0xD (0xD)
	bool bUseHLODVolumes : 1;  // 0xD (0xD)
	char pad_14[2];  // 0xE (0xE)
	UInstancedStaticMeshComponent* ISMComponentToUse;  // 0x10 (0x10)


}; 
 
 // Function Engine.PlayerInput.SetMouseSensitivity
struct FSetMouseSensitivity
{
	float Sensitivity;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.PacketSimulationSettings
struct FPacketSimulationSettings
{
	int32_t PktLoss;  // 0x0 (0x0)
	int32_t PktLossMaxSize;  // 0x4 (0x4)
	int32_t PktLossMinSize;  // 0x8 (0x8)
	int32_t PktOrder;  // 0xC (0xC)
	int32_t PktDup;  // 0x10 (0x10)
	int32_t PktLag;  // 0x14 (0x14)
	int32_t PktLagVariance;  // 0x18 (0x18)
	int32_t PktLagMin;  // 0x1C (0x1C)
	int32_t PktLagMax;  // 0x20 (0x20)
	int32_t PktIncomingLagMin;  // 0x24 (0x24)
	int32_t PktIncomingLagMax;  // 0x28 (0x28)
	int32_t PktIncomingLoss;  // 0x2C (0x2C)
	int32_t PktJitter;  // 0x30 (0x30)


}; 
 
 // Function Engine.KismetMathLibrary.Matrix_GetColumn
struct FMatrix_GetColumn
{
	struct FMatrix M;  // 0x0 (0x0)
	enum class EMatrixColumns column;  // 0x80 (0x80)
	char pad_129[7];  // 0x81 (0x81)
	struct FVector ReturnValue;  // 0x88 (0x88)


}; 
 
 // ScriptStruct Engine.BandwidthTestItem
struct FBandwidthTestItem
{
	struct TArray<char> Kilobyte;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimNotifyState.GetDefaultTriggerWeightThreshold
struct FGetDefaultTriggerWeightThreshold
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.BandwidthTestGenerator
struct FBandwidthTestGenerator
{
	struct TArray<struct FBandwidthTestItem> ReplicatedBuffers;  // 0x0 (0x0)
	char pad_16[16];  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.RPCAnalyticsThreshold
struct FRPCAnalyticsThreshold
{
	struct FName RPC;  // 0x0 (0x0)
	int32_t CountPerSec;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)
	double TimePerSec;  // 0x10 (0x10)


}; 
 
 // Function Engine.GameUserSettings.SetShadingQuality
struct FSetShadingQuality
{
	int32_t Value;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.PSCPoolElem
struct FPSCPoolElem
{
	struct UParticleSystemComponent* PSC;  // 0x0 (0x0)
	char pad_8[8];  // 0x8 (0x8)


}; 
 
 // Function Engine.BlueprintPathsLibrary.EngineSavedDir
struct FEngineSavedDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.WorldPSCPool
struct FWorldPSCPool
{
	struct TMap<struct UParticleSystem*, struct FPSCPool> WorldParticleSystemPools;  // 0x0 (0x0)
	char pad_80[8];  // 0x50 (0x50)


}; 
 
 // ScriptStruct Engine.FreezablePerPlatformInt
struct FFreezablePerPlatformInt
{
	char pad_0[4];  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.PerQualityLevelInt
struct FPerQualityLevelInt
{
	char pad_0[16];  // 0x0 (0x0)
	int32_t Default;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)
	struct TMap<int32_t, int32_t> PerQuality;  // 0x18 (0x18)


}; 
 
 // ScriptStruct Engine.LinearDriveConstraint
struct FLinearDriveConstraint
{
	struct FVector PositionTarget;  // 0x0 (0x0)
	struct FVector VelocityTarget;  // 0x18 (0x18)
	struct FConstraintDrive XDrive;  // 0x30 (0x30)
	struct FConstraintDrive YDrive;  // 0x40 (0x40)
	struct FConstraintDrive ZDrive;  // 0x50 (0x50)
	char bEnablePositionDrive : 1;  // 0x60 (0x60)
	char pad_96_1 : 7;  // 0x60 (0x60)
	char pad_97[8];  // 0x61 (0x61)


}; 
 
 // Function Engine.KismetMathLibrary.Ease
struct FEase
{
	double A;  // 0x0 (0x0)
	double B;  // 0x8 (0x8)
	double Alpha;  // 0x10 (0x10)
	enum class EEasingFunc EasingFunc;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)
	double BlendExp;  // 0x20 (0x20)
	int32_t Steps;  // 0x28 (0x28)
	char pad_44[4];  // 0x2C (0x2C)
	double ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.AnimInstance.GetCurveValueWithDefault
struct FGetCurveValueWithDefault
{
	struct FName CurveName;  // 0x0 (0x0)
	float DefaultValue;  // 0x8 (0x8)
	float OutValue;  // 0xC (0xC)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[3];  // 0x11 (0x11)


}; 
 
 // ScriptStruct Engine.AngularDriveConstraint
struct FAngularDriveConstraint
{
	struct FConstraintDrive TwistDrive;  // 0x0 (0x0)
	struct FConstraintDrive SwingDrive;  // 0x10 (0x10)
	struct FConstraintDrive SlerpDrive;  // 0x20 (0x20)
	struct FRotator OrientationTarget;  // 0x30 (0x30)
	struct FVector AngularVelocityTarget;  // 0x48 (0x48)
	enum class EAngularDriveMode AngularDriveMode;  // 0x60 (0x60)
	char pad_97[7];  // 0x61 (0x61)


}; 
 
 // ScriptStruct Engine.TwistConstraint
// Size: 0x1C(Inherited: 0x14)
struct FTwistConstraint : FConstraintBaseParams
{
	float TwistLimitDegrees;  // 0x14 (0x14)
	enum class EAngularConstraintMotion TwistMotion;  // 0x18 (0x18)
	char pad_25[3];  // 0x19 (0x19)


}; 
 
 // ScriptStruct Engine.LinearConstraint
// Size: 0x1C(Inherited: 0x14)
struct FLinearConstraint : FConstraintBaseParams
{
	float Limit;  // 0x14 (0x14)
	enum class ELinearConstraintMotion XMotion;  // 0x18 (0x18)
	enum class ELinearConstraintMotion YMotion;  // 0x19 (0x19)
	enum class ELinearConstraintMotion ZMotion;  // 0x1A (0x1A)
	char pad_27[1];  // 0x1B (0x1B)


}; 
 
 // Function Engine.SplineComponent.GetSplinePointType
struct FGetSplinePointType
{
	int32_t PointIndex;  // 0x0 (0x0)
	enum class ESplinePointType ReturnValue;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)


}; 
 
 // Function Engine.TimelineComponent.GetTimelineLength
struct FGetTimelineLength
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.ConstraintInstanceBase
struct FConstraintInstanceBase
{
	char pad_0[56];  // 0x0 (0x0)


}; 
 
 // Function Engine.GameUserSettings.SetShadowQuality
struct FSetShadowQuality
{
	int32_t Value;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.ClientStartCameraShakeFromSource
struct FClientStartCameraShakeFromSource
{
	UCameraShakeBase* Shake;  // 0x0 (0x0)
	struct UCameraShakeSourceComponent* SourceComponent;  // 0x8 (0x8)


}; 
 
 // Function Engine.GameUserSettings.LoadSettings
struct FLoadSettings
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bForceReload : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.ConstraintInstance
// Size: 0x278(Inherited: 0x38)
struct FConstraintInstance : FConstraintInstanceBase
{
	struct FName JointName;  // 0x38 (0x38)
	struct FName ConstraintBone1;  // 0x40 (0x40)
	struct FName ConstraintBone2;  // 0x48 (0x48)
	char pad_80[8];  // 0x50 (0x50)
	struct FVector Pos1;  // 0x58 (0x58)
	struct FVector PriAxis1;  // 0x70 (0x70)
	struct FVector SecAxis1;  // 0x88 (0x88)
	struct FVector Pos2;  // 0xA0 (0xA0)
	struct FVector PriAxis2;  // 0xB8 (0xB8)
	struct FVector SecAxis2;  // 0xD0 (0xD0)
	struct FRotator AngularRotationOffset;  // 0xE8 (0xE8)
	char bScaleLinearLimits : 1;  // 0x100 (0x100)
	char pad_256_1 : 7;  // 0x100 (0x100)
	char pad_257[8];  // 0x101 (0x101)
	struct FConstraintProfileProperties ProfileInstance;  // 0x108 (0x108)
	char pad_616[16];  // 0x268 (0x268)


}; 
 
 // ScriptStruct Engine.ConstraintInstanceAccessor
struct FConstraintInstanceAccessor
{
	struct TWeakObjectPtr<UObject> Owner;  // 0x0 (0x0)
	uint32_t Index;  // 0x8 (0x8)


}; 
 
 // Function Engine.AudioComponent.SetLowPassFilterFrequency
struct FSetLowPassFilterFrequency
{
	float InLowPassFilterFrequency;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.PhysicalAnimationData
struct FPhysicalAnimationData
{
	struct FName BodyName;  // 0x0 (0x0)
	char bIsLocalSimulation : 1;  // 0x8 (0x8)
	char pad_8_1 : 7;  // 0x8 (0x8)
	char pad_9[4];  // 0x9 (0x9)
	float OrientationStrength;  // 0xC (0xC)
	float AngularVelocityStrength;  // 0x10 (0x10)
	float PositionStrength;  // 0x14 (0x14)
	float VelocityStrength;  // 0x18 (0x18)
	float MaxLinearForce;  // 0x1C (0x1C)
	float MaxAngularForce;  // 0x20 (0x20)


}; 
 
 // ScriptStruct Engine.PhysicsAssetSolverSettings
struct FPhysicsAssetSolverSettings
{
	int32_t PositionIterations;  // 0x0 (0x0)
	int32_t VelocityIterations;  // 0x4 (0x4)
	int32_t ProjectionIterations;  // 0x8 (0x8)
	float CullDistance;  // 0xC (0xC)
	float MaxDepenetrationVelocity;  // 0x10 (0x10)
	float FixedTimeStep;  // 0x14 (0x14)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bUseLinearJointSolver : 1;  // 0x18 (0x18)
	char pad_25[3];  // 0x19 (0x19)


}; 
 
 // ScriptStruct Engine.PhysicsConstraintProfileHandle
struct FPhysicsConstraintProfileHandle
{
	struct FConstraintProfileProperties ProfileProperties;  // 0x0 (0x0)
	struct FName ProfileName;  // 0x160 (0x160)


}; 
 
 // ScriptStruct Engine.PhysicalSurfaceName
struct FPhysicalSurfaceName
{
	enum class EPhysicalSurface Type;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	struct FName Name;  // 0x4 (0x4)


}; 
 
 // Function Engine.GameModeBase.GetNumPlayers
struct FGetNumPlayers
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.ChaosPhysicsSettings
struct FChaosPhysicsSettings
{
	uint8_t DefaultThreadingModel;  // 0x0 (0x0)
	uint8_t DedicatedThreadTickMode;  // 0x1 (0x1)
	uint8_t DedicatedThreadBufferMode;  // 0x2 (0x2)


}; 
 
 // Function Engine.CameraComponent.GetCameraView
struct FGetCameraView
{
	float DeltaTime;  // 0x0 (0x0)
	char pad_4[12];  // 0x4 (0x4)
	struct FMinimalViewInfo DesiredView;  // 0x10 (0x10)


}; 
 
 // Function Engine.AnimInstance.Montage_Play
struct FMontage_Play
{
	struct UAnimMontage* MontageToPlay;  // 0x0 (0x0)
	float InPlayRate;  // 0x8 (0x8)
	uint8_t ReturnValueType;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)
	float InTimeToStartMontageAt;  // 0x10 (0x10)
	char pad_20_1 : 7;  // 0x14 (0x14)
	bool bStopAllMontages : 1;  // 0x14 (0x14)
	char pad_21[3];  // 0x15 (0x15)
	float ReturnValue;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)


}; 
 
 // Function Engine.Emitter.SetColorParameter
struct FSetColorParameter
{
	struct FName ParameterName;  // 0x0 (0x0)
	struct FLinearColor Param;  // 0x8 (0x8)


}; 
 
 // Function Engine.GameplayStatics.GetViewportMouseCaptureMode
struct FGetViewportMouseCaptureMode
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	uint8_t ReturnValue;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // ScriptStruct Engine.PlayerMuteList
struct FPlayerMuteList
{
	char pad_0[80];  // 0x0 (0x0)
	char pad_80_1 : 7;  // 0x50 (0x50)
	bool bHasVoiceHandshakeCompleted : 1;  // 0x50 (0x50)
	char pad_81[3];  // 0x51 (0x51)
	int32_t VoiceChannelIdx;  // 0x54 (0x54)


}; 
 
 // ScriptStruct Engine.PropertyAccessIndirection
struct FPropertyAccessIndirection
{
	struct TFieldPath<FNone> Property;  // 0x0 (0x0)
	struct UFunction* Function;  // 0x20 (0x20)
	int32_t ReturnBufferSize;  // 0x28 (0x28)
	int32_t ReturnBufferAlignment;  // 0x2C (0x2C)
	int32_t ArrayIndex;  // 0x30 (0x30)
	uint32_t Offset;  // 0x34 (0x34)
	uint8_t ObjectType;  // 0x38 (0x38)
	uint8_t Type;  // 0x39 (0x39)
	char pad_58[6];  // 0x3A (0x3A)


}; 
 
 // ScriptStruct Engine.SubsurfaceProfileStruct
struct FSubsurfaceProfileStruct
{
	struct FLinearColor SurfaceAlbedo;  // 0x0 (0x0)
	struct FLinearColor MeanFreePathColor;  // 0x10 (0x10)
	float MeanFreePathDistance;  // 0x20 (0x20)
	float WorldUnitScale;  // 0x24 (0x24)
	char pad_40_1 : 7;  // 0x28 (0x28)
	bool bEnableBurley : 1;  // 0x28 (0x28)
	char pad_41_1 : 7;  // 0x29 (0x29)
	bool bEnableMeanFreePath : 1;  // 0x29 (0x29)
	char pad_42[2];  // 0x2A (0x2A)
	struct FLinearColor Tint;  // 0x2C (0x2C)
	float ScatterRadius;  // 0x3C (0x3C)
	struct FLinearColor SubsurfaceColor;  // 0x40 (0x40)
	struct FLinearColor FalloffColor;  // 0x50 (0x50)
	struct FLinearColor BoundaryColorBleed;  // 0x60 (0x60)
	float ExtinctionScale;  // 0x70 (0x70)
	float NormalScale;  // 0x74 (0x74)
	float ScatteringDistribution;  // 0x78 (0x78)
	float IOR;  // 0x7C (0x7C)
	float Roughness0;  // 0x80 (0x80)
	float Roughness1;  // 0x84 (0x84)
	float LobeMix;  // 0x88 (0x88)
	struct FLinearColor TransmissionTintColor;  // 0x8C (0x8C)


}; 
 
 // ScriptStruct Engine.SingleAnimationPlayData
struct FSingleAnimationPlayData
{
	struct UAnimationAsset* AnimToPlay;  // 0x0 (0x0)
	char bSavedLooping : 1;  // 0x8 (0x8)
	char bSavedPlaying : 1;  // 0x8 (0x8)
	char pad_8_1 : 6;  // 0x8 (0x8)
	char pad_9[4];  // 0x9 (0x9)
	float SavedPosition;  // 0xC (0xC)
	float SavedPlayRate;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)


}; 
 
 // Function Engine.AnimDataModel.GetNumBoneTracks
struct FGetNumBoneTracks
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.BoneMirrorInfo
struct FBoneMirrorInfo
{
	int32_t SourceIndex;  // 0x0 (0x0)
	enum class EAxis BoneFlipAxis;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)


}; 
 
 // Function Engine.KismetMathLibrary.Add_VectorVector
struct FAdd_VectorVector
{
	struct FVector A;  // 0x0 (0x0)
	struct FVector B;  // 0x18 (0x18)
	struct FVector ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_IntPointToVector2D
struct FConv_IntPointToVector2D
{
	struct FIntPoint InIntPoint;  // 0x0 (0x0)
	struct FVector2D ReturnValue;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.ClothPhysicsProperties_Legacy
struct FClothPhysicsProperties_Legacy
{
	float VerticalResistance;  // 0x0 (0x0)
	float HorizontalResistance;  // 0x4 (0x4)
	float BendResistance;  // 0x8 (0x8)
	float ShearResistance;  // 0xC (0xC)
	float Friction;  // 0x10 (0x10)
	float Damping;  // 0x14 (0x14)
	float TetherStiffness;  // 0x18 (0x18)
	float TetherLimit;  // 0x1C (0x1C)
	float Drag;  // 0x20 (0x20)
	float StiffnessFrequency;  // 0x24 (0x24)
	float GravityScale;  // 0x28 (0x28)
	float MassScale;  // 0x2C (0x2C)
	float InertiaBlend;  // 0x30 (0x30)
	float SelfCollisionThickness;  // 0x34 (0x34)
	float SelfCollisionSquashScale;  // 0x38 (0x38)
	float SelfCollisionStiffness;  // 0x3C (0x3C)
	float SolverFrequency;  // 0x40 (0x40)
	float FiberCompression;  // 0x44 (0x44)
	float FiberExpansion;  // 0x48 (0x48)
	float FiberResistance;  // 0x4C (0x4C)


}; 
 
 // Function Engine.KismetInputLibrary.InputChord_GetDisplayName
struct FInputChord_GetDisplayName
{
	struct FInputChord Key;  // 0x0 (0x0)
	struct FText ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.SplineComponent.AddSplineWorldPoint
struct FAddSplineWorldPoint
{
	struct FVector Position;  // 0x0 (0x0)


}; 
 
 // Function Engine.VolumetricCloudComponent.SetViewSampleCountScale
struct FSetViewSampleCountScale
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.ClothingAssetData_Legacy
struct FClothingAssetData_Legacy
{
	struct FName AssetName;  // 0x0 (0x0)
	struct FString ApexFileName;  // 0x8 (0x8)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bClothPropertiesChanged : 1;  // 0x18 (0x18)
	char pad_25[3];  // 0x19 (0x19)
	struct FClothPhysicsProperties_Legacy PhysicsProperties;  // 0x1C (0x1C)
	char pad_108[4];  // 0x6C (0x6C)


}; 
 
 // Function Engine.PlayerController.CanRestartPlayer
struct FCanRestartPlayer
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.DebugCameraController.ReceiveOnDeactivate
struct FReceiveOnDeactivate
{
	struct APlayerController* RestoredPC;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.BoneFilter
struct FBoneFilter
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bExcludeSelf : 1;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	struct FName BoneName;  // 0x4 (0x4)


}; 
 
 // ScriptStruct Engine.SkeletalMeshLODGroupSettings
struct FSkeletalMeshLODGroupSettings
{
	struct FPerPlatformFloat ScreenSize;  // 0x0 (0x0)
	float LODHysteresis;  // 0x4 (0x4)
	uint8_t BoneFilterActionOption;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)
	struct TArray<struct FBoneFilter> BoneList;  // 0x10 (0x10)
	struct TArray<struct FName> BonesToPrioritize;  // 0x20 (0x20)
	struct TArray<int32_t> SectionsToPrioritize;  // 0x30 (0x30)
	float WeightOfPrioritization;  // 0x40 (0x40)
	char pad_68[4];  // 0x44 (0x44)
	struct UAnimSequence* BakePose;  // 0x48 (0x48)
	struct FSkeletalMeshOptimizationSettings ReductionSettings;  // 0x50 (0x50)
	char pad_140[4];  // 0x8C (0x8C)


}; 
 
 // Function Engine.KismetStringTableLibrary.GetKeysFromStringTable
struct FGetKeysFromStringTable
{
	struct FName TableId;  // 0x0 (0x0)
	struct TArray<struct FString> ReturnValue;  // 0x8 (0x8)


}; 
 
 // ScriptStruct Engine.SkelMeshMergeMeshUVTransforms
struct FSkelMeshMergeMeshUVTransforms
{
	struct TArray<struct FTransform> UVTransforms;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.SkelMeshMergeUVTransformMapping
struct FSkelMeshMergeUVTransformMapping
{
	struct TArray<struct FSkelMeshMergeMeshUVTransforms> UVTransformsPerMesh;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.SkeletalMeshSamplingRegionBuiltData
struct FSkeletalMeshSamplingRegionBuiltData
{
	char pad_0[120];  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.SkeletalMeshSamplingLODBuiltData
struct FSkeletalMeshSamplingLODBuiltData
{
	char pad_0[72];  // 0x0 (0x0)


}; 
 
 // Function Engine.SkinnedMeshComponent.IsUsingSkinWeightProfile
struct FIsUsingSkinWeightProfile
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.SkeletalMeshSamplingBuiltData
struct FSkeletalMeshSamplingBuiltData
{
	struct TArray<struct FSkeletalMeshSamplingLODBuiltData> WholeMeshBuiltData;  // 0x0 (0x0)
	struct TArray<struct FSkeletalMeshSamplingRegionBuiltData> RegionBuiltData;  // 0x10 (0x10)


}; 
 
 // Function Engine.ConstraintInstanceBlueprintLibrary.GetDisableCollsion
struct FGetDisableCollsion
{
	struct FConstraintInstanceAccessor Accessor;  // 0x0 (0x0)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool ReturnValue : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)


}; 
 
 // ScriptStruct Engine.SkeletalMeshSamplingRegionBoneFilter
struct FSkeletalMeshSamplingRegionBoneFilter
{
	struct FName BoneName;  // 0x0 (0x0)
	char bIncludeOrExclude : 1;  // 0x8 (0x8)
	char bApplyToChildren : 1;  // 0x8 (0x8)
	char pad_8_1 : 6;  // 0x8 (0x8)
	char pad_9[4];  // 0x9 (0x9)


}; 
 
 // ScriptStruct Engine.SkeletalMeshSamplingRegionMaterialFilter
struct FSkeletalMeshSamplingRegionMaterialFilter
{
	struct FName MaterialName;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.SoundClassEditorData
struct FSoundClassEditorData
{
	char pad_0[8];  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.SoundConcurrencySettings
struct FSoundConcurrencySettings
{
	int32_t MaxCount;  // 0x0 (0x0)
	char bLimitToOwner : 1;  // 0x4 (0x4)
	char bVolumeScaleCanRelease : 1;  // 0x4 (0x4)
	char pad_4_1 : 6;  // 0x4 (0x4)
	enum class EMaxConcurrentResolutionRule ResolutionRule;  // 0x5 (0x5)
	char pad_6[2];  // 0x6 (0x6)
	float RetriggerTime;  // 0x8 (0x8)
	float VolumeScale;  // 0xC (0xC)
	uint8_t VolumeScaleMode;  // 0x10 (0x10)
	float VolumeScaleAttackTime;  // 0x14 (0x14)
	float VolumeScaleReleaseTime;  // 0x18 (0x18)
	float VoiceStealReleaseTime;  // 0x1C (0x1C)


}; 
 
 // Function Engine.GameModeBase.FindPlayerStart
struct FFindPlayerStart
{
	struct AController* Player;  // 0x0 (0x0)
	struct FString IncomingName;  // 0x8 (0x8)
	struct AActor* ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.LightComponent.SetAffectDynamicIndirectLighting
struct FSetAffectDynamicIndirectLighting
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.GetMaxElement
struct FGetMaxElement
{
	struct FVector A;  // 0x0 (0x0)
	double ReturnValue;  // 0x18 (0x18)


}; 
 
 // ScriptStruct Engine.SoundNodeEditorData
struct FSoundNodeEditorData
{
	char pad_0[8];  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.AudioEQEffect
// Size: 0x40(Inherited: 0x8)
struct FAudioEQEffect : FAudioEffectParameters
{
	char pad_8[8];  // 0x8 (0x8)
	float FrequencyCenter0;  // 0x10 (0x10)
	float Gain0;  // 0x14 (0x14)
	float Bandwidth0;  // 0x18 (0x18)
	float FrequencyCenter1;  // 0x1C (0x1C)
	float Gain1;  // 0x20 (0x20)
	float Bandwidth1;  // 0x24 (0x24)
	float FrequencyCenter2;  // 0x28 (0x28)
	float Gain2;  // 0x2C (0x2C)
	float Bandwidth2;  // 0x30 (0x30)
	float FrequencyCenter3;  // 0x34 (0x34)
	float Gain3;  // 0x38 (0x38)
	float Bandwidth3;  // 0x3C (0x3C)


}; 
 
 // Function Engine.CameraComponent.RemoveBlendable
struct FRemoveBlendable
{
	struct TScriptInterface<IBlendableInterface> InBlendableObject;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.SoundClassAdjuster
struct FSoundClassAdjuster
{
	struct USoundClass* SoundClassObject;  // 0x0 (0x0)
	float VolumeAdjuster;  // 0x8 (0x8)
	float PitchAdjuster;  // 0xC (0xC)
	float LowPassFilterFrequency;  // 0x10 (0x10)
	char bApplyToChildren : 1;  // 0x14 (0x14)
	char pad_20_1 : 7;  // 0x14 (0x14)
	char pad_21[4];  // 0x15 (0x15)
	float VoiceCenterChannelVolumeAdjuster;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)


}; 
 
 // Function Engine.AnimationDataController.RemoveTransformCurveKey
struct FRemoveTransformCurveKey
{
	struct FAnimationCurveIdentifier CurveId;  // 0x0 (0x0)
	float Time;  // 0x10 (0x10)
	char pad_20_1 : 7;  // 0x14 (0x14)
	bool bShouldTransact : 1;  // 0x14 (0x14)
	char pad_21_1 : 7;  // 0x15 (0x15)
	bool ReturnValue : 1;  // 0x15 (0x15)
	char pad_22[2];  // 0x16 (0x16)


}; 
 
 // Function Engine.WorldPartitionBlueprintLibrary.GetIntersectingActorDescs
struct FGetIntersectingActorDescs
{
	struct FBox InBox;  // 0x0 (0x0)
	struct TArray<struct FActorDesc> OutActorDescs;  // 0x38 (0x38)
	char pad_72_1 : 7;  // 0x48 (0x48)
	bool ReturnValue : 1;  // 0x48 (0x48)
	char pad_73[7];  // 0x49 (0x49)


}; 
 
 // ScriptStruct Engine.SoundModulationDefaultRoutingSettings
// Size: 0x188(Inherited: 0x180)
struct FSoundModulationDefaultRoutingSettings : FSoundModulationDefaultSettings
{
	uint8_t VolumeRouting;  // 0x180 (0x180)
	uint8_t PitchRouting;  // 0x181 (0x181)
	uint8_t HighpassRouting;  // 0x182 (0x182)
	uint8_t LowpassRouting;  // 0x183 (0x183)
	char pad_388[4];  // 0x184 (0x184)


}; 
 
 // ScriptStruct Engine.DistanceDatum
struct FDistanceDatum
{
	float FadeInDistanceStart;  // 0x0 (0x0)
	float FadeInDistanceEnd;  // 0x4 (0x4)
	float FadeOutDistanceStart;  // 0x8 (0x8)
	float FadeOutDistanceEnd;  // 0xC (0xC)
	float Volume;  // 0x10 (0x10)


}; 
 
 // Function Engine.AudioVolume.SetSubmixSendSettings
struct FSetSubmixSendSettings
{
	struct TArray<struct FAudioVolumeSubmixSendSettings> NewSubmixSendSettings;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.SoundSubmixSpectralAnalysisBandSettings
struct FSoundSubmixSpectralAnalysisBandSettings
{
	float BandFrequency;  // 0x0 (0x0)
	int32_t AttackTimeMsec;  // 0x4 (0x4)
	int32_t ReleaseTimeMsec;  // 0x8 (0x8)
	float QFactor;  // 0xC (0xC)


}; 
 
 // ScriptStruct Engine.StaticMeshSourceModel
struct FStaticMeshSourceModel
{
	struct FMeshBuildSettings BuildSettings;  // 0x0 (0x0)
	struct FMeshReductionSettings ReductionSettings;  // 0x48 (0x48)
	float LODDistance;  // 0x6C (0x6C)
	struct FPerPlatformFloat ScreenSize;  // 0x70 (0x70)
	char pad_116[4];  // 0x74 (0x74)
	struct FString SourceImportFilename;  // 0x78 (0x78)


}; 
 
 // ScriptStruct Engine.ImportFactorySettingValues
struct FImportFactorySettingValues
{
	struct FString SettingName;  // 0x0 (0x0)
	struct FString Value;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.EditorImportExportTestDefinition
struct FEditorImportExportTestDefinition
{
	struct FFilePath ImportFilePath;  // 0x0 (0x0)
	struct FString ExportFileExtension;  // 0x10 (0x10)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool bSkipExport : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)
	struct TArray<struct FImportFactorySettingValues> FactorySettings;  // 0x28 (0x28)


}; 
 
 // Function Engine.TimelineComponent.GetPlaybackPosition
struct FGetPlaybackPosition
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.DefaultPawn.TurnAtRate
struct FTurnAtRate
{
	float Rate;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.BuildPromotionImportWorkflowSettings
struct FBuildPromotionImportWorkflowSettings
{
	struct FEditorImportWorkflowDefinition Diffuse;  // 0x0 (0x0)
	struct FEditorImportWorkflowDefinition Normal;  // 0x20 (0x20)
	struct FEditorImportWorkflowDefinition StaticMesh;  // 0x40 (0x40)
	struct FEditorImportWorkflowDefinition ReimportStaticMesh;  // 0x60 (0x60)
	struct FEditorImportWorkflowDefinition BlendShapeMesh;  // 0x80 (0x80)
	struct FEditorImportWorkflowDefinition MorphMesh;  // 0xA0 (0xA0)
	struct FEditorImportWorkflowDefinition SkeletalMesh;  // 0xC0 (0xC0)
	struct FEditorImportWorkflowDefinition Animation;  // 0xE0 (0xE0)
	struct FEditorImportWorkflowDefinition Sound;  // 0x100 (0x100)
	struct FEditorImportWorkflowDefinition SurroundSound;  // 0x120 (0x120)
	struct TArray<struct FEditorImportWorkflowDefinition> OtherAssetsToImport;  // 0x140 (0x140)


}; 
 
 // Function Engine.KismetMathLibrary.Add_Int64Int64
struct FAdd_Int64Int64
{
	int64_t A;  // 0x0 (0x0)
	int64_t B;  // 0x8 (0x8)
	int64_t ReturnValue;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.MaterialEditorPromotionSettings
struct FMaterialEditorPromotionSettings
{
	struct FFilePath DefaultMaterialAsset;  // 0x0 (0x0)
	struct FFilePath DefaultDiffuseTexture;  // 0x10 (0x10)
	struct FFilePath DefaultNormalTexture;  // 0x20 (0x20)


}; 
 
 // Function Engine.SkeletalMeshComponent.GetStringAttribute
struct FGetStringAttribute
{
	struct FName BoneName;  // 0x0 (0x0)
	struct FName AttributeName;  // 0x8 (0x8)
	struct FString DefaultValue;  // 0x10 (0x10)
	struct FString OutValue;  // 0x20 (0x20)
	uint8_t LookupType;  // 0x30 (0x30)
	char pad_49_1 : 7;  // 0x31 (0x31)
	bool ReturnValue : 1;  // 0x31 (0x31)
	char pad_50[6];  // 0x32 (0x32)


}; 
 
 // ScriptStruct Engine.ParticleEditorPromotionSettings
struct FParticleEditorPromotionSettings
{
	struct FFilePath DefaultParticleAsset;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.BlueprintEditorPromotionSettings
struct FBlueprintEditorPromotionSettings
{
	struct FFilePath FirstMeshPath;  // 0x0 (0x0)
	struct FFilePath SecondMeshPath;  // 0x10 (0x10)
	struct FFilePath DefaultParticleAsset;  // 0x20 (0x20)


}; 
 
 // Function Engine.AnimInstance.GetCurrentStateName
struct FGetCurrentStateName
{
	int32_t MachineIndex;  // 0x0 (0x0)
	struct FName ReturnValue;  // 0x4 (0x4)


}; 
 
 // ScriptStruct Engine.LaunchOnTestSettings
struct FLaunchOnTestSettings
{
	struct FFilePath LaunchOnTestmap;  // 0x0 (0x0)
	struct FString DeviceID;  // 0x10 (0x10)


}; 
 
 // Function Engine.PlayerController.GetInputVectorKeyState
struct FGetInputVectorKeyState
{
	struct FKey Key;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetMathLibrary.LinearColor_GetLuminance
struct FLinearColor_GetLuminance
{
	struct FLinearColor InColor;  // 0x0 (0x0)
	float ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.Controller.IsMoveInputIgnored
struct FIsMoveInputIgnored
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.TextureLODGroup
struct FTextureLODGroup
{
	enum class TextureGroup Group;  // 0x0 (0x0)
	char pad_1[7];  // 0x1 (0x1)
	int32_t LODBias;  // 0x8 (0x8)
	int32_t LODBias_Smaller;  // 0xC (0xC)
	int32_t LODBias_Smallest;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)
	int32_t NumStreamedMips;  // 0x18 (0x18)
	enum class TextureMipGenSettings MipGenSettings;  // 0x1C (0x1C)
	char pad_29[3];  // 0x1D (0x1D)
	int32_t MinLODSize;  // 0x20 (0x20)
	int32_t MaxLODSize;  // 0x24 (0x24)
	int32_t MaxLODSize_Smaller;  // 0x28 (0x28)
	int32_t MaxLODSize_Smallest;  // 0x2C (0x2C)
	int32_t MaxLODSize_VT;  // 0x30 (0x30)
	int32_t OptionalLODBias;  // 0x34 (0x34)
	int32_t OptionalMaxLODSize;  // 0x38 (0x38)
	struct FName MinMagFilter;  // 0x3C (0x3C)
	struct FName MipFilter;  // 0x44 (0x44)
	uint8_t MipLoadOptions;  // 0x4C (0x4C)
	char pad_77_1 : 7;  // 0x4D (0x4D)
	bool HighPriorityLoad : 1;  // 0x4D (0x4D)
	char pad_78_1 : 7;  // 0x4E (0x4E)
	bool DuplicateNonOptionalMips : 1;  // 0x4E (0x4E)
	char pad_79[1];  // 0x4F (0x4F)
	float Downscale;  // 0x50 (0x50)
	uint8_t DownscaleOptions;  // 0x54 (0x54)
	char pad_85[3];  // 0x55 (0x55)
	int32_t VirtualTextureTileCountBias;  // 0x58 (0x58)
	int32_t VirtualTextureTileSizeBias;  // 0x5C (0x5C)
	enum class ETextureLossyCompressionAmount LossyCompressionAmount;  // 0x60 (0x60)
	char pad_97[3];  // 0x61 (0x61)


}; 
 
 // ScriptStruct Engine.TTTrackBase
struct FTTTrackBase
{
	char pad_0[8];  // 0x0 (0x0)
	struct FName TrackName;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool bIsExternalCurve : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.PlayerController.SetMotionControlsEnabled
struct FSetMotionControlsEnabled
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bEnabled : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.TTFloatTrack
// Size: 0x28(Inherited: 0x20)
struct FTTFloatTrack : FTTPropertyTrack
{
	struct UCurveFloat* CurveFloat;  // 0x20 (0x20)


}; 
 
 // Function Engine.GameUserSettings.SetResolutionScaleNormalized
struct FSetResolutionScaleNormalized
{
	float NewScaleNormalized;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPathsLibrary.MakePlatformFilename
struct FMakePlatformFilename
{
	struct FString InPath;  // 0x0 (0x0)
	struct FString OutPath;  // 0x10 (0x10)


}; 
 
 // ScriptStruct Engine.AutoCompleteNode
struct FAutoCompleteNode
{
	int32_t IndexChar;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct TArray<int32_t> AutoCompleteListIndices;  // 0x8 (0x8)
	char pad_24[16];  // 0x18 (0x18)


}; 
 
 // ScriptStruct Engine.KeyBind
struct FKeyBind
{
	struct FKey Key;  // 0x0 (0x0)
	struct FString Command;  // 0x18 (0x18)
	char Control : 1;  // 0x28 (0x28)
	char Shift : 1;  // 0x28 (0x28)
	char Alt : 1;  // 0x28 (0x28)
	char Cmd : 1;  // 0x28 (0x28)
	char bIgnoreCtrl : 1;  // 0x28 (0x28)
	char bIgnoreShift : 1;  // 0x28 (0x28)
	char bIgnoreAlt : 1;  // 0x28 (0x28)
	char bIgnoreCmd : 1;  // 0x28 (0x28)
	char bDisabled : 1;  // 0x29 (0x29)
	char pad_41_1 : 7;  // 0x29 (0x29)
	char pad_42[7];  // 0x2A (0x2A)


}; 
 
 // ScriptStruct Engine.InputAxisProperties
struct FInputAxisProperties
{
	float DeadZone;  // 0x0 (0x0)
	float Sensitivity;  // 0x4 (0x4)
	float Exponent;  // 0x8 (0x8)
	char bInvert : 1;  // 0xC (0xC)
	char pad_12_1 : 7;  // 0xC (0xC)
	char pad_13[4];  // 0xD (0xD)


}; 
 
 // Function Engine.PhysicsConstraintComponent.GetConstrainedComponents
struct FGetConstrainedComponents
{
	struct UPrimitiveComponent* OutComponent1;  // 0x0 (0x0)
	struct FName OutBoneName1;  // 0x8 (0x8)
	struct UPrimitiveComponent* OutComponent2;  // 0x10 (0x10)
	struct FName OutBoneName2;  // 0x18 (0x18)


}; 
 
 // ScriptStruct Engine.InputAxisKeyMapping
struct FInputAxisKeyMapping
{
	struct FName AxisName;  // 0x0 (0x0)
	float Scale;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)
	struct FKey Key;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetRenderingLibrary.RenderTargetCreateStaticTexture2DEditorOnly
struct FRenderTargetCreateStaticTexture2DEditorOnly
{
	struct UTextureRenderTarget2D* RenderTarget;  // 0x0 (0x0)
	struct FString Name;  // 0x8 (0x8)
	enum class TextureCompressionSettings CompressionSettings;  // 0x18 (0x18)
	enum class TextureMipGenSettings MipSettings;  // 0x19 (0x19)
	char pad_26[6];  // 0x1A (0x1A)
	struct UTexture2D* ReturnValue;  // 0x20 (0x20)


}; 
 
 // ScriptStruct Engine.VirtualTextureBuildSettings
struct FVirtualTextureBuildSettings
{
	int32_t TileSize;  // 0x0 (0x0)
	int32_t TileBorderSize;  // 0x4 (0x4)


}; 
 
 // Function Engine.KismetTextLibrary.TextToLower
struct FTextToLower
{
	struct FText InText;  // 0x0 (0x0)
	struct FText ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.DataTableFunctionLibrary.GetDataTableRowFromName
struct FGetDataTableRowFromName
{
	struct UDataTable* Table;  // 0x0 (0x0)
	struct FName RowName;  // 0x8 (0x8)
	struct FTableRowBase OutRow;  // 0x10 (0x10)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool ReturnValue : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // ScriptStruct Engine.StreamingLevelsToConsider
struct FStreamingLevelsToConsider
{
	struct TArray<struct ULevelStreaming*> StreamingLevels;  // 0x0 (0x0)
	char pad_16[24];  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.EqualExactly_VectorVector
struct FEqualExactly_VectorVector
{
	struct FVector A;  // 0x0 (0x0)
	struct FVector B;  // 0x18 (0x18)
	char pad_48_1 : 7;  // 0x30 (0x30)
	bool ReturnValue : 1;  // 0x30 (0x30)
	char pad_49[7];  // 0x31 (0x31)


}; 
 
 // ScriptStruct Engine.ActorDesc
struct FActorDesc
{
	struct FGuid Guid;  // 0x0 (0x0)
	struct FSoftObjectPath Class;  // 0x10 (0x10)
	struct FName Name;  // 0x30 (0x30)
	struct FName Label;  // 0x38 (0x38)
	struct FBox Bounds;  // 0x40 (0x40)
	struct FName RuntimeGrid;  // 0x78 (0x78)
	char pad_128_1 : 7;  // 0x80 (0x80)
	bool bIsSpatiallyLoaded : 1;  // 0x80 (0x80)
	char pad_129_1 : 7;  // 0x81 (0x81)
	bool bActorIsEditorOnly : 1;  // 0x81 (0x81)
	char pad_130[2];  // 0x82 (0x82)
	struct FName ActorPackage;  // 0x84 (0x84)
	struct FName ActorPath;  // 0x8C (0x8C)
	char pad_148[4];  // 0x94 (0x94)


}; 
 
 // Function Engine.AnimInstance.SetUseMainInstanceMontageEvaluationData
struct FSetUseMainInstanceMontageEvaluationData
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bSet : 1;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.ActorPlacementDataLayers
struct FActorPlacementDataLayers
{
	struct TArray<struct FName> DataLayerInstanceNames;  // 0x0 (0x0)
	int32_t ContextID;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)


}; 
 
 // Function Engine.PlayerCameraManager.GetCameraLocation
struct FGetCameraLocation
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.SpatialHashStreamingGridLayerCell
struct FSpatialHashStreamingGridLayerCell
{
	struct TArray<struct UWorldPartitionRuntimeSpatialHashCell*> GridCells;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Round64
struct FRound64
{
	double A;  // 0x0 (0x0)
	int64_t ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.SoundSubmix.AddEnvelopeFollowerDelegate
struct FAddEnvelopeFollowerDelegate
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FDelegate OnSubmixEnvelopeBP;  // 0x8 (0x8)


}; 
 
 // Function Engine.CharacterMovementComponent.GetCharacterOwner
struct FGetCharacterOwner
{
	struct ACharacter* ReturnValue;  // 0x0 (0x0)


}; 
 
 // ScriptStruct Engine.SpatialHashStreamingGrid
struct FSpatialHashStreamingGrid
{
	struct FName GridName;  // 0x0 (0x0)
	struct FVector Origin;  // 0x8 (0x8)
	int32_t CellSize;  // 0x20 (0x20)
	float LoadingRange;  // 0x24 (0x24)
	char pad_40_1 : 7;  // 0x28 (0x28)
	bool bBlockOnSlowStreaming : 1;  // 0x28 (0x28)
	char pad_41[3];  // 0x29 (0x29)
	struct FLinearColor DebugColor;  // 0x2C (0x2C)
	char pad_60[4];  // 0x3C (0x3C)
	struct TArray<struct FSpatialHashStreamingGridLevel> GridLevels;  // 0x40 (0x40)
	struct FBox WorldBounds;  // 0x50 (0x50)
	char pad_136_1 : 7;  // 0x88 (0x88)
	bool bClientOnlyVisible : 1;  // 0x88 (0x88)
	char pad_137[7];  // 0x89 (0x89)
	struct UHLODLayer* HLODLayer;  // 0x90 (0x90)
	char pad_152[16];  // 0x98 (0x98)


}; 
 
 // Function Engine.KismetMathLibrary.Quat_Normalize
struct FQuat_Normalize
{
	struct FQuat Q;  // 0x0 (0x0)
	float Tolerance;  // 0x20 (0x20)
	char pad_36[12];  // 0x24 (0x24)


}; 
 
 // ScriptStruct Engine.WorldPartitionRuntimeSpatialHashGridPreviewer
struct FWorldPartitionRuntimeSpatialHashGridPreviewer
{
	char pad_0[1];  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Cos
struct FCos
{
	double A;  // 0x0 (0x0)
	double ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.HUD.AddDebugText
struct FAddDebugText
{
	struct FString DebugText;  // 0x0 (0x0)
	struct AActor* SrcActor;  // 0x10 (0x10)
	float Duration;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)
	struct FVector Offset;  // 0x20 (0x20)
	struct FVector DesiredOffset;  // 0x38 (0x38)
	struct FColor TextColor;  // 0x50 (0x50)
	char pad_84_1 : 7;  // 0x54 (0x54)
	bool bSkipOverwriteCheck : 1;  // 0x54 (0x54)
	char pad_85_1 : 7;  // 0x55 (0x55)
	bool bAbsoluteLocation : 1;  // 0x55 (0x55)
	char pad_86_1 : 7;  // 0x56 (0x56)
	bool bKeepAttachedToActor : 1;  // 0x56 (0x56)
	char pad_87[1];  // 0x57 (0x57)
	struct UFont* InFont;  // 0x58 (0x58)
	float FontScale;  // 0x60 (0x60)
	char pad_100_1 : 7;  // 0x64 (0x64)
	bool bDrawShadow : 1;  // 0x64 (0x64)
	char pad_101[3];  // 0x65 (0x65)


}; 
 
 // Function Engine.HUD.DrawMaterial
struct FDrawMaterial
{
	struct UMaterialInterface* Material;  // 0x0 (0x0)
	float ScreenX;  // 0x8 (0x8)
	float ScreenY;  // 0xC (0xC)
	float ScreenW;  // 0x10 (0x10)
	float ScreenH;  // 0x14 (0x14)
	float MaterialU;  // 0x18 (0x18)
	float MaterialV;  // 0x1C (0x1C)
	float MaterialUWidth;  // 0x20 (0x20)
	float MaterialVHeight;  // 0x24 (0x24)
	float Scale;  // 0x28 (0x28)
	char pad_44_1 : 7;  // 0x2C (0x2C)
	bool bScalePosition : 1;  // 0x2C (0x2C)
	char pad_45[3];  // 0x2D (0x2D)
	float Rotation;  // 0x30 (0x30)
	char pad_52[4];  // 0x34 (0x34)
	struct FVector2D RotPivot;  // 0x38 (0x38)


}; 
 
 // Function Engine.HUD.DrawMaterialSimple
struct FDrawMaterialSimple
{
	struct UMaterialInterface* Material;  // 0x0 (0x0)
	float ScreenX;  // 0x8 (0x8)
	float ScreenY;  // 0xC (0xC)
	float ScreenW;  // 0x10 (0x10)
	float ScreenH;  // 0x14 (0x14)
	float Scale;  // 0x18 (0x18)
	char pad_28_1 : 7;  // 0x1C (0x1C)
	bool bScalePosition : 1;  // 0x1C (0x1C)
	char pad_29[3];  // 0x1D (0x1D)


}; 
 
 // Function Engine.HUD.DrawTexture
struct FDrawTexture
{
	struct UTexture* Texture;  // 0x0 (0x0)
	float ScreenX;  // 0x8 (0x8)
	float ScreenY;  // 0xC (0xC)
	float ScreenW;  // 0x10 (0x10)
	float ScreenH;  // 0x14 (0x14)
	float TextureU;  // 0x18 (0x18)
	float TextureV;  // 0x1C (0x1C)
	float TextureUWidth;  // 0x20 (0x20)
	float TextureVHeight;  // 0x24 (0x24)
	struct FLinearColor TintColor;  // 0x28 (0x28)
	enum class EBlendMode BlendMode;  // 0x38 (0x38)
	char pad_57[3];  // 0x39 (0x39)
	float Scale;  // 0x3C (0x3C)
	char pad_64_1 : 7;  // 0x40 (0x40)
	bool bScalePosition : 1;  // 0x40 (0x40)
	char pad_65[3];  // 0x41 (0x41)
	float Rotation;  // 0x44 (0x44)
	struct FVector2D RotPivot;  // 0x48 (0x48)


}; 
 
 // Function Engine.HUD.DrawTextureSimple
struct FDrawTextureSimple
{
	struct UTexture* Texture;  // 0x0 (0x0)
	float ScreenX;  // 0x8 (0x8)
	float ScreenY;  // 0xC (0xC)
	float Scale;  // 0x10 (0x10)
	char pad_20_1 : 7;  // 0x14 (0x14)
	bool bScalePosition : 1;  // 0x14 (0x14)
	char pad_21[3];  // 0x15 (0x15)


}; 
 
 // Function Engine.AudioComponent.SetOutputToBusOnly
struct FSetOutputToBusOnly
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bInOutputToBusOnly : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.HUD.GetActorsInSelectionRectangle
struct FGetActorsInSelectionRectangle
{
	AActor* ClassFilter;  // 0x0 (0x0)
	struct FVector2D FirstPoint;  // 0x8 (0x8)
	struct FVector2D SecondPoint;  // 0x18 (0x18)
	struct TArray<struct AActor*> OutActors;  // 0x28 (0x28)
	char pad_56_1 : 7;  // 0x38 (0x38)
	bool bIncludeNonCollidingComponents : 1;  // 0x38 (0x38)
	char pad_57_1 : 7;  // 0x39 (0x39)
	bool bActorMustBeFullyEnclosed : 1;  // 0x39 (0x39)
	char pad_58[6];  // 0x3A (0x3A)


}; 
 
 // Function Engine.PlayerCameraManager.GetOwningPlayerController
struct FGetOwningPlayerController
{
	struct APlayerController* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimDataModel.GetBoneTrackIndexByName
struct FGetBoneTrackIndexByName
{
	struct FName TrackName;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.HUD.Project
struct FProject
{
	struct FVector Location;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bClampToZeroPlane : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)
	struct FVector ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.GameUserSettings.SetViewDistanceQuality
struct FSetViewDistanceQuality
{
	int32_t Value;  // 0x0 (0x0)


}; 
 
 // Function Engine.CharacterMovementComponent.GetMaxJumpHeightWithJumpTime
struct FGetMaxJumpHeightWithJumpTime
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.HUD.ReceiveHitBoxBeginCursorOver
struct FReceiveHitBoxBeginCursorOver
{
	struct FName BoxName;  // 0x0 (0x0)


}; 
 
 // Function Engine.HUD.ReceiveHitBoxEndCursorOver
struct FReceiveHitBoxEndCursorOver
{
	struct FName BoxName;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameUserSettings.GetResolutionScaleInformation
struct FGetResolutionScaleInformation
{
	float CurrentScaleNormalized;  // 0x0 (0x0)
	int32_t CurrentScaleValue;  // 0x4 (0x4)
	int32_t MinScaleValue;  // 0x8 (0x8)
	int32_t MaxScaleValue;  // 0xC (0xC)


}; 
 
 // Function Engine.AudioComponent.StopDelayed
struct FStopDelayed
{
	float DelayTime;  // 0x0 (0x0)


}; 
 
 // Function Engine.HUD.ReceiveHitBoxRelease
struct FReceiveHitBoxRelease
{
	struct FName BoxName;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Multiply_Vector2DFloat
struct FMultiply_Vector2DFloat
{
	struct FVector2D A;  // 0x0 (0x0)
	double B;  // 0x10 (0x10)
	struct FVector2D ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.CharacterMovementComponent.SetWalkableFloorAngle
struct FSetWalkableFloorAngle
{
	float InWalkableFloorAngle;  // 0x0 (0x0)


}; 
 
 // Function Engine.HUD.RemoveDebugText
struct FRemoveDebugText
{
	struct AActor* SrcActor;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bLeaveDurationText : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.KismetMathLibrary.ToRounded2D
struct FToRounded2D
{
	struct FVector2D A;  // 0x0 (0x0)
	struct FVector2D ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.HUD.ShowDebug
struct FShowDebug
{
	struct FName DebugType;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimDataModel.GetNumberOfFloatCurves
struct FGetNumberOfFloatCurves
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.MaterialInterface.GetPhysicalMaterial
struct FGetPhysicalMaterial
{
	struct UPhysicalMaterial* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.HUD.ShowDebugToggleSubCategory
struct FShowDebugToggleSubCategory
{
	struct FName Category;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.DegAtan
struct FDegAtan
{
	double A;  // 0x0 (0x0)
	double ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.Pawn.AddControllerRollInput
struct FAddControllerRollInput
{
	float Val;  // 0x0 (0x0)


}; 
 
 // Function Engine.Pawn.ConsumeMovementInputVector
struct FConsumeMovementInputVector
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.DataLayerInstance.GetDebugColor
struct FGetDebugColor
{
	struct FColor ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.Pawn.GetBaseAimRotation
struct FGetBaseAimRotation
{
	struct FRotator ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.MakeTransform
struct FMakeTransform
{
	struct FVector Location;  // 0x0 (0x0)
	struct FRotator Rotation;  // 0x18 (0x18)
	struct FVector Scale;  // 0x30 (0x30)
	char pad_72[8];  // 0x48 (0x48)
	struct FTransform ReturnValue;  // 0x50 (0x50)


}; 
 
 // Function Engine.DirectionalLightComponent.SetAtmosphereSunLight
struct FSetAtmosphereSunLight
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.Pawn.GetLocalViewingPlayerController
struct FGetLocalViewingPlayerController
{
	struct APlayerController* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetInputLibrary.InputEvent_IsRightShiftDown
struct FInputEvent_IsRightShiftDown
{
	struct FInputEvent Input;  // 0x0 (0x0)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.Pawn.GetMovementBaseActor
struct FGetMovementBaseActor
{
	struct APawn* Pawn;  // 0x0 (0x0)
	struct AActor* ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.Add_TimespanTimespan
struct FAdd_TimespanTimespan
{
	struct FTimespan A;  // 0x0 (0x0)
	struct FTimespan B;  // 0x8 (0x8)
	struct FTimespan ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.Pawn.GetMovementComponent
struct FGetMovementComponent
{
	struct UPawnMovementComponent* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.Pawn.GetNavAgentLocation
struct FGetNavAgentLocation
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.SelectRotator
struct FSelectRotator
{
	struct FRotator A;  // 0x0 (0x0)
	struct FRotator B;  // 0x18 (0x18)
	char pad_48_1 : 7;  // 0x30 (0x30)
	bool bPickA : 1;  // 0x30 (0x30)
	char pad_49[7];  // 0x31 (0x31)
	struct FRotator ReturnValue;  // 0x38 (0x38)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_IntToFloat
struct FConv_IntToFloat
{
	int32_t inInt;  // 0x0 (0x0)
	float ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.KismetMathLibrary.Quat_Size
struct FQuat_Size
{
	struct FQuat Q;  // 0x0 (0x0)
	float ReturnValue;  // 0x20 (0x20)
	char pad_36[12];  // 0x24 (0x24)


}; 
 
 // Function Engine.Pawn.GetOverrideInputComponentClass
struct FGetOverrideInputComponentClass
{
	UInputComponent* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.Pawn.GetPendingMovementInputVector
struct FGetPendingMovementInputVector
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimationDataController.RenameCurve
struct FRenameCurve
{
	struct FAnimationCurveIdentifier CurveToRenameId;  // 0x0 (0x0)
	struct FAnimationCurveIdentifier NewCurveId;  // 0x10 (0x10)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool bShouldTransact : 1;  // 0x20 (0x20)
	char pad_33_1 : 7;  // 0x21 (0x21)
	bool ReturnValue : 1;  // 0x21 (0x21)
	char pad_34[2];  // 0x22 (0x22)


}; 
 
 // Function Engine.DebugCameraController.GetSelectedActor
struct FGetSelectedActor
{
	struct AActor* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.Pawn.IsControlled
struct FIsControlled
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.Pawn.IsLocallyControlled
struct FIsLocallyControlled
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMeshComponent.GetIntegerAttribute
struct FGetIntegerAttribute
{
	struct FName BoneName;  // 0x0 (0x0)
	struct FName AttributeName;  // 0x8 (0x8)
	int32_t DefaultValue;  // 0x10 (0x10)
	int32_t OutValue;  // 0x14 (0x14)
	uint8_t LookupType;  // 0x18 (0x18)
	char pad_25_1 : 7;  // 0x19 (0x19)
	bool ReturnValue : 1;  // 0x19 (0x19)
	char pad_26[2];  // 0x1A (0x1A)


}; 
 
 // Function Engine.AsyncActionLoadPrimaryAssetClass.AsyncLoadPrimaryAssetClass
struct FAsyncLoadPrimaryAssetClass
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FPrimaryAssetId PrimaryAsset;  // 0x8 (0x8)
	struct TArray<struct FName> LoadBundles;  // 0x18 (0x18)
	struct UAsyncActionLoadPrimaryAssetClass* ReturnValue;  // 0x28 (0x28)


}; 
 
 // Function Engine.Pawn.IsLocallyViewed
struct FIsLocallyViewed
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.Pawn.IsPawnControlled
struct FIsPawnControlled
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.ClientSetViewTarget
struct FClientSetViewTarget
{
	struct AActor* A;  // 0x0 (0x0)
	struct FViewTargetTransitionParams TransitionParams;  // 0x8 (0x8)


}; 
 
 // Function Engine.DataLayerSubsystem.GetDataLayerStateByLabel
struct FGetDataLayerStateByLabel
{
	struct FName InDataLayerLabel;  // 0x0 (0x0)
	uint8_t ReturnValue;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.Pawn.IsPlayerControlled
struct FIsPlayerControlled
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.Character.GetBaseTranslationOffset
struct FGetBaseTranslationOffset
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.Pawn.ReceiveUnpossessed
struct FReceiveUnpossessed
{
	struct AController* OldController;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimSingleNodeInstance.PlayAnim
struct FPlayAnim
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bIsLooping : 1;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	float InPlayRate;  // 0x4 (0x4)
	float InStartPosition;  // 0x8 (0x8)


}; 
 
 // Function Engine.Pawn.SetCanAffectNavigationGeneration
struct FSetCanAffectNavigationGeneration
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewValue : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool bForceUpdate : 1;  // 0x1 (0x1)


}; 
 
 // Function Engine.KismetMathLibrary.FindClosestPointOnLine
struct FFindClosestPointOnLine
{
	struct FVector Point;  // 0x0 (0x0)
	struct FVector LineOrigin;  // 0x18 (0x18)
	struct FVector LineDirection;  // 0x30 (0x30)
	struct FVector ReturnValue;  // 0x48 (0x48)


}; 
 
 // Function Engine.DefaultPawn.LookUpAtRate
struct FLookUpAtRate
{
	float Rate;  // 0x0 (0x0)


}; 
 
 // Function Engine.DefaultPawn.MoveRight
struct FMoveRight
{
	float Val;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkyAtmosphereComponent.SetMieScattering
struct FSetMieScattering
{
	struct FLinearColor NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.DataLayerSubsystem.GetActiveDataLayerNames
struct FGetActiveDataLayerNames
{
	struct TSet<struct FName> ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.DefaultPawn.MoveUp_World
struct FMoveUp_World
{
	float Val;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Dot_VectorVector
struct FDot_VectorVector
{
	struct FVector A;  // 0x0 (0x0)
	struct FVector B;  // 0x18 (0x18)
	double ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.AnimNotifyState.GetNotifyName
struct FGetNotifyName
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimNotifyState.Received_NotifyBegin
struct FReceived_NotifyBegin
{
	struct USkeletalMeshComponent* MeshComp;  // 0x0 (0x0)
	struct UAnimSequenceBase* Animation;  // 0x8 (0x8)
	float TotalDuration;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)
	struct FAnimNotifyEventReference EventReference;  // 0x18 (0x18)
	char pad_64_1 : 7;  // 0x40 (0x40)
	bool ReturnValue : 1;  // 0x40 (0x40)
	char pad_65[7];  // 0x41 (0x41)


}; 
 
 // Function Engine.SkinnedMeshComponent.ClearVertexColorOverride
struct FClearVertexColorOverride
{
	int32_t LODIndex;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimNotifyState.Received_NotifyEnd
struct FReceived_NotifyEnd
{
	struct USkeletalMeshComponent* MeshComp;  // 0x0 (0x0)
	struct UAnimSequenceBase* Animation;  // 0x8 (0x8)
	struct FAnimNotifyEventReference EventReference;  // 0x10 (0x10)
	char pad_56_1 : 7;  // 0x38 (0x38)
	bool ReturnValue : 1;  // 0x38 (0x38)
	char pad_57[7];  // 0x39 (0x39)


}; 
 
 // Function Engine.BlueprintPathsLibrary.GetEditorLocalizationPaths
struct FGetEditorLocalizationPaths
{
	struct TArray<struct FString> ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.FXSystemComponent.SetAutoAttachmentParameters
struct FSetAutoAttachmentParameters
{
	struct USceneComponent* Parent;  // 0x0 (0x0)
	struct FName SocketName;  // 0x8 (0x8)
	uint8_t LocationRule;  // 0x10 (0x10)
	uint8_t RotationRule;  // 0x11 (0x11)
	uint8_t ScaleRule;  // 0x12 (0x12)
	char pad_19[5];  // 0x13 (0x13)


}; 
 
 // Function Engine.GameUserSettings.GetSyncInterval
struct FGetSyncInterval
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.SwitchLevel
struct FSwitchLevel
{
	struct FString URL;  // 0x0 (0x0)


}; 
 
 // Function Engine.AudioComponent.SetBoolParameter
struct FSetBoolParameter
{
	struct FName InName;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool InBool : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.ParticleSystemComponent.GetBeamTargetStrength
struct FGetBeamTargetStrength
{
	int32_t EmitterIndex;  // 0x0 (0x0)
	int32_t TargetIndex;  // 0x4 (0x4)
	float OutTargetStrength;  // 0x8 (0x8)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool ReturnValue : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)


}; 
 
 // Function Engine.BlueprintSetLibrary.Set_Remove
struct FSet_Remove
{
	struct TSet<int32_t> TargetSet;  // 0x0 (0x0)
	int32_t Item;  // 0x50 (0x50)
	char pad_84_1 : 7;  // 0x54 (0x54)
	bool ReturnValue : 1;  // 0x54 (0x54)
	char pad_85[3];  // 0x55 (0x55)


}; 
 
 // Function Engine.FXSystemComponent.SetEmitterEnable
struct FSetEmitterEnable
{
	struct FName EmitterName;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bNewEnableState : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.Emitter.SetFloatParameter
struct FSetFloatParameter
{
	struct FName ParameterName;  // 0x0 (0x0)
	float Param;  // 0x8 (0x8)


}; 
 
 // Function Engine.AudioComponent.SetIntParameter
struct FSetIntParameter
{
	struct FName InName;  // 0x0 (0x0)
	int32_t inInt;  // 0x8 (0x8)


}; 
 
 // Function Engine.CameraShakeBase.SetRootShakePattern
struct FSetRootShakePattern
{
	struct UCameraShakePattern* InPattern;  // 0x0 (0x0)


}; 
 
 // Function Engine.BoxComponent.SetBoxExtent
struct FSetBoxExtent
{
	struct FVector InBoxExtent;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bUpdateOverlaps : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.BoxComponent.SetLineThickness
struct FSetLineThickness
{
	float Thickness;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineComponent.AddPoints
struct FAddPoints
{
	struct TArray<struct FSplinePoint> Points;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool bUpdateSpline : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.Character.Crouch
struct FCrouch
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bClientSimulation : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineComponent.AddSplinePoint
struct FAddSplinePoint
{
	struct FVector Position;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x18 (0x18)
	char pad_25_1 : 7;  // 0x19 (0x19)
	bool bUpdateSpline : 1;  // 0x19 (0x19)
	char pad_26[6];  // 0x1A (0x1A)


}; 
 
 // Function Engine.AnimationDataController.DuplicateCurve
struct FDuplicateCurve
{
	struct FAnimationCurveIdentifier CopyCurveId;  // 0x0 (0x0)
	struct FAnimationCurveIdentifier NewCurveId;  // 0x10 (0x10)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool bShouldTransact : 1;  // 0x20 (0x20)
	char pad_33_1 : 7;  // 0x21 (0x21)
	bool ReturnValue : 1;  // 0x21 (0x21)
	char pad_34[2];  // 0x22 (0x22)


}; 
 
 // Function Engine.ParticleSystemComponent.GenerateParticleEvent
struct FGenerateParticleEvent
{
	struct FName InEventName;  // 0x0 (0x0)
	float InEmitterTime;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)
	struct FVector InLocation;  // 0x10 (0x10)
	struct FVector InDirection;  // 0x28 (0x28)
	struct FVector InVelocity;  // 0x40 (0x40)


}; 
 
 // Function Engine.SplineComponent.ConvertSplineToPolyLine
struct FConvertSplineToPolyLine
{
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	float MaxSquareDistanceFromSpline;  // 0x4 (0x4)
	struct TArray<struct FVector> OutPoints;  // 0x8 (0x8)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool ReturnValue : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.SplineComponent.FindLocationClosestToWorldLocation
struct FFindLocationClosestToWorldLocation
{
	struct FVector WorldLocation;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)
	struct FVector ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.LightComponent.SetIntensity
struct FSetIntensity
{
	float NewIntensity;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineComponent.FindRightVectorClosestToWorldLocation
struct FFindRightVectorClosestToWorldLocation
{
	struct FVector WorldLocation;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)
	struct FVector ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.SplineComponent.FindTangentClosestToWorldLocation
struct FFindTangentClosestToWorldLocation
{
	struct FVector WorldLocation;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)
	struct FVector ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.SplineComponent.FindUpVectorClosestToWorldLocation
struct FFindUpVectorClosestToWorldLocation
{
	struct FVector WorldLocation;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)
	struct FVector ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.CheatManager.ViewPlayer
struct FViewPlayer
{
	struct FString S;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineComponent.GetArriveTangentAtSplinePoint
struct FGetArriveTangentAtSplinePoint
{
	int32_t PointIndex;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.Quat_Identity
struct FQuat_Identity
{
	struct FQuat ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.GetHitResultUnderFingerForObjects
struct FGetHitResultUnderFingerForObjects
{
	enum class ETouchIndex FingerIndex;  // 0x0 (0x0)
	char pad_1[7];  // 0x1 (0x1)
	struct TArray<enum class EObjectTypeQuery> ObjectTypes;  // 0x8 (0x8)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bTraceComplex : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)
	struct FHitResult HitResult;  // 0x20 (0x20)
	char pad_264_1 : 7;  // 0x108 (0x108)
	bool ReturnValue : 1;  // 0x108 (0x108)
	char pad_265[7];  // 0x109 (0x109)


}; 
 
 // Function Engine.StaticMesh.AddMaterial
struct FAddMaterial
{
	struct UMaterialInterface* Material;  // 0x0 (0x0)
	struct FName ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.SplineComponent.GetDefaultUpVector
struct FGetDefaultUpVector
{
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x0 (0x0)
	char pad_1[7];  // 0x1 (0x1)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.CapsuleComponent.GetScaledCapsuleSize_WithoutHemisphere
struct FGetScaledCapsuleSize_WithoutHemisphere
{
	float OutRadius;  // 0x0 (0x0)
	float OutHalfHeightWithoutHemisphere;  // 0x4 (0x4)


}; 
 
 // Function Engine.KismetMathLibrary.FromDays
struct FFromDays
{
	float Days;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FTimespan ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.SplineComponent.GetDirectionAtDistanceAlongSpline
struct FGetDirectionAtDistanceAlongSpline
{
	float Distance;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.SplineComponent.GetFloatPropertyAtSplinePoint
struct FGetFloatPropertyAtSplinePoint
{
	int32_t Index;  // 0x0 (0x0)
	struct FName PropertyName;  // 0x4 (0x4)
	float ReturnValue;  // 0xC (0xC)


}; 
 
 // Function Engine.SplineComponent.GetInputKeyAtDistanceAlongSpline
struct FGetInputKeyAtDistanceAlongSpline
{
	float Distance;  // 0x0 (0x0)
	float ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.PawnMovementComponent.GetLastInputVector
struct FGetLastInputVector
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimSingleNodeInstance.SetReverse
struct FSetReverse
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bInReverse : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineComponent.GetLeaveTangentAtSplinePoint
struct FGetLeaveTangentAtSplinePoint
{
	int32_t PointIndex;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.SplineComponent.GetLocationAtSplineInputKey
struct FGetLocationAtSplineInputKey
{
	float InKey;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.PlayerState.IsABot
struct FIsABot
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintSetLibrary.Set_Intersection
struct FSet_Intersection
{
	struct TSet<int32_t> A;  // 0x0 (0x0)
	struct TSet<int32_t> B;  // 0x50 (0x50)
	struct TSet<int32_t> Result;  // 0xA0 (0xA0)


}; 
 
 // Function Engine.SplineComponent.GetRotationAtSplinePoint
struct FGetRotationAtSplinePoint
{
	int32_t PointIndex;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)
	struct FRotator ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.PlayerController.ClientEnableNetworkVoice
struct FClientEnableNetworkVoice
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bEnable : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineComponent.GetNumberOfSplinePoints
struct FGetNumberOfSplinePoints
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineComponent.GetNumberOfSplineSegments
struct FGetNumberOfSplineSegments
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetInputLibrary.EqualEqual_InputChordInputChord
struct FEqualEqual_InputChordInputChord
{
	struct FInputChord A;  // 0x0 (0x0)
	struct FInputChord B;  // 0x20 (0x20)
	char pad_64_1 : 7;  // 0x40 (0x40)
	bool ReturnValue : 1;  // 0x40 (0x40)
	char pad_65[7];  // 0x41 (0x41)


}; 
 
 // Function Engine.SplineComponent.GetRightVectorAtSplinePoint
struct FGetRightVectorAtSplinePoint
{
	int32_t PointIndex;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.SplineComponent.GetRollAtDistanceAlongSpline
struct FGetRollAtDistanceAlongSpline
{
	float Distance;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)
	float ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.SplineComponent.GetRollAtSplineInputKey
struct FGetRollAtSplineInputKey
{
	float InKey;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)
	float ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.SplineComponent.GetRollAtSplinePoint
struct FGetRollAtSplinePoint
{
	int32_t PointIndex;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)
	float ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.SkeletalMesh.SetSkeleton
struct FSetSkeleton
{
	struct USkeleton* InSkeleton;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineComponent.GetRollAtTime
struct FGetRollAtTime
{
	float Time;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x4 (0x4)
	char pad_5_1 : 7;  // 0x5 (0x5)
	bool bUseConstantVelocity : 1;  // 0x5 (0x5)
	char pad_6[2];  // 0x6 (0x6)
	float ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.SplineComponent.GetRotationAtDistanceAlongSpline
struct FGetRotationAtDistanceAlongSpline
{
	float Distance;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)
	struct FRotator ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.GameUserSettings.GetFullscreenMode
struct FGetFullscreenMode
{
	enum class EWindowMode ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineComponent.GetScaleAtSplinePoint
struct FGetScaleAtSplinePoint
{
	int32_t PointIndex;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.SplineComponent.GetTangentAtSplineInputKey
struct FGetTangentAtSplineInputKey
{
	float InKey;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.SplineComponent.GetTransformAtSplinePoint
struct FGetTransformAtSplinePoint
{
	int32_t PointIndex;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x4 (0x4)
	char pad_5_1 : 7;  // 0x5 (0x5)
	bool bUseScale : 1;  // 0x5 (0x5)
	char pad_6[10];  // 0x6 (0x6)
	struct FTransform ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.PlayerController.GetDeprecatedInputRollScale
struct FGetDeprecatedInputRollScale
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineComponent.GetTransformAtTime
struct FGetTransformAtTime
{
	float Time;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x4 (0x4)
	char pad_5_1 : 7;  // 0x5 (0x5)
	bool bUseConstantVelocity : 1;  // 0x5 (0x5)
	char pad_6_1 : 7;  // 0x6 (0x6)
	bool bUseScale : 1;  // 0x6 (0x6)
	char pad_7[9];  // 0x7 (0x7)
	struct FTransform ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.SplineComponent.GetUpVectorAtSplineInputKey
struct FGetUpVectorAtSplineInputKey
{
	float InKey;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.SplineComponent.GetUpVectorAtSplinePoint
struct FGetUpVectorAtSplinePoint
{
	int32_t PointIndex;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.TimelineComponent.GetScaledTimelineLength
struct FGetScaledTimelineLength
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineComponent.GetVectorPropertyAtSplineInputKey
struct FGetVectorPropertyAtSplineInputKey
{
	float InKey;  // 0x0 (0x0)
	struct FName PropertyName;  // 0x4 (0x4)
	char pad_12[4];  // 0xC (0xC)
	struct FVector ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetArrayLibrary.Array_Reverse
struct FArray_Reverse
{
	struct TArray<int32_t> TargetArray;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.IsMorning
struct FIsMorning
{
	struct FDateTime A;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.KismetStringLibrary.Conv_NameToString
struct FConv_NameToString
{
	struct FName InName;  // 0x0 (0x0)
	struct FString ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.SplineComponent.GetWorldRotationAtDistanceAlongSpline
struct FGetWorldRotationAtDistanceAlongSpline
{
	float Distance;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FRotator ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.SplineComponent.GetWorldTangentAtDistanceAlongSpline
struct FGetWorldTangentAtDistanceAlongSpline
{
	float Distance;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.SplineComponent.RemoveSplinePoint
struct FRemoveSplinePoint
{
	int32_t Index;  // 0x0 (0x0)
	char pad_4_1 : 7;  // 0x4 (0x4)
	bool bUpdateSpline : 1;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)


}; 
 
 // Function Engine.SplineComponent.SetClosedLoop
struct FSetClosedLoop
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bInClosedLoop : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool bUpdateSpline : 1;  // 0x1 (0x1)


}; 
 
 // Function Engine.SplineComponent.SetClosedLoopAtPosition
struct FSetClosedLoopAtPosition
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bInClosedLoop : 1;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	float Key;  // 0x4 (0x4)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bUpdateSpline : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.SplineComponent.SetSplineLocalPoints
struct FSetSplineLocalPoints
{
	struct TArray<struct FVector> Points;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineComponent.SetSplinePoints
struct FSetSplinePoints
{
	struct TArray<struct FVector> Points;  // 0x0 (0x0)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x10 (0x10)
	char pad_17_1 : 7;  // 0x11 (0x11)
	bool bUpdateSpline : 1;  // 0x11 (0x11)
	char pad_18[6];  // 0x12 (0x12)


}; 
 
 // Function Engine.GameplayStatics.GetClosestListenerLocation
struct FGetClosestListenerLocation
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector Location;  // 0x8 (0x8)
	float MaximumRange;  // 0x20 (0x20)
	char pad_36_1 : 7;  // 0x24 (0x24)
	bool bAllowAttenuationOverride : 1;  // 0x24 (0x24)
	char pad_37[3];  // 0x25 (0x25)
	struct FVector ListenerPosition;  // 0x28 (0x28)
	char pad_64_1 : 7;  // 0x40 (0x40)
	bool ReturnValue : 1;  // 0x40 (0x40)
	char pad_65[7];  // 0x41 (0x41)


}; 
 
 // Function Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationBadgeFromNow
struct FScheduleLocalNotificationBadgeFromNow
{
	int32_t inSecondsFromNow;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FString ActivationEvent;  // 0x8 (0x8)


}; 
 
 // Function Engine.SplineComponent.SetSplineWorldPoints
struct FSetSplineWorldPoints
{
	struct TArray<struct FVector> Points;  // 0x0 (0x0)


}; 
 
 // Function Engine.Character.LaunchCharacter
struct FLaunchCharacter
{
	struct FVector LaunchVelocity;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bXYOverride : 1;  // 0x18 (0x18)
	char pad_25_1 : 7;  // 0x19 (0x19)
	bool bZOverride : 1;  // 0x19 (0x19)
	char pad_26[6];  // 0x1A (0x1A)


}; 
 
 // Function Engine.AnimInstance.WasAnimNotifyTriggeredInStateMachine
struct FWasAnimNotifyTriggeredInStateMachine
{
	int32_t MachineIndex;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	UAnimNotify* AnimNotifyType;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.SplineComponent.SetTangentAtSplinePoint
struct FSetTangentAtSplinePoint
{
	int32_t PointIndex;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector InTangent;  // 0x8 (0x8)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x20 (0x20)
	char pad_33_1 : 7;  // 0x21 (0x21)
	bool bUpdateSpline : 1;  // 0x21 (0x21)
	char pad_34[6];  // 0x22 (0x22)


}; 
 
 // Function Engine.AnimInstance.BlueprintThreadSafeUpdateAnimation
struct FBlueprintThreadSafeUpdateAnimation
{
	float DeltaTime;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.SignOfFloat
struct FSignOfFloat
{
	double A;  // 0x0 (0x0)
	double ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.SplineComponent.SetUpVectorAtSplinePoint
struct FSetUpVectorAtSplinePoint
{
	int32_t PointIndex;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector InUpVector;  // 0x8 (0x8)
	enum class ESplineCoordinateSpace CoordinateSpace;  // 0x20 (0x20)
	char pad_33_1 : 7;  // 0x21 (0x21)
	bool bUpdateSpline : 1;  // 0x21 (0x21)
	char pad_34[6];  // 0x22 (0x22)


}; 
 
 // Function Engine.InputComponent.GetControllerVectorKeyState
struct FGetControllerVectorKeyState
{
	struct FKey Key;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.InputComponent.GetTouchState
struct FGetTouchState
{
	int32_t FingerIndex;  // 0x0 (0x0)
	float LocationX;  // 0x4 (0x4)
	float LocationY;  // 0x8 (0x8)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bIsCurrentlyPressed : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)


}; 
 
 // Function Engine.InputComponent.OnInputOwnerEndPlayed
struct FOnInputOwnerEndPlayed
{
	struct AActor* InOwner;  // 0x0 (0x0)
	enum class EEndPlayReason EndPlayReason;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.KismetMathLibrary.Divide_VectorInt
struct FDivide_VectorInt
{
	struct FVector A;  // 0x0 (0x0)
	int32_t B;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)
	struct FVector ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.InputComponent.WasControllerKeyJustPressed
struct FWasControllerKeyJustPressed
{
	struct FKey Key;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool ReturnValue : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.InputComponent.WasControllerKeyJustReleased
struct FWasControllerKeyJustReleased
{
	struct FKey Key;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool ReturnValue : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.Character.CacheInitialMeshOffset
struct FCacheInitialMeshOffset
{
	struct FVector MeshRelativeLocation;  // 0x0 (0x0)
	struct FRotator MeshRelativeRotation;  // 0x18 (0x18)


}; 
 
 // Function Engine.Character.CanCrouch
struct FCanCrouch
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.PostProcessVolume.AddOrUpdateBlendable
struct FAddOrUpdateBlendable
{
	struct TScriptInterface<IBlendableInterface> InBlendableObject;  // 0x0 (0x0)
	float InWeight;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)


}; 
 
 // Function Engine.KismetInternationalizationLibrary.SetCurrentAssetGroupCulture
struct FSetCurrentAssetGroupCulture
{
	struct FName AssetGroup;  // 0x0 (0x0)
	struct FString culture;  // 0x8 (0x8)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool SaveToConfig : 1;  // 0x18 (0x18)
	char pad_25_1 : 7;  // 0x19 (0x19)
	bool ReturnValue : 1;  // 0x19 (0x19)
	char pad_26[6];  // 0x1A (0x1A)


}; 
 
 // Function Engine.Character.ClientAckGoodMove
struct FClientAckGoodMove
{
	float Timestamp;  // 0x0 (0x0)


}; 
 
 // Function Engine.Character.ClientAdjustRootMotionPosition
struct FClientAdjustRootMotionPosition
{
	float Timestamp;  // 0x0 (0x0)
	float ServerMontageTrackPosition;  // 0x4 (0x4)
	struct FVector ServerLoc;  // 0x8 (0x8)
	struct FVector_NetQuantizeNormal ServerRotation;  // 0x20 (0x20)
	float ServerVelZ;  // 0x38 (0x38)
	char pad_60[4];  // 0x3C (0x3C)
	struct UPrimitiveComponent* ServerBase;  // 0x40 (0x40)
	struct FName ServerBoneName;  // 0x48 (0x48)
	char pad_80_1 : 7;  // 0x50 (0x50)
	bool bHasBase : 1;  // 0x50 (0x50)
	char pad_81_1 : 7;  // 0x51 (0x51)
	bool bBaseRelativePosition : 1;  // 0x51 (0x51)
	char ServerMovementMode;  // 0x52 (0x52)
	char pad_83[5];  // 0x53 (0x53)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_RotatorToQuaternion
struct FConv_RotatorToQuaternion
{
	struct FRotator InRot;  // 0x0 (0x0)
	char pad_24[8];  // 0x18 (0x18)
	struct FQuat ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.PlatformInputDeviceMapperLibrary.GetInputDeviceConnectionState
struct FGetInputDeviceConnectionState
{
	struct FInputDeviceId DeviceID;  // 0x0 (0x0)
	uint8_t ReturnValue;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)


}; 
 
 // Function Engine.Light.GetBrightness
struct FGetBrightness
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.Character.GetAnimRootMotionTranslationScale
struct FGetAnimRootMotionTranslationScale
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.Character.HasAnyRootMotion
struct FHasAnyRootMotion
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.Character.K2_OnStartCrouch
struct FK2_OnStartCrouch
{
	float HalfHeightAdjust;  // 0x0 (0x0)
	float ScaledHalfHeightAdjust;  // 0x4 (0x4)


}; 
 
 // Function Engine.GameplayStatics.RebaseLocalOriginOntoZero
struct FRebaseLocalOriginOntoZero
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector WorldLocation;  // 0x8 (0x8)
	struct FVector ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.Character.OnLanded
struct FOnLanded
{
	struct FHitResult Hit;  // 0x0 (0x0)


}; 
 
 // Function Engine.Canvas.K2_DrawMaterial
struct FK2_DrawMaterial
{
	struct UMaterialInterface* RenderMaterial;  // 0x0 (0x0)
	struct FVector2D ScreenPosition;  // 0x8 (0x8)
	struct FVector2D ScreenSize;  // 0x18 (0x18)
	struct FVector2D CoordinatePosition;  // 0x28 (0x28)
	struct FVector2D CoordinateSize;  // 0x38 (0x38)
	float Rotation;  // 0x48 (0x48)
	char pad_76[4];  // 0x4C (0x4C)
	struct FVector2D PivotPoint;  // 0x50 (0x50)


}; 
 
 // Function Engine.BlueprintPathsLibrary.GetRestrictedFolderNames
struct FGetRestrictedFolderNames
{
	struct TArray<struct FString> ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.Character.OnLaunched
struct FOnLaunched
{
	struct FVector LaunchVelocity;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bXYOverride : 1;  // 0x18 (0x18)
	char pad_25_1 : 7;  // 0x19 (0x19)
	bool bZOverride : 1;  // 0x19 (0x19)
	char pad_26[6];  // 0x1A (0x1A)


}; 
 
 // Function Engine.Character.OnWalkingOffLedge
struct FOnWalkingOffLedge
{
	struct FVector PreviousFloorImpactNormal;  // 0x0 (0x0)
	struct FVector PreviousFloorContactNormal;  // 0x18 (0x18)
	struct FVector PreviousLocation;  // 0x30 (0x30)
	float TimeDelta;  // 0x48 (0x48)
	char pad_76[4];  // 0x4C (0x4C)


}; 
 
 // Function Engine.StaticMeshComponent.SetEvaluateWorldPositionOffsetInRayTracing
struct FSetEvaluateWorldPositionOffsetInRayTracing
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool NewValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Vector4_IsZero
struct FVector4_IsZero
{
	struct FVector4 A;  // 0x0 (0x0)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[15];  // 0x21 (0x21)


}; 
 
 // Function Engine.Character.PlayAnimMontage
struct FPlayAnimMontage
{
	struct UAnimMontage* AnimMontage;  // 0x0 (0x0)
	float InPlayRate;  // 0x8 (0x8)
	struct FName StartSectionName;  // 0xC (0xC)
	float ReturnValue;  // 0x14 (0x14)


}; 
 
 // Function Engine.GameModeBase.InitStartSpot
struct FInitStartSpot
{
	struct AActor* StartSpot;  // 0x0 (0x0)
	struct AController* NewPlayer;  // 0x8 (0x8)


}; 
 
 // Function Engine.Character.ServerMoveDualHybridRootMotion
struct FServerMoveDualHybridRootMotion
{
	float TimeStamp0;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector_NetQuantize10 InAccel0;  // 0x8 (0x8)
	char PendingFlags;  // 0x20 (0x20)
	char pad_33[3];  // 0x21 (0x21)
	uint32_t View0;  // 0x24 (0x24)
	float Timestamp;  // 0x28 (0x28)
	char pad_44[4];  // 0x2C (0x2C)
	struct FVector_NetQuantize10 InAccel;  // 0x30 (0x30)
	struct FVector_NetQuantize100 ClientLoc;  // 0x48 (0x48)
	char NewFlags;  // 0x60 (0x60)
	char ClientRoll;  // 0x61 (0x61)
	char pad_98[2];  // 0x62 (0x62)
	uint32_t View;  // 0x64 (0x64)
	struct UPrimitiveComponent* ClientMovementBase;  // 0x68 (0x68)
	struct FName ClientBaseBoneName;  // 0x70 (0x70)
	char ClientMovementMode;  // 0x78 (0x78)
	char pad_121[7];  // 0x79 (0x79)


}; 
 
 // Function Engine.TimelineComponent.SetVectorCurve
struct FSetVectorCurve
{
	struct UCurveVector* NewVectorCurve;  // 0x0 (0x0)
	struct FName VectorTrackName;  // 0x8 (0x8)


}; 
 
 // Function Engine.Character.ServerMoveDualNoBase
struct FServerMoveDualNoBase
{
	float TimeStamp0;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector_NetQuantize10 InAccel0;  // 0x8 (0x8)
	char PendingFlags;  // 0x20 (0x20)
	char pad_33[3];  // 0x21 (0x21)
	uint32_t View0;  // 0x24 (0x24)
	float Timestamp;  // 0x28 (0x28)
	char pad_44[4];  // 0x2C (0x2C)
	struct FVector_NetQuantize10 InAccel;  // 0x30 (0x30)
	struct FVector_NetQuantize100 ClientLoc;  // 0x48 (0x48)
	char NewFlags;  // 0x60 (0x60)
	char ClientRoll;  // 0x61 (0x61)
	char pad_98[2];  // 0x62 (0x62)
	uint32_t View;  // 0x64 (0x64)
	char ClientMovementMode;  // 0x68 (0x68)
	char pad_105[7];  // 0x69 (0x69)


}; 
 
 // Function Engine.Character.ServerMoveNoBase
struct FServerMoveNoBase
{
	float Timestamp;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector_NetQuantize10 InAccel;  // 0x8 (0x8)
	struct FVector_NetQuantize100 ClientLoc;  // 0x20 (0x20)
	char CompressedMoveFlags;  // 0x38 (0x38)
	char ClientRoll;  // 0x39 (0x39)
	char pad_58[2];  // 0x3A (0x3A)
	uint32_t View;  // 0x3C (0x3C)
	char ClientMovementMode;  // 0x40 (0x40)
	char pad_65[7];  // 0x41 (0x41)


}; 
 
 // Function Engine.Character.ServerMoveOld
struct FServerMoveOld
{
	float OldTimeStamp;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector_NetQuantize10 OldAccel;  // 0x8 (0x8)
	char OldMoveFlags;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.AnimInstance.CalculateDirection
struct FCalculateDirection
{
	struct FVector Velocity;  // 0x0 (0x0)
	struct FRotator BaseRotation;  // 0x18 (0x18)
	float ReturnValue;  // 0x30 (0x30)
	char pad_52[4];  // 0x34 (0x34)


}; 
 
 // Function Engine.DirectionalLightComponent.SetShadowCascadeBiasDistribution
struct FSetShadowCascadeBiasDistribution
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimInstance.GetAllCurveNames
struct FGetAllCurveNames
{
	struct TArray<struct FName> OutNames;  // 0x0 (0x0)


}; 
 
 // Function Engine.CapsuleComponent.GetUnscaledCapsuleSize_WithoutHemisphere
struct FGetUnscaledCapsuleSize_WithoutHemisphere
{
	float OutRadius;  // 0x0 (0x0)
	float OutHalfHeightWithoutHemisphere;  // 0x4 (0x4)


}; 
 
 // Function Engine.CurveSourceInterface.GetCurveValue
struct FGetCurveValue
{
	struct FName CurveName;  // 0x0 (0x0)
	float ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.GameUserSettings.SetResolutionScaleValueEx
struct FSetResolutionScaleValueEx
{
	float NewScaleValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimInstance.GetDeltaSeconds
struct FGetDeltaSeconds
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimInstance.GetInstanceAssetPlayerTime
struct FGetInstanceAssetPlayerTime
{
	int32_t AssetPlayerIndex;  // 0x0 (0x0)
	float ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFraction
struct FGetInstanceAssetPlayerTimeFraction
{
	int32_t AssetPlayerIndex;  // 0x0 (0x0)
	float ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.AnimInstance.GetInstanceCurrentStateElapsedTime
struct FGetInstanceCurrentStateElapsedTime
{
	int32_t MachineIndex;  // 0x0 (0x0)
	float ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.KismetMathLibrary.GetDayOfYear
struct FGetDayOfYear
{
	struct FDateTime A;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.GameplayStatics.SpawnSoundAttached
struct FSpawnSoundAttached
{
	struct USoundBase* Sound;  // 0x0 (0x0)
	struct USceneComponent* AttachToComponent;  // 0x8 (0x8)
	struct FName AttachPointName;  // 0x10 (0x10)
	struct FVector Location;  // 0x18 (0x18)
	struct FRotator Rotation;  // 0x30 (0x30)
	enum class EAttachLocation LocationType;  // 0x48 (0x48)
	char pad_73_1 : 7;  // 0x49 (0x49)
	bool bStopWhenAttachedToDestroyed : 1;  // 0x49 (0x49)
	char pad_74[2];  // 0x4A (0x4A)
	float VolumeMultiplier;  // 0x4C (0x4C)
	float PitchMultiplier;  // 0x50 (0x50)
	float StartTime;  // 0x54 (0x54)
	struct USoundAttenuation* AttenuationSettings;  // 0x58 (0x58)
	struct USoundConcurrency* ConcurrencySettings;  // 0x60 (0x60)
	char pad_104_1 : 7;  // 0x68 (0x68)
	bool bAutoDestroy : 1;  // 0x68 (0x68)
	char pad_105[7];  // 0x69 (0x69)
	struct UAudioComponent* ReturnValue;  // 0x70 (0x70)


}; 
 
 // Function Engine.AnimInstance.GetInstanceStateWeight
struct FGetInstanceStateWeight
{
	int32_t MachineIndex;  // 0x0 (0x0)
	int32_t StateIndex;  // 0x4 (0x4)
	float ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.TypedElementWorldInterface.CanPromoteElement
struct FCanPromoteElement
{
	struct FScriptTypedElementHandle InElementHandle;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.AnimInstance.GetOwningActor
struct FGetOwningActor
{
	struct AActor* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetArrayLibrary.Array_Random
struct FArray_Random
{
	struct TArray<int32_t> TargetArray;  // 0x0 (0x0)
	int32_t OutItem;  // 0x10 (0x10)
	int32_t OutIndex;  // 0x14 (0x14)


}; 
 
 // Function Engine.AnimInstance.GetReceiveNotifiesFromLinkedInstances
struct FGetReceiveNotifiesFromLinkedInstances
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimInstance.GetSyncGroupPosition
struct FGetSyncGroupPosition
{
	struct FName InSyncGroupName;  // 0x0 (0x0)
	struct FMarkerSyncAnimPosition ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.AtmosphericFogComponent.SetSunMultiplier
struct FSetSunMultiplier
{
	float NewSunMultiplier;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimInstance.IsPlayingSlotAnimation
struct FIsPlayingSlotAnimation
{
	struct UAnimSequenceBase* Asset;  // 0x0 (0x0)
	struct FName SlotNodeName;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.SkyLightComponent.SetOcclusionTint
struct FSetOcclusionTint
{
	struct FColor InTint;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimInstance.IsSyncGroupBetweenMarkers
struct FIsSyncGroupBetweenMarkers
{
	struct FName InSyncGroupName;  // 0x0 (0x0)
	struct FName PreviousMarker;  // 0x8 (0x8)
	struct FName NextMarker;  // 0x10 (0x10)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bRespectMarkerOrder : 1;  // 0x18 (0x18)
	char pad_25_1 : 7;  // 0x19 (0x19)
	bool ReturnValue : 1;  // 0x19 (0x19)
	char pad_26[2];  // 0x1A (0x1A)


}; 
 
 // Function Engine.PlayerController.ServerMutePlayer
struct FServerMutePlayer
{
	struct FUniqueNetIdRepl PlayerId;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.RandomIntegerInRangeFromStream
struct FRandomIntegerInRangeFromStream
{
	int32_t Min;  // 0x0 (0x0)
	int32_t Max;  // 0x4 (0x4)
	struct FRandomStream Stream;  // 0x8 (0x8)
	int32_t ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.AnimInstance.IsUsingMainInstanceMontageEvaluationData
struct FIsUsingMainInstanceMontageEvaluationData
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.DataLayerSubsystem.GetDataLayerFromName
struct FGetDataLayerFromName
{
	struct FName InDataLayerName;  // 0x0 (0x0)
	struct UDataLayerInstance* ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.SkeletalMeshComponent.LinkAnimGraphByTag
struct FLinkAnimGraphByTag
{
	struct FName InTag;  // 0x0 (0x0)
	UAnimInstance* InClass;  // 0x8 (0x8)


}; 
 
 // Function Engine.SkeletalMeshComponent.AccumulateAllBodiesBelowPhysicsBlendWeight
struct FAccumulateAllBodiesBelowPhysicsBlendWeight
{
	struct FName InBoneName;  // 0x0 (0x0)
	float AddPhysicsBlendWeight;  // 0x8 (0x8)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bSkipCustomPhysicsType : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)


}; 
 
 // Function Engine.KismetMathLibrary.NearlyEqual_FloatFloat
struct FNearlyEqual_FloatFloat
{
	double A;  // 0x0 (0x0)
	double B;  // 0x8 (0x8)
	double ErrorTolerance;  // 0x10 (0x10)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool ReturnValue : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.AnimInstance.LockAIResources
struct FLockAIResources
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bLockMovement : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool LockAILogic : 1;  // 0x1 (0x1)


}; 
 
 // Function Engine.AnimInstance.Montage_GetCurrentSection
struct FMontage_GetCurrentSection
{
	struct UAnimMontage* Montage;  // 0x0 (0x0)
	struct FName ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.AnimInstance.Montage_IsActive
struct FMontage_IsActive
{
	struct UAnimMontage* Montage;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.AnimInstance.Montage_Pause
struct FMontage_Pause
{
	struct UAnimMontage* Montage;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimInstance.Montage_SetNextSection
struct FMontage_SetNextSection
{
	struct FName SectionNameToChange;  // 0x0 (0x0)
	struct FName NextSection;  // 0x8 (0x8)
	struct UAnimMontage* Montage;  // 0x10 (0x10)


}; 
 
 // Function Engine.NavMovementComponent.IsMovingOnGround
struct FIsMovingOnGround
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.Controller.ClientSetLocation
struct FClientSetLocation
{
	struct FVector NewLocation;  // 0x0 (0x0)
	struct FRotator NewRotation;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetStringLibrary.Right
struct FRight
{
	struct FString SourceString;  // 0x0 (0x0)
	int32_t Count;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)
	struct FString ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.AnimInstance.Montage_SetPlayRate
struct FMontage_SetPlayRate
{
	struct UAnimMontage* Montage;  // 0x0 (0x0)
	float NewPlayRate;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.AnimInstance.Montage_StopWithBlendOut
struct FMontage_StopWithBlendOut
{
	struct FAlphaBlendArgs BlendOut;  // 0x0 (0x0)
	struct UAnimMontage* Montage;  // 0x10 (0x10)


}; 
 
 // Function Engine.InstancedStaticMeshComponent.AddInstance
struct FAddInstance
{
	struct FTransform InstanceTransform;  // 0x0 (0x0)
	char pad_96_1 : 7;  // 0x60 (0x60)
	bool bWorldSpace : 1;  // 0x60 (0x60)
	char pad_97[3];  // 0x61 (0x61)
	int32_t ReturnValue;  // 0x64 (0x64)
	char pad_104[8];  // 0x68 (0x68)


}; 
 
 // Function Engine.AnimInstance.Montage_StopWithBlendSettings
struct FMontage_StopWithBlendSettings
{
	struct FMontageBlendSettings BlendOutSettings;  // 0x0 (0x0)
	struct UAnimMontage* Montage;  // 0x20 (0x20)


}; 
 
 // Function Engine.AnimInstance.PlaySlotAnimationAsDynamicMontage
struct FPlaySlotAnimationAsDynamicMontage
{
	struct UAnimSequenceBase* Asset;  // 0x0 (0x0)
	struct FName SlotNodeName;  // 0x8 (0x8)
	float BlendInTime;  // 0x10 (0x10)
	float BlendOutTime;  // 0x14 (0x14)
	float InPlayRate;  // 0x18 (0x18)
	int32_t LoopCount;  // 0x1C (0x1C)
	float BlendOutTriggerTime;  // 0x20 (0x20)
	float InTimeToStartMontageAt;  // 0x24 (0x24)
	struct UAnimMontage* ReturnValue;  // 0x28 (0x28)


}; 
 
 // Function Engine.AnimInstance.PlaySlotAnimationAsDynamicMontage_WithBlendArgs
struct FPlaySlotAnimationAsDynamicMontage_WithBlendArgs
{
	struct UAnimSequenceBase* Asset;  // 0x0 (0x0)
	struct FName SlotNodeName;  // 0x8 (0x8)
	struct FAlphaBlendArgs BlendIn;  // 0x10 (0x10)
	struct FAlphaBlendArgs BlendOut;  // 0x20 (0x20)
	float InPlayRate;  // 0x30 (0x30)
	int32_t LoopCount;  // 0x34 (0x34)
	float BlendOutTriggerTime;  // 0x38 (0x38)
	float InTimeToStartMontageAt;  // 0x3C (0x3C)
	struct UAnimMontage* ReturnValue;  // 0x40 (0x40)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_IsNearlyZero
struct FVector_IsNearlyZero
{
	struct FVector A;  // 0x0 (0x0)
	float Tolerance;  // 0x18 (0x18)
	char pad_28_1 : 7;  // 0x1C (0x1C)
	bool ReturnValue : 1;  // 0x1C (0x1C)
	char pad_29[3];  // 0x1D (0x1D)


}; 
 
 // Function Engine.AnimInstance.PlaySlotAnimationAsDynamicMontage_WithBlendSettings
struct FPlaySlotAnimationAsDynamicMontage_WithBlendSettings
{
	struct UAnimSequenceBase* Asset;  // 0x0 (0x0)
	struct FName SlotNodeName;  // 0x8 (0x8)
	struct FMontageBlendSettings BlendInSettings;  // 0x10 (0x10)
	struct FMontageBlendSettings BlendOutSettings;  // 0x30 (0x30)
	float InPlayRate;  // 0x50 (0x50)
	int32_t LoopCount;  // 0x54 (0x54)
	float BlendOutTriggerTime;  // 0x58 (0x58)
	float InTimeToStartMontageAt;  // 0x5C (0x5C)
	struct UAnimMontage* ReturnValue;  // 0x60 (0x60)


}; 
 
 // Function Engine.KismetGuidLibrary.Parse_StringToGuid
struct FParse_StringToGuid
{
	struct FString GuidString;  // 0x0 (0x0)
	struct FGuid OutGuid;  // 0x10 (0x10)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool Success : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.AnimInstance.QueryTransitionEvent
struct FQueryTransitionEvent
{
	int32_t MachineIndex;  // 0x0 (0x0)
	int32_t TransitionIndex;  // 0x4 (0x4)
	struct FName EventName;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[3];  // 0x11 (0x11)


}; 
 
 // Function Engine.AnimInstance.RemovePoseSnapshot
struct FRemovePoseSnapshot
{
	struct FName SnapshotName;  // 0x0 (0x0)


}; 
 
 // Function Engine.MaterialInstanceDynamic.SetDoubleVectorParameterValue
struct FSetDoubleVectorParameterValue
{
	struct FName ParameterName;  // 0x0 (0x0)
	char pad_8[8];  // 0x8 (0x8)
	struct FVector4 Value;  // 0x10 (0x10)


}; 
 
 // Function Engine.AnimInstance.RequestSlotGroupInertialization
struct FRequestSlotGroupInertialization
{
	struct FName InSlotGroupName;  // 0x0 (0x0)
	float Duration;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)
	struct UBlendProfile* BlendProfile;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.Add_ByteByte
struct FAdd_ByteByte
{
	char A;  // 0x0 (0x0)
	char B;  // 0x1 (0x1)
	char ReturnValue;  // 0x2 (0x2)


}; 
 
 // Function Engine.AnimInstance.RequestTransitionEvent
struct FRequestTransitionEvent
{
	struct FName EventName;  // 0x0 (0x0)
	double RequestTimeout;  // 0x8 (0x8)
	uint8_t QueueMode;  // 0x10 (0x10)
	uint8_t OverwriteMode;  // 0x11 (0x11)
	char pad_18_1 : 7;  // 0x12 (0x12)
	bool ReturnValue : 1;  // 0x12 (0x12)
	char pad_19[5];  // 0x13 (0x13)


}; 
 
 // Function Engine.KismetMathLibrary.Vector4_Set
struct FVector4_Set
{
	struct FVector4 A;  // 0x0 (0x0)
	double X;  // 0x20 (0x20)
	double Y;  // 0x28 (0x28)
	double Z;  // 0x30 (0x30)
	double W;  // 0x38 (0x38)


}; 
 
 // Function Engine.AnimInstance.SavePoseSnapshot
struct FSavePoseSnapshot
{
	struct FName SnapshotName;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimInstance.SetRootMotionMode
struct FSetRootMotionMode
{
	enum class ERootMotionMode Value;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMeshComponent.SetMorphTarget
struct FSetMorphTarget
{
	struct FName MorphTargetName;  // 0x0 (0x0)
	float Value;  // 0x8 (0x8)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bRemoveZeroWeight : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)


}; 
 
 // Function Engine.AnimInstance.SetPropagateNotifiesToLinkedInstances
struct FSetPropagateNotifiesToLinkedInstances
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bSet : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimInstance.SetReceiveNotifiesFromLinkedInstances
struct FSetReceiveNotifiesFromLinkedInstances
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bSet : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMeshComponent.SnapshotPose
struct FSnapshotPose
{
	struct FPoseSnapshot Snapshot;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.SelectColor
struct FSelectColor
{
	struct FLinearColor A;  // 0x0 (0x0)
	struct FLinearColor B;  // 0x10 (0x10)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool bPickA : 1;  // 0x20 (0x20)
	char pad_33[3];  // 0x21 (0x21)
	struct FLinearColor ReturnValue;  // 0x24 (0x24)


}; 
 
 // Function Engine.AnimInstance.UnlockAIResources
struct FUnlockAIResources
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bUnlockMovement : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool UnlockAILogic : 1;  // 0x1 (0x1)


}; 
 
 // Function Engine.AnimInstance.WasAnimNotifyNameTriggeredInAnyState
struct FWasAnimNotifyNameTriggeredInAnyState
{
	struct FName NotifyName;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.AnimInstance.WasAnimNotifyNameTriggeredInStateMachine
struct FWasAnimNotifyNameTriggeredInStateMachine
{
	int32_t MachineIndex;  // 0x0 (0x0)
	struct FName NotifyName;  // 0x4 (0x4)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool ReturnValue : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)


}; 
 
 // Function Engine.SplineMeshComponent.SetStartAndEnd
struct FSetStartAndEnd
{
	struct FVector StartPos;  // 0x0 (0x0)
	struct FVector StartTangent;  // 0x18 (0x18)
	struct FVector EndPos;  // 0x30 (0x30)
	struct FVector EndTangent;  // 0x48 (0x48)
	char pad_96_1 : 7;  // 0x60 (0x60)
	bool bUpdateMesh : 1;  // 0x60 (0x60)
	char pad_97[7];  // 0x61 (0x61)


}; 
 
 // Function Engine.GameplayStatics.UnRetainAllSoundsInSoundClass
struct FUnRetainAllSoundsInSoundClass
{
	struct USoundClass* InSoundClass;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimInstance.WasAnimNotifyStateActiveInStateMachine
struct FWasAnimNotifyStateActiveInStateMachine
{
	int32_t MachineIndex;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	UAnimNotifyState* AnimNotifyStateType;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.AnimInstance.WasAnimNotifyTriggeredInAnyState
struct FWasAnimNotifyTriggeredInAnyState
{
	UAnimNotify* AnimNotifyType;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.AnimInstance.WasAnimNotifyTriggeredInSourceState
struct FWasAnimNotifyTriggeredInSourceState
{
	int32_t MachineIndex;  // 0x0 (0x0)
	int32_t StateIndex;  // 0x4 (0x4)
	UAnimNotify* AnimNotifyType;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.KismetMathLibrary.Sin
struct FSin
{
	double A;  // 0x0 (0x0)
	double ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.CameraModifier.BlueprintModifyCamera
struct FBlueprintModifyCamera
{
	float DeltaTime;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector ViewLocation;  // 0x8 (0x8)
	struct FRotator ViewRotation;  // 0x20 (0x20)
	float FOV;  // 0x38 (0x38)
	char pad_60[4];  // 0x3C (0x3C)
	struct FVector NewViewLocation;  // 0x40 (0x40)
	struct FRotator NewViewRotation;  // 0x58 (0x58)
	float NewFOV;  // 0x70 (0x70)
	char pad_116[4];  // 0x74 (0x74)


}; 
 
 // Function Engine.CameraModifier.DisableModifier
struct FDisableModifier
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bImmediate : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimDataModel.GetBoneTrackByName
struct FGetBoneTrackByName
{
	struct FName TrackName;  // 0x0 (0x0)
	struct FBoneAnimationTrack ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.DataLayerInstance.IsRuntime
struct FIsRuntime
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.Controller.GetViewTarget
struct FGetViewTarget
{
	struct AActor* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.AudioComponent.GetCookedFFTData
struct FGetCookedFFTData
{
	struct TArray<float> FrequenciesToGet;  // 0x0 (0x0)
	struct TArray<struct FSoundWaveSpectralData> OutSoundWaveSpectralData;  // 0x10 (0x10)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.AudioComponent.HasCookedAmplitudeEnvelopeData
struct FHasCookedAmplitudeEnvelopeData
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineMeshComponent.GetBoundaryMin
struct FGetBoundaryMin
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimationCurveIdentifierExtensions.GetName
struct FGetName
{
	struct FAnimationCurveIdentifier Identifier;  // 0x0 (0x0)
	struct FName ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.AudioComponent.SetPitchMultiplier
struct FSetPitchMultiplier
{
	float NewPitchMultiplier;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPathsLibrary.ShaderWorkingDir
struct FShaderWorkingDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.AudioComponent.SetSound
struct FSetSound
{
	struct USoundBase* NewSound;  // 0x0 (0x0)


}; 
 
 // Function Engine.PhysicsSpringComponent.GetSpringCurrentEndPoint
struct FGetSpringCurrentEndPoint
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.RawAnimSequenceTrackExtensions.GetPositionalKeys
struct FGetPositionalKeys
{
	struct FRawAnimSequenceTrack Track;  // 0x0 (0x0)
	struct TArray<struct FVector> ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.AudioComponent.SetSourceBusSendPostEffect
struct FSetSourceBusSendPostEffect
{
	struct USoundSourceBus* SoundSourceBus;  // 0x0 (0x0)
	float SourceBusSendLevel;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.AudioComponent.SetUISound
struct FSetUISound
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bInUISound : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.AudioComponent.SetVolumeMultiplier
struct FSetVolumeMultiplier
{
	float NewVolumeMultiplier;  // 0x0 (0x0)


}; 
 
 // Function Engine.AudioComponent.SetWaveParameter
struct FSetWaveParameter
{
	struct FName InName;  // 0x0 (0x0)
	struct USoundWave* InWave;  // 0x8 (0x8)


}; 
 
 // Function Engine.StereoLayerComponent.SetEquirectProps
struct FSetEquirectProps
{
	struct FEquirectProps InScaleBiases;  // 0x0 (0x0)


}; 
 
 // Function Engine.Exporter.ScriptRunAssetExportTask
struct FScriptRunAssetExportTask
{
	struct UAssetExportTask* Task;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.KismetMathLibrary.Quat_IsNormalized
struct FQuat_IsNormalized
{
	struct FQuat Q;  // 0x0 (0x0)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[15];  // 0x21 (0x21)


}; 
 
 // Function Engine.InstancedStaticMeshComponent.RemoveInstance
struct FRemoveInstance
{
	int32_t InstanceIndex;  // 0x0 (0x0)
	char pad_4_1 : 7;  // 0x4 (0x4)
	bool ReturnValue : 1;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)


}; 
 
 // Function Engine.NavMovementComponent.IsCrouching
struct FIsCrouching
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.NavMovementComponent.IsFalling
struct FIsFalling
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.PawnMovementComponent.AddInputVector
struct FAddInputVector
{
	struct FVector WorldVector;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bForce : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.PawnMovementComponent.GetPawnOwner
struct FGetPawnOwner
{
	struct APawn* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PawnMovementComponent.GetPendingInputVector
struct FGetPendingInputVector
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.CharacterMovementComponent.GetCurrentAcceleration
struct FGetCurrentAcceleration
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.CharacterMovementComponent.GetImpartedMovementBaseVelocity
struct FGetImpartedMovementBaseVelocity
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.CharacterMovementComponent.GetLastUpdateRotation
struct FGetLastUpdateRotation
{
	struct FRotator ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimDataModel.GetBoneAnimationTracks
struct FGetBoneAnimationTracks
{
	struct TArray<struct FBoneAnimationTrack> ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.CharacterMovementComponent.GetLastUpdateVelocity
struct FGetLastUpdateVelocity
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.CharacterMovementComponent.GetMaxAcceleration
struct FGetMaxAcceleration
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkinnedMeshComponent.ShowAllMaterialSections
struct FShowAllMaterialSections
{
	int32_t LODIndex;  // 0x0 (0x0)


}; 
 
 // Function Engine.StaticMesh.GetStaticMeshDescription
struct FGetStaticMeshDescription
{
	int32_t LODIndex;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct UStaticMeshDescription* ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.GameModeBase.HandleStartingNewPlayer
struct FHandleStartingNewPlayer
{
	struct APlayerController* NewPlayer;  // 0x0 (0x0)


}; 
 
 // Function Engine.CharacterMovementComponent.GetMaxBrakingDeceleration
struct FGetMaxBrakingDeceleration
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PhysicsFieldStatics.EvalPhysicsScalarField
struct FEvalPhysicsScalarField
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector WorldPosition;  // 0x8 (0x8)
	enum class EFieldScalarType ScalarType;  // 0x20 (0x20)
	char pad_33[3];  // 0x21 (0x21)
	float ReturnValue;  // 0x24 (0x24)


}; 
 
 // Function Engine.CharacterMovementComponent.GetMaxJumpHeight
struct FGetMaxJumpHeight
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.CharacterMovementComponent.GetMinAnalogSpeed
struct FGetMinAnalogSpeed
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.CachedAnimDataLibrary.StateMachine_IsStateRelevant
struct FStateMachine_IsStateRelevant
{
	struct UAnimInstance* InAnimInstance;  // 0x0 (0x0)
	struct FCachedAnimStateData CachedAnimStateData;  // 0x8 (0x8)
	char pad_36_1 : 7;  // 0x24 (0x24)
	bool ReturnValue : 1;  // 0x24 (0x24)
	char pad_37[3];  // 0x25 (0x25)


}; 
 
 // Function Engine.CharacterMovementComponent.GetMovementBase
struct FGetMovementBase
{
	struct UPrimitiveComponent* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.ConstraintInstanceBlueprintLibrary.SetLinearSoftLimitParams
struct FSetLinearSoftLimitParams
{
	struct FConstraintInstanceAccessor Accessor;  // 0x0 (0x0)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bSoftLinearLimit : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)
	float LinearLimitStiffness;  // 0x10 (0x10)
	float LinearLimitDamping;  // 0x14 (0x14)
	float LinearLimitRestitution;  // 0x18 (0x18)
	float LinearLimitContactDistance;  // 0x1C (0x1C)


}; 
 
 // Function Engine.KismetStringLibrary.GetCharacterAsNumber
struct FGetCharacterAsNumber
{
	struct FString SourceString;  // 0x0 (0x0)
	int32_t Index;  // 0x10 (0x10)
	int32_t ReturnValue;  // 0x14 (0x14)


}; 
 
 // Function Engine.CharacterMovementComponent.GetValidPerchRadius
struct FGetValidPerchRadius
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.CharacterMovementComponent.IsWalking
struct FIsWalking
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.CharacterMovementComponent.K2_FindFloor
struct FK2_FindFloor
{
	struct FVector CapsuleLocation;  // 0x0 (0x0)
	struct FFindFloorResult FloorResult;  // 0x18 (0x18)


}; 
 
 // Function Engine.SoundWave.SetSoundAssetCompressionType
struct FSetSoundAssetCompressionType
{
	uint8_t InSoundAssetCompressionType;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool bMarkDirty : 1;  // 0x1 (0x1)


}; 
 
 // Function Engine.CharacterMovementComponent.SetAvoidanceEnabled
struct FSetAvoidanceEnabled
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bEnable : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.TypedElementWorldInterface.DeleteElement
struct FDeleteElement
{
	struct FScriptTypedElementHandle InElementHandle;  // 0x0 (0x0)
	struct UWorld* InWorld;  // 0x8 (0x8)
	struct UTypedElementSelectionSet* InSelectionSet;  // 0x10 (0x10)
	struct FTypedElementDeletionOptions InDeletionOptions;  // 0x18 (0x18)
	char pad_27_1 : 7;  // 0x1B (0x1B)
	bool ReturnValue : 1;  // 0x1B (0x1B)
	char pad_28[4];  // 0x1C (0x1C)


}; 
 
 // Function Engine.CharacterMovementComponent.SetAvoidanceGroup
struct FSetAvoidanceGroup
{
	int32_t GroupFlags;  // 0x0 (0x0)


}; 
 
 // Function Engine.CharacterMovementComponent.SetAvoidanceGroupMask
struct FSetAvoidanceGroupMask
{
	struct FNavAvoidanceMask GroupMask;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetInternationalizationLibrary.SetCurrentLanguageAndLocale
struct FSetCurrentLanguageAndLocale
{
	struct FString culture;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool SaveToConfig : 1;  // 0x10 (0x10)
	char pad_17_1 : 7;  // 0x11 (0x11)
	bool ReturnValue : 1;  // 0x11 (0x11)
	char pad_18[6];  // 0x12 (0x12)


}; 
 
 // Function Engine.CharacterMovementComponent.SetMovementMode
struct FSetMovementMode
{
	enum class EMovementMode NewMovementMode;  // 0x0 (0x0)
	char NewCustomMode;  // 0x1 (0x1)


}; 
 
 // Function Engine.CharacterMovementComponent.SetWalkableFloorZ
struct FSetWalkableFloorZ
{
	float InWalkableFloorZ;  // 0x0 (0x0)


}; 
 
 // Function Engine.Controller.ClientSetRotation
struct FClientSetRotation
{
	struct FRotator NewRotation;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bResetCamera : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.KismetMathLibrary.IsPointInBox
struct FIsPointInBox
{
	struct FVector Point;  // 0x0 (0x0)
	struct FVector BoxOrigin;  // 0x18 (0x18)
	struct FVector BoxExtent;  // 0x30 (0x30)
	char pad_72_1 : 7;  // 0x48 (0x48)
	bool ReturnValue : 1;  // 0x48 (0x48)
	char pad_73[7];  // 0x49 (0x49)


}; 
 
 // Function Engine.Controller.GetPlayerViewPoint
struct FGetPlayerViewPoint
{
	struct FVector Location;  // 0x0 (0x0)
	struct FRotator Rotation;  // 0x18 (0x18)


}; 
 
 // Function Engine.Controller.IsLocalController
struct FIsLocalController
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.TypedElementWorldInterface.GetOwnerLevel
struct FGetOwnerLevel
{
	struct FScriptTypedElementHandle InElementHandle;  // 0x0 (0x0)
	struct ULevel* ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.Controller.IsPlayerController
struct FIsPlayerController
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.Controller.K2_GetPawn
struct FK2_GetPawn
{
	struct APawn* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.Controller.LineOfSightTo
struct FLineOfSightTo
{
	struct AActor* Other;  // 0x0 (0x0)
	struct FVector ViewPoint;  // 0x8 (0x8)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool bAlternateChecks : 1;  // 0x20 (0x20)
	char pad_33_1 : 7;  // 0x21 (0x21)
	bool ReturnValue : 1;  // 0x21 (0x21)
	char pad_34[6];  // 0x22 (0x22)


}; 
 
 // Function Engine.KismetMathLibrary.LinearColor_QuantizeRound
struct FLinearColor_QuantizeRound
{
	struct FLinearColor InColor;  // 0x0 (0x0)
	struct FColor ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.Controller.ReceiveInstigatedAnyDamage
struct FReceiveInstigatedAnyDamage
{
	float Damage;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct UDamageType* DamageType;  // 0x8 (0x8)
	struct AActor* DamagedActor;  // 0x10 (0x10)
	struct AActor* DamageCauser;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_BoundedToBox
struct FVector_BoundedToBox
{
	struct FVector InVect;  // 0x0 (0x0)
	struct FVector InBoxMin;  // 0x18 (0x18)
	struct FVector InBoxMax;  // 0x30 (0x30)
	struct FVector ReturnValue;  // 0x48 (0x48)


}; 
 
 // Function Engine.Controller.ReceivePossess
struct FReceivePossess
{
	struct APawn* PossessedPawn;  // 0x0 (0x0)


}; 
 
 // Function Engine.Controller.SetControlRotation
struct FSetControlRotation
{
	struct FRotator NewRotation;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameModeBase.ChangeName
struct FChangeName
{
	struct AController* Controller;  // 0x0 (0x0)
	struct FString NewName;  // 0x8 (0x8)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bNameChange : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.KismetStringTableLibrary.GetMetaDataIdsFromStringTableEntry
struct FGetMetaDataIdsFromStringTableEntry
{
	struct FName TableId;  // 0x0 (0x0)
	struct FString Key;  // 0x8 (0x8)
	struct TArray<struct FName> ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.GameModeBase.GetDefaultPawnClassForController
struct FGetDefaultPawnClassForController
{
	struct AController* InController;  // 0x0 (0x0)
	UObject* ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.GameStateBase.HasMatchEnded
struct FHasMatchEnded
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameStateBase.HasMatchStarted
struct FHasMatchStarted
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameModeBase.K2_FindPlayerStart
struct FK2_FindPlayerStart
{
	struct AController* Player;  // 0x0 (0x0)
	struct FString IncomingName;  // 0x8 (0x8)
	struct AActor* ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.GameModeBase.K2_OnRestartPlayer
struct FK2_OnRestartPlayer
{
	struct AController* NewPlayer;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameModeBase.RestartPlayer
struct FRestartPlayer
{
	struct AController* NewPlayer;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMeshComponent.GetFloatAttribute
struct FGetFloatAttribute
{
	struct FName BoneName;  // 0x0 (0x0)
	struct FName AttributeName;  // 0x8 (0x8)
	float DefaultValue;  // 0x10 (0x10)
	float OutValue;  // 0x14 (0x14)
	uint8_t LookupType;  // 0x18 (0x18)
	char pad_25_1 : 7;  // 0x19 (0x19)
	bool ReturnValue : 1;  // 0x19 (0x19)
	char pad_26[2];  // 0x1A (0x1A)


}; 
 
 // Function Engine.KismetMathLibrary.FFloor
struct FFFloor
{
	double A;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.GameModeBase.RestartPlayerAtPlayerStart
struct FRestartPlayerAtPlayerStart
{
	struct AController* NewPlayer;  // 0x0 (0x0)
	struct AActor* StartSpot;  // 0x8 (0x8)


}; 
 
 // Function Engine.GameModeBase.RestartPlayerAtTransform
struct FRestartPlayerAtTransform
{
	struct AController* NewPlayer;  // 0x0 (0x0)
	char pad_8[8];  // 0x8 (0x8)
	struct FTransform SpawnTransform;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.MakeVector_NetQuantizeNormal
struct FMakeVector_NetQuantizeNormal
{
	double X;  // 0x0 (0x0)
	double Y;  // 0x8 (0x8)
	double Z;  // 0x10 (0x10)
	struct FVector_NetQuantizeNormal ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.Light.SetBrightness
struct FSetBrightness
{
	float NewBrightness;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameModeBase.ShouldReset
struct FShouldReset
{
	struct AActor* ActorToReset;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.GameModeBase.SpawnDefaultPawnAtTransform
struct FSpawnDefaultPawnAtTransform
{
	struct AController* NewPlayer;  // 0x0 (0x0)
	char pad_8[8];  // 0x8 (0x8)
	struct FTransform SpawnTransform;  // 0x10 (0x10)
	struct APawn* ReturnValue;  // 0x70 (0x70)
	char pad_120[8];  // 0x78 (0x78)


}; 
 
 // Function Engine.GameModeBase.SpawnDefaultPawnFor
struct FSpawnDefaultPawnFor
{
	struct AController* NewPlayer;  // 0x0 (0x0)
	struct AActor* StartSpot;  // 0x8 (0x8)
	struct APawn* ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.GameUserSettings.ApplySettings
struct FApplySettings
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bCheckForCommandLineOverrides : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMeshComponent.SetEnableBodyGravity
struct FSetEnableBodyGravity
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bEnableGravity : 1;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	struct FName BoneName;  // 0x4 (0x4)


}; 
 
 // Function Engine.KismetMathLibrary.Sqrt
struct FSqrt
{
	double A;  // 0x0 (0x0)
	double ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.GameUserSettings.EnableHDRDisplayOutput
struct FEnableHDRDisplayOutput
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bEnable : 1;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	int32_t DisplayNits;  // 0x4 (0x4)


}; 
 
 // Function Engine.GameUserSettings.GetDefaultResolution
struct FGetDefaultResolution
{
	struct FIntPoint ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.RectLightComponent.SetSourceWidth
struct FSetSourceWidth
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameUserSettings.GetDefaultWindowPosition
struct FGetDefaultWindowPosition
{
	struct FIntPoint ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameUserSettings.GetDesktopResolution
struct FGetDesktopResolution
{
	struct FIntPoint ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetTextLibrary.AsCurrency_Float
struct FAsCurrency_Float
{
	float Value;  // 0x0 (0x0)
	enum class ERoundingMode RoundingMode;  // 0x4 (0x4)
	char pad_5_1 : 7;  // 0x5 (0x5)
	bool bAlwaysSign : 1;  // 0x5 (0x5)
	char pad_6_1 : 7;  // 0x6 (0x6)
	bool bUseGrouping : 1;  // 0x6 (0x6)
	char pad_7[1];  // 0x7 (0x7)
	int32_t MinimumIntegralDigits;  // 0x8 (0x8)
	int32_t MaximumIntegralDigits;  // 0xC (0xC)
	int32_t MinimumFractionalDigits;  // 0x10 (0x10)
	int32_t MaximumFractionalDigits;  // 0x14 (0x14)
	struct FString CurrencyCode;  // 0x18 (0x18)
	struct FText ReturnValue;  // 0x28 (0x28)


}; 
 
 // Function Engine.GameUserSettings.GetFramePace
struct FGetFramePace
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameUserSettings.GetLastConfirmedFullscreenMode
struct FGetLastConfirmedFullscreenMode
{
	enum class EWindowMode ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameUserSettings.GetLastConfirmedScreenResolution
struct FGetLastConfirmedScreenResolution
{
	struct FIntPoint ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.DecalComponent.SetFadeIn
struct FSetFadeIn
{
	float StartDelay;  // 0x0 (0x0)
	float Duaration;  // 0x4 (0x4)


}; 
 
 // Function Engine.KismetMathLibrary.Quat_Normalized
struct FQuat_Normalized
{
	struct FQuat Q;  // 0x0 (0x0)
	float Tolerance;  // 0x20 (0x20)
	char pad_36[12];  // 0x24 (0x24)
	struct FQuat ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.GameUserSettings.GetOverallScalabilityLevel
struct FGetOverallScalabilityLevel
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameUserSettings.GetPostProcessingQuality
struct FGetPostProcessingQuality
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.ClientTravelInternal
struct FClientTravelInternal
{
	struct FString URL;  // 0x0 (0x0)
	enum class ETravelType TravelType;  // 0x10 (0x10)
	char pad_17_1 : 7;  // 0x11 (0x11)
	bool bSeamless : 1;  // 0x11 (0x11)
	char pad_18[2];  // 0x12 (0x12)
	struct FGuid MapPackageGuid;  // 0x14 (0x14)
	char pad_36[4];  // 0x24 (0x24)


}; 
 
 // Function Engine.GameUserSettings.GetPreferredFullscreenMode
struct FGetPreferredFullscreenMode
{
	enum class EWindowMode ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMeshComponent.GetAllowClothActors
struct FGetAllowClothActors
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameUserSettings.GetReflectionQuality
struct FGetReflectionQuality
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetArrayLibrary.Array_Remove
struct FArray_Remove
{
	struct TArray<int32_t> TargetArray;  // 0x0 (0x0)
	int32_t IndexToRemove;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)


}; 
 
 // Function Engine.KismetMathLibrary.IsPointInBoxWithTransform_Box
struct FIsPointInBoxWithTransform_Box
{
	struct FVector Point;  // 0x0 (0x0)
	char pad_24[8];  // 0x18 (0x18)
	struct FTransform BoxWorldTransform;  // 0x20 (0x20)
	struct FBox BoxExtent;  // 0x80 (0x80)
	char pad_184_1 : 7;  // 0xB8 (0xB8)
	bool ReturnValue : 1;  // 0xB8 (0xB8)
	char pad_185[7];  // 0xB9 (0xB9)


}; 
 
 // Function Engine.GameUserSettings.GetResolutionScaleInformationEx
struct FGetResolutionScaleInformationEx
{
	float CurrentScaleNormalized;  // 0x0 (0x0)
	float CurrentScaleValue;  // 0x4 (0x4)
	float MinScaleValue;  // 0x8 (0x8)
	float MaxScaleValue;  // 0xC (0xC)


}; 
 
 // Function Engine.GameUserSettings.GetResolutionScaleNormalized
struct FGetResolutionScaleNormalized
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.DirectionalLightComponent.SetShadowDistanceFadeoutFraction
struct FSetShadowDistanceFadeoutFraction
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameUserSettings.GetShadingQuality
struct FGetShadingQuality
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.FOV
struct FFOV
{
	float NewFOV;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameUserSettings.GetTextureQuality
struct FGetTextureQuality
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameUserSettings.GetViewDistanceQuality
struct FGetViewDistanceQuality
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameUserSettings.IsDirty
struct FIsDirty
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetTextLibrary.IsPolyglotDataValid
struct FIsPolyglotDataValid
{
	struct FPolyglotTextData PolyglotData;  // 0x0 (0x0)
	char pad_184_1 : 7;  // 0xB8 (0xB8)
	bool IsValid : 1;  // 0xB8 (0xB8)
	char pad_185[7];  // 0xB9 (0xB9)
	struct FText ErrorMessage;  // 0xC0 (0xC0)


}; 
 
 // Function Engine.PhysicsHandleComponent.SetTargetLocationAndRotation
struct FSetTargetLocationAndRotation
{
	struct FVector NewLocation;  // 0x0 (0x0)
	struct FRotator NewRotation;  // 0x18 (0x18)


}; 
 
 // Function Engine.GameUserSettings.IsDynamicResolutionDirty
struct FIsDynamicResolutionDirty
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Normal2D
struct FNormal2D
{
	struct FVector2D A;  // 0x0 (0x0)
	struct FVector2D ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.GameUserSettings.IsHDREnabled
struct FIsHDREnabled
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameUserSettings.IsVSyncEnabled
struct FIsVSyncEnabled
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.MaterialInterface.GetPhysicalMaterialFromMap
struct FGetPhysicalMaterialFromMap
{
	int32_t Index;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct UPhysicalMaterial* ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.GameUserSettings.SetDynamicResolutionEnabled
struct FSetDynamicResolutionEnabled
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bEnable : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameUserSettings.SetFrameRateLimit
struct FSetFrameRateLimit
{
	float NewLimit;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.GetTotalMilliseconds
struct FGetTotalMilliseconds
{
	struct FTimespan A;  // 0x0 (0x0)
	float ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.BillboardComponent.SetSpriteAndUV
struct FSetSpriteAndUV
{
	struct UTexture2D* NewSprite;  // 0x0 (0x0)
	int32_t NewU;  // 0x8 (0x8)
	int32_t NewUL;  // 0xC (0xC)
	int32_t NewV;  // 0x10 (0x10)
	int32_t NewVL;  // 0x14 (0x14)


}; 
 
 // Function Engine.GameUserSettings.SetGlobalIlluminationQuality
struct FSetGlobalIlluminationQuality
{
	int32_t Value;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.ToggleSpeaking
struct FToggleSpeaking
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bInSpeaking : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimationDataController.OpenBracket
struct FOpenBracket
{
	struct FText InTitle;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bShouldTransact : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.GameUserSettings.SetOverallScalabilityLevel
struct FSetOverallScalabilityLevel
{
	int32_t Value;  // 0x0 (0x0)


}; 
 
 // Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringExponent
struct FSetDirectionalInscatteringExponent
{
	float Value;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.SendToConsole
struct FSendToConsole
{
	struct FString Command;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkyAtmosphereComponent.SetRayleighExponentialDistribution
struct FSetRayleighExponentialDistribution
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameUserSettings.SetPostProcessingQuality
struct FSetPostProcessingQuality
{
	int32_t Value;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameUserSettings.SetReflectionQuality
struct FSetReflectionQuality
{
	int32_t Value;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameUserSettings.SetResolutionScaleValue
struct FSetResolutionScaleValue
{
	int32_t NewScaleValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetInputLibrary.PointerEvent_IsMouseButtonDown
struct FPointerEvent_IsMouseButtonDown
{
	struct FPointerEvent Input;  // 0x0 (0x0)
	struct FKey MouseButton;  // 0x98 (0x98)
	char pad_176_1 : 7;  // 0xB0 (0xB0)
	bool ReturnValue : 1;  // 0xB0 (0xB0)
	char pad_177[7];  // 0xB1 (0xB1)


}; 
 
 // Function Engine.KismetMathLibrary.IntPoint_Down
struct FIntPoint_Down
{
	struct FIntPoint ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameUserSettings.SetScreenResolution
struct FSetScreenResolution
{
	struct FIntPoint Resolution;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameUserSettings.SetVisualEffectQuality
struct FSetVisualEffectQuality
{
	int32_t Value;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_Int64ToInt
struct FConv_Int64ToInt
{
	int64_t inInt;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.GameUserSettings.SupportsHDRDisplayOutput
struct FSupportsHDRDisplayOutput
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Vector2D_Unit45Deg
struct FVector2D_Unit45Deg
{
	struct FVector2D ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Add_VectorFloat
struct FAdd_VectorFloat
{
	struct FVector A;  // 0x0 (0x0)
	double B;  // 0x18 (0x18)
	struct FVector ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.PlayerController.ActivateTouchInterface
struct FActivateTouchInterface
{
	struct UTouchInterface* NewTouchInterface;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameplayStatics.HasOption
struct FHasOption
{
	struct FString Options;  // 0x0 (0x0)
	struct FString InKey;  // 0x10 (0x10)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.PlayerController.AddPitchInput
struct FAddPitchInput
{
	float Val;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.AddYawInput
struct FAddYawInput
{
	float Val;  // 0x0 (0x0)


}; 
 
 // Function Engine.TypedElementCommonActions.K2_DuplicateSelectedElements
struct FK2_DuplicateSelectedElements
{
	struct UTypedElementSelectionSet* SelectionSet;  // 0x0 (0x0)
	struct UWorld* World;  // 0x8 (0x8)
	struct FVector LocationOffset;  // 0x10 (0x10)
	struct TArray<struct FScriptTypedElementHandle> ReturnValue;  // 0x28 (0x28)


}; 
 
 // Function Engine.PlayerController.Camera
struct FCamera
{
	struct FName NewMode;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameplayStatics.GetPlayerController
struct FGetPlayerController
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	int32_t PlayerIndex;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)
	struct APlayerController* ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.PlayerController.ClientAckTimeDilation
struct FClientAckTimeDilation
{
	float TimeDilation;  // 0x0 (0x0)
	int32_t ServerStep;  // 0x4 (0x4)


}; 
 
 // Function Engine.StaticMesh.GetBoundingBox
struct FGetBoundingBox
{
	struct FBox ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.ClientAckUpdateLevelVisibility
struct FClientAckUpdateLevelVisibility
{
	struct FName PackageName;  // 0x0 (0x0)
	struct FNetLevelVisibilityTransactionId TransactionId;  // 0x8 (0x8)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bClientAckCanMakeVisible : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)


}; 
 
 // Function Engine.PlayerController.ClientAddTextureStreamingLoc
struct FClientAddTextureStreamingLoc
{
	struct FVector InLoc;  // 0x0 (0x0)
	float Duration;  // 0x18 (0x18)
	char pad_28_1 : 7;  // 0x1C (0x1C)
	bool bOverrideLocation : 1;  // 0x1C (0x1C)
	char pad_29[3];  // 0x1D (0x1D)


}; 
 
 // Function Engine.SplineMeshComponent.SetEndScale
struct FSetEndScale
{
	struct FVector2D EndScale;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool bUpdateMesh : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.KismetMathLibrary.IntPoint_One
struct FIntPoint_One
{
	struct FIntPoint ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.ClientCapBandwidth
struct FClientCapBandwidth
{
	int32_t Cap;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.ClientCorrectionAsyncPhysicsTimestamp
struct FClientCorrectionAsyncPhysicsTimestamp
{
	struct FAsyncPhysicsTimestamp Timestamp;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_Set
struct FVector_Set
{
	struct FVector A;  // 0x0 (0x0)
	double X;  // 0x18 (0x18)
	double Y;  // 0x20 (0x20)
	double Z;  // 0x28 (0x28)


}; 
 
 // Function Engine.PlayerController.ClientMessage
struct FClientMessage
{
	struct FString S;  // 0x0 (0x0)
	struct FName Type;  // 0x10 (0x10)
	float MsgLifeTime;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)


}; 
 
 // Function Engine.PlayerController.ClientMutePlayer
struct FClientMutePlayer
{
	struct FUniqueNetIdRepl PlayerId;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetInternationalizationLibrary.SetCurrentCulture
struct FSetCurrentCulture
{
	struct FString culture;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool SaveToConfig : 1;  // 0x10 (0x10)
	char pad_17_1 : 7;  // 0x11 (0x11)
	bool ReturnValue : 1;  // 0x11 (0x11)
	char pad_18[6];  // 0x12 (0x12)


}; 
 
 // Function Engine.MaterialParameterCollection.GetScalarParameterNames
struct FGetScalarParameterNames
{
	struct TArray<struct FName> ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.ClientPlayForceFeedback_Internal
struct FClientPlayForceFeedback_Internal
{
	struct UForceFeedbackEffect* ForceFeedbackEffect;  // 0x0 (0x0)
	struct FForceFeedbackParameters Params;  // 0x8 (0x8)
	char pad_20[4];  // 0x14 (0x14)


}; 
 
 // Function Engine.SubsystemBlueprintLibrary.GetGameInstanceSubsystem
struct FGetGameInstanceSubsystem
{
	struct UObject* ContextObject;  // 0x0 (0x0)
	UGameInstanceSubsystem* Class;  // 0x8 (0x8)
	struct UGameInstanceSubsystem* ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.PlayerController.ClientPlaySoundAtLocation
struct FClientPlaySoundAtLocation
{
	struct USoundBase* Sound;  // 0x0 (0x0)
	struct FVector Location;  // 0x8 (0x8)
	float VolumeMultiplier;  // 0x20 (0x20)
	float PitchMultiplier;  // 0x24 (0x24)


}; 
 
 // Function Engine.PlayerController.ClientPrepareMapChange
struct FClientPrepareMapChange
{
	struct FName LevelName;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bFirst : 1;  // 0x8 (0x8)
	char pad_9_1 : 7;  // 0x9 (0x9)
	bool bLast : 1;  // 0x9 (0x9)
	char pad_10[2];  // 0xA (0xA)


}; 
 
 // Function Engine.PlayerController.ClientRecvServerAckFrame
struct FClientRecvServerAckFrame
{
	int32_t LastProcessedInputFrame;  // 0x0 (0x0)
	int32_t RecvServerFrameNumber;  // 0x4 (0x4)
	int8_t TimeDilation;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.KismetMathLibrary.GetDay
struct FGetDay
{
	struct FDateTime A;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.PlayerController.ClientRecvServerAckFrameDebug
struct FClientRecvServerAckFrameDebug
{
	char NumBuffered;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	float TargetNumBufferedCmds;  // 0x4 (0x4)


}; 
 
 // Function Engine.GameplayStatics.Blueprint_PredictProjectilePath_Advanced
struct FBlueprint_PredictProjectilePath_Advanced
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FPredictProjectilePathParams PredictParams;  // 0x8 (0x8)
	struct FPredictProjectilePathResult PredictResult;  // 0x80 (0x80)
	char pad_432_1 : 7;  // 0x1B0 (0x1B0)
	bool ReturnValue : 1;  // 0x1B0 (0x1B0)
	char pad_433[7];  // 0x1B1 (0x1B1)


}; 
 
 // Function Engine.PlayerController.ClientRestart
struct FClientRestart
{
	struct APawn* NewPawn;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerState.IsSpectator
struct FIsSpectator
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.ClientRetryClientRestart
struct FClientRetryClientRestart
{
	struct APawn* NewPawn;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.ClientReturnToMainMenu
struct FClientReturnToMainMenu
{
	struct FString ReturnReason;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetTextLibrary.GetEmptyText
struct FGetEmptyText
{
	struct FText ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.InstancedStaticMeshComponent.GetInstanceCount
struct FGetInstanceCount
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.ConstraintInstanceBlueprintLibrary.GetLinearVelocityDrive
struct FGetLinearVelocityDrive
{
	struct FConstraintInstanceAccessor Accessor;  // 0x0 (0x0)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bOutEnableDriveX : 1;  // 0xC (0xC)
	char pad_13_1 : 7;  // 0xD (0xD)
	bool bOutEnableDriveY : 1;  // 0xD (0xD)
	char pad_14_1 : 7;  // 0xE (0xE)
	bool bOutEnableDriveZ : 1;  // 0xE (0xE)
	char pad_15[1];  // 0xF (0xF)


}; 
 
 // Function Engine.PlayerController.ClientSetCameraFade
struct FClientSetCameraFade
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bEnableFading : 1;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	struct FColor FadeColor;  // 0x4 (0x4)
	struct FVector2D FadeAlpha;  // 0x8 (0x8)
	float FadeTime;  // 0x18 (0x18)
	char pad_28_1 : 7;  // 0x1C (0x1C)
	bool bFadeAudio : 1;  // 0x1C (0x1C)
	char pad_29_1 : 7;  // 0x1D (0x1D)
	bool bHoldWhenFinished : 1;  // 0x1D (0x1D)
	char pad_30[2];  // 0x1E (0x1E)


}; 
 
 // Function Engine.PlayerController.ClientSetCameraMode
struct FClientSetCameraMode
{
	struct FName NewCamMode;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.ClientSetCinematicMode
struct FClientSetCinematicMode
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bInCinematicMode : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool bAffectsMovement : 1;  // 0x1 (0x1)
	char pad_2_1 : 7;  // 0x2 (0x2)
	bool bAffectsTurning : 1;  // 0x2 (0x2)
	char pad_3_1 : 7;  // 0x3 (0x3)
	bool bAffectsHUD : 1;  // 0x3 (0x3)


}; 
 
 // Function Engine.KismetMathLibrary.EqualEqual_Int64Int64
struct FEqualEqual_Int64Int64
{
	int64_t A;  // 0x0 (0x0)
	int64_t B;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.PlayerController.ClientSetForceMipLevelsToBeResident
struct FClientSetForceMipLevelsToBeResident
{
	struct UMaterialInterface* Material;  // 0x0 (0x0)
	float ForceDuration;  // 0x8 (0x8)
	int32_t CinematicTextureGroups;  // 0xC (0xC)


}; 
 
 // Function Engine.PlayerController.ClientSetHUD
struct FClientSetHUD
{
	AHUD* NewHUDClass;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.ClientSetSpectatorWaiting
struct FClientSetSpectatorWaiting
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bWaiting : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Quat_VectorRight
struct FQuat_VectorRight
{
	struct FQuat Q;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x20 (0x20)
	char pad_56[8];  // 0x38 (0x38)


}; 
 
 // Function Engine.PlayerController.ClientSpawnCameraLensEffect
struct FClientSpawnCameraLensEffect
{
	AEmitterCameraLensEffectBase* LensEffectEmitterClass;  // 0x0 (0x0)


}; 
 
 // Function Engine.LocationVolume.IsLoaded
struct FIsLoaded
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Matrix_GetScaledAxes
struct FMatrix_GetScaledAxes
{
	struct FMatrix M;  // 0x0 (0x0)
	struct FVector X;  // 0x80 (0x80)
	struct FVector Y;  // 0x98 (0x98)
	struct FVector Z;  // 0xB0 (0xB0)
	char pad_200[8];  // 0xC8 (0xC8)


}; 
 
 // Function Engine.PlayerController.ClientSpawnGenericCameraLensEffect
struct FClientSpawnGenericCameraLensEffect
{
	AActor* LensEffectEmitterClass;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.ClientStartCameraShake
struct FClientStartCameraShake
{
	UCameraShakeBase* Shake;  // 0x0 (0x0)
	float Scale;  // 0x8 (0x8)
	uint8_t PlaySpace;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)
	struct FRotator UserPlaySpaceRot;  // 0x10 (0x10)


}; 
 
 // Function Engine.PlayerController.ClientStopCameraShakesFromSource
struct FClientStopCameraShakesFromSource
{
	struct UCameraShakeSourceComponent* SourceComponent;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bImmediately : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.SplineMeshComponent.GetSplineUpDir
struct FGetSplineUpDir
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameplayStatics.GetViewProjectionMatrix
struct FGetViewProjectionMatrix
{
	struct FMinimalViewInfo DesiredView;  // 0x0 (0x0)
	struct FMatrix ViewMatrix;  // 0x7C0 (0x7C0)
	struct FMatrix ProjectionMatrix;  // 0x840 (0x840)
	struct FMatrix ViewProjectionMatrix;  // 0x8C0 (0x8C0)


}; 
 
 // Function Engine.PlayerController.ClientStopForceFeedback
struct FClientStopForceFeedback
{
	struct UForceFeedbackEffect* ForceFeedbackEffect;  // 0x0 (0x0)
	struct FName Tag;  // 0x8 (0x8)


}; 
 
 // Function Engine.PlayerController.ClientTeamMessage
struct FClientTeamMessage
{
	struct APlayerState* SenderPlayerState;  // 0x0 (0x0)
	struct FString S;  // 0x8 (0x8)
	struct FName Type;  // 0x18 (0x18)
	float MsgLifeTime;  // 0x20 (0x20)
	char pad_36[4];  // 0x24 (0x24)


}; 
 
 // Function Engine.TimecodeProvider.GetSynchronizationState
struct FGetSynchronizationState
{
	uint8_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.ClientUnmutePlayers
struct FClientUnmutePlayers
{
	struct TArray<struct FUniqueNetIdRepl> PlayerIds;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.ClientUpdateLevelStreamingStatus
struct FClientUpdateLevelStreamingStatus
{
	struct FName PackageName;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bNewShouldBeLoaded : 1;  // 0x8 (0x8)
	char pad_9_1 : 7;  // 0x9 (0x9)
	bool bNewShouldBeVisible : 1;  // 0x9 (0x9)
	char pad_10_1 : 7;  // 0xA (0xA)
	bool bNewShouldBlockOnLoad : 1;  // 0xA (0xA)
	char pad_11[1];  // 0xB (0xB)
	int32_t LODIndex;  // 0xC (0xC)
	struct FNetLevelVisibilityTransactionId TransactionId;  // 0x10 (0x10)


}; 
 
 // Function Engine.PlayerController.ClientUpdateMultipleLevelsStreamingStatus
struct FClientUpdateMultipleLevelsStreamingStatus
{
	struct TArray<struct FUpdateLevelStreamingLevelStatus> LevelStatuses;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetTextLibrary.Conv_BoolToText
struct FConv_BoolToText
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool InBool : 1;  // 0x0 (0x0)
	char pad_1[7];  // 0x1 (0x1)
	struct FText ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.PlayerController.ClientWasKicked
struct FClientWasKicked
{
	struct FText KickReason;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.ConsoleKey
struct FConsoleKey
{
	struct FKey Key;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.VSizeSquared
struct FVSizeSquared
{
	struct FVector A;  // 0x0 (0x0)
	double ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_IsNAN
struct FVector_IsNAN
{
	struct FVector A;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool ReturnValue : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.PlayerController.DeprojectMousePositionToWorld
struct FDeprojectMousePositionToWorld
{
	struct FVector WorldLocation;  // 0x0 (0x0)
	struct FVector WorldDirection;  // 0x18 (0x18)
	char pad_48_1 : 7;  // 0x30 (0x30)
	bool ReturnValue : 1;  // 0x30 (0x30)
	char pad_49[7];  // 0x31 (0x31)


}; 
 
 // Function Engine.PlayerController.DeprojectScreenPositionToWorld
struct FDeprojectScreenPositionToWorld
{
	float ScreenX;  // 0x0 (0x0)
	float ScreenY;  // 0x4 (0x4)
	struct FVector WorldLocation;  // 0x8 (0x8)
	struct FVector WorldDirection;  // 0x20 (0x20)
	char pad_56_1 : 7;  // 0x38 (0x38)
	bool ReturnValue : 1;  // 0x38 (0x38)
	char pad_57[7];  // 0x39 (0x39)


}; 
 
 // Function Engine.PlayerController.GetAsyncPhysicsDataToConsume
struct FGetAsyncPhysicsDataToConsume
{
	struct UAsyncPhysicsData* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.GetAsyncPhysicsDataToWrite
struct FGetAsyncPhysicsDataToWrite
{
	struct UAsyncPhysicsData* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.GetDeprecatedInputPitchScale
struct FGetDeprecatedInputPitchScale
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintMapLibrary.Map_Add
struct FMap_Add
{
	struct TMap<int32_t, int32_t> TargetMap;  // 0x0 (0x0)
	int32_t Key;  // 0x50 (0x50)
	int32_t Value;  // 0x54 (0x54)


}; 
 
 // Function Engine.PlayerController.GetDeprecatedInputYawScale
struct FGetDeprecatedInputYawScale
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.GetFocalLocation
struct FGetFocalLocation
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameplayStatics.PrimeSound
struct FPrimeSound
{
	struct USoundBase* InSound;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.GetHitResultUnderCursor
struct FGetHitResultUnderCursor
{
	enum class ECollisionChannel TraceChannel;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool bTraceComplex : 1;  // 0x1 (0x1)
	char pad_2[6];  // 0x2 (0x2)
	struct FHitResult HitResult;  // 0x8 (0x8)
	char pad_240_1 : 7;  // 0xF0 (0xF0)
	bool ReturnValue : 1;  // 0xF0 (0xF0)
	char pad_241[7];  // 0xF1 (0xF1)


}; 
 
 // Function Engine.PlayerController.GetHitResultUnderCursorForObjects
struct FGetHitResultUnderCursorForObjects
{
	struct TArray<enum class EObjectTypeQuery> ObjectTypes;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool bTraceComplex : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)
	struct FHitResult HitResult;  // 0x18 (0x18)
	char pad_256_1 : 7;  // 0x100 (0x100)
	bool ReturnValue : 1;  // 0x100 (0x100)
	char pad_257[7];  // 0x101 (0x101)


}; 
 
 // Function Engine.PlayerController.GetHitResultUnderFinger
struct FGetHitResultUnderFinger
{
	enum class ETouchIndex FingerIndex;  // 0x0 (0x0)
	enum class ECollisionChannel TraceChannel;  // 0x1 (0x1)
	char pad_2_1 : 7;  // [x2 ([x2)
	bool bTraceComplex : 1;  // 0x2 (0x2)
	char pad_3[5];  // 0x3 (0x3)
	struct FHitResult HitResult;  // 0x8 (0x8)
	char pad_240_1 : 7;  // 0xF0 (0xF0)
	bool ReturnValue : 1;  // 0xF0 (0xF0)
	char pad_241[7];  // 0xF1 (0xF1)


}; 
 
 // Function Engine.SpringArmComponent.GetTargetRotation
struct FGetTargetRotation
{
	struct FRotator ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.StaticMesh.CreateStaticMeshDescription
struct FCreateStaticMeshDescription
{
	struct UObject* Outer;  // 0x0 (0x0)
	struct UStaticMeshDescription* ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.PlayerController.GetHitResultUnderFingerByChannel
struct FGetHitResultUnderFingerByChannel
{
	enum class ETouchIndex FingerIndex;  // 0x0 (0x0)
	enum class ETraceTypeQuery TraceChannel;  // 0x1 (0x1)
	char pad_2_1 : 7;  // 0x2 (0x2)
	bool bTraceComplex : 1;  // 0x2 (0x2)
	char pad_3[5];  // 0x3 (0x3)
	struct FHitResult HitResult;  // 0x8 (0x8)
	char pad_240_1 : 7;  // 0xF0 (0xF0)
	bool ReturnValue : 1;  // 0xF0 (0xF0)
	char pad_241[7];  // 0xF1 (0xF1)


}; 
 
 // Function Engine.PlayerController.GetInputAnalogKeyState
struct FGetInputAnalogKeyState
{
	struct FKey Key;  // 0x0 (0x0)
	float ReturnValue;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)


}; 
 
 // Function Engine.PlayerController.GetInputAnalogStickState
struct FGetInputAnalogStickState
{
	enum class EControllerAnalogStick WhichStick;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	float StickX;  // 0x4 (0x4)
	float StickY;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetInputLibrary.Key_GetDisplayName
struct FKey_GetDisplayName
{
	struct FKey Key;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bLongDisplayName : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)
	struct FText ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.PlayerController.GetInputMotionState
struct FGetInputMotionState
{
	struct FVector Tilt;  // 0x0 (0x0)
	struct FVector RotationRate;  // 0x18 (0x18)
	struct FVector Gravity;  // 0x30 (0x30)
	struct FVector Acceleration;  // 0x48 (0x48)


}; 
 
 // Function Engine.KismetMathLibrary.DynamicWeightedMovingAverage_FVector
struct FDynamicWeightedMovingAverage_FVector
{
	struct FVector CurrentSample;  // 0x0 (0x0)
	struct FVector PreviousSample;  // 0x18 (0x18)
	float MaxDistance;  // 0x30 (0x30)
	float MinWeight;  // 0x34 (0x34)
	float MaxWeight;  // 0x38 (0x38)
	char pad_60[4];  // 0x3C (0x3C)
	struct FVector ReturnValue;  // 0x40 (0x40)


}; 
 
 // Function Engine.PlayerController.GetInputMouseDelta
struct FGetInputMouseDelta
{
	float DeltaX;  // 0x0 (0x0)
	float DeltaY;  // 0x4 (0x4)


}; 
 
 // Function Engine.PlayerController.GetMousePosition
struct FGetMousePosition
{
	float LocationX;  // 0x0 (0x0)
	float LocationY;  // 0x4 (0x4)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.PlayerController.GetOverridePlayerInputClass
struct FGetOverridePlayerInputClass
{
	UPlayerInput* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.GetPlatformUserId
struct FGetPlatformUserId
{
	struct FPlatformUserId ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.GetStreamingSourceLocationAndRotation
struct FGetStreamingSourceLocationAndRotation
{
	struct FVector OutLocation;  // 0x0 (0x0)
	struct FRotator OutRotation;  // 0x18 (0x18)


}; 
 
 // Function Engine.PlayerController.GetStreamingSourceShapes
struct FGetStreamingSourceShapes
{
	struct TArray<struct FStreamingSourceShape> OutShapes;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.GetViewportSize
struct FGetViewportSize
{
	int32_t SizeX;  // 0x0 (0x0)
	int32_t SizeY;  // 0x4 (0x4)


}; 
 
 // Function Engine.WorldPartitionStreamingSourceComponent.IsStreamingSourceEnabled
struct FIsStreamingSourceEnabled
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.SceneCaptureComponent.SetCaptureSortPriority
struct FSetCaptureSortPriority
{
	int32_t NewCaptureSortPriority;  // 0x0 (0x0)


}; 
 
 // Function Engine.CheatManager.BugIt
struct FBugIt
{
	struct FString ScreenShotDescription;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.K2_ClientPlayForceFeedback
struct FK2_ClientPlayForceFeedback
{
	struct UForceFeedbackEffect* ForceFeedbackEffect;  // 0x0 (0x0)
	struct FName Tag;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool bLooping : 1;  // 0x10 (0x10)
	char pad_17_1 : 7;  // 0x11 (0x11)
	bool bIgnoreTimeDilation : 1;  // 0x11 (0x11)
	char pad_18_1 : 7;  // 0x12 (0x12)
	bool bPlayWhilePaused : 1;  // 0x12 (0x12)
	char pad_19[5];  // 0x13 (0x13)


}; 
 
 // Function Engine.PlayerController.OnServerStartedVisualLogger
struct FOnServerStartedVisualLogger
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bIsLogging : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.PlayHapticEffect
struct FPlayHapticEffect
{
	struct UHapticFeedbackEffect_Base* HapticEffect;  // 0x0 (0x0)
	uint8_t Hand;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)
	float Scale;  // 0xC (0xC)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool bLoop : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.PlayerController.ServerBlockPlayer
struct FServerBlockPlayer
{
	struct FUniqueNetIdRepl PlayerId;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameplayStatics.PlayDialogue2D
struct FPlayDialogue2D
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct UDialogueWave* Dialogue;  // 0x8 (0x8)
	struct FDialogueContext Context;  // 0x10 (0x10)
	float VolumeMultiplier;  // 0x28 (0x28)
	float PitchMultiplier;  // 0x2C (0x2C)
	float StartTime;  // 0x30 (0x30)
	char pad_52[4];  // 0x34 (0x34)


}; 
 
 // Function Engine.PlayerController.ServerExec
struct FServerExec
{
	struct FString Msg;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetInputLibrary.PointerEvent_GetLastScreenSpacePosition
struct FPointerEvent_GetLastScreenSpacePosition
{
	struct FPointerEvent Input;  // 0x0 (0x0)
	struct FVector2D ReturnValue;  // 0x98 (0x98)


}; 
 
 // Function Engine.PlayerController.ServerExecRPC
struct FServerExecRPC
{
	struct FString Msg;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetArrayLibrary.Array_Identical
struct FArray_Identical
{
	struct TArray<int32_t> ArrayA;  // 0x0 (0x0)
	struct TArray<int32_t> ArrayB;  // 0x10 (0x10)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.KismetMathLibrary.QuaternionSpringInterp
struct FQuaternionSpringInterp
{
	struct FQuat Current;  // 0x0 (0x0)
	struct FQuat Target;  // 0x20 (0x20)
	struct FQuaternionSpringState SpringState;  // 0x40 (0x40)
	float Stiffness;  // 0x80 (0x80)
	float CriticalDampingFactor;  // 0x84 (0x84)
	float DeltaTime;  // 0x88 (0x88)
	float Mass;  // 0x8C (0x8C)
	float TargetVelocityAmount;  // 0x90 (0x90)
	char pad_148_1 : 7;  // 0x94 (0x94)
	bool bInitializeFromTarget : 1;  // 0x94 (0x94)
	char pad_149[11];  // 0x95 (0x95)
	struct FQuat ReturnValue;  // 0xA0 (0xA0)


}; 
 
 // Function Engine.PlayerController.ServerNotifyLoadedWorld
struct FServerNotifyLoadedWorld
{
	struct FName WorldPackageName;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.ServerSendLatestAsyncPhysicsTimestamp
struct FServerSendLatestAsyncPhysicsTimestamp
{
	struct FAsyncPhysicsTimestamp Timestamp;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPathsLibrary.ValidatePath
struct FValidatePath
{
	struct FString InPath;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool bDidSucceed : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)
	struct FText OutReason;  // 0x18 (0x18)


}; 
 
 // Function Engine.PlayerController.ServerSetSpectatorLocation
struct FServerSetSpectatorLocation
{
	struct FVector NewLoc;  // 0x0 (0x0)
	struct FRotator NewRot;  // 0x18 (0x18)


}; 
 
 // Function Engine.PlayerController.ServerSetSpectatorWaiting
struct FServerSetSpectatorWaiting
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bWaiting : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.ServerUnblockPlayer
struct FServerUnblockPlayer
{
	struct FUniqueNetIdRepl PlayerId;  // 0x0 (0x0)


}; 
 
 // Function Engine.CheatManager.ChangeSize
struct FChangeSize
{
	float F;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.ServerUpdateCamera
struct FServerUpdateCamera
{
	struct FVector_NetQuantize CamLoc;  // 0x0 (0x0)
	int32_t CamPitchAndYaw;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)


}; 
 
 // Function Engine.PlayerController.ServerUpdateLevelVisibility
struct FServerUpdateLevelVisibility
{
	struct FUpdateLevelVisibilityLevelInfo LevelVisibility;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.SetAudioListenerAttenuationOverride
struct FSetAudioListenerAttenuationOverride
{
	struct USceneComponent* AttachToComponent;  // 0x0 (0x0)
	struct FVector AttenuationLocationOVerride;  // 0x8 (0x8)


}; 
 
 // Function Engine.SkeletalMeshComponent.SetBodyNotifyRigidBodyCollision
struct FSetBodyNotifyRigidBodyCollision
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewNotifyRigidBodyCollision : 1;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	struct FName BoneName;  // 0x4 (0x4)


}; 
 
 // Function Engine.LevelScriptActor.SetCinematicMode
struct FSetCinematicMode
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bCinematicMode : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool bHidePlayer : 1;  // 0x1 (0x1)
	char pad_2_1 : 7;  // 0x2 (0x2)
	bool bAffectsHUD : 1;  // 0x2 (0x2)
	char pad_3_1 : 7;  // 0x3 (0x3)
	bool bAffectsMovement : 1;  // 0x3 (0x3)
	char pad_4_1 : 7;  // 0x4 (0x4)
	bool bAffectsTurning : 1;  // 0x4 (0x4)


}; 
 
 // Function Engine.PlayerController.SetControllerLightColor
struct FSetControllerLightColor
{
	struct FColor Color;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.SetDeprecatedInputPitchScale
struct FSetDeprecatedInputPitchScale
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineMeshComponent.GetStartRoll
struct FGetStartRoll
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.SetDeprecatedInputRollScale
struct FSetDeprecatedInputRollScale
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetInputLibrary.InputEvent_IsRightCommandDown
struct FInputEvent_IsRightCommandDown
{
	struct FInputEvent Input;  // 0x0 (0x0)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.PlayerController.SetDeprecatedInputYawScale
struct FSetDeprecatedInputYawScale
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.SetHapticsByValue
struct FSetHapticsByValue
{
	float Frequency;  // 0x0 (0x0)
	float Amplitude;  // 0x4 (0x4)
	uint8_t Hand;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.PlayerController.SetMouseCursorWidget
struct FSetMouseCursorWidget
{
	enum class EMouseCursor Cursor;  // 0x0 (0x0)
	char pad_1[7];  // 0x1 (0x1)
	struct UUserWidget* CursorWidget;  // 0x8 (0x8)


}; 
 
 // Function Engine.PlayerController.SetMouseLocation
struct FSetMouseLocation
{
	int32_t X;  // 0x0 (0x0)
	int32_t Y;  // 0x4 (0x4)


}; 
 
 // Function Engine.PlayerController.StartFire
struct FStartFire
{
	char FireModeNum;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.StopHapticEffect
struct FStopHapticEffect
{
	uint8_t Hand;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerController.TestServerLevelVisibilityChange
struct FTestServerLevelVisibilityChange
{
	struct FName PackageName;  // 0x0 (0x0)
	struct FName Filename;  // 0x8 (0x8)


}; 
 
 // Function Engine.PlayerController.WasInputKeyJustReleased
struct FWasInputKeyJustReleased
{
	struct FKey Key;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool ReturnValue : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.PlayerState.BP_GetUniqueId
struct FBP_GetUniqueId
{
	struct FUniqueNetIdRepl ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerState.GetPawn
struct FGetPawn
{
	struct APawn* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerState.GetPingInMilliseconds
struct FGetPingInMilliseconds
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.FixedTurn
struct FFixedTurn
{
	float InCurrent;  // 0x0 (0x0)
	float InDesired;  // 0x4 (0x4)
	float InDeltaRate;  // 0x8 (0x8)
	float ReturnValue;  // 0xC (0xC)


}; 
 
 // Function Engine.PlayerState.OnPawnPrivateDestroyed
struct FOnPawnPrivateDestroyed
{
	struct AActor* InActor;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetTextLibrary.TextIsTransient
struct FTextIsTransient
{
	struct FText InText;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool ReturnValue : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.SceneCaptureComponent.HideActorComponents
struct FHideActorComponents
{
	struct AActor* InActor;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bIncludeFromChildActors : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.SceneCaptureComponent.RemoveShowOnlyComponent
struct FRemoveShowOnlyComponent
{
	struct UPrimitiveComponent* InComponent;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPathsLibrary.GeneratedConfigDir
struct FGeneratedConfigDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SceneCaptureComponent.ShowOnlyActorComponents
struct FShowOnlyActorComponents
{
	struct AActor* InActor;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bIncludeFromChildActors : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.CheatManager.FreezeFrame
struct FFreezeFrame
{
	float Delay;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_Int64ToDouble
struct FConv_Int64ToDouble
{
	int64_t inInt;  // 0x0 (0x0)
	double ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.NotEqual_BoolBool
struct FNotEqual_BoolBool
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool A : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool B : 1;  // 0x1 (0x1)
	char pad_2_1 : 7;  // 0x2 (0x2)
	bool ReturnValue : 1;  // 0x2 (0x2)


}; 
 
 // Function Engine.SceneCaptureComponent.ShowOnlyComponent
struct FShowOnlyComponent
{
	struct UPrimitiveComponent* InComponent;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkinnedMeshComponent.BoneIsChildOf
struct FBoneIsChildOf
{
	struct FName BoneName;  // 0x0 (0x0)
	struct FName ParentBoneName;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[3];  // 0x11 (0x11)


}; 
 
 // Function Engine.KismetInputLibrary.InputEvent_IsLeftAltDown
struct FInputEvent_IsLeftAltDown
{
	struct FInputEvent Input;  // 0x0 (0x0)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.SkinnedMeshComponent.GetBoneName
struct FGetBoneName
{
	int32_t BoneIndex;  // 0x0 (0x0)
	struct FName ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.SkinnedMeshComponent.GetCurrentSkinWeightProfileName
struct FGetCurrentSkinWeightProfileName
{
	struct FName ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkinnedMeshComponent.GetForcedLOD
struct FGetForcedLOD
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkinnedMeshComponent.GetNumBones
struct FGetNumBones
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkinnedMeshComponent.GetPredictedLODLevel
struct FGetPredictedLODLevel
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_Vector4ToVector
struct FConv_Vector4ToVector
{
	struct FVector4 InVector4;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x20 (0x20)
	char pad_56[8];  // 0x38 (0x38)


}; 
 
 // Function Engine.SkinnedMeshComponent.GetSkinnedAsset
struct FGetSkinnedAsset
{
	struct USkinnedAsset* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkinnedMeshComponent.GetSocketBoneName
struct FGetSocketBoneName
{
	struct FName InSocketName;  // 0x0 (0x0)
	struct FName ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.SkinnedMeshComponent.GetTwistAndSwingAngleOfDeltaRotationFromRefPose
struct FGetTwistAndSwingAngleOfDeltaRotationFromRefPose
{
	struct FName BoneName;  // 0x0 (0x0)
	float OutTwistAngle;  // 0x8 (0x8)
	float OutSwingAngle;  // 0xC (0xC)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[3];  // 0x11 (0x11)


}; 
 
 // Function Engine.PlayerCameraManager.FindCameraModifierByClass
struct FFindCameraModifierByClass
{
	UCameraModifier* ModifierClass;  // 0x0 (0x0)
	struct UCameraModifier* ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.SkinnedMeshComponent.IsMaterialSectionShown
struct FIsMaterialSectionShown
{
	int32_t MaterialID;  // 0x0 (0x0)
	int32_t LODIndex;  // 0x4 (0x4)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.SkinnedMeshComponent.SetCastCapsuleDirectShadow
struct FSetCastCapsuleDirectShadow
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.LinearColor_Transparent
struct FLinearColor_Transparent
{
	struct FLinearColor ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkinnedMeshComponent.SetCastCapsuleIndirectShadow
struct FSetCastCapsuleIndirectShadow
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkinnedMeshComponent.SetForcedLOD
struct FSetForcedLOD
{
	int32_t InNewForcedLOD;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkinnedMeshComponent.SetLeaderPoseComponent
struct FSetLeaderPoseComponent
{
	struct USkinnedMeshComponent* NewLeaderBoneComponent;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bForceUpdate : 1;  // 0x8 (0x8)
	char pad_9_1 : 7;  // 0x9 (0x9)
	bool bInFollowerShouldTickPose : 1;  // 0x9 (0x9)
	char pad_10[6];  // 0xA (0xA)


}; 
 
 // Function Engine.SkinnedMeshComponent.SetMinLOD
struct FSetMinLOD
{
	int32_t InNewMinLOD;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.ResetFloatSpringState
struct FResetFloatSpringState
{
	struct FFloatSpringState SpringState;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkinnedMeshComponent.SetPhysicsAsset
struct FSetPhysicsAsset
{
	struct UPhysicsAsset* NewPhysicsAsset;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bForceReInit : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.SkinnedMeshComponent.SetPostSkinningOffsets
struct FSetPostSkinningOffsets
{
	int32_t LODIndex;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct TArray<struct FVector> Offsets;  // 0x8 (0x8)


}; 
 
 // Function Engine.SkinnedMeshComponent.SetPreSkinningOffsets
struct FSetPreSkinningOffsets
{
	int32_t LODIndex;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct TArray<struct FVector> Offsets;  // 0x8 (0x8)


}; 
 
 // Function Engine.SkinnedMeshComponent.SetSkinnedAssetAndUpdate
struct FSetSkinnedAssetAndUpdate
{
	struct USkinnedAsset* NewMesh;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bReinitPose : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.SkinnedMeshComponent.SetSkinWeightProfile
struct FSetSkinWeightProfile
{
	struct FName InProfileName;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.SkinnedMeshComponent.SetVertexOffsetUsage
struct FSetVertexOffsetUsage
{
	int32_t LODIndex;  // 0x0 (0x0)
	int32_t Usage;  // 0x4 (0x4)


}; 
 
 // Function Engine.SkinnedMeshComponent.ShowMaterialSection
struct FShowMaterialSection
{
	int32_t MaterialID;  // 0x0 (0x0)
	int32_t SectionIndex;  // 0x4 (0x4)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bShow : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)
	int32_t LODIndex;  // 0xC (0xC)


}; 
 
 // Function Engine.BlueprintPathsLibrary.ChangeExtension
struct FChangeExtension
{
	struct FString InPath;  // 0x0 (0x0)
	struct FString InNewExtension;  // 0x10 (0x10)
	struct FString ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.SkinnedMeshComponent.UnHideBoneByName
struct FUnHideBoneByName
{
	struct FName BoneName;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMeshComponent.AddForceToAllBodiesBelow
struct FAddForceToAllBodiesBelow
{
	struct FVector Force;  // 0x0 (0x0)
	struct FName BoneName;  // 0x18 (0x18)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool bAccelChange : 1;  // 0x20 (0x20)
	char pad_33_1 : 7;  // 0x21 (0x21)
	bool bIncludeSelf : 1;  // 0x21 (0x21)
	char pad_34[6];  // 0x22 (0x22)


}; 
 
 // Function Engine.GameplayStatics.SpawnDialogue2D
struct FSpawnDialogue2D
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct UDialogueWave* Dialogue;  // 0x8 (0x8)
	struct FDialogueContext Context;  // 0x10 (0x10)
	float VolumeMultiplier;  // 0x28 (0x28)
	float PitchMultiplier;  // 0x2C (0x2C)
	float StartTime;  // 0x30 (0x30)
	char pad_52_1 : 7;  // 0x34 (0x34)
	bool bAutoDestroy : 1;  // 0x34 (0x34)
	char pad_53[3];  // 0x35 (0x35)
	struct UAudioComponent* ReturnValue;  // 0x38 (0x38)


}; 
 
 // Function Engine.World.K2_GetWorldSettings
struct FK2_GetWorldSettings
{
	struct AWorldSettings* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMeshComponent.AllowAnimCurveEvaluation
struct FAllowAnimCurveEvaluation
{
	struct FName NameOfCurve;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bAllow : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.SkeletalMeshComponent.FindConstraintBoneName
struct FFindConstraintBoneName
{
	int32_t ConstraintIndex;  // 0x0 (0x0)
	struct FName ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.KismetMathLibrary.EqualEqual_IntInt
struct FEqualEqual_IntInt
{
	int32_t A;  // 0x0 (0x0)
	int32_t B;  // 0x4 (0x4)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.SkeletalMeshComponent.GetAllowRigidBodyAnimNode
struct FGetAllowRigidBodyAnimNode
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.TimelineComponent.IsReversing
struct FIsReversing
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMeshComponent.GetAnimClass
struct FGetAnimClass
{
	UObject* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMeshComponent.GetBoneLinearVelocity
struct FGetBoneLinearVelocity
{
	struct FName InBoneName;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.SkeletalMeshComponent.GetClothingSimulationInteractor
struct FGetClothingSimulationInteractor
{
	struct UClothingSimulationInteractor* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.MaxOfByteArray
struct FMaxOfByteArray
{
	struct TArray<char> ByteArray;  // 0x0 (0x0)
	int32_t IndexOfMaxValue;  // 0x10 (0x10)
	char MaxValue;  // 0x14 (0x14)
	char pad_21[3];  // 0x15 (0x15)


}; 
 
 // Function Engine.SkeletalMeshComponent.GetClothMaxDistanceScale
struct FGetClothMaxDistanceScale
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMeshComponent.GetConstraintByName
struct FGetConstraintByName
{
	struct FName ConstraintName;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bIncludesTerminated : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)
	struct FConstraintInstanceAccessor ReturnValue;  // 0xC (0xC)


}; 
 
 // Function Engine.SkeletalMeshComponent.GetConstraints
struct FGetConstraints
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bIncludesTerminated : 1;  // 0x0 (0x0)
	char pad_1[7];  // 0x1 (0x1)
	struct TArray<struct FConstraintInstanceAccessor> OutConstraints;  // 0x8 (0x8)


}; 
 
 // Function Engine.SkeletalMeshComponent.GetConstraintsFromBody
struct FGetConstraintsFromBody
{
	struct FName BodyName;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bParentConstraints : 1;  // 0x8 (0x8)
	char pad_9_1 : 7;  // 0x9 (0x9)
	bool bChildConstraints : 1;  // 0x9 (0x9)
	char pad_10_1 : 7;  // 0xA (0xA)
	bool bIncludesTerminated : 1;  // 0xA (0xA)
	char pad_11[5];  // 0xB (0xB)
	struct TArray<struct FConstraintInstanceAccessor> OutConstraints;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.Matrix_TransformVector
struct FMatrix_TransformVector
{
	struct FMatrix M;  // 0x0 (0x0)
	struct FVector V;  // 0x80 (0x80)
	char pad_152[8];  // 0x98 (0x98)
	struct FVector4 ReturnValue;  // 0xA0 (0xA0)


}; 
 
 // Function Engine.SkeletalMeshComponent.GetDisableAnimCurves
struct FGetDisableAnimCurves
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.PoseableMeshComponent.ResetBoneTransformByName
struct FResetBoneTransformByName
{
	struct FName BoneName;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMeshComponent.GetDisablePostProcessBlueprint
struct FGetDisablePostProcessBlueprint
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Multiply_RotatorFloat
struct FMultiply_RotatorFloat
{
	struct FRotator A;  // 0x0 (0x0)
	float B;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)
	struct FRotator ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetMathLibrary.ResetVectorSpringState
struct FResetVectorSpringState
{
	struct FVectorSpringState SpringState;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMeshComponent.GetFloatAttribute_Ref
struct FGetFloatAttribute_Ref
{
	struct FName BoneName;  // 0x0 (0x0)
	struct FName AttributeName;  // 0x8 (0x8)
	float OutValue;  // 0x10 (0x10)
	uint8_t LookupType;  // 0x14 (0x14)
	char pad_21_1 : 7;  // 0x15 (0x15)
	bool ReturnValue : 1;  // 0x15 (0x15)
	char pad_22[2];  // 0x16 (0x16)


}; 
 
 // Function Engine.SkeletalMeshComponent.GetMorphTarget
struct FGetMorphTarget
{
	struct FName MorphTargetName;  // 0x0 (0x0)
	float ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.SkeletalMeshComponent.GetPosition
struct FGetPosition
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.WorldPartitionSubsystem.IsStreamingCompleted
struct FIsStreamingCompleted
{
	uint8_t QueryState;  // 0x0 (0x0)
	char pad_1[7];  // 0x1 (0x1)
	struct TArray<struct FWorldPartitionStreamingQuerySource> QuerySources;  // 0x8 (0x8)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bExactState : 1;  // 0x18 (0x18)
	char pad_25_1 : 7;  // 0x19 (0x19)
	bool ReturnValue : 1;  // 0x19 (0x19)
	char pad_26[6];  // 0x1A (0x1A)


}; 
 
 // Function Engine.SkeletalMeshComponent.GetStringAttribute_Ref
struct FGetStringAttribute_Ref
{
	struct FName BoneName;  // 0x0 (0x0)
	struct FName AttributeName;  // 0x8 (0x8)
	struct FString OutValue;  // 0x10 (0x10)
	uint8_t LookupType;  // 0x20 (0x20)
	char pad_33_1 : 7;  // 0x21 (0x21)
	bool ReturnValue : 1;  // 0x21 (0x21)
	char pad_34[6];  // 0x22 (0x22)


}; 
 
 // Function Engine.SkeletalMeshComponent.GetTeleportRotationThreshold
struct FGetTeleportRotationThreshold
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetNodeHelperLibrary.MarkBit
struct FMarkBit
{
	int32_t Data;  // 0x0 (0x0)
	int32_t Index;  // 0x4 (0x4)


}; 
 
 // Function Engine.SkeletalMeshComponent.GetTransformAttribute
struct FGetTransformAttribute
{
	struct FName BoneName;  // 0x0 (0x0)
	struct FName AttributeName;  // 0x8 (0x8)
	struct FTransform DefaultValue;  // 0x10 (0x10)
	struct FTransform OutValue;  // 0x70 (0x70)
	uint8_t LookupType;  // 0xD0 (0xD0)
	char pad_209_1 : 7;  // 0xD1 (0xD1)
	bool ReturnValue : 1;  // 0xD1 (0xD1)
	char pad_210[14];  // 0xD2 (0xD2)


}; 
 
 // Function Engine.GameplayStatics.LoadGameFromSlot
struct FLoadGameFromSlot
{
	struct FString SlotName;  // 0x0 (0x0)
	int32_t UserIndex;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)
	struct USaveGame* ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.SkeletalMeshComponent.IsBodyGravityEnabled
struct FIsBodyGravityEnabled
{
	struct FName BoneName;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.CameraShakeSourceComponent.StartCameraShake
struct FStartCameraShake
{
	UCameraShakeBase* InCameraShake;  // 0x0 (0x0)
	float Scale;  // 0x8 (0x8)
	uint8_t PlaySpace;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)
	struct FRotator UserPlaySpaceRot;  // 0x10 (0x10)


}; 
 
 // Function Engine.SkeletalMeshComponent.SetAllBodiesBelowLinearVelocity
struct FSetAllBodiesBelowLinearVelocity
{
	struct FName InBoneName;  // 0x0 (0x0)
	struct FVector LinearVelocity;  // 0x8 (0x8)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool bIncludeSelf : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.SkeletalMeshComponent.SetAllBodiesBelowPhysicsDisabled
struct FSetAllBodiesBelowPhysicsDisabled
{
	struct FName InBoneName;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bDisabled : 1;  // 0x8 (0x8)
	char pad_9_1 : 7;  // 0x9 (0x9)
	bool bIncludeSelf : 1;  // 0x9 (0x9)
	char pad_10[2];  // 0xA (0xA)


}; 
 
 // Function Engine.SkeletalMeshComponent.SetAllBodiesBelowSimulatePhysics
struct FSetAllBodiesBelowSimulatePhysics
{
	struct FName InBoneName;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bNewSimulate : 1;  // 0x8 (0x8)
	char pad_9_1 : 7;  // 0x9 (0x9)
	bool bIncludeSelf : 1;  // 0x9 (0x9)
	char pad_10[2];  // 0xA (0xA)


}; 
 
 // Function Engine.KismetMathLibrary.RandomBoolWithWeight
struct FRandomBoolWithWeight
{
	float Weight;  // 0x0 (0x0)
	char pad_4_1 : 7;  // 0x4 (0x4)
	bool ReturnValue : 1;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)


}; 
 
 // Function Engine.SkeletalMeshComponent.SetAllBodiesPhysicsBlendWeight
struct FSetAllBodiesPhysicsBlendWeight
{
	float PhysicsBlendWeight;  // 0x0 (0x0)
	char pad_4_1 : 7;  // 0x4 (0x4)
	bool bSkipCustomPhysicsType : 1;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)


}; 
 
 // Function Engine.SkeletalMeshComponent.SetAllBodiesSimulatePhysics
struct FSetAllBodiesSimulatePhysics
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewSimulate : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMeshComponent.SetAllMotorsAngularDriveParams
struct FSetAllMotorsAngularDriveParams
{
	float InSpring;  // 0x0 (0x0)
	float InDamping;  // 0x4 (0x4)
	float InForceLimit;  // 0x8 (0x8)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bSkipCustomPhysicsType : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)


}; 
 
 // Function Engine.SkeletalMeshComponent.SetAllowClothActors
struct FSetAllowClothActors
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bInAllow : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMeshComponent.SetAllowRigidBodyAnimNode
struct FSetAllowRigidBodyAnimNode
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bInAllow : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool bReinitAnim : 1;  // 0x1 (0x1)


}; 
 
 // Function Engine.ConstraintInstanceBlueprintLibrary.SetAngularLimits
struct FSetAngularLimits
{
	struct FConstraintInstanceAccessor Accessor;  // 0x0 (0x0)
	enum class EAngularConstraintMotion Swing1MotionType;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)
	float Swing1LimitAngle;  // 0x10 (0x10)
	enum class EAngularConstraintMotion Swing2MotionType;  // 0x14 (0x14)
	char pad_21[3];  // 0x15 (0x15)
	float Swing2LimitAngle;  // 0x18 (0x18)
	enum class EAngularConstraintMotion TwistMotionType;  // 0x1C (0x1C)
	char pad_29[3];  // 0x1D (0x1D)
	float TwistLimitAngle;  // 0x20 (0x20)


}; 
 
 // Function Engine.SpringArmComponent.IsCollisionFixApplied
struct FIsCollisionFixApplied
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMeshComponent.SetAnimation
struct FSetAnimation
{
	struct UAnimationAsset* NewAnimToPlay;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetStringLibrary.BuildString_Int
struct FBuildString_Int
{
	struct FString AppendTo;  // 0x0 (0x0)
	struct FString Prefix;  // 0x10 (0x10)
	int32_t inInt;  // 0x20 (0x20)
	char pad_36[4];  // 0x24 (0x24)
	struct FString Suffix;  // 0x28 (0x28)
	struct FString ReturnValue;  // 0x38 (0x38)


}; 
 
 // Function Engine.SkeletalMeshComponent.SetClothMaxDistanceScale
struct FSetClothMaxDistanceScale
{
	float Scale;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMeshComponent.SetConstraintProfile
struct FSetConstraintProfile
{
	struct FName JointName;  // 0x0 (0x0)
	struct FName ProfileName;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool bDefaultIfNotFound : 1;  // 0x10 (0x10)
	char pad_17[3];  // 0x11 (0x11)


}; 
 
 // Function Engine.SkeletalMeshComponent.SetConstraintProfileForAll
struct FSetConstraintProfileForAll
{
	struct FName ProfileName;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bDefaultIfNotFound : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.SkeletalMeshComponent.SetDisableAnimCurves
struct FSetDisableAnimCurves
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bInDisableAnimCurves : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMeshComponent.SetEnablePhysicsBlending
struct FSetEnablePhysicsBlending
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewBlendPhysics : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMeshComponent.SetNotifyRigidBodyCollisionBelow
struct FSetNotifyRigidBodyCollisionBelow
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewNotifyRigidBodyCollision : 1;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	struct FName BoneName;  // 0x4 (0x4)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bIncludeSelf : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)


}; 
 
 // Function Engine.SkeletalMeshComponent.SetPhysicsBlendWeight
struct FSetPhysicsBlendWeight
{
	float PhysicsBlendWeight;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerCameraManager.StartCameraShakeFromSource
struct FStartCameraShakeFromSource
{
	UCameraShakeBase* ShakeClass;  // 0x0 (0x0)
	struct UCameraShakeSourceComponent* SourceComponent;  // 0x8 (0x8)
	float Scale;  // 0x10 (0x10)
	uint8_t PlaySpace;  // 0x14 (0x14)
	char pad_21[3];  // 0x15 (0x15)
	struct FRotator UserPlaySpaceRot;  // 0x18 (0x18)
	struct UCameraShakeBase* ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.CurveBase.GetTimeRange
struct FGetTimeRange
{
	float MinTime;  // 0x0 (0x0)
	float MaxTime;  // 0x4 (0x4)


}; 
 
 // Function Engine.AnimSingleNodeInstance.SetPlayRate
struct FSetPlayRate
{
	float InPlayRate;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMeshComponent.SetTeleportDistanceThreshold
struct FSetTeleportDistanceThreshold
{
	float Threshold;  // 0x0 (0x0)


}; 
 
 // Function Engine.ExponentialHeightFogComponent.SetInscatteringTextureTint
struct FSetInscatteringTextureTint
{
	struct FLinearColor Value;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMeshComponent.TermBodiesBelow
struct FTermBodiesBelow
{
	struct FName ParentBoneName;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameMode.GetMatchState
struct FGetMatchState
{
	struct FName ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.EqualEqual_TimespanTimespan
struct FEqualEqual_TimespanTimespan
{
	struct FTimespan A;  // 0x0 (0x0)
	struct FTimespan B;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.GameMode.IsMatchInProgress
struct FIsMatchInProgress
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.RuntimeVirtualTexture.GetTileCount
struct FGetTileCount
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetNodeHelperLibrary.HasMarkedBit
struct FHasMarkedBit
{
	int32_t Data;  // 0x0 (0x0)
	int32_t NumBits;  // 0x4 (0x4)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.GameMode.K2_OnSetMatchState
struct FK2_OnSetMatchState
{
	struct FName NewState;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameMode.ReadyToEndMatch
struct FReadyToEndMatch
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameMode.ReadyToStartMatch
struct FReadyToStartMatch
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.AutoDestroySubsystem.OnActorEndPlay
struct FOnActorEndPlay
{
	struct AActor* Actor;  // 0x0 (0x0)
	enum class EEndPlayReason EndPlayReason;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.CheatManager.ViewClass
struct FViewClass
{
	AActor* DesiredClass;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameMode.Say
struct FSay
{
	struct FString Msg;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameplayStatics.GetAllActorsWithTag
struct FGetAllActorsWithTag
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FName Tag;  // 0x8 (0x8)
	struct TArray<struct AActor*> OutActors;  // 0x10 (0x10)


}; 
 
 // Function Engine.Canvas.K2_DrawTriangle
struct FK2_DrawTriangle
{
	struct UTexture* RenderTexture;  // 0x0 (0x0)
	struct TArray<struct FCanvasUVTri> Triangles;  // 0x8 (0x8)


}; 
 
 // Function Engine.MaterialInterface.SetForceMipLevelsToBeResident
struct FSetForceMipLevelsToBeResident
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool OverrideForceMiplevelsToBeResident : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool bForceMiplevelsToBeResidentValue : 1;  // 0x1 (0x1)
	char pad_2[2];  // 0x2 (0x2)
	float ForceDuration;  // 0x4 (0x4)
	int32_t CinematicTextureGroups;  // [x8 ([x8)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bFastResponse : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)


}; 
 
 // Function Engine.Texture.Blueprint_GetMemorySize
struct FBlueprint_GetMemorySize
{
	int64_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.StaticMeshComponent.GetInitialEvaluateWorldPositionOffset
struct FGetInitialEvaluateWorldPositionOffset
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.NormalizedDeltaRotator
struct FNormalizedDeltaRotator
{
	struct FRotator A;  // 0x0 (0x0)
	struct FRotator B;  // 0x18 (0x18)
	struct FRotator ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.KismetRenderingLibrary.SetCastInsetShadowForAllAttachments
struct FSetCastInsetShadowForAllAttachments
{
	struct UPrimitiveComponent* PrimitiveComponent;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bCastInsetShadow : 1;  // 0x8 (0x8)
	char pad_9_1 : 7;  // 0x9 (0x9)
	bool bLightAttachmentsAsGroup : 1;  // 0x9 (0x9)
	char pad_10[6];  // 0xA (0xA)


}; 
 
 // Function Engine.StaticMeshComponent.GetLocalBounds
struct FGetLocalBounds
{
	struct FVector Min;  // 0x0 (0x0)
	struct FVector Max;  // 0x18 (0x18)


}; 
 
 // Function Engine.StaticMeshComponent.OnRep_StaticMesh
struct FOnRep_StaticMesh
{
	struct UStaticMesh* OldStaticMesh;  // 0x0 (0x0)


}; 
 
 // Function Engine.StaticMeshComponent.SetDistanceFieldSelfShadowBias
struct FSetDistanceFieldSelfShadowBias
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetTextLibrary.Conv_IntToText
struct FConv_IntToText
{
	int32_t Value;  // 0x0 (0x0)
	char pad_4_1 : 7;  // 0x4 (0x4)
	bool bAlwaysSign : 1;  // 0x4 (0x4)
	char pad_5_1 : 7;  // 0x5 (0x5)
	bool bUseGrouping : 1;  // 0x5 (0x5)
	char pad_6[2];  // 0x6 (0x6)
	int32_t MinimumIntegralDigits;  // 0x8 (0x8)
	int32_t MaximumIntegralDigits;  // 0xC (0xC)
	struct FText ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.StaticMeshComponent.SetEvaluateWorldPositionOffset
struct FSetEvaluateWorldPositionOffset
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool NewValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.StaticMeshComponent.SetForcedLodModel
struct FSetForcedLodModel
{
	int32_t NewForcedLodModel;  // 0x0 (0x0)


}; 
 
 // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogEmissive
struct FSetVolumetricFogEmissive
{
	struct FLinearColor NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.StaticMeshComponent.SetReverseCulling
struct FSetReverseCulling
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReverseCulling : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.LightComponent.SetBloomThreshold
struct FSetBloomThreshold
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.BreakRotator
struct FBreakRotator
{
	struct FRotator InRot;  // 0x0 (0x0)
	float Roll;  // 0x18 (0x18)
	float Pitch;  // 0x1C (0x1C)
	float Yaw;  // 0x20 (0x20)
	char pad_36[4];  // 0x24 (0x24)


}; 
 
 // Function Engine.KismetMathLibrary.CreateVectorFromYawPitch
struct FCreateVectorFromYawPitch
{
	float Yaw;  // 0x0 (0x0)
	float Pitch;  // 0x4 (0x4)
	float Length;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)
	struct FVector ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransforms
struct FBatchUpdateInstancesTransforms
{
	int32_t StartInstanceIndex;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct TArray<struct FTransform> NewInstancesTransforms;  // 0x8 (0x8)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bWorldSpace : 1;  // 0x18 (0x18)
	char pad_25_1 : 7;  // 0x19 (0x19)
	bool bMarkRenderStateDirty : 1;  // 0x19 (0x19)
	char pad_26_1 : 7;  // 0x1A (0x1A)
	bool bTeleport : 1;  // 0x1A (0x1A)
	char pad_27_1 : 7;  // 0x1B (0x1B)
	bool ReturnValue : 1;  // 0x1B (0x1B)
	char pad_28[4];  // 0x1C (0x1C)


}; 
 
 // Function Engine.InstancedStaticMeshComponent.GetInstancesOverlappingBox
struct FGetInstancesOverlappingBox
{
	struct FBox Box;  // 0x0 (0x0)
	char pad_56_1 : 7;  // 0x38 (0x38)
	bool bBoxInWorldSpace : 1;  // 0x38 (0x38)
	char pad_57[7];  // 0x39 (0x39)
	struct TArray<int32_t> ReturnValue;  // 0x40 (0x40)


}; 
 
 // Function Engine.GameplayStatics.Blueprint_PredictProjectilePath_ByObjectType
struct FBlueprint_PredictProjectilePath_ByObjectType
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FHitResult OutHit;  // 0x8 (0x8)
	struct TArray<struct FVector> OutPathPositions;  // 0xF0 (0xF0)
	struct FVector OutLastTraceDestination;  // 0x100 (0x100)
	struct FVector StartPos;  // 0x118 (0x118)
	struct FVector LaunchVelocity;  // 0x130 (0x130)
	char pad_328_1 : 7;  // 0x148 (0x148)
	bool bTracePath : 1;  // 0x148 (0x148)
	char pad_329[3];  // 0x149 (0x149)
	float ProjectileRadius;  // 0x14C (0x14C)
	struct TArray<enum class EObjectTypeQuery> ObjectTypes;  // 0x150 (0x150)
	char pad_352_1 : 7;  // 0x160 (0x160)
	bool bTraceComplex : 1;  // 0x160 (0x160)
	char pad_353[7];  // 0x161 (0x161)
	struct TArray<struct AActor*> ActorsToIgnore;  // 0x168 (0x168)
	enum class EDrawDebugTrace DrawDebugType;  // 0x178 (0x178)
	char pad_377[3];  // 0x179 (0x179)
	float DrawDebugTime;  // 0x17C (0x17C)
	float SimFrequency;  // 0x180 (0x180)
	float MaxSimTime;  // 0x184 (0x184)
	float OverrideGravityZ;  // 0x188 (0x188)
	char pad_396_1 : 7;  // 0x18C (0x18C)
	bool ReturnValue : 1;  // 0x18C (0x18C)
	char pad_397[3];  // 0x18D (0x18D)


}; 
 
 // Function Engine.InstancedStaticMeshComponent.GetInstancesOverlappingSphere
struct FGetInstancesOverlappingSphere
{
	struct FVector Center;  // 0x0 (0x0)
	float Radius;  // 0x18 (0x18)
	char pad_28_1 : 7;  // 0x1C (0x1C)
	bool bSphereInWorldSpace : 1;  // 0x1C (0x1C)
	char pad_29[3];  // 0x1D (0x1D)
	struct TArray<int32_t> ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.RuntimeVirtualTextureComponent.Invalidate
struct FInvalidate
{
	struct FBoxSphereBounds WorldBounds;  // 0x0 (0x0)


}; 
 
 // Function Engine.InstancedStaticMeshComponent.GetInstanceTransform
struct FGetInstanceTransform
{
	int32_t InstanceIndex;  // 0x0 (0x0)
	char pad_4[12];  // 0x4 (0x4)
	struct FTransform OutInstanceTransform;  // 0x10 (0x10)
	char pad_112_1 : 7;  // 0x70 (0x70)
	bool bWorldSpace : 1;  // 0x70 (0x70)
	char pad_113_1 : 7;  // 0x71 (0x71)
	bool ReturnValue : 1;  // 0x71 (0x71)
	char pad_114[14];  // 0x72 (0x72)


}; 
 
 // Function Engine.KismetMathLibrary.MakeBox2D
struct FMakeBox2D
{
	struct FVector2D Min;  // 0x0 (0x0)
	struct FVector2D Max;  // 0x10 (0x10)
	struct FBox2D ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.InstancedStaticMeshComponent.IsValidInstance
struct FIsValidInstance
{
	int32_t InstanceIndex;  // 0x0 (0x0)
	char pad_4_1 : 7;  // 0x4 (0x4)
	bool ReturnValue : 1;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)


}; 
 
 // Function Engine.AnimMontage.CreateSlotAnimationAsDynamicMontage_WithBlendSettings
struct FCreateSlotAnimationAsDynamicMontage_WithBlendSettings
{
	struct UAnimSequenceBase* Asset;  // 0x0 (0x0)
	struct FName SlotNodeName;  // 0x8 (0x8)
	struct FMontageBlendSettings BlendInSettings;  // 0x10 (0x10)
	struct FMontageBlendSettings BlendOutSettings;  // 0x30 (0x30)
	float InPlayRate;  // 0x50 (0x50)
	int32_t LoopCount;  // 0x54 (0x54)
	float InBlendOutTriggerTime;  // 0x58 (0x58)
	char pad_92[4];  // 0x5C (0x5C)
	struct UAnimMontage* ReturnValue;  // 0x60 (0x60)


}; 
 
 // Function Engine.KismetMathLibrary.GetDuration
struct FGetDuration
{
	struct FTimespan A;  // 0x0 (0x0)
	struct FTimespan ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.NotEqual_ByteByte
struct FNotEqual_ByteByte
{
	char A;  // 0x0 (0x0)
	char B;  // 0x1 (0x1)
	char pad_2_1 : 7;  // 0x2 (0x2)
	bool ReturnValue : 1;  // 0x2 (0x2)


}; 
 
 // Function Engine.InstancedStaticMeshComponent.RemoveInstances
struct FRemoveInstances
{
	struct TArray<int32_t> InstancesToRemove;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.InstancedStaticMeshComponent.SetCustomDataValue
struct FSetCustomDataValue
{
	int32_t InstanceIndex;  // 0x0 (0x0)
	int32_t CustomDataIndex;  // 0x4 (0x4)
	float CustomDataValue;  // 0x8 (0x8)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bMarkRenderStateDirty : 1;  // 0xC (0xC)
	char pad_13_1 : 7;  // 0xD (0xD)
	bool ReturnValue : 1;  // 0xD (0xD)
	char pad_14[2];  // 0xE (0xE)


}; 
 
 // Function Engine.MaterialInterface.GetBaseMaterial
struct FGetBaseMaterial
{
	struct UMaterial* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.MaterialInterface.GetBlendMode
struct FGetBlendMode
{
	enum class EBlendMode ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.StaticMesh.GetMinimumLODForQualityLevel
struct FGetMinimumLODForQualityLevel
{
	struct FName QualityLevel;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.MaterialInterface.GetParameterInfo
struct FGetParameterInfo
{
	enum class EMaterialParameterAssociation Association;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	struct FName ParameterName;  // 0x4 (0x4)
	char pad_12[4];  // 0xC (0xC)
	struct UMaterialFunctionInterface* LayerFunction;  // 0x10 (0x10)
	struct FMaterialParameterInfo ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.MaterialInterface.GetPhysicalMaterialMask
struct FGetPhysicalMaterialMask
{
	struct UPhysicalMaterialMask* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.IntPoint_Zero
struct FIntPoint_Zero
{
	struct FIntPoint ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.MaterialInstanceDynamic.K2_GetScalarParameterValue
struct FK2_GetScalarParameterValue
{
	struct FName ParameterName;  // 0x0 (0x0)
	float ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.MaterialInstanceDynamic.K2_GetTextureParameterValue
struct FK2_GetTextureParameterValue
{
	struct FName ParameterName;  // 0x0 (0x0)
	struct UTexture* ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.MaterialInstanceDynamic.K2_GetVectorParameterValue
struct FK2_GetVectorParameterValue
{
	struct FName ParameterName;  // 0x0 (0x0)
	struct FLinearColor ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.TimecodeProvider.FetchTimecode
struct FFetchTimecode
{
	struct FQualifiedFrameTime OutFrameTime;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[3];  // 0x11 (0x11)


}; 
 
 // Function Engine.TimecodeProvider.GetDelayedQualifiedFrameTime
struct FGetDelayedQualifiedFrameTime
{
	struct FQualifiedFrameTime ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimDataModel.GetFrameRate
struct FGetFrameRate
{
	struct FFrameRate ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkyAtmosphereComponent.SetSkyLuminanceFactor
struct FSetSkyLuminanceFactor
{
	struct FLinearColor NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetStringLibrary.Conv_StringToVector2D
struct FConv_StringToVector2D
{
	struct FString InString;  // 0x0 (0x0)
	struct FVector2D OutConvertedVector2D;  // 0x10 (0x10)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool OutIsValid : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.TimecodeProvider.GetQualifiedFrameTime
struct FGetQualifiedFrameTime
{
	struct FQualifiedFrameTime ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.TimecodeProvider.GetTimecode
struct FGetTimecode
{
	struct FTimecode ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.CameraActor.GetAutoActivatePlayerIndex
struct FGetAutoActivatePlayerIndex
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.CameraComponent.SetOrthoFarClipPlane
struct FSetOrthoFarClipPlane
{
	float InOrthoFarClipPlane;  // 0x0 (0x0)


}; 
 
 // Function Engine.CameraComponent.SetOrthoNearClipPlane
struct FSetOrthoNearClipPlane
{
	float InOrthoNearClipPlane;  // 0x0 (0x0)


}; 
 
 // Function Engine.CameraComponent.SetOrthoWidth
struct FSetOrthoWidth
{
	float InOrthoWidth;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimDataModel.GetPlayLength
struct FGetPlayLength
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.StaticMesh.GetMinimumLODForPlatforms
struct FGetMinimumLODForPlatforms
{
	struct TMap<struct FName, int32_t> PlatformMinimumLODs;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Divide_Vector2DVector2D
struct FDivide_Vector2DVector2D
{
	struct FVector2D A;  // 0x0 (0x0)
	struct FVector2D B;  // 0x10 (0x10)
	struct FVector2D ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.AudioPanelWidgetInterface.GetEditorName
struct FGetEditorName
{
	struct FText ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.AudioPanelWidgetInterface.GetIconBrushName
struct FGetIconBrushName
{
	struct FName ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Matrix_ConcatenateTranslation
struct FMatrix_ConcatenateTranslation
{
	struct FMatrix M;  // 0x0 (0x0)
	struct FVector Translation;  // 0x80 (0x80)
	char pad_152[8];  // 0x98 (0x98)
	struct FMatrix ReturnValue;  // 0xA0 (0xA0)


}; 
 
 // Function Engine.KismetMathLibrary.TransformDirection
struct FTransformDirection
{
	struct FTransform T;  // 0x0 (0x0)
	struct FVector Direction;  // 0x60 (0x60)
	struct FVector ReturnValue;  // 0x78 (0x78)


}; 
 
 // Function Engine.LightComponentBase.GetLightColor
struct FGetLightColor
{
	struct FLinearColor ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.Light.IsEnabled
struct FIsEnabled
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.LightComponentBase.SetCastShadows
struct FSetCastShadows
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.AudioVolume.SetEnabled
struct FSetEnabled
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewEnabled : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.LightComponent.SetLightColor
struct FSetLightColor
{
	struct FLinearColor NewLightColor;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool bSRGB : 1;  // 0x10 (0x10)
	char pad_17[3];  // 0x11 (0x11)


}; 
 
 // Function Engine.LightComponent.SetLightFunctionMaterial
struct FSetLightFunctionMaterial
{
	struct UMaterialInterface* NewLightFunctionMaterial;  // 0x0 (0x0)


}; 
 
 // Function Engine.LightComponent.SetLightFunctionScale
struct FSetLightFunctionScale
{
	struct FVector NewLightFunctionScale;  // 0x0 (0x0)


}; 
 
 // Function Engine.ExponentialHeightFogComponent.SetSecondFogHeightOffset
struct FSetSecondFogHeightOffset
{
	float Value;  // 0x0 (0x0)


}; 
 
 // Function Engine.Emitter.OnParticleSystemFinished
struct FOnParticleSystemFinished
{
	struct UParticleSystemComponent* FinishedComponent;  // 0x0 (0x0)


}; 
 
 // Function Engine.ParticleSystemComponent.SetMaterialParameter
struct FSetMaterialParameter
{
	struct FName ParameterName;  // 0x0 (0x0)
	struct UMaterialInterface* Param;  // 0x8 (0x8)


}; 
 
 // Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringColor
struct FSetDirectionalInscatteringColor
{
	struct FLinearColor Value;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Matrix_ToQuat
struct FMatrix_ToQuat
{
	struct FMatrix M;  // 0x0 (0x0)
	struct FQuat ReturnValue;  // 0x80 (0x80)


}; 
 
 // Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringStartDistance
struct FSetDirectionalInscatteringStartDistance
{
	float Value;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.GreaterEqual_DoubleDouble
struct FGreaterEqual_DoubleDouble
{
	double A;  // 0x0 (0x0)
	double B;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.ExponentialHeightFogComponent.SetFogHeightFalloff
struct FSetFogHeightFalloff
{
	float Value;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameplayStatics.PlayWorldCameraShake
struct FPlayWorldCameraShake
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	UCameraShakeBase* Shake;  // 0x8 (0x8)
	struct FVector Epicenter;  // 0x10 (0x10)
	float InnerRadius;  // 0x28 (0x28)
	float OuterRadius;  // 0x2C (0x2C)
	float Falloff;  // 0x30 (0x30)
	char pad_52_1 : 7;  // 0x34 (0x34)
	bool bOrientShakeTowardsEpicenter : 1;  // 0x34 (0x34)
	char pad_53[3];  // 0x35 (0x35)


}; 
 
 // Function Engine.ExponentialHeightFogComponent.SetFogMaxOpacity
struct FSetFogMaxOpacity
{
	float Value;  // 0x0 (0x0)


}; 
 
 // Function Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemap
struct FSetInscatteringColorCubemap
{
	struct UTextureCube* Value;  // 0x0 (0x0)


}; 
 
 // Function Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemapAngle
struct FSetInscatteringColorCubemapAngle
{
	float Value;  // 0x0 (0x0)


}; 
 
 // Function Engine.AtmosphericFogComponent.SetStartDistance
struct FSetStartDistance
{
	float NewStartDistance;  // 0x0 (0x0)


}; 
 
 // Function Engine.PhysicsHandleComponent.SetInterpolationSpeed
struct FSetInterpolationSpeed
{
	float NewInterpolationSpeed;  // 0x0 (0x0)


}; 
 
 // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogDistance
struct FSetVolumetricFogDistance
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogExtinctionScale
struct FSetVolumetricFogExtinctionScale
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Distance2D
struct FDistance2D
{
	struct FVector2D v1;  // 0x0 (0x0)
	struct FVector2D v2;  // 0x10 (0x10)
	double ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogScatteringDistribution
struct FSetVolumetricFogScatteringDistribution
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameplayStatics.MakeHitResult
struct FMakeHitResult
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bBlockingHit : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool bInitialOverlap : 1;  // 0x1 (0x1)
	char pad_2[2];  // 0x2 (0x2)
	float Time;  // 0x4 (0x4)
	float Distance;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)
	struct FVector Location;  // 0x10 (0x10)
	struct FVector ImpactPoint;  // 0x28 (0x28)
	struct FVector Normal;  // 0x40 (0x40)
	struct FVector ImpactNormal;  // 0x58 (0x58)
	struct UPhysicalMaterial* PhysMat;  // 0x70 (0x70)
	struct AActor* HitActor;  // 0x78 (0x78)
	struct UPrimitiveComponent* HitComponent;  // 0x80 (0x80)
	struct FName HitBoneName;  // 0x88 (0x88)
	struct FName BoneName;  // 0x90 (0x90)
	int32_t HitItem;  // 0x98 (0x98)
	int32_t ElementIndex;  // 0x9C (0x9C)
	int32_t FaceIndex;  // 0xA0 (0xA0)
	char pad_164[4];  // 0xA4 (0xA4)
	struct FVector TraceStart;  // 0xA8 (0xA8)
	struct FVector TraceEnd;  // 0xC0 (0xC0)
	struct FHitResult ReturnValue;  // 0xD8 (0xD8)


}; 
 
 // Function Engine.SpotLightComponent.SetInnerConeAngle
struct FSetInnerConeAngle
{
	float NewInnerConeAngle;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Tan
struct FTan
{
	double A;  // 0x0 (0x0)
	double ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.SpotLightComponent.SetOuterConeAngle
struct FSetOuterConeAngle
{
	float NewOuterConeAngle;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimationDataController.AddBoneTrack
struct FAddBoneTrack
{
	struct FName BoneName;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bShouldTransact : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)
	int32_t ReturnValue;  // 0xC (0xC)


}; 
 
 // Function Engine.AnimationDataController.DuplicateAttribute
struct FDuplicateAttribute
{
	struct FAnimationAttributeIdentifier AttributeIdentifier;  // 0x0 (0x0)
	struct FAnimationAttributeIdentifier NewAttributeIdentifier;  // 0x40 (0x40)
	char pad_128_1 : 7;  // 0x80 (0x80)
	bool bShouldTransact : 1;  // 0x80 (0x80)
	char pad_129_1 : 7;  // 0x81 (0x81)
	bool ReturnValue : 1;  // 0x81 (0x81)
	char pad_130[6];  // 0x82 (0x82)


}; 
 
 // Function Engine.AnimationDataController.FindOrAddCurveNamesOnSkeleton
struct FFindOrAddCurveNamesOnSkeleton
{
	struct USkeleton* Skeleton;  // 0x0 (0x0)
	uint8_t SupportedCurveType;  // 0x8 (0x8)
	char pad_9_1 : 7;  // 0x9 (0x9)
	bool bShouldTransact : 1;  // 0x9 (0x9)
	char pad_10[6];  // 0xA (0xA)


}; 
 
 // Function Engine.AnimationDataController.RemoveAllAttributes
struct FRemoveAllAttributes
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bShouldTransact : 1;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	int32_t ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.KismetMathLibrary.Xor_IntInt
struct FXor_IntInt
{
	int32_t A;  // 0x0 (0x0)
	int32_t B;  // 0x4 (0x4)
	int32_t ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.AnimationDataController.RemoveAllBoneTracks
struct FRemoveAllBoneTracks
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bShouldTransact : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimationDataController.RemoveAllCurvesOfType
struct FRemoveAllCurvesOfType
{
	uint8_t SupportedCurveType;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool bShouldTransact : 1;  // 0x1 (0x1)


}; 
 
 // Function Engine.KismetRenderingLibrary.ReadRenderTargetRawUV
struct FReadRenderTargetRawUV
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct UTextureRenderTarget2D* TextureRenderTarget;  // 0x8 (0x8)
	float U;  // 0x10 (0x10)
	float V;  // 0x14 (0x14)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bNormalize : 1;  // 0x18 (0x18)
	char pad_25[3];  // 0x19 (0x19)
	struct FLinearColor ReturnValue;  // 0x1C (0x1C)
	char pad_44[4];  // 0x2C (0x2C)


}; 
 
 // Function Engine.AnimationDataController.RemoveAttribute
struct FRemoveAttribute
{
	struct FAnimationAttributeIdentifier AttributeIdentifier;  // 0x0 (0x0)
	char pad_64_1 : 7;  // 0x40 (0x40)
	bool bShouldTransact : 1;  // 0x40 (0x40)
	char pad_65_1 : 7;  // 0x41 (0x41)
	bool ReturnValue : 1;  // 0x41 (0x41)
	char pad_66[6];  // 0x42 (0x42)


}; 
 
 // Function Engine.AnimationDataController.RemoveBoneTrack
struct FRemoveBoneTrack
{
	struct FName BoneName;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bShouldTransact : 1;  // 0x8 (0x8)
	char pad_9_1 : 7;  // 0x9 (0x9)
	bool ReturnValue : 1;  // 0x9 (0x9)
	char pad_10[2];  // 0xA (0xA)


}; 
 
 // Function Engine.GameplayStatics.GetObjectClass
struct FGetObjectClass
{
	struct UObject* Object;  // 0x0 (0x0)
	UObject* ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.AnimationDataController.RemoveCurve
struct FRemoveCurve
{
	struct FAnimationCurveIdentifier CurveId;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool bShouldTransact : 1;  // 0x10 (0x10)
	char pad_17_1 : 7;  // 0x11 (0x11)
	bool ReturnValue : 1;  // 0x11 (0x11)
	char pad_18[2];  // 0x12 (0x12)


}; 
 
 // Function Engine.AnimationDataController.RemoveCurveKey
struct FRemoveCurveKey
{
	struct FAnimationCurveIdentifier CurveId;  // 0x0 (0x0)
	float Time;  // 0x10 (0x10)
	char pad_20_1 : 7;  // 0x14 (0x14)
	bool bShouldTransact : 1;  // 0x14 (0x14)
	char pad_21_1 : 7;  // 0x15 (0x15)
	bool ReturnValue : 1;  // 0x15 (0x15)
	char pad_22[2];  // 0x16 (0x16)


}; 
 
 // Function Engine.Skeleton.GetBlendProfile
struct FGetBlendProfile
{
	struct FName InProfileName;  // 0x0 (0x0)
	struct UBlendProfile* ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.AnimationDataController.Resize
struct FResize
{
	float Length;  // 0x0 (0x0)
	float T0;  // 0x4 (0x4)
	float T1;  // 0x8 (0x8)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bShouldTransact : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)


}; 
 
 // Function Engine.KismetMathLibrary.BreakVector_NetQuantize100
struct FBreakVector_NetQuantize100
{
	struct FVector_NetQuantize100 InVec;  // 0x0 (0x0)
	double X;  // 0x18 (0x18)
	double Y;  // 0x20 (0x20)
	double Z;  // 0x28 (0x28)


}; 
 
 // Function Engine.AnimationDataController.ResizePlayLength
struct FResizePlayLength
{
	float NewLength;  // 0x0 (0x0)
	float T0;  // 0x4 (0x4)
	float T1;  // 0x8 (0x8)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bShouldTransact : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)


}; 
 
 // Function Engine.KismetInputLibrary.InputEvent_IsControlDown
struct FInputEvent_IsControlDown
{
	struct FInputEvent Input;  // 0x0 (0x0)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.AnimationDataController.ScaleCurve
struct FScaleCurve
{
	struct FAnimationCurveIdentifier CurveId;  // 0x0 (0x0)
	float Origin;  // 0x10 (0x10)
	float Factor;  // 0x14 (0x14)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bShouldTransact : 1;  // 0x18 (0x18)
	char pad_25_1 : 7;  // 0x19 (0x19)
	bool ReturnValue : 1;  // 0x19 (0x19)
	char pad_26[2];  // 0x1A (0x1A)


}; 
 
 // Function Engine.KismetMathLibrary.MakeRandomStream
struct FMakeRandomStream
{
	int32_t InitialSeed;  // 0x0 (0x0)
	struct FRandomStream ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.KismetMathLibrary.GridSnap_Float
struct FGridSnap_Float
{
	double Location;  // 0x0 (0x0)
	double GridSize;  // 0x8 (0x8)
	double ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.AnimationDataController.SetBoneTrackKeys
struct FSetBoneTrackKeys
{
	struct FName BoneName;  // 0x0 (0x0)
	struct TArray<struct FVector> PositionalKeys;  // 0x8 (0x8)
	struct TArray<struct FQuat> RotationalKeys;  // 0x18 (0x18)
	struct TArray<struct FVector> ScalingKeys;  // 0x28 (0x28)
	char pad_56_1 : 7;  // 0x38 (0x38)
	bool bShouldTransact : 1;  // 0x38 (0x38)
	char pad_57_1 : 7;  // 0x39 (0x39)
	bool ReturnValue : 1;  // 0x39 (0x39)
	char pad_58[6];  // 0x3A (0x3A)


}; 
 
 // Function Engine.KismetMathLibrary.MakeRotFromZY
struct FMakeRotFromZY
{
	struct FVector Z;  // 0x0 (0x0)
	struct FVector Y;  // 0x18 (0x18)
	struct FRotator ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_ClampSize2D
struct FVector_ClampSize2D
{
	struct FVector A;  // 0x0 (0x0)
	double Min;  // 0x18 (0x18)
	double Max;  // 0x20 (0x20)
	struct FVector ReturnValue;  // 0x28 (0x28)


}; 
 
 // Function Engine.AnimationDataController.SetCurveKey
struct FSetCurveKey
{
	struct FAnimationCurveIdentifier CurveId;  // 0x0 (0x0)
	struct FRichCurveKey Key;  // 0x10 (0x10)
	char pad_44_1 : 7;  // 0x2C (0x2C)
	bool bShouldTransact : 1;  // 0x2C (0x2C)
	char pad_45_1 : 7;  // 0x2D (0x2D)
	bool ReturnValue : 1;  // 0x2D (0x2D)
	char pad_46[2];  // 0x2E (0x2E)


}; 
 
 // Function Engine.KismetInputLibrary.InputEvent_IsRepeat
struct FInputEvent_IsRepeat
{
	struct FInputEvent Input;  // 0x0 (0x0)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_DoubleToFloat
struct FConv_DoubleToFloat
{
	double InDouble;  // 0x0 (0x0)
	float ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.AnimationDataController.SetCurveKeys
struct FSetCurveKeys
{
	struct FAnimationCurveIdentifier CurveId;  // 0x0 (0x0)
	struct TArray<struct FRichCurveKey> CurveKeys;  // 0x10 (0x10)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool bShouldTransact : 1;  // 0x20 (0x20)
	char pad_33_1 : 7;  // 0x21 (0x21)
	bool ReturnValue : 1;  // 0x21 (0x21)
	char pad_34[6];  // 0x22 (0x22)


}; 
 
 // Function Engine.KismetRenderingLibrary.ConvertRenderTargetToTexture2DEditorOnly
struct FConvertRenderTargetToTexture2DEditorOnly
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct UTextureRenderTarget2D* RenderTarget;  // 0x8 (0x8)
	struct UTexture2D* Texture;  // 0x10 (0x10)


}; 
 
 // Function Engine.AnimationDataController.SetFrameRate
struct FSetFrameRate
{
	struct FFrameRate FrameRate;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bShouldTransact : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.AnimationDataController.SetModel
struct FSetModel
{
	struct UAnimDataModel* InModel;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimationDataController.SetPlayLength
struct FSetPlayLength
{
	float Length;  // 0x0 (0x0)
	char pad_4_1 : 7;  // 0x4 (0x4)
	bool bShouldTransact : 1;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)


}; 
 
 // Function Engine.KismetTextLibrary.AsCurrencyBase
struct FAsCurrencyBase
{
	int32_t BaseValue;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FString CurrencyCode;  // 0x8 (0x8)
	struct FText ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.InputSettings.GetActionNames
struct FGetActionNames
{
	struct TArray<struct FName> ActionNames;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetTextLibrary.AsDate_DateTime
struct FAsDate_DateTime
{
	struct FDateTime InDateTime;  // 0x0 (0x0)
	struct FText ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.InputSettings.GetInputSettings
struct FGetInputSettings
{
	struct UInputSettings* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetTextLibrary.AsDateTime_DateTime
struct FAsDateTime_DateTime
{
	struct FDateTime In;  // 0x0 (0x0)
	struct FText ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.AudioParameterConversionStatics.BooleanToAudioParameter
struct FBooleanToAudioParameter
{
	struct FName Name;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bool : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)
	struct FAudioParameter ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.GameplayStatics.LoadStreamLevelBySoftObjectPtr
struct FLoadStreamLevelBySoftObjectPtr
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct TSoftObjectPtr<UWorld> Level;  // 0x8 (0x8)
	char pad_56_1 : 7;  // 0x38 (0x38)
	bool bMakeVisibleAfterLoad : 1;  // 0x38 (0x38)
	char pad_57_1 : 7;  // 0x39 (0x39)
	bool bShouldBlockOnLoad : 1;  // 0x39 (0x39)
	char pad_58[6];  // 0x3A (0x3A)
	struct FLatentActionInfo LatentInfo;  // 0x40 (0x40)


}; 
 
 // Function Engine.KismetTextLibrary.AsPercent_Float
struct FAsPercent_Float
{
	float Value;  // 0x0 (0x0)
	enum class ERoundingMode RoundingMode;  // 0x4 (0x4)
	char pad_5_1 : 7;  // 0x5 (0x5)
	bool bAlwaysSign : 1;  // 0x5 (0x5)
	char pad_6_1 : 7;  // 0x6 (0x6)
	bool bUseGrouping : 1;  // 0x6 (0x6)
	char pad_7[1];  // 0x7 (0x7)
	int32_t MinimumIntegralDigits;  // 0x8 (0x8)
	int32_t MaximumIntegralDigits;  // 0xC (0xC)
	int32_t MinimumFractionalDigits;  // 0x10 (0x10)
	int32_t MaximumFractionalDigits;  // 0x14 (0x14)
	struct FText ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetTextLibrary.AsTime_DateTime
struct FAsTime_DateTime
{
	struct FDateTime In;  // 0x0 (0x0)
	struct FText ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.FCeil
struct FFCeil
{
	double A;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.KismetTextLibrary.AsTimeZoneDateTime_DateTime
struct FAsTimeZoneDateTime_DateTime
{
	struct FDateTime InDateTime;  // 0x0 (0x0)
	struct FString InTimeZone;  // 0x8 (0x8)
	struct FText ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetMathLibrary.NormalizeAxis
struct FNormalizeAxis
{
	float Angle;  // 0x0 (0x0)
	float ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.SplineMeshComponent.GetForwardAxis
struct FGetForwardAxis
{
	enum class ESplineMeshAxis ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetTextLibrary.AsTimeZoneTime_DateTime
struct FAsTimeZoneTime_DateTime
{
	struct FDateTime InDateTime;  // 0x0 (0x0)
	struct FString InTimeZone;  // 0x8 (0x8)
	struct FText ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetTextLibrary.Conv_ColorToText
struct FConv_ColorToText
{
	struct FLinearColor InColor;  // 0x0 (0x0)
	struct FText ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetTextLibrary.Conv_DoubleToText
struct FConv_DoubleToText
{
	double Value;  // 0x0 (0x0)
	enum class ERoundingMode RoundingMode;  // 0x8 (0x8)
	char pad_9_1 : 7;  // 0x9 (0x9)
	bool bAlwaysSign : 1;  // 0x9 (0x9)
	char pad_10_1 : 7;  // 0xA (0xA)
	bool bUseGrouping : 1;  // 0xA (0xA)
	char pad_11[1];  // 0xB (0xB)
	int32_t MinimumIntegralDigits;  // 0xC (0xC)
	int32_t MaximumIntegralDigits;  // 0x10 (0x10)
	int32_t MinimumFractionalDigits;  // 0x14 (0x14)
	int32_t MaximumFractionalDigits;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)
	struct FText ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetMathLibrary.NotEqual_QuatQuat
struct FNotEqual_QuatQuat
{
	struct FQuat A;  // 0x0 (0x0)
	struct FQuat B;  // 0x20 (0x20)
	float ErrorTolerance;  // 0x40 (0x40)
	char pad_68_1 : 7;  // 0x44 (0x44)
	bool ReturnValue : 1;  // 0x44 (0x44)
	char pad_69[11];  // 0x45 (0x45)


}; 
 
 // Function Engine.KismetTextLibrary.Conv_Int64ToText
struct FConv_Int64ToText
{
	int64_t Value;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bAlwaysSign : 1;  // 0x8 (0x8)
	char pad_9_1 : 7;  // 0x9 (0x9)
	bool bUseGrouping : 1;  // 0x9 (0x9)
	char pad_10[2];  // 0xA (0xA)
	int32_t MinimumIntegralDigits;  // 0xC (0xC)
	int32_t MaximumIntegralDigits;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)
	struct FText ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetTextLibrary.Conv_NameToText
struct FConv_NameToText
{
	struct FName InName;  // 0x0 (0x0)
	struct FText ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetTextLibrary.Conv_ObjectToText
struct FConv_ObjectToText
{
	struct UObject* InObj;  // 0x0 (0x0)
	struct FText ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.FTrunc
struct FFTrunc
{
	double A;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.KismetMathLibrary.MakeQualifiedFrameTime
struct FMakeQualifiedFrameTime
{
	struct FFrameNumber Frame;  // 0x0 (0x0)
	struct FFrameRate FrameRate;  // 0x4 (0x4)
	float SubFrame;  // 0xC (0xC)
	struct FQualifiedFrameTime ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetRenderingLibrary.ImportBufferAsTexture2D
struct FImportBufferAsTexture2D
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct TArray<char> Buffer;  // 0x8 (0x8)
	struct UTexture2D* ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetTextLibrary.Conv_RotatorToText
struct FConv_RotatorToText
{
	struct FRotator InRot;  // 0x0 (0x0)
	struct FText ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetTextLibrary.Conv_StringToText
struct FConv_StringToText
{
	struct FString InString;  // 0x0 (0x0)
	struct FText ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.BreakQuat
struct FBreakQuat
{
	struct FQuat InQuat;  // 0x0 (0x0)
	float X;  // 0x20 (0x20)
	float Y;  // 0x24 (0x24)
	float Z;  // 0x28 (0x28)
	float W;  // 0x2C (0x2C)


}; 
 
 // Function Engine.KismetTextLibrary.Conv_TextToString
struct FConv_TextToString
{
	struct FText InText;  // 0x0 (0x0)
	struct FString ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetTextLibrary.FindTextInLocalizationTable
struct FFindTextInLocalizationTable
{
	struct FString Namespace;  // 0x0 (0x0)
	struct FString Key;  // 0x10 (0x10)
	struct FText OutText;  // 0x20 (0x20)
	char pad_56_1 : 7;  // 0x38 (0x38)
	bool ReturnValue : 1;  // 0x38 (0x38)
	char pad_57[7];  // 0x39 (0x39)


}; 
 
 // Function Engine.KismetTextLibrary.Conv_VectorToText
struct FConv_VectorToText
{
	struct FVector InVec;  // 0x0 (0x0)
	struct FText ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetTextLibrary.Format
struct FFormat
{
	struct FText InPattern;  // 0x0 (0x0)
	struct TArray<struct FFormatArgumentData> InArgs;  // 0x18 (0x18)
	struct FText ReturnValue;  // 0x28 (0x28)


}; 
 
 // Function Engine.KismetTextLibrary.NotEqual_IgnoreCase_TextText
struct FNotEqual_IgnoreCase_TextText
{
	struct FText A;  // 0x0 (0x0)
	struct FText B;  // 0x18 (0x18)
	char pad_48_1 : 7;  // 0x30 (0x30)
	bool ReturnValue : 1;  // 0x30 (0x30)
	char pad_49[7];  // 0x31 (0x31)


}; 
 
 // Function Engine.KismetTextLibrary.NotEqual_TextText
struct FNotEqual_TextText
{
	struct FText A;  // 0x0 (0x0)
	struct FText B;  // 0x18 (0x18)
	char pad_48_1 : 7;  // 0x30 (0x30)
	bool ReturnValue : 1;  // 0x30 (0x30)
	char pad_49[7];  // 0x31 (0x31)


}; 
 
 // Function Engine.GameplayStatics.SetPlayerPlatformUserId
struct FSetPlayerPlatformUserId
{
	struct APlayerController* PlayerController;  // 0x0 (0x0)
	struct FPlatformUserId userID;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.KismetTextLibrary.PolyglotDataToText
struct FPolyglotDataToText
{
	struct FPolyglotTextData PolyglotData;  // 0x0 (0x0)
	struct FText ReturnValue;  // 0xB8 (0xB8)


}; 
 
 // Function Engine.KismetTextLibrary.TextIsCultureInvariant
struct FTextIsCultureInvariant
{
	struct FText InText;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool ReturnValue : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.KismetTextLibrary.TextIsEmpty
struct FTextIsEmpty
{
	struct FText InText;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool ReturnValue : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.CheatManager.OnlyLoadLevel
struct FOnlyLoadLevel
{
	struct FName PackageName;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetTextLibrary.TextIsFromStringTable
struct FTextIsFromStringTable
{
	struct FText Text;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool ReturnValue : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.KismetTextLibrary.TextTrimPrecedingAndTrailing
struct FTextTrimPrecedingAndTrailing
{
	struct FText InText;  // 0x0 (0x0)
	struct FText ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.LevelStreaming.CreateInstance
struct FCreateInstance
{
	struct FString UniqueInstanceName;  // 0x0 (0x0)
	struct ULevelStreaming* ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.LevelStreaming.GetLoadedLevel
struct FGetLoadedLevel
{
	struct ULevel* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.LevelStreaming.GetWorldAssetPackageFName
struct FGetWorldAssetPackageFName
{
	struct FName ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.EqualEqual_LinearColorLinearColor
struct FEqualEqual_LinearColorLinearColor
{
	struct FLinearColor A;  // 0x0 (0x0)
	struct FLinearColor B;  // 0x10 (0x10)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[3];  // 0x21 (0x21)


}; 
 
 // Function Engine.LevelStreaming.SetIsRequestingUnloadAndRemoval
struct FSetIsRequestingUnloadAndRemoval
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bInIsRequestingUnloadAndRemoval : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.LevelStreaming.SetLevelLODIndex
struct FSetLevelLODIndex
{
	int32_t LODIndex;  // 0x0 (0x0)


}; 
 
 // Function Engine.AudioVolume.SetPriority
struct FSetPriority
{
	float NewPriority;  // 0x0 (0x0)


}; 
 
 // Function Engine.LevelStreaming.SetShouldBeLoaded
struct FSetShouldBeLoaded
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bInShouldBeLoaded : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.LevelStreaming.SetShouldBeVisible
struct FSetShouldBeVisible
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bInShouldBeVisible : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.LevelStreaming.ShouldBeLoaded
struct FShouldBeLoaded
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.LevelStreamingDynamic.LoadLevelInstance
struct FLoadLevelInstance
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FString LevelName;  // 0x8 (0x8)
	struct FVector Location;  // 0x18 (0x18)
	struct FRotator Rotation;  // 0x30 (0x30)
	char pad_72_1 : 7;  // 0x48 (0x48)
	bool bOutSuccess : 1;  // 0x48 (0x48)
	char pad_73[7];  // 0x49 (0x49)
	struct FString OptionalLevelNameOverride;  // 0x50 (0x50)
	ULevelStreamingDynamic* OptionalLevelStreamingClass;  // 0x60 (0x60)
	char pad_104_1 : 7;  // 0x68 (0x68)
	bool bLoadAsTempPackage : 1;  // 0x68 (0x68)
	char pad_105[7];  // 0x69 (0x69)
	struct ULevelStreamingDynamic* ReturnValue;  // 0x70 (0x70)


}; 
 
 // Function Engine.LightComponentBase.SetCastDeepShadow
struct FSetCastDeepShadow
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Greater_DateTimeDateTime
struct FGreater_DateTimeDateTime
{
	struct FDateTime A;  // 0x0 (0x0)
	struct FDateTime B;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.LightComponentBase.SetCastRaytracedShadow
struct FSetCastRaytracedShadow
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.Texture2D.Blueprint_GetSizeX
struct FBlueprint_GetSizeX
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.MaterialParameterCollection.GetScalarParameterDefaultValue
struct FGetScalarParameterDefaultValue
{
	struct FName ParameterName;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bParameterFound : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)
	float ReturnValue;  // 0xC (0xC)


}; 
 
 // Function Engine.ParticleSystemComponent.GetBeamEndPoint
struct FGetBeamEndPoint
{
	int32_t EmitterIndex;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector OutEndPoint;  // 0x8 (0x8)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_DistanceSquared
struct FVector_DistanceSquared
{
	struct FVector v1;  // 0x0 (0x0)
	struct FVector v2;  // 0x18 (0x18)
	double ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.ParticleSystemComponent.GetBeamSourcePoint
struct FGetBeamSourcePoint
{
	int32_t EmitterIndex;  // 0x0 (0x0)
	int32_t SourceIndex;  // 0x4 (0x4)
	struct FVector OutSourcePoint;  // 0x8 (0x8)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.ParticleSystemComponent.GetBeamSourceStrength
struct FGetBeamSourceStrength
{
	int32_t EmitterIndex;  // 0x0 (0x0)
	int32_t SourceIndex;  // 0x4 (0x4)
	float OutSourceStrength;  // 0x8 (0x8)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool ReturnValue : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)


}; 
 
 // Function Engine.ParticleSystemComponent.GetBeamTargetPoint
struct FGetBeamTargetPoint
{
	int32_t EmitterIndex;  // 0x0 (0x0)
	int32_t TargetIndex;  // 0x4 (0x4)
	struct FVector OutTargetPoint;  // 0x8 (0x8)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.KismetInputLibrary.ModifierKeysState_IsShiftDown
struct FModifierKeysState_IsShiftDown
{
	struct FSlateModifierKeysState KeysState;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool ReturnValue : 1;  // 0x1 (0x1)


}; 
 
 // Function Engine.ParticleSystemComponent.GetBeamTargetTangent
struct FGetBeamTargetTangent
{
	int32_t EmitterIndex;  // 0x0 (0x0)
	int32_t TargetIndex;  // 0x4 (0x4)
	struct FVector OutTangentPoint;  // 0x8 (0x8)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.ParticleSystemComponent.SetAutoAttachParams
struct FSetAutoAttachParams
{
	struct USceneComponent* Parent;  // 0x0 (0x0)
	struct FName SocketName;  // 0x8 (0x8)
	enum class EAttachLocation LocationType;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.ParticleSystemComponent.SetBeamSourcePoint
struct FSetBeamSourcePoint
{
	int32_t EmitterIndex;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector NewSourcePoint;  // 0x8 (0x8)
	int32_t SourceIndex;  // 0x20 (0x20)
	char pad_36[4];  // 0x24 (0x24)


}; 
 
 // Function Engine.ParticleSystemComponent.SetBeamSourceTangent
struct FSetBeamSourceTangent
{
	int32_t EmitterIndex;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector NewTangentPoint;  // 0x8 (0x8)
	int32_t SourceIndex;  // 0x20 (0x20)
	char pad_36[4];  // 0x24 (0x24)


}; 
 
 // Function Engine.ParticleSystemComponent.SetBeamTargetPoint
struct FSetBeamTargetPoint
{
	int32_t EmitterIndex;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector NewTargetPoint;  // 0x8 (0x8)
	int32_t TargetIndex;  // 0x20 (0x20)
	char pad_36[4];  // 0x24 (0x24)


}; 
 
 // Function Engine.ParticleSystemComponent.SetBeamTargetStrength
struct FSetBeamTargetStrength
{
	int32_t EmitterIndex;  // 0x0 (0x0)
	float NewTargetStrength;  // 0x4 (0x4)
	int32_t TargetIndex;  // 0x8 (0x8)


}; 
 
 // Function Engine.ParticleSystemComponent.SetBeamTargetTangent
struct FSetBeamTargetTangent
{
	int32_t EmitterIndex;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector NewTangentPoint;  // 0x8 (0x8)
	int32_t TargetIndex;  // 0x20 (0x20)
	char pad_36[4];  // 0x24 (0x24)


}; 
 
 // Function Engine.CheatManager.Summon
struct FSummon
{
	struct FString ClassName;  // 0x0 (0x0)


}; 
 
 // Function Engine.PhysicsSpringComponent.GetNormalizedCompressionScalar
struct FGetNormalizedCompressionScalar
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PhysicsSpringComponent.GetSpringDirection
struct FGetSpringDirection
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PhysicsSpringComponent.GetSpringRestingPoint
struct FGetSpringRestingPoint
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.GetYear
struct FGetYear
{
	struct FDateTime A;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.PlatformInterfaceWebResponse.GetHeader
struct FGetHeader
{
	int32_t HeaderIndex;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FString Header;  // 0x8 (0x8)
	struct FString Value;  // 0x18 (0x18)


}; 
 
 // Function Engine.PlatformInterfaceWebResponse.GetHeaderValue
struct FGetHeaderValue
{
	struct FString HeaderName;  // 0x0 (0x0)
	struct FString ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.DataLayerSubsystem.GetDataLayerInstanceFromAsset
struct FGetDataLayerInstanceFromAsset
{
	struct UDataLayerAsset* InDataLayerAsset;  // 0x0 (0x0)
	struct UDataLayerInstance* ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.AudioParameterConversionStatics.FloatToAudioParameter
struct FFloatToAudioParameter
{
	struct FName Name;  // 0x0 (0x0)
	float float;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)
	struct FAudioParameter ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.PlatformInterfaceWebResponse.GetNumHeaders
struct FGetNumHeaders
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Or_Int64Int64
struct FOr_Int64Int64
{
	int64_t A;  // 0x0 (0x0)
	int64_t B;  // 0x8 (0x8)
	int64_t ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.PlayerCameraManager.AddGenericCameraLensEffect
struct FAddGenericCameraLensEffect
{
	AActor* LensEffectEmitterClass;  // 0x0 (0x0)
	struct TScriptInterface<ICameraLensEffectInterface> ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.PlayerCameraManager.AddNewCameraModifier
struct FAddNewCameraModifier
{
	UCameraModifier* ModifierClass;  // 0x0 (0x0)
	struct UCameraModifier* ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.Multiply_VectorVector
struct FMultiply_VectorVector
{
	struct FVector A;  // 0x0 (0x0)
	struct FVector B;  // 0x18 (0x18)
	struct FVector ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.PlayerCameraManager.BlueprintUpdateCamera
struct FBlueprintUpdateCamera
{
	struct AActor* CameraTarget;  // 0x0 (0x0)
	struct FVector NewCameraLocation;  // 0x8 (0x8)
	struct FRotator NewCameraRotation;  // 0x20 (0x20)
	float NewCameraFOV;  // 0x38 (0x38)
	char pad_60_1 : 7;  // 0x3C (0x3C)
	bool ReturnValue : 1;  // 0x3C (0x3C)
	char pad_61[3];  // 0x3D (0x3D)


}; 
 
 // Function Engine.PlayerCameraManager.PhotographyCameraModify
struct FPhotographyCameraModify
{
	struct FVector NewCameraLocation;  // 0x0 (0x0)
	struct FVector PreviousCameraLocation;  // 0x18 (0x18)
	struct FVector OriginalCameraLocation;  // 0x30 (0x30)
	struct FVector ResultCameraLocation;  // 0x48 (0x48)


}; 
 
 // Function Engine.PlayerCameraManager.RemoveCameraLensEffect
struct FRemoveCameraLensEffect
{
	struct AEmitterCameraLensEffectBase* Emitter;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlayerCameraManager.RemoveCameraModifier
struct FRemoveCameraModifier
{
	struct UCameraModifier* ModifierToRemove;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.PlayerCameraManager.SetManualCameraFade
struct FSetManualCameraFade
{
	float InFadeAmount;  // 0x0 (0x0)
	struct FLinearColor Color;  // 0x4 (0x4)
	char pad_20_1 : 7;  // 0x14 (0x14)
	bool bInFadeAudio : 1;  // 0x14 (0x14)
	char pad_21[3];  // 0x15 (0x15)


}; 
 
 // Function Engine.PlayerCameraManager.StopAllCameraShakesFromSource
struct FStopAllCameraShakesFromSource
{
	struct UCameraShakeSourceComponent* SourceComponent;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bImmediately : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.PlayerCameraManager.StopAllInstancesOfCameraShakeFromSource
struct FStopAllInstancesOfCameraShakeFromSource
{
	UCameraShakeBase* Shake;  // 0x0 (0x0)
	struct UCameraShakeSourceComponent* SourceComponent;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool bImmediately : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.StaticMesh.FindSocket
struct FFindSocket
{
	struct FName InSocketName;  // 0x0 (0x0)
	struct UStaticMeshSocket* ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.TwitterIntegrationBase.ShowTweetUI
struct FShowTweetUI
{
	struct FString InitialMessage;  // 0x0 (0x0)
	struct FString URL;  // 0x10 (0x10)
	struct FString Picture;  // 0x20 (0x20)
	char pad_48_1 : 7;  // 0x30 (0x30)
	bool ReturnValue : 1;  // 0x30 (0x30)
	char pad_49[7];  // 0x31 (0x31)


}; 
 
 // Function Engine.ImportanceSamplingLibrary.NextSobolFloat
struct FNextSobolFloat
{
	int32_t Index;  // 0x0 (0x0)
	int32_t Dimension;  // 0x4 (0x4)
	float PreviousValue;  // 0x8 (0x8)
	float ReturnValue;  // 0xC (0xC)


}; 
 
 // Function Engine.BlueprintPathsLibrary.GetBaseFilename
struct FGetBaseFilename
{
	struct FString InPath;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool bRemovePath : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)
	struct FString ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.SkinnedAsset.FindSocketInfo
struct FFindSocketInfo
{
	struct FName InSocketName;  // 0x0 (0x0)
	char pad_8[8];  // 0x8 (0x8)
	struct FTransform OutTransform;  // 0x10 (0x10)
	int32_t OutBoneIndex;  // 0x70 (0x70)
	int32_t OutIndex;  // 0x74 (0x74)
	struct USkeletalMeshSocket* ReturnValue;  // 0x78 (0x78)


}; 
 
 // Function Engine.KismetArrayLibrary.Array_Find
struct FArray_Find
{
	struct TArray<int32_t> TargetArray;  // 0x0 (0x0)
	int32_t ItemToFind;  // 0x10 (0x10)
	int32_t ReturnValue;  // 0x14 (0x14)


}; 
 
 // Function Engine.SkyLightComponent.SetCubemap
struct FSetCubemap
{
	struct UTextureCube* NewCubemap;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkyLightComponent.SetCubemapBlend
struct FSetCubemapBlend
{
	struct UTextureCube* SourceCubemap;  // 0x0 (0x0)
	struct UTextureCube* DestinationCubemap;  // 0x8 (0x8)
	float InBlendFraction;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)


}; 
 
 // Function Engine.LightComponent.SetIndirectLightingIntensity
struct FSetIndirectLightingIntensity
{
	float NewIntensity;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkyLightComponent.SetLowerHemisphereColor
struct FSetLowerHemisphereColor
{
	struct FLinearColor InLowerHemisphereColor;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_UnitCartesianToSpherical
struct FVector_UnitCartesianToSpherical
{
	struct FVector A;  // 0x0 (0x0)
	struct FVector2D ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.SkyLightComponent.SetMinOcclusion
struct FSetMinOcclusion
{
	float InMinOcclusion;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.FCeil64
struct FFCeil64
{
	double A;  // 0x0 (0x0)
	int64_t ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.SkyLightComponent.SetOcclusionContrast
struct FSetOcclusionContrast
{
	float InOcclusionContrast;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimDataModel.IsValidBoneTrackIndex
struct FIsValidBoneTrackIndex
{
	int32_t TrackIndex;  // 0x0 (0x0)
	char pad_4_1 : 7;  // 0x4 (0x4)
	bool ReturnValue : 1;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)


}; 
 
 // Function Engine.SkyLightComponent.SetOcclusionExponent
struct FSetOcclusionExponent
{
	float InOcclusionExponent;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkyLightComponent.SetSourceCubemapAngle
struct FSetSourceCubemapAngle
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.LightComponent.SetVolumetricScatteringIntensity
struct FSetVolumetricScatteringIntensity
{
	float NewIntensity;  // 0x0 (0x0)


}; 
 
 // Function Engine.SoundSubmixWidgetInterface.OnConstructed
struct FOnConstructed
{
	struct USoundSubmixBase* SoundSubmix;  // 0x0 (0x0)


}; 
 
 // Function Engine.SoundEffectPresetWidgetInterface.OnPropertyChanged
struct FOnPropertyChanged
{
	struct USoundEffectPreset* Preset;  // 0x0 (0x0)
	struct FName PropertyName;  // 0x8 (0x8)


}; 
 
 // Function Engine.StaticMesh.AddSocket
struct FAddSocket
{
	struct UStaticMeshSocket* Socket;  // 0x0 (0x0)


}; 
 
 // Function Engine.StaticMesh.BuildFromStaticMeshDescriptions
struct FBuildFromStaticMeshDescriptions
{
	struct TArray<struct UStaticMeshDescription*> StaticMeshDescriptions;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool bBuildSimpleCollision : 1;  // 0x10 (0x10)
	char pad_17_1 : 7;  // 0x11 (0x11)
	bool bFastBuild : 1;  // 0x11 (0x11)
	char pad_18[6];  // 0x12 (0x12)


}; 
 
 // Function Engine.SkeletalMesh.GetBounds
struct FGetBounds
{
	struct FBoxSphereBounds ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Subtract_LinearColorLinearColor
struct FSubtract_LinearColorLinearColor
{
	struct FLinearColor A;  // 0x0 (0x0)
	struct FLinearColor B;  // 0x10 (0x10)
	struct FLinearColor ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.BlueprintSetLibrary.SetSetPropertyByName
struct FSetSetPropertyByName
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FName PropertyName;  // 0x8 (0x8)
	struct TSet<int32_t> Value;  // 0x10 (0x10)


}; 
 
 // Function Engine.CameraShakeSourceComponent.GetAttenuationFactor
struct FGetAttenuationFactor
{
	struct FVector Location;  // 0x0 (0x0)
	float ReturnValue;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)


}; 
 
 // Function Engine.StaticMesh.GetMinimumLODForPlatform
struct FGetMinimumLODForPlatform
{
	struct FName PlatformName;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForMatchingPrimaryAssets
struct FAsyncChangeBundleStateForMatchingPrimaryAssets
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct TArray<struct FName> NewBundles;  // 0x8 (0x8)
	struct TArray<struct FName> OldBundles;  // 0x18 (0x18)
	struct UAsyncActionChangePrimaryAssetBundles* ReturnValue;  // 0x28 (0x28)


}; 
 
 // Function Engine.StaticMesh.GetMinimumLODForQualityLevels
struct FGetMinimumLODForQualityLevels
{
	struct TMap<struct FName, int32_t> QualityLevelMinimumLODs;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMesh.GetMinLODForQualityLevels
struct FGetMinLODForQualityLevels
{
	struct TMap<uint8_t, int32_t> QualityLevelMinimumLODs;  // 0x0 (0x0)
	int32_t Default;  // 0x50 (0x50)
	char pad_84[4];  // 0x54 (0x54)


}; 
 
 // Function Engine.DebugCameraController.SetPawnMovementSpeedScale
struct FSetPawnMovementSpeedScale
{
	float NewSpeedScale;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.MakeVector_NetQuantize
struct FMakeVector_NetQuantize
{
	double X;  // 0x0 (0x0)
	double Y;  // 0x8 (0x8)
	double Z;  // 0x10 (0x10)
	struct FVector_NetQuantize ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.AnimMontage.GetNumSections
struct FGetNumSections
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.CheatManager.OnPlayerEndPlayed
struct FOnPlayerEndPlayed
{
	struct AActor* Player;  // 0x0 (0x0)
	enum class EEndPlayReason EndPlayReason;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.StaticMesh.GetNumTriangles
struct FGetNumTriangles
{
	int32_t LODIndex;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.KismetMathLibrary.LinearColor_SetTemperature
struct FLinearColor_SetTemperature
{
	struct FLinearColor InOutColor;  // 0x0 (0x0)
	float InTemperature;  // 0x10 (0x10)


}; 
 
 // Function Engine.GameplayStatics.GetSurfaceType
struct FGetSurfaceType
{
	struct FHitResult Hit;  // 0x0 (0x0)
	enum class EPhysicalSurface ReturnValue;  // 0xE8 (0xE8)
	char pad_233[7];  // 0xE9 (0xE9)


}; 
 
 // Function Engine.StaticMesh.GetSocketsByTag
struct FGetSocketsByTag
{
	struct FString InSocketTag;  // 0x0 (0x0)
	struct TArray<struct UStaticMeshSocket*> ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.Subtract_VectorInt
struct FSubtract_VectorInt
{
	struct FVector A;  // 0x0 (0x0)
	int32_t B;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)
	struct FVector ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.StaticMesh.GetStaticMaterials
struct FGetStaticMaterials
{
	struct TArray<struct FStaticMaterial> ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.MinOfIntArray
struct FMinOfIntArray
{
	struct TArray<int32_t> IntArray;  // 0x0 (0x0)
	int32_t IndexOfMinValue;  // 0x10 (0x10)
	int32_t MinValue;  // 0x14 (0x14)


}; 
 
 // Function Engine.StaticMesh.SetMinimumLODForPlatform
struct FSetMinimumLODForPlatform
{
	struct FName PlatformName;  // 0x0 (0x0)
	int32_t InMinLOD;  // 0x8 (0x8)


}; 
 
 // Function Engine.StaticMesh.SetMinimumLODForPlatforms
struct FSetMinimumLODForPlatforms
{
	struct TMap<struct FName, int32_t> PlatformMinimumLODs;  // 0x0 (0x0)


}; 
 
 // Function Engine.StereoLayerShapeCylinder.SetHeight
struct FSetHeight
{
	int32_t InHeight;  // 0x0 (0x0)


}; 
 
 // Function Engine.StereoLayerComponent.GetLeftTexture
struct FGetLeftTexture
{
	struct UTexture* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.GetMilliseconds
struct FGetMilliseconds
{
	struct FTimespan A;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.StereoLayerComponent.GetQuadSize
struct FGetQuadSize
{
	struct FVector2D ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.StereoLayerComponent.SetLeftTexture
struct FSetLeftTexture
{
	struct UTexture* InTexture;  // 0x0 (0x0)


}; 
 
 // Function Engine.StereoLayerComponent.SetQuadSize
struct FSetQuadSize
{
	struct FVector2D InQuadSize;  // 0x0 (0x0)


}; 
 
 // Function Engine.MaterialBillboardComponent.SetElements
struct FSetElements
{
	struct TArray<struct FMaterialSpriteElement> NewElements;  // 0x0 (0x0)


}; 
 
 // Function Engine.StereoLayerComponent.SetUVRect
struct FSetUVRect
{
	struct FBox2D InUVRect;  // 0x0 (0x0)


}; 
 
 // Function Engine.TextRenderComponent.GetTextLocalSize
struct FGetTextLocalSize
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.TextRenderComponent.GetTextWorldSize
struct FGetTextWorldSize
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.BreakTimespan
struct FBreakTimespan
{
	struct FTimespan InTimespan;  // 0x0 (0x0)
	int32_t Days;  // 0x8 (0x8)
	int32_t Hours;  // 0xC (0xC)
	int32_t Minutes;  // 0x10 (0x10)
	int32_t Seconds;  // 0x14 (0x14)
	int32_t Milliseconds;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)


}; 
 
 // Function Engine.TextRenderComponent.SetHorizontalAlignment
struct FSetHorizontalAlignment
{
	enum class EHorizTextAligment Value;  // 0x0 (0x0)


}; 
 
 // Function Engine.TextRenderComponent.SetHorizSpacingAdjust
struct FSetHorizSpacingAdjust
{
	float Value;  // 0x0 (0x0)


}; 
 
 // Function Engine.TextRenderComponent.SetTextRenderColor
struct FSetTextRenderColor
{
	struct FColor Value;  // 0x0 (0x0)


}; 
 
 // Function Engine.TextRenderComponent.SetWorldSize
struct FSetWorldSize
{
	float Value;  // 0x0 (0x0)


}; 
 
 // Function Engine.TextRenderComponent.SetXScale
struct FSetXScale
{
	float Value;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.RandomFloatInRangeFromStream
struct FRandomFloatInRangeFromStream
{
	float Min;  // 0x0 (0x0)
	float Max;  // 0x4 (0x4)
	struct FRandomStream Stream;  // 0x8 (0x8)
	float ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.TextRenderComponent.SetYScale
struct FSetYScale
{
	float Value;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimDataModel.GetBoneTrackByIndex
struct FGetBoneTrackByIndex
{
	int32_t TrackIndex;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FBoneAnimationTrack ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.TimelineComponent.OnRep_Timeline
struct FOnRep_Timeline
{
	struct FTimeline OldTimeline;  // 0x0 (0x0)


}; 
 
 // Function Engine.TimelineComponent.SetIgnoreTimeDilation
struct FSetIgnoreTimeDilation
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewIgnoreTimeDilation : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimSingleNodeInstance.SetLooping
struct FSetLooping
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bIsLooping : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.ConstraintInstanceBlueprintLibrary.GetAngularBreakable
struct FGetAngularBreakable
{
	struct FConstraintInstanceAccessor Accessor;  // 0x0 (0x0)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bAngularBreakable : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)
	float AngularBreakThreshold;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.GreaterEqual_Int64Int64
struct FGreaterEqual_Int64Int64
{
	int64_t A;  // 0x0 (0x0)
	int64_t B;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.ConstraintInstanceBlueprintLibrary.GetAngularOrientationTarget
struct FGetAngularOrientationTarget
{
	struct FConstraintInstanceAccessor Accessor;  // 0x0 (0x0)
	char pad_12[4];  // 0xC (0xC)
	struct FRotator OutPosTarget;  // 0x10 (0x10)


}; 
 
 // Function Engine.TimelineComponent.SetNewTime
struct FSetNewTime
{
	float NewTime;  // 0x0 (0x0)


}; 
 
 // Function Engine.TimelineComponent.SetPlaybackPosition
struct FSetPlaybackPosition
{
	float NewPosition;  // 0x0 (0x0)
	char pad_4_1 : 7;  // 0x4 (0x4)
	bool bFireEvents : 1;  // 0x4 (0x4)
	char pad_5_1 : 7;  // 0x5 (0x5)
	bool bFireUpdate : 1;  // 0x5 (0x5)
	char pad_6[2];  // 0x6 (0x6)


}; 
 
 // Function Engine.TimelineComponent.SetTimelineLength
struct FSetTimelineLength
{
	float NewLength;  // 0x0 (0x0)


}; 
 
 // Function Engine.TimelineComponent.SetTimelineLengthMode
struct FSetTimelineLengthMode
{
	enum class ETimelineLengthMode NewLengthMode;  // 0x0 (0x0)


}; 
 
 // Function Engine.TwitterIntegrationBase.AuthorizeAccounts
struct FAuthorizeAccounts
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.TwitterIntegrationBase.CanShowTweetUI
struct FCanShowTweetUI
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.TwitterIntegrationBase.GetAccountName
struct FGetAccountName
{
	int32_t AccountIndex;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FString ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.TwitterIntegrationBase.GetNumAccounts
struct FGetNumAccounts
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.WindDirectionalSourceComponent.SetMinimumGustAmount
struct FSetMinimumGustAmount
{
	float InNewMinGust;  // 0x0 (0x0)


}; 
 
 // Function Engine.WindDirectionalSourceComponent.SetSpeed
struct FSetSpeed
{
	float InNewSpeed;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Subtract_VectorVector
struct FSubtract_VectorVector
{
	struct FVector A;  // 0x0 (0x0)
	struct FVector B;  // 0x18 (0x18)
	struct FVector ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.WindDirectionalSourceComponent.SetStrength
struct FSetStrength
{
	float InNewStrength;  // 0x0 (0x0)


}; 
 
 // Function Engine.WindDirectionalSourceComponent.SetWindType
struct FSetWindType
{
	uint8_t InNewType;  // 0x0 (0x0)


}; 
 
 // Function Engine.AvoidanceManager.GetAvoidanceVelocityForComponent
struct FGetAvoidanceVelocityForComponent
{
	struct UMovementComponent* MovementComp;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.AvoidanceManager.GetObjectCount
struct FGetObjectCount
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.AvoidanceManager.RegisterMovementComponent
struct FRegisterMovementComponent
{
	struct UMovementComponent* MovementComp;  // 0x0 (0x0)
	float AvoidanceWeight;  // 0x8 (0x8)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool ReturnValue : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)


}; 
 
 // Function Engine.BlueprintPathsLibrary.ProfilingDir
struct FProfilingDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimDataModel.GetBoneTrackIndex
struct FGetBoneTrackIndex
{
	struct FBoneAnimationTrack Track;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x40 (0x40)
	char pad_68[4];  // 0x44 (0x44)


}; 
 
 // Function Engine.AnimDataModel.GetNumberOfFrames
struct FGetNumberOfFrames
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimDataModel.GetNumberOfKeys
struct FGetNumberOfKeys
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.TInterpTo
struct FTInterpTo
{
	struct FTransform Current;  // 0x0 (0x0)
	struct FTransform Target;  // 0x60 (0x60)
	float DeltaTime;  // 0xC0 (0xC0)
	float InterpSpeed;  // 0xC4 (0xC4)
	char pad_200[8];  // 0xC8 (0xC8)
	struct FTransform ReturnValue;  // 0xD0 (0xD0)


}; 
 
 // Function Engine.AnimMontage.GetBlendInArgs
struct FGetBlendInArgs
{
	struct FAlphaBlendArgs ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimMontage.GetBlendOutArgs
struct FGetBlendOutArgs
{
	struct FAlphaBlendArgs ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimMontage.GetDefaultBlendOutTime
struct FGetDefaultBlendOutTime
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameplayStatics.LoadStreamLevel
struct FLoadStreamLevel
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FName LevelName;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool bMakeVisibleAfterLoad : 1;  // 0x10 (0x10)
	char pad_17_1 : 7;  // 0x11 (0x11)
	bool bShouldBlockOnLoad : 1;  // 0x11 (0x11)
	char pad_18[6];  // 0x12 (0x12)
	struct FLatentActionInfo LatentInfo;  // 0x18 (0x18)


}; 
 
 // Function Engine.AnimMontage.GetSectionName
struct FGetSectionName
{
	int32_t SectionIndex;  // 0x0 (0x0)
	struct FName ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.AnimMontage.IsValidSectionName
struct FIsValidSectionName
{
	struct FName InSectionName;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.AnimSingleNodeInstance.GetMirrorDataTable
struct FGetMirrorDataTable
{
	struct UMirrorDataTable* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.ProjectVectorOnToPlane
struct FProjectVectorOnToPlane
{
	struct FVector V;  // 0x0 (0x0)
	struct FVector PlaneNormal;  // 0x18 (0x18)
	struct FVector ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.AnimNotifyMirrorInspectionLibrary.IsTriggeredByMirroredAnimation
struct FIsTriggeredByMirroredAnimation
{
	struct FAnimNotifyEventReference EventReference;  // 0x0 (0x0)
	char pad_40_1 : 7;  // 0x28 (0x28)
	bool ReturnValue : 1;  // 0x28 (0x28)
	char pad_41[7];  // 0x29 (0x29)


}; 
 
 // Function Engine.KismetMathLibrary.RandomFloatInRange
struct FRandomFloatInRange
{
	double Min;  // 0x0 (0x0)
	double Max;  // 0x8 (0x8)
	double ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.AnimNotifyStateMachineInspectionLibrary.IsTriggeredByState
struct FIsTriggeredByState
{
	struct FAnimNotifyEventReference EventReference;  // 0x0 (0x0)
	struct UAnimInstance* AnimInstance;  // 0x28 (0x28)
	struct FName StateName;  // 0x30 (0x30)
	char pad_56_1 : 7;  // 0x38 (0x38)
	bool ReturnValue : 1;  // 0x38 (0x38)
	char pad_57[7];  // 0x39 (0x39)


}; 
 
 // Function Engine.KismetArrayLibrary.Array_IsNotEmpty
struct FArray_IsNotEmpty
{
	struct TArray<int32_t> TargetArray;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.AnimNotifyStateMachineInspectionLibrary.IsTriggeredByStateInStateMachine
struct FIsTriggeredByStateInStateMachine
{
	struct FAnimNotifyEventReference EventReference;  // 0x0 (0x0)
	struct UAnimInstance* AnimInstance;  // 0x28 (0x28)
	struct FName StateMachineName;  // 0x30 (0x30)
	struct FName StateName;  // 0x38 (0x38)
	char pad_64_1 : 7;  // 0x40 (0x40)
	bool ReturnValue : 1;  // 0x40 (0x40)
	char pad_65[7];  // 0x41 (0x41)


}; 
 
 // Function Engine.AnimNotifyState_Trail.OverridePSTemplate
struct FOverridePSTemplate
{
	struct USkeletalMeshComponent* MeshComp;  // 0x0 (0x0)
	struct UAnimSequenceBase* Animation;  // 0x8 (0x8)
	struct UParticleSystem* ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.BooleanOR
struct FBooleanOR
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool A : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool B : 1;  // 0x1 (0x1)
	char pad_2_1 : 7;  // 0x2 (0x2)
	bool ReturnValue : 1;  // 0x2 (0x2)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_Distance2D
struct FVector_Distance2D
{
	struct FVector v1;  // 0x0 (0x0)
	struct FVector v2;  // 0x18 (0x18)
	double ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.AnimSingleNodeInstance.GetLength
struct FGetLength
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.AnimSingleNodeInstance.SetAnimationAsset
struct FSetAnimationAsset
{
	struct UAnimationAsset* NewAsset;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bIsLooping : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)
	float InPlayRate;  // 0xC (0xC)


}; 
 
 // Function Engine.AnimSingleNodeInstance.SetPlaying
struct FSetPlaying
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bIsPlaying : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.CachedAnimDataLibrary.StateMachine_GetGlobalWeight
struct FStateMachine_GetGlobalWeight
{
	struct UAnimInstance* InAnimInstance;  // 0x0 (0x0)
	struct FCachedAnimStateData CachedAnimStateData;  // 0x8 (0x8)
	float ReturnValue;  // 0x24 (0x24)


}; 
 
 // Function Engine.DataLayerInstance.GetType
struct FGetType
{
	uint8_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.CurveSourceInterface.GetBindingName
struct FGetBindingName
{
	struct FName ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.GetAzimuthAndElevation
struct FGetAzimuthAndElevation
{
	struct FVector InDirection;  // 0x0 (0x0)
	char pad_24[8];  // 0x18 (0x18)
	struct FTransform ReferenceFrame;  // 0x20 (0x20)
	float Azimuth;  // 0x80 (0x80)
	float Elevation;  // 0x84 (0x84)
	char pad_136[8];  // 0x88 (0x88)


}; 
 
 // Function Engine.Skeleton.AddCompatibleSkeleton
struct FAddCompatibleSkeleton
{
	struct USkeleton* SourceSkeleton;  // 0x0 (0x0)


}; 
 
 // Function Engine.DataLayerSubsystem.GetLoadedDataLayerNames
struct FGetLoadedDataLayerNames
{
	struct TSet<struct FName> ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.AsyncActionLoadPrimaryAsset.AsyncLoadPrimaryAsset
struct FAsyncLoadPrimaryAsset
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FPrimaryAssetId PrimaryAsset;  // 0x8 (0x8)
	struct TArray<struct FName> LoadBundles;  // 0x18 (0x18)
	struct UAsyncActionLoadPrimaryAsset* ReturnValue;  // 0x28 (0x28)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_VectorToRotator
struct FConv_VectorToRotator
{
	struct FVector InVec;  // 0x0 (0x0)
	struct FRotator ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.AsyncActionLoadPrimaryAssetClassList.AsyncLoadPrimaryAssetClassList
struct FAsyncLoadPrimaryAssetClassList
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct TArray<struct FPrimaryAssetId> PrimaryAssetList;  // 0x8 (0x8)
	struct TArray<struct FName> LoadBundles;  // 0x18 (0x18)
	struct UAsyncActionLoadPrimaryAssetClassList* ReturnValue;  // 0x28 (0x28)


}; 
 
 // Function Engine.CheatManager.BugItStringCreator
struct FBugItStringCreator
{
	struct FVector ViewLocation;  // 0x0 (0x0)
	struct FRotator ViewRotation;  // 0x18 (0x18)
	struct FString GoString;  // 0x30 (0x30)
	struct FString LocString;  // 0x40 (0x40)


}; 
 
 // Function Engine.LODSyncComponent.GetLODSyncDebugText
struct FGetLODSyncDebugText
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForPrimaryAssetList
struct FAsyncChangeBundleStateForPrimaryAssetList
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct TArray<struct FPrimaryAssetId> PrimaryAssetList;  // 0x8 (0x8)
	struct TArray<struct FName> AddBundles;  // 0x18 (0x18)
	struct TArray<struct FName> RemoveBundles;  // 0x28 (0x28)
	struct UAsyncActionChangePrimaryAssetBundles* ReturnValue;  // 0x38 (0x38)


}; 
 
 // Function Engine.SkyAtmosphereComponent.OverrideAtmosphereLightDirection
struct FOverrideAtmosphereLightDirection
{
	int32_t AtmosphereLightIndex;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector LightDirection;  // 0x8 (0x8)


}; 
 
 // Function Engine.RectLightComponent.SetSourceTexture
struct FSetSourceTexture
{
	struct UTexture* NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkyAtmosphereComponent.SetAerialPespectiveViewDistanceScale
struct FSetAerialPespectiveViewDistanceScale
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkyAtmosphereComponent.SetAtmosphereHeight
struct FSetAtmosphereHeight
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkyAtmosphereComponent.SetMieAbsorptionScale
struct FSetMieAbsorptionScale
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkyAtmosphereComponent.SetMieAnisotropy
struct FSetMieAnisotropy
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkyAtmosphereComponent.SetMieExponentialDistribution
struct FSetMieExponentialDistribution
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkyAtmosphereComponent.SetMieScatteringScale
struct FSetMieScatteringScale
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkyAtmosphereComponent.SetMultiScatteringFactor
struct FSetMultiScatteringFactor
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkyAtmosphereComponent.SetOtherAbsorption
struct FSetOtherAbsorption
{
	struct FLinearColor NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkyAtmosphereComponent.SetOtherAbsorptionScale
struct FSetOtherAbsorptionScale
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkyAtmosphereComponent.SetRayleighScattering
struct FSetRayleighScattering
{
	struct FLinearColor NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.MakeRotFromX
struct FMakeRotFromX
{
	struct FVector X;  // 0x0 (0x0)
	struct FRotator ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.AtmosphericFogComponent.DisableGroundScattering
struct FDisableGroundScattering
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool NewGroundScattering : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.AudioVolume.SetInteriorSettings
struct FSetInteriorSettings
{
	struct FInteriorSettings NewInteriorSettings;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.InRange_IntInt
struct FInRange_IntInt
{
	int32_t Value;  // 0x0 (0x0)
	int32_t Min;  // 0x4 (0x4)
	int32_t Max;  // 0x8 (0x8)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool InclusiveMin : 1;  // 0xC (0xC)
	char pad_13_1 : 7;  // 0xD (0xD)
	bool InclusiveMax : 1;  // 0xD (0xD)
	char pad_14_1 : 7;  // 0xE (0xE)
	bool ReturnValue : 1;  // 0xE (0xE)
	char pad_15[1];  // 0xF (0xF)


}; 
 
 // Function Engine.KismetMathLibrary.FTruncVector
struct FFTruncVector
{
	struct FVector InVector;  // 0x0 (0x0)
	struct FIntVector ReturnValue;  // 0x18 (0x18)
	char pad_36[4];  // 0x24 (0x24)


}; 
 
 // Function Engine.AtmosphericFogComponent.SetDefaultBrightness
struct FSetDefaultBrightness
{
	float NewBrightness;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlatformInputDeviceMapperLibrary.GetUserForInputDevice
struct FGetUserForInputDevice
{
	struct FInputDeviceId DeviceID;  // 0x0 (0x0)
	struct FPlatformUserId ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.AtmosphericFogComponent.SetDefaultLightColor
struct FSetDefaultLightColor
{
	struct FLinearColor NewLightColor;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.ResetRandomStream
struct FResetRandomStream
{
	struct FRandomStream Stream;  // 0x0 (0x0)


}; 
 
 // Function Engine.AtmosphericFogComponent.SetDensityMultiplier
struct FSetDensityMultiplier
{
	float NewDensityMultiplier;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.PointsAreCoplanar
struct FPointsAreCoplanar
{
	struct TArray<struct FVector> Points;  // 0x0 (0x0)
	float Tolerance;  // 0x10 (0x10)
	char pad_20_1 : 7;  // 0x14 (0x14)
	bool ReturnValue : 1;  // 0x14 (0x14)
	char pad_21[3];  // 0x15 (0x15)


}; 
 
 // Function Engine.KismetMathLibrary.Matrix_GetFrustumBottomPlane
struct FMatrix_GetFrustumBottomPlane
{
	struct FMatrix M;  // 0x0 (0x0)
	struct FPlane OutPlane;  // 0x80 (0x80)
	char pad_160_1 : 7;  // 0xA0 (0xA0)
	bool ReturnValue : 1;  // 0xA0 (0xA0)
	char pad_161[15];  // 0xA1 (0xA1)


}; 
 
 // Function Engine.AtmosphericFogComponent.SetFogMultiplier
struct FSetFogMultiplier
{
	float NewFogMultiplier;  // 0x0 (0x0)


}; 
 
 // Function Engine.AudioVolume.SetReverbSettings
struct FSetReverbSettings
{
	struct FReverbSettings NewReverbSettings;  // 0x0 (0x0)


}; 
 
 // Function Engine.AudioVolume.SetSubmixOverrideSettings
struct FSetSubmixOverrideSettings
{
	struct TArray<struct FAudioVolumeSubmixOverrideSettings> NewSubmixOverrideSettings;  // 0x0 (0x0)


}; 
 
 // Function Engine.ConstraintInstanceBlueprintLibrary.GetOrientationDriveTwistAndSwing
struct FGetOrientationDriveTwistAndSwing
{
	struct FConstraintInstanceAccessor Accessor;  // 0x0 (0x0)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bOutEnableTwistDrive : 1;  // 0xC (0xC)
	char pad_13_1 : 7;  // 0xD (0xD)
	bool bOutEnableSwingDrive : 1;  // 0xD (0xD)
	char pad_14[2];  // 0xE (0xE)


}; 
 
 // Function Engine.ActorSoundParameterInterface.GetActorSoundParams
struct FGetActorSoundParams
{
	struct TArray<struct FAudioParameter> Params;  // 0x0 (0x0)


}; 
 
 // Function Engine.AudioParameterConversionStatics.BooleanArrayToAudioParameter
struct FBooleanArrayToAudioParameter
{
	struct FName Name;  // 0x0 (0x0)
	struct TArray<bool> Bools;  // 0x8 (0x8)
	struct FAudioParameter ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.AudioParameterConversionStatics.FloatArrayToAudioParameter
struct FFloatArrayToAudioParameter
{
	struct FName Name;  // 0x0 (0x0)
	struct TArray<float> Floats;  // 0x8 (0x8)
	struct FAudioParameter ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.AudioParameterConversionStatics.IntegerArrayToAudioParameter
struct FIntegerArrayToAudioParameter
{
	struct FName Name;  // 0x0 (0x0)
	struct TArray<int32_t> Integers;  // 0x8 (0x8)
	struct FAudioParameter ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.AudioParameterConversionStatics.ObjectToAudioParameter
struct FObjectToAudioParameter
{
	struct FName Name;  // 0x0 (0x0)
	struct UObject* Object;  // 0x8 (0x8)
	struct FAudioParameter ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.AudioParameterConversionStatics.StringArrayToAudioParameter
struct FStringArrayToAudioParameter
{
	struct FName Name;  // 0x0 (0x0)
	struct TArray<struct FString> Strings;  // 0x8 (0x8)
	struct FAudioParameter ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.BlueprintMapLibrary.Map_Contains
struct FMap_Contains
{
	struct TMap<int32_t, int32_t> TargetMap;  // 0x0 (0x0)
	int32_t Key;  // 0x50 (0x50)
	char pad_84_1 : 7;  // 0x54 (0x54)
	bool ReturnValue : 1;  // 0x54 (0x54)
	char pad_85[3];  // 0x55 (0x55)


}; 
 
 // Function Engine.KismetMathLibrary.MakePlaneFromPointAndNormal
struct FMakePlaneFromPointAndNormal
{
	struct FVector Point;  // 0x0 (0x0)
	struct FVector Normal;  // 0x18 (0x18)
	struct FPlane ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.TypedElementWorldInterface.NotifyMovementEnded
struct FNotifyMovementEnded
{
	struct FScriptTypedElementHandle InElementHandle;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintMapLibrary.Map_IsNotEmpty
struct FMap_IsNotEmpty
{
	struct TMap<int32_t, int32_t> TargetMap;  // 0x0 (0x0)
	char pad_80_1 : 7;  // 0x50 (0x50)
	bool ReturnValue : 1;  // 0x50 (0x50)
	char pad_81[7];  // 0x51 (0x51)


}; 
 
 // Function Engine.BlueprintMapLibrary.Map_Length
struct FMap_Length
{
	struct TMap<int32_t, int32_t> TargetMap;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x50 (0x50)
	char pad_84[4];  // 0x54 (0x54)


}; 
 
 // Function Engine.KismetMathLibrary.Multiply_MatrixMatrix
struct FMultiply_MatrixMatrix
{
	struct FMatrix A;  // 0x0 (0x0)
	struct FMatrix B;  // 0x80 (0x80)
	struct FMatrix ReturnValue;  // 0x100 (0x100)


}; 
 
 // Function Engine.BlueprintMapLibrary.Map_Remove
struct FMap_Remove
{
	struct TMap<int32_t, int32_t> TargetMap;  // 0x0 (0x0)
	int32_t Key;  // 0x50 (0x50)
	char pad_84_1 : 7;  // 0x54 (0x54)
	bool ReturnValue : 1;  // 0x54 (0x54)
	char pad_85[3];  // 0x55 (0x55)


}; 
 
 // Function Engine.KismetMathLibrary.RotateAngleAxis
struct FRotateAngleAxis
{
	struct FVector InVect;  // 0x0 (0x0)
	float AngleDeg;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)
	struct FVector Axis;  // 0x20 (0x20)
	struct FVector ReturnValue;  // 0x38 (0x38)


}; 
 
 // Function Engine.BlueprintMapLibrary.Map_Values
struct FMap_Values
{
	struct TMap<int32_t, int32_t> TargetMap;  // 0x0 (0x0)
	struct TArray<int32_t> Values;  // 0x50 (0x50)


}; 
 
 // Function Engine.GameplayStatics.PlaySoundAtLocation
struct FPlaySoundAtLocation
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct USoundBase* Sound;  // 0x8 (0x8)
	struct FVector Location;  // 0x10 (0x10)
	struct FRotator Rotation;  // 0x28 (0x28)
	float VolumeMultiplier;  // 0x40 (0x40)
	float PitchMultiplier;  // 0x44 (0x44)
	float StartTime;  // 0x48 (0x48)
	char pad_76[4];  // 0x4C (0x4C)
	struct USoundAttenuation* AttenuationSettings;  // 0x50 (0x50)
	struct USoundConcurrency* ConcurrencySettings;  // 0x58 (0x58)
	struct AActor* OwningActor;  // 0x60 (0x60)
	struct UInitialActiveSoundParams* InitialParams;  // 0x68 (0x68)


}; 
 
 // Function Engine.BlueprintMapLibrary.SetMapPropertyByName
struct FSetMapPropertyByName
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FName PropertyName;  // 0x8 (0x8)
	struct TMap<int32_t, int32_t> Value;  // 0x10 (0x10)


}; 
 
 // Function Engine.BlueprintSetLibrary.Set_Add
struct FSet_Add
{
	struct TSet<int32_t> TargetSet;  // 0x0 (0x0)
	int32_t NewItem;  // 0x50 (0x50)
	char pad_84[4];  // 0x54 (0x54)


}; 
 
 // Function Engine.BlueprintSetLibrary.Set_AddItems
struct FSet_AddItems
{
	struct TSet<int32_t> TargetSet;  // 0x0 (0x0)
	struct TArray<int32_t> NewItems;  // 0x50 (0x50)


}; 
 
 // Function Engine.KismetStringLibrary.RightChop
struct FRightChop
{
	struct FString SourceString;  // 0x0 (0x0)
	int32_t Count;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)
	struct FString ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.BlueprintSetLibrary.Set_Clear
struct FSet_Clear
{
	struct TSet<int32_t> TargetSet;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetArrayLibrary.Array_Set
struct FArray_Set
{
	struct TArray<int32_t> TargetArray;  // 0x0 (0x0)
	int32_t Index;  // 0x10 (0x10)
	int32_t Item;  // 0x14 (0x14)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bSizeToFit : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.BlueprintSetLibrary.Set_Difference
struct FSet_Difference
{
	struct TSet<int32_t> A;  // 0x0 (0x0)
	struct TSet<int32_t> B;  // 0x50 (0x50)
	struct TSet<int32_t> Result;  // 0xA0 (0xA0)


}; 
 
 // Function Engine.BlueprintSetLibrary.Set_IsEmpty
struct FSet_IsEmpty
{
	struct TSet<int32_t> TargetSet;  // 0x0 (0x0)
	char pad_80_1 : 7;  // 0x50 (0x50)
	bool ReturnValue : 1;  // 0x50 (0x50)
	char pad_81[7];  // 0x51 (0x51)


}; 
 
 // Function Engine.GameplayStatics.Blueprint_PredictProjectilePath_ByTraceChannel
struct FBlueprint_PredictProjectilePath_ByTraceChannel
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FHitResult OutHit;  // 0x8 (0x8)
	struct TArray<struct FVector> OutPathPositions;  // 0xF0 (0xF0)
	struct FVector OutLastTraceDestination;  // 0x100 (0x100)
	struct FVector StartPos;  // 0x118 (0x118)
	struct FVector LaunchVelocity;  // 0x130 (0x130)
	char pad_328_1 : 7;  // 0x148 (0x148)
	bool bTracePath : 1;  // 0x148 (0x148)
	char pad_329[3];  // 0x149 (0x149)
	float ProjectileRadius;  // 0x14C (0x14C)
	enum class ECollisionChannel TraceChannel;  // 0x150 (0x150)
	char pad_337_1 : 7;  // 0x151 (0x151)
	bool bTraceComplex : 1;  // 0x151 (0x151)
	char pad_338[6];  // 0x152 (0x152)
	struct TArray<struct AActor*> ActorsToIgnore;  // 0x158 (0x158)
	enum class EDrawDebugTrace DrawDebugType;  // 0x168 (0x168)
	char pad_361[3];  // 0x169 (0x169)
	float DrawDebugTime;  // 0x16C (0x16C)
	float SimFrequency;  // 0x170 (0x170)
	float MaxSimTime;  // 0x174 (0x174)
	float OverrideGravityZ;  // 0x178 (0x178)
	char pad_380_1 : 7;  // 0x17C (0x17C)
	bool ReturnValue : 1;  // 0x17C (0x17C)
	char pad_381[3];  // 0x17D (0x17D)


}; 
 
 // Function Engine.BlueprintSetLibrary.Set_IsNotEmpty
struct FSet_IsNotEmpty
{
	struct TSet<int32_t> TargetSet;  // 0x0 (0x0)
	char pad_80_1 : 7;  // 0x50 (0x50)
	bool ReturnValue : 1;  // 0x50 (0x50)
	char pad_81[7];  // 0x51 (0x51)


}; 
 
 // Function Engine.BlueprintPathsLibrary.ScreenShotDir
struct FScreenShotDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintSetLibrary.Set_RemoveItems
struct FSet_RemoveItems
{
	struct TSet<int32_t> TargetSet;  // 0x0 (0x0)
	struct TArray<int32_t> Items;  // 0x50 (0x50)


}; 
 
 // Function Engine.BlueprintSetLibrary.Set_Union
struct FSet_Union
{
	struct TSet<int32_t> A;  // 0x0 (0x0)
	struct TSet<int32_t> B;  // 0x50 (0x50)
	struct TSet<int32_t> Result;  // 0xA0 (0xA0)


}; 
 
 // Function Engine.CameraLensEffectInterface.GetParticleComponents
struct FGetParticleComponents
{
	struct TArray<struct UFXSystemComponent*> ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.CameraLensEffectInterface.GetPrimaryParticleComponent
struct FGetPrimaryParticleComponent
{
	struct UFXSystemComponent* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.CameraLensEffectInterfaceClassSupportLibrary.GetInterfaceClass
struct FGetInterfaceClass
{
	struct FCameraLensInterfaceClassSupport CameraLens;  // 0x0 (0x0)
	AActor* ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.CameraLensEffectInterfaceClassSupportLibrary.IsInterfaceValid
struct FIsInterfaceValid
{
	struct TScriptInterface<ICameraLensEffectInterface> CameraLens;  // 0x0 (0x0)
	uint8_t Result;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.CameraShakeSourceComponent.StopAllCameraShakesOfType
struct FStopAllCameraShakesOfType
{
	UCameraShakeBase* InCameraShake;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bImmediately : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.SplineMeshComponent.GetBoundaryMax
struct FGetBoundaryMax
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.CanvasRenderTarget2D.CreateCanvasRenderTarget2D
struct FCreateCanvasRenderTarget2D
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	UCanvasRenderTarget2D* CanvasRenderTarget2DClass;  // 0x8 (0x8)
	int32_t Width;  // 0x10 (0x10)
	int32_t Height;  // 0x14 (0x14)
	struct UCanvasRenderTarget2D* ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.GameplayStatics.GetGameState
struct FGetGameState
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct AGameStateBase* ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.RuntimeVirtualTexture.GetSize
struct FGetSize
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.CheatManager.DamageTarget
struct FDamageTarget
{
	float DamageAmount;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationFromNow
struct FScheduleLocalNotificationFromNow
{
	int32_t inSecondsFromNow;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FText Title;  // 0x8 (0x8)
	struct FText Body;  // 0x20 (0x20)
	struct FText Action;  // 0x38 (0x38)
	struct FString ActivationEvent;  // 0x50 (0x50)
	int32_t ReturnValue;  // 0x60 (0x60)
	char pad_100[4];  // 0x64 (0x64)


}; 
 
 // Function Engine.CheatManager.DebugCapsuleSweepChannel
struct FDebugCapsuleSweepChannel
{
	enum class ECollisionChannel Channel;  // 0x0 (0x0)


}; 
 
 // Function Engine.CheatManager.DebugCapsuleSweepSize
struct FDebugCapsuleSweepSize
{
	float HalfHeight;  // 0x0 (0x0)
	float Radius;  // 0x4 (0x4)


}; 
 
 // Function Engine.CheatManager.DestroyPawns
struct FDestroyPawns
{
	APawn* aClass;  // 0x0 (0x0)


}; 
 
 // Function Engine.CheatManager.ViewActor
struct FViewActor
{
	struct FName ActorName;  // 0x0 (0x0)


}; 
 
 // Function Engine.BillboardComponent.SetOpacityMaskRefVal
struct FSetOpacityMaskRefVal
{
	float RefVal;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetGuidLibrary.EqualEqual_GuidGuid
struct FEqualEqual_GuidGuid
{
	struct FGuid A;  // 0x0 (0x0)
	struct FGuid B;  // 0x10 (0x10)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[3];  // 0x21 (0x21)


}; 
 
 // Function Engine.BillboardComponent.SetSprite
struct FSetSprite
{
	struct UTexture2D* NewSprite;  // 0x0 (0x0)


}; 
 
 // Function Engine.BillboardComponent.SetUV
struct FSetUV
{
	int32_t NewU;  // 0x0 (0x0)
	int32_t NewUL;  // 0x4 (0x4)
	int32_t NewV;  // 0x8 (0x8)
	int32_t NewVL;  // 0xC (0xC)


}; 
 
 // Function Engine.CapsuleComponent.GetScaledCapsuleHalfHeight
struct FGetScaledCapsuleHalfHeight
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.CapsuleComponent.GetScaledCapsuleHalfHeight_WithoutHemisphere
struct FGetScaledCapsuleHalfHeight_WithoutHemisphere
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.CapsuleComponent.GetScaledCapsuleRadius
struct FGetScaledCapsuleRadius
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineMeshComponent.SetBoundaryMax
struct FSetBoundaryMax
{
	float InBoundaryMax;  // 0x0 (0x0)
	char pad_4_1 : 7;  // 0x4 (0x4)
	bool bUpdateMesh : 1;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)


}; 
 
 // Function Engine.CapsuleComponent.GetScaledCapsuleSize
struct FGetScaledCapsuleSize
{
	float OutRadius;  // 0x0 (0x0)
	float OutHalfHeight;  // 0x4 (0x4)


}; 
 
 // Function Engine.SphereComponent.GetShapeScale
struct FGetShapeScale
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight
struct FGetUnscaledCapsuleHalfHeight
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight_WithoutHemisphere
struct FGetUnscaledCapsuleHalfHeight_WithoutHemisphere
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.CapsuleComponent.GetUnscaledCapsuleRadius
struct FGetUnscaledCapsuleRadius
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.CapsuleComponent.SetCapsuleSize
struct FSetCapsuleSize
{
	float InRadius;  // 0x0 (0x0)
	float InHalfHeight;  // 0x4 (0x4)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bUpdateOverlaps : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.ChildActorComponent.OnChildActorDestroyed
struct FOnChildActorDestroyed
{
	struct AActor* DestroyedActor;  // 0x0 (0x0)


}; 
 
 // Function Engine.ChildActorComponent.SetChildActorClass
struct FSetChildActorClass
{
	AActor* InClass;  // 0x0 (0x0)


}; 
 
 // Function Engine.DecalActor.GetDecalMaterial
struct FGetDecalMaterial
{
	struct UMaterialInterface* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.DecalComponent.GetFadeDuration
struct FGetFadeDuration
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Percent_IntInt
struct FPercent_IntInt
{
	int32_t A;  // 0x0 (0x0)
	int32_t B;  // 0x4 (0x4)
	int32_t ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.VisualLoggerKismetLibrary.LogBox
struct FLogBox
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FBox BoxShape;  // 0x8 (0x8)
	struct FString Text;  // 0x40 (0x40)
	struct FLinearColor ObjectColor;  // 0x50 (0x50)
	struct FName LogCategory;  // 0x60 (0x60)
	char pad_104_1 : 7;  // 0x68 (0x68)
	bool bAddToMessageLog : 1;  // 0x68 (0x68)
	char pad_105[7];  // 0x69 (0x69)


}; 
 
 // Function Engine.DecalComponent.GetFadeInDuration
struct FGetFadeInDuration
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.DecalComponent.GetFadeStartDelay
struct FGetFadeStartDelay
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.DecalActor.SetDecalMaterial
struct FSetDecalMaterial
{
	struct UMaterialInterface* NewDecalMaterial;  // 0x0 (0x0)


}; 
 
 // Function Engine.DecalComponent.SetFadeOut
struct FSetFadeOut
{
	float StartDelay;  // 0x0 (0x0)
	float Duration;  // 0x4 (0x4)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool DestroyOwnerAfterFade : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.SplineMeshComponent.SetBoundaryMin
struct FSetBoundaryMin
{
	float InBoundaryMin;  // 0x0 (0x0)
	char pad_4_1 : 7;  // 0x4 (0x4)
	bool bUpdateMesh : 1;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)


}; 
 
 // Function Engine.BlueprintTypeConversions.ConvertSetType
struct FConvertSetType
{
	struct TSet<int32_t> InSet;  // 0x0 (0x0)
	struct TSet<int32_t> ReturnValue;  // 0x50 (0x50)


}; 
 
 // Function Engine.DecalComponent.SetFadeScreenSize
struct FSetFadeScreenSize
{
	float NewFadeScreenSize;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.MaxInt64
struct FMaxInt64
{
	int64_t A;  // 0x0 (0x0)
	int64_t B;  // 0x8 (0x8)
	int64_t ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.DecalComponent.SetSortOrder
struct FSetSortOrder
{
	int32_t Value;  // 0x0 (0x0)


}; 
 
 // Function Engine.LightComponent.SetBloomScale
struct FSetBloomScale
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.LightComponent.SetBloomTint
struct FSetBloomTint
{
	struct FColor NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.LightComponent.SetForceCachedShadowsForMovablePrimitives
struct FSetForceCachedShadowsForMovablePrimitives
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetStringLibrary.FindSubstring
struct FFindSubstring
{
	struct FString SearchIn;  // 0x0 (0x0)
	struct FString Substring;  // 0x10 (0x10)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool bUseCase : 1;  // 0x20 (0x20)
	char pad_33_1 : 7;  // 0x21 (0x21)
	bool bSearchFromEnd : 1;  // 0x21 (0x21)
	char pad_34[2];  // 0x22 (0x22)
	int32_t StartPosition;  // 0x24 (0x24)
	int32_t ReturnValue;  // 0x28 (0x28)
	char pad_44[4];  // 0x2C (0x2C)


}; 
 
 // Function Engine.LightComponent.SetIESTexture
struct FSetIESTexture
{
	struct UTextureLightProfile* NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.LightComponent.SetShadowSlopeBias
struct FSetShadowSlopeBias
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.IntPoint_Left
struct FIntPoint_Left
{
	struct FIntPoint ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.LightComponent.SetSpecularScale
struct FSetSpecularScale
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.LightComponent.SetTransmission
struct FSetTransmission
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Atan
struct FAtan
{
	double A;  // 0x0 (0x0)
	double ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.LightComponent.SetUseIESBrightness
struct FSetUseIESBrightness
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.DirectionalLightComponent.SetAtmosphereSunLightIndex
struct FSetAtmosphereSunLightIndex
{
	int32_t NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.UtcNow
struct FUtcNow
{
	struct FDateTime ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.DirectionalLightComponent.SetCascadeTransitionFraction
struct FSetCascadeTransitionFraction
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.DirectionalLightComponent.SetDynamicShadowCascades
struct FSetDynamicShadowCascades
{
	int32_t NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameplayStatics.HasLaunchOption
struct FHasLaunchOption
{
	struct FString OptionToCheck;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceMovableLight
struct FSetDynamicShadowDistanceMovableLight
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.NearlyEqual_TransformTransform
struct FNearlyEqual_TransformTransform
{
	struct FTransform A;  // 0x0 (0x0)
	struct FTransform B;  // 0x60 (0x60)
	float LocationTolerance;  // 0xC0 (0xC0)
	float RotationTolerance;  // 0xC4 (0xC4)
	float Scale3DTolerance;  // 0xC8 (0xC8)
	char pad_204_1 : 7;  // 0xCC (0xCC)
	bool ReturnValue : 1;  // 0xCC (0xCC)
	char pad_205[3];  // 0xCD (0xCD)


}; 
 
 // Function Engine.DirectionalLightComponent.SetEnableLightShaftOcclusion
struct FSetEnableLightShaftOcclusion
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Asin
struct FAsin
{
	double A;  // 0x0 (0x0)
	double ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.DirectionalLightComponent.SetOcclusionDepthRange
struct FSetOcclusionDepthRange
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.DirectionalLightComponent.SetOcclusionMaskDarkness
struct FSetOcclusionMaskDarkness
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.DirectionalLightComponent.SetShadowAmount
struct FSetShadowAmount
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.DirectionalLightComponent.SetShadowSourceAngleFactor
struct FSetShadowSourceAngleFactor
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPathsLibrary.IsSamePath
struct FIsSamePath
{
	struct FString PathA;  // 0x0 (0x0)
	struct FString PathB;  // 0x10 (0x10)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.SphereComponent.SetSphereRadius
struct FSetSphereRadius
{
	float InSphereRadius;  // 0x0 (0x0)
	char pad_4_1 : 7;  // 0x4 (0x4)
	bool bUpdateOverlaps : 1;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)


}; 
 
 // Function Engine.ForceFeedbackComponent.SetIntensityMultiplier
struct FSetIntensityMultiplier
{
	float NewIntensityMultiplier;  // 0x0 (0x0)


}; 
 
 // Function Engine.LocalLightComponent.GetUnitsConversionFactor
struct FGetUnitsConversionFactor
{
	uint8_t SrcUnits;  // 0x0 (0x0)
	uint8_t TargetUnits;  // 0x1 (0x1)
	char pad_2[2];  // 0x2 (0x2)
	float CosHalfConeAngle;  // 0x4 (0x4)
	float ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.And_Int64Int64
struct FAnd_Int64Int64
{
	int64_t A;  // 0x0 (0x0)
	int64_t B;  // 0x8 (0x8)
	int64_t ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.LocalLightComponent.SetAttenuationRadius
struct FSetAttenuationRadius
{
	float NewRadius;  // 0x0 (0x0)


}; 
 
 // Function Engine.ReplaySubsystem.GetReplayCurrentTime
struct FGetReplayCurrentTime
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.MaterialBillboardComponent.AddElement
struct FAddElement
{
	struct UMaterialInterface* Material;  // 0x0 (0x0)
	struct UCurveFloat* DistanceToOpacityCurve;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool bSizeIsInScreenSpace : 1;  // 0x10 (0x10)
	char pad_17[3];  // 0x11 (0x11)
	float BaseSizeX;  // 0x14 (0x14)
	float BaseSizeY;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)
	struct UCurveFloat* DistanceToSizeCurve;  // 0x20 (0x20)


}; 
 
 // Function Engine.PointLightComponent.SetInverseExposureBlend
struct FSetInverseExposureBlend
{
	float NewInverseExposureBlend;  // 0x0 (0x0)


}; 
 
 // Function Engine.PointLightComponent.SetSoftSourceRadius
struct FSetSoftSourceRadius
{
	float bNewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PointLightComponent.SetUseInverseSquaredFalloff
struct FSetUseInverseSquaredFalloff
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bNewValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.PoseableMeshComponent.GetBoneLocationByName
struct FGetBoneLocationByName
{
	struct FName BoneName;  // 0x0 (0x0)
	enum class EBoneSpaces BoneSpace;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)
	struct FVector ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.PoseableMeshComponent.SetBoneTransformByName
struct FSetBoneTransformByName
{
	struct FName BoneName;  // 0x0 (0x0)
	char pad_8[8];  // 0x8 (0x8)
	struct FTransform InTransform;  // 0x10 (0x10)
	enum class EBoneSpaces BoneSpace;  // 0x70 (0x70)
	char pad_113[15];  // 0x71 (0x71)


}; 
 
 // Function Engine.RectLightComponent.SetBarnDoorAngle
struct FSetBarnDoorAngle
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineMeshComponent.GetEndOffset
struct FGetEndOffset
{
	struct FVector2D ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineMeshComponent.GetEndPosition
struct FGetEndPosition
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineMeshComponent.GetEndRoll
struct FGetEndRoll
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineMeshComponent.GetEndScale
struct FGetEndScale
{
	struct FVector2D ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.LinearColor_SetRGBA
struct FLinearColor_SetRGBA
{
	struct FLinearColor InOutColor;  // 0x0 (0x0)
	float R;  // 0x10 (0x10)
	float G;  // 0x14 (0x14)
	float B;  // 0x18 (0x18)
	float A;  // 0x1C (0x1C)


}; 
 
 // Function Engine.SplineMeshComponent.GetEndTangent
struct FGetEndTangent
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineMeshComponent.GetStartOffset
struct FGetStartOffset
{
	struct FVector2D ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineMeshComponent.GetStartPosition
struct FGetStartPosition
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.FInterpTo
struct FFInterpTo
{
	double Current;  // 0x0 (0x0)
	double Target;  // 0x8 (0x8)
	double DeltaTime;  // 0x10 (0x10)
	double InterpSpeed;  // 0x18 (0x18)
	double ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_SnappedToGrid
struct FVector_SnappedToGrid
{
	struct FVector InVect;  // 0x0 (0x0)
	float InGridSize;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)
	struct FVector ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.SplineMeshComponent.GetStartScale
struct FGetStartScale
{
	struct FVector2D ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineMeshComponent.GetStartTangent
struct FGetStartTangent
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SplineMeshComponent.SetEndOffset
struct FSetEndOffset
{
	struct FVector2D EndOffset;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool bUpdateMesh : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.SplineMeshComponent.SetEndPosition
struct FSetEndPosition
{
	struct FVector EndPos;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bUpdateMesh : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.KismetMathLibrary.MinimumAreaRectangle
struct FMinimumAreaRectangle
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct TArray<struct FVector> InVerts;  // 0x8 (0x8)
	struct FVector SampleSurfaceNormal;  // 0x18 (0x18)
	struct FVector OutRectCenter;  // 0x30 (0x30)
	struct FRotator OutRectRotation;  // 0x48 (0x48)
	float OutSideLengthX;  // 0x60 (0x60)
	float OutSideLengthY;  // 0x64 (0x64)
	char pad_104_1 : 7;  // 0x68 (0x68)
	bool bDebugDraw : 1;  // 0x68 (0x68)
	char pad_105[7];  // 0x69 (0x69)


}; 
 
 // Function Engine.KismetStringLibrary.Conv_ObjectToString
struct FConv_ObjectToString
{
	struct UObject* InObj;  // 0x0 (0x0)
	struct FString ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.SplineMeshComponent.SetEndRoll
struct FSetEndRoll
{
	float EndRoll;  // 0x0 (0x0)
	char pad_4_1 : 7;  // 0x4 (0x4)
	bool bUpdateMesh : 1;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)


}; 
 
 // Function Engine.SplineMeshComponent.SetEndTangent
struct FSetEndTangent
{
	struct FVector EndTangent;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bUpdateMesh : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.SplineMeshComponent.SetForwardAxis
struct FSetForwardAxis
{
	enum class ESplineMeshAxis InForwardAxis;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool bUpdateMesh : 1;  // 0x1 (0x1)


}; 
 
 // Function Engine.SplineMeshComponent.SetSplineUpDir
struct FSetSplineUpDir
{
	struct FVector InSplineUpDir;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bUpdateMesh : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.SplineMeshComponent.SetStartOffset
struct FSetStartOffset
{
	struct FVector2D StartOffset;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool bUpdateMesh : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.SplineMeshComponent.SetStartPosition
struct FSetStartPosition
{
	struct FVector StartPos;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bUpdateMesh : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.KismetMathLibrary.Quat_Exp
struct FQuat_Exp
{
	struct FQuat Q;  // 0x0 (0x0)
	struct FQuat ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.SplineMeshComponent.SetStartRoll
struct FSetStartRoll
{
	float StartRoll;  // 0x0 (0x0)
	char pad_4_1 : 7;  // 0x4 (0x4)
	bool bUpdateMesh : 1;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)


}; 
 
 // Function Engine.SplineMeshComponent.SetStartTangent
struct FSetStartTangent
{
	struct FVector StartTangent;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bUpdateMesh : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.VolumetricCloudComponent.SetbUsePerSampleAtmosphericLightTransmittance
struct FSetbUsePerSampleAtmosphericLightTransmittance
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool NewValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.VolumetricCloudComponent.SetGroundAlbedo
struct FSetGroundAlbedo
{
	struct FColor NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameplayStatics.ApplyRadialDamageWithFalloff
struct FApplyRadialDamageWithFalloff
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	float BaseDamage;  // 0x8 (0x8)
	float MinimumDamage;  // 0xC (0xC)
	struct FVector Origin;  // 0x10 (0x10)
	float DamageInnerRadius;  // 0x28 (0x28)
	float DamageOuterRadius;  // 0x2C (0x2C)
	float DamageFalloff;  // 0x30 (0x30)
	char pad_52[4];  // 0x34 (0x34)
	UDamageType* DamageTypeClass;  // 0x38 (0x38)
	struct TArray<struct AActor*> IgnoreActors;  // 0x40 (0x40)
	struct AActor* DamageCauser;  // 0x50 (0x50)
	struct AController* InstigatedByController;  // 0x58 (0x58)
	enum class ECollisionChannel DamagePreventionChannel;  // 0x60 (0x60)
	char pad_97_1 : 7;  // 0x61 (0x61)
	bool ReturnValue : 1;  // 0x61 (0x61)
	char pad_98[6];  // 0x62 (0x62)


}; 
 
 // Function Engine.VolumetricCloudComponent.SetLayerBottomAltitude
struct FSetLayerBottomAltitude
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.RadiansToDegrees
struct FRadiansToDegrees
{
	double A;  // 0x0 (0x0)
	double ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.GameplayStatics.SetMaxAudioChannelsScaled
struct FSetMaxAudioChannelsScaled
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	float MaxChannelCountScale;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.VolumetricCloudComponent.SetPlanetRadius
struct FSetPlanetRadius
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.VolumetricCloudComponent.SetReflectionViewSampleCountScale
struct FSetReflectionViewSampleCountScale
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.VolumetricCloudComponent.SetShadowReflectionViewSampleCountScale
struct FSetShadowReflectionViewSampleCountScale
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameplayStatics.BlueprintSuggestProjectileVelocity
struct FBlueprintSuggestProjectileVelocity
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector TossVelocity;  // 0x8 (0x8)
	struct FVector StartLocation;  // 0x20 (0x20)
	struct FVector EndLocation;  // 0x38 (0x38)
	float LaunchSpeed;  // 0x50 (0x50)
	float OverrideGravityZ;  // 0x54 (0x54)
	enum class ESuggestProjVelocityTraceOption TraceOption;  // 0x58 (0x58)
	char pad_89[3];  // 0x59 (0x59)
	float CollisionRadius;  // 0x5C (0x5C)
	char pad_96_1 : 7;  // 0x60 (0x60)
	bool bFavorHighArc : 1;  // 0x60 (0x60)
	char pad_97_1 : 7;  // 0x61 (0x61)
	bool bDrawDebug : 1;  // 0x61 (0x61)
	char pad_98_1 : 7;  // 0x62 (0x62)
	bool ReturnValue : 1;  // 0x62 (0x62)
	char pad_99[5];  // 0x63 (0x63)


}; 
 
 // Function Engine.VolumetricCloudComponent.SetTracingMaxDistance
struct FSetTracingMaxDistance
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.VolumetricCloudComponent.SetShadowTracingDistance
struct FSetShadowTracingDistance
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.VolumetricCloudComponent.SetSkyLightCloudBottomOcclusion
struct FSetSkyLightCloudBottomOcclusion
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.VolumetricCloudComponent.SetStopTracingTransmittanceThreshold
struct FSetStopTracingTransmittanceThreshold
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.VolumetricCloudComponent.SetTracingStartMaxDistance
struct FSetTracingStartMaxDistance
{
	float NewValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.CurveBase.GetValueRange
struct FGetValueRange
{
	float MinValue;  // 0x0 (0x0)
	float MaxValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.CurveLinearColor.GetClampedLinearColorValue
struct FGetClampedLinearColorValue
{
	float InTime;  // 0x0 (0x0)
	struct FLinearColor ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.CurveVector.GetVectorValue
struct FGetVectorValue
{
	float InTime;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.DataTableFunctionLibrary.DoesDataTableRowExist
struct FDoesDataTableRowExist
{
	struct UDataTable* Table;  // 0x0 (0x0)
	struct FName RowName;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.DebugCameraController.ReceiveOnActorSelected
struct FReceiveOnActorSelected
{
	struct AActor* NewSelectedActor;  // 0x0 (0x0)
	struct FVector SelectHitLocation;  // 0x8 (0x8)
	struct FVector SelectHitNormal;  // 0x20 (0x20)
	struct FHitResult Hit;  // 0x38 (0x38)


}; 
 
 // Function Engine.KismetMathLibrary.SelectInt
struct FSelectInt
{
	int32_t A;  // 0x0 (0x0)
	int32_t B;  // 0x4 (0x4)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bPickA : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)
	int32_t ReturnValue;  // 0xC (0xC)


}; 
 
 // Function Engine.TypedElementCommonActions.DeleteNormalizedElements
struct FDeleteNormalizedElements
{
	struct FScriptTypedElementListProxy ElementList;  // 0x0 (0x0)
	struct UWorld* World;  // 0x10 (0x10)
	struct UTypedElementSelectionSet* InSelectionSet;  // 0x18 (0x18)
	struct FTypedElementDeletionOptions DeletionOptions;  // 0x20 (0x20)
	char pad_35_1 : 7;  // 0x23 (0x23)
	bool ReturnValue : 1;  // 0x23 (0x23)
	char pad_36[4];  // 0x24 (0x24)


}; 
 
 // Function Engine.TypedElementCommonActions.DeleteSelectedElements
struct FDeleteSelectedElements
{
	struct UTypedElementSelectionSet* SelectionSet;  // 0x0 (0x0)
	struct UWorld* World;  // 0x8 (0x8)
	struct FTypedElementDeletionOptions DeletionOptions;  // 0x10 (0x10)
	char pad_19_1 : 7;  // 0x13 (0x13)
	bool ReturnValue : 1;  // 0x13 (0x13)
	char pad_20[4];  // 0x14 (0x14)


}; 
 
 // Function Engine.TypedElementCommonActions.DuplicateNormalizedElements
struct FDuplicateNormalizedElements
{
	struct FScriptTypedElementListProxy ElementList;  // 0x0 (0x0)
	struct UWorld* World;  // 0x10 (0x10)
	struct FVector LocationOffset;  // 0x18 (0x18)
	struct TArray<struct FScriptTypedElementHandle> ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.TypedElementWorldInterface.CanEditElement
struct FCanEditElement
{
	struct FScriptTypedElementHandle InElementHandle;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.TypedElementWorldInterface.CanMoveElement
struct FCanMoveElement
{
	struct FScriptTypedElementHandle InElementHandle;  // 0x0 (0x0)
	uint8_t InWorldType;  // 0x8 (0x8)
	char pad_9_1 : 7;  // 0x9 (0x9)
	bool ReturnValue : 1;  // 0x9 (0x9)
	char pad_10[6];  // 0xA (0xA)


}; 
 
 // Function Engine.TypedElementWorldInterface.DuplicateElement
struct FDuplicateElement
{
	struct FScriptTypedElementHandle InElementHandle;  // 0x0 (0x0)
	struct UWorld* InWorld;  // 0x8 (0x8)
	struct FVector InLocationOffset;  // 0x10 (0x10)
	struct FScriptTypedElementHandle ReturnValue;  // 0x28 (0x28)


}; 
 
 // Function Engine.TypedElementWorldInterface.GetOwnerWorld
struct FGetOwnerWorld
{
	struct FScriptTypedElementHandle InElementHandle;  // 0x0 (0x0)
	struct UWorld* ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.TypedElementWorldInterface.GetWorldTransform
struct FGetWorldTransform
{
	struct FScriptTypedElementHandle InElementHandle;  // 0x0 (0x0)
	char pad_8[8];  // 0x8 (0x8)
	struct FTransform OutTransform;  // 0x10 (0x10)
	char pad_112_1 : 7;  // 0x70 (0x70)
	bool ReturnValue : 1;  // 0x70 (0x70)
	char pad_113[15];  // 0x71 (0x71)


}; 
 
 // Function Engine.TypedElementWorldInterface.NotifyMovementOngoing
struct FNotifyMovementOngoing
{
	struct FScriptTypedElementHandle InElementHandle;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Quat_MakeFromEuler
struct FQuat_MakeFromEuler
{
	struct FVector Euler;  // 0x0 (0x0)
	char pad_24[8];  // 0x18 (0x18)
	struct FQuat ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetMathLibrary.Multiply_Vector2DVector2D
struct FMultiply_Vector2DVector2D
{
	struct FVector2D A;  // 0x0 (0x0)
	struct FVector2D B;  // 0x10 (0x10)
	struct FVector2D ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.TypedElementWorldInterface.PromoteElement
struct FPromoteElement
{
	struct FScriptTypedElementHandle InElementHandle;  // 0x0 (0x0)
	struct UWorld* OverrideWorld;  // 0x8 (0x8)
	struct FScriptTypedElementHandle ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.GameplayStatics.GetWorldDeltaSeconds
struct FGetWorldDeltaSeconds
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	double ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.RandomBool
struct FRandomBool
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.TypedElementWorldInterface.SetPivotOffset
struct FSetPivotOffset
{
	struct FScriptTypedElementHandle InElementHandle;  // 0x0 (0x0)
	struct FVector InPivotOffset;  // 0x8 (0x8)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.TypedElementWorldInterface.SetRelativeTransform
struct FSetRelativeTransform
{
	struct FScriptTypedElementHandle InElementHandle;  // 0x0 (0x0)
	char pad_8[8];  // 0x8 (0x8)
	struct FTransform InTransform;  // 0x10 (0x10)
	char pad_112_1 : 7;  // 0x70 (0x70)
	bool ReturnValue : 1;  // 0x70 (0x70)
	char pad_113[15];  // 0x71 (0x71)


}; 
 
 // Function Engine.TypedElementWorldInterface.SetWorldTransform
struct FSetWorldTransform
{
	struct FScriptTypedElementHandle InElementHandle;  // 0x0 (0x0)
	char pad_8[8];  // 0x8 (0x8)
	struct FTransform InTransform;  // 0x10 (0x10)
	char pad_112_1 : 7;  // 0x70 (0x70)
	bool ReturnValue : 1;  // 0x70 (0x70)
	char pad_113[15];  // 0x71 (0x71)


}; 
 
 // Function Engine.ViewportStatsSubsystem.AddDisplayDelegate
struct FAddDisplayDelegate
{
	struct FDelegate Delegate;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.ViewportStatsSubsystem.RemoveDisplayDelegate
struct FRemoveDisplayDelegate
{
	int32_t IndexToRemove;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.ProjectPointOnToPlane
struct FProjectPointOnToPlane
{
	struct FVector Point;  // 0x0 (0x0)
	struct FVector PlaneBase;  // 0x18 (0x18)
	struct FVector PlaneNormal;  // 0x30 (0x30)
	struct FVector ReturnValue;  // 0x48 (0x48)


}; 
 
 // Function Engine.AsyncActionHandleSaveGame.AsyncSaveGameToSlot
struct FAsyncSaveGameToSlot
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct USaveGame* SaveGameObject;  // 0x8 (0x8)
	struct FString SlotName;  // 0x10 (0x10)
	int32_t UserIndex;  // 0x20 (0x20)
	char pad_36[4];  // 0x24 (0x24)
	struct UAsyncActionHandleSaveGame* ReturnValue;  // 0x28 (0x28)


}; 
 
 // Function Engine.SpringArmComponent.GetUnfixedCameraPosition
struct FGetUnfixedCameraPosition
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetArrayLibrary.Array_Get
struct FArray_Get
{
	struct TArray<int32_t> TargetArray;  // 0x0 (0x0)
	int32_t Index;  // 0x10 (0x10)
	int32_t Item;  // 0x14 (0x14)


}; 
 
 // Function Engine.GameplayStatics.ActivateReverbEffect
struct FActivateReverbEffect
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct UReverbEffect* ReverbEffect;  // 0x8 (0x8)
	struct FName TagName;  // 0x10 (0x10)
	float Priority;  // 0x18 (0x18)
	float Volume;  // 0x1C (0x1C)
	float FadeTime;  // 0x20 (0x20)
	char pad_36[4];  // 0x24 (0x24)


}; 
 
 // Function Engine.GameplayStatics.AreAnyListenersWithinRange
struct FAreAnyListenersWithinRange
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector Location;  // 0x8 (0x8)
	float MaximumRange;  // 0x20 (0x20)
	char pad_36_1 : 7;  // 0x24 (0x24)
	bool ReturnValue : 1;  // 0x24 (0x24)
	char pad_37[3];  // 0x25 (0x25)


}; 
 
 // Function Engine.GameplayStatics.BeginDeferredActorSpawnFromClass
struct FBeginDeferredActorSpawnFromClass
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	AActor* ActorClass;  // 0x8 (0x8)
	struct FTransform SpawnTransform;  // 0x10 (0x10)
	uint8_t CollisionHandlingOverride;  // 0x70 (0x70)
	char pad_113[7];  // 0x71 (0x71)
	struct AActor* Owner;  // 0x78 (0x78)
	struct AActor* ReturnValue;  // 0x80 (0x80)
	char pad_136[8];  // 0x88 (0x88)


}; 
 
 // Function Engine.GameplayStatics.BeginSpawningActorFromBlueprint
struct FBeginSpawningActorFromBlueprint
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct UBlueprint* Blueprint;  // 0x8 (0x8)
	struct FTransform SpawnTransform;  // 0x10 (0x10)
	char pad_112_1 : 7;  // 0x70 (0x70)
	bool bNoCollisionFail : 1;  // 0x70 (0x70)
	char pad_113[7];  // 0x71 (0x71)
	struct AActor* ReturnValue;  // 0x78 (0x78)


}; 
 
 // Function Engine.KismetStringLibrary.MatchesWildcard
struct FMatchesWildcard
{
	struct FString SourceString;  // 0x0 (0x0)
	struct FString Wildcard;  // 0x10 (0x10)
	enum class ESearchCase SearchCase;  // 0x20 (0x20)
	char pad_33_1 : 7;  // 0x21 (0x21)
	bool ReturnValue : 1;  // 0x21 (0x21)
	char pad_34[6];  // 0x22 (0x22)


}; 
 
 // Function Engine.GameplayStatics.BreakHitResult
struct FBreakHitResult
{
	struct FHitResult Hit;  // 0x0 (0x0)
	char pad_232_1 : 7;  // 0xE8 (0xE8)
	bool bBlockingHit : 1;  // 0xE8 (0xE8)
	char pad_233_1 : 7;  // 0xE9 (0xE9)
	bool bInitialOverlap : 1;  // 0xE9 (0xE9)
	char pad_234[2];  // 0xEA (0xEA)
	float Time;  // 0xEC (0xEC)
	float Distance;  // 0xF0 (0xF0)
	char pad_244[4];  // 0xF4 (0xF4)
	struct FVector Location;  // 0xF8 (0xF8)
	struct FVector ImpactPoint;  // 0x110 (0x110)
	struct FVector Normal;  // 0x128 (0x128)
	struct FVector ImpactNormal;  // 0x140 (0x140)
	struct UPhysicalMaterial* PhysMat;  // 0x158 (0x158)
	struct AActor* HitActor;  // 0x160 (0x160)
	struct UPrimitiveComponent* HitComponent;  // 0x168 (0x168)
	struct FName HitBoneName;  // 0x170 (0x170)
	struct FName BoneName;  // 0x178 (0x178)
	int32_t HitItem;  // 0x180 (0x180)
	int32_t ElementIndex;  // 0x184 (0x184)
	int32_t FaceIndex;  // 0x188 (0x188)
	char pad_396[4];  // 0x18C (0x18C)
	struct FVector TraceStart;  // 0x190 (0x190)
	struct FVector TraceEnd;  // 0x1A8 (0x1A8)


}; 
 
 // Function Engine.GameplayStatics.ClearSoundMixModifiers
struct FClearSoundMixModifiers
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_DoubleToLinearColor
struct FConv_DoubleToLinearColor
{
	double InDouble;  // 0x0 (0x0)
	struct FLinearColor ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.GameplayStatics.CreatePlayer
struct FCreatePlayer
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	int32_t ControllerId;  // 0x8 (0x8)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bSpawnPlayerController : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)
	struct APlayerController* ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.GameplayStatics.CreatePlayerFromPlatformUser
struct FCreatePlayerFromPlatformUser
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FPlatformUserId userID;  // 0x8 (0x8)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bSpawnPlayerController : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)
	struct APlayerController* ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.GameplayStatics.CreateSaveGameObject
struct FCreateSaveGameObject
{
	USaveGame* SaveGameClass;  // 0x0 (0x0)
	struct USaveGame* ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.GameplayStatics.DeprojectSceneCaptureToWorld
struct FDeprojectSceneCaptureToWorld
{
	struct ASceneCapture2D* SceneCapture2D;  // 0x0 (0x0)
	struct FVector2D TargetUV;  // 0x8 (0x8)
	struct FVector WorldPosition;  // 0x18 (0x18)
	struct FVector WorldDirection;  // 0x30 (0x30)
	char pad_72_1 : 7;  // 0x48 (0x48)
	bool ReturnValue : 1;  // 0x48 (0x48)
	char pad_73[7];  // 0x49 (0x49)


}; 
 
 // Function Engine.GameplayStatics.DeprojectScreenToWorld
struct FDeprojectScreenToWorld
{
	struct APlayerController* Player;  // 0x0 (0x0)
	struct FVector2D ScreenPosition;  // 0x8 (0x8)
	struct FVector WorldPosition;  // 0x18 (0x18)
	struct FVector WorldDirection;  // 0x30 (0x30)
	char pad_72_1 : 7;  // 0x48 (0x48)
	bool ReturnValue : 1;  // 0x48 (0x48)
	char pad_73[7];  // 0x49 (0x49)


}; 
 
 // Function Engine.GameplayStatics.FindCollisionUV
struct FFindCollisionUV
{
	struct FHitResult Hit;  // 0x0 (0x0)
	int32_t UVChannel;  // 0xE8 (0xE8)
	char pad_236[4];  // 0xEC (0xEC)
	struct FVector2D UV;  // 0xF0 (0xF0)
	char pad_256_1 : 7;  // 0x100 (0x100)
	bool ReturnValue : 1;  // 0x100 (0x100)
	char pad_257[7];  // 0x101 (0x101)


}; 
 
 // Function Engine.GameplayStatics.FlushLevelStreaming
struct FFlushLevelStreaming
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameplayStatics.GetActiveSpatialPluginName
struct FGetActiveSpatialPluginName
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FName ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.GameplayStatics.GetActorArrayAverageLocation
struct FGetActorArrayAverageLocation
{
	struct TArray<struct AActor*> Actors;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.GetPointDistanceToLine
struct FGetPointDistanceToLine
{
	struct FVector Point;  // 0x0 (0x0)
	struct FVector LineOrigin;  // 0x18 (0x18)
	struct FVector LineDirection;  // 0x30 (0x30)
	float ReturnValue;  // 0x48 (0x48)
	char pad_76[4];  // 0x4C (0x4C)


}; 
 
 // Function Engine.GameplayStatics.GetAllActorsOfClass
struct FGetAllActorsOfClass
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	AActor* ActorClass;  // 0x8 (0x8)
	struct TArray<struct AActor*> OutActors;  // 0x10 (0x10)


}; 
 
 // Function Engine.GameplayStatics.GetAllActorsWithInterface
struct FGetAllActorsWithInterface
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	UInterface* Interface;  // 0x8 (0x8)
	struct TArray<struct AActor*> OutActors;  // 0x10 (0x10)


}; 
 
 // Function Engine.GameplayStatics.GetAudioTimeSeconds
struct FGetAudioTimeSeconds
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	double ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.WeightedMovingAverage_FVector
struct FWeightedMovingAverage_FVector
{
	struct FVector CurrentSample;  // 0x0 (0x0)
	struct FVector PreviousSample;  // 0x18 (0x18)
	float Weight;  // 0x30 (0x30)
	char pad_52[4];  // 0x34 (0x34)
	struct FVector ReturnValue;  // 0x38 (0x38)


}; 
 
 // Function Engine.GameplayStatics.GetCurrentLevelName
struct FGetCurrentLevelName
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bRemovePrefixString : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)
	struct FString ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.Vector4_IsNearlyZero3
struct FVector4_IsNearlyZero3
{
	struct FVector4 A;  // 0x0 (0x0)
	float Tolerance;  // 0x20 (0x20)
	char pad_36_1 : 7;  // 0x24 (0x24)
	bool ReturnValue : 1;  // 0x24 (0x24)
	char pad_37[11];  // 0x25 (0x25)


}; 
 
 // Function Engine.GameplayStatics.GetCurrentReverbEffect
struct FGetCurrentReverbEffect
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct UReverbEffect* ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetArrayLibrary.Array_IsEmpty
struct FArray_IsEmpty
{
	struct TArray<int32_t> TargetArray;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.GameplayStatics.GetEnableWorldRendering
struct FGetEnableWorldRendering
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.GameplayStatics.GetGameInstance
struct FGetGameInstance
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct UGameInstance* ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.GameplayStatics.GetGlobalTimeDilation
struct FGetGlobalTimeDilation
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	float ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.GameplayStatics.GetKeyValue
struct FGetKeyValue
{
	struct FString Pair;  // 0x0 (0x0)
	struct FString Key;  // 0x10 (0x10)
	struct FString Value;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetMathLibrary.Vector2DInterpTo
struct FVector2DInterpTo
{
	struct FVector2D Current;  // 0x0 (0x0)
	struct FVector2D Target;  // 0x10 (0x10)
	float DeltaTime;  // 0x20 (0x20)
	float InterpSpeed;  // 0x24 (0x24)
	struct FVector2D ReturnValue;  // 0x28 (0x28)


}; 
 
 // Function Engine.GameplayStatics.GetMaxAudioChannelCount
struct FGetMaxAudioChannelCount
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.GameplayStatics.GetPlatformName
struct FGetPlatformName
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameplayStatics.GetPlayerCameraManager
struct FGetPlayerCameraManager
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	int32_t PlayerIndex;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)
	struct APlayerCameraManager* ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.GameplayStatics.GetPlayerCharacter
struct FGetPlayerCharacter
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	int32_t PlayerIndex;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)
	struct ACharacter* ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.GameplayStatics.GetPlayerControllerFromPlatformUser
struct FGetPlayerControllerFromPlatformUser
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FPlatformUserId userID;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)
	struct APlayerController* ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.GameplayStatics.GetPlayerControllerID
struct FGetPlayerControllerID
{
	struct APlayerController* Player;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.KismetMathLibrary.GetAbsMax2D
struct FGetAbsMax2D
{
	struct FVector2D A;  // 0x0 (0x0)
	double ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.GameplayStatics.GetPlayerStateFromUniqueNetId
struct FGetPlayerStateFromUniqueNetId
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FUniqueNetIdRepl UniqueId;  // 0x8 (0x8)
	struct APlayerState* ReturnValue;  // 0x38 (0x38)


}; 
 
 // Function Engine.GameplayStatics.GetStreamingLevel
struct FGetStreamingLevel
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FName PackageName;  // 0x8 (0x8)
	struct ULevelStreaming* ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.GameplayStatics.GetTimeSeconds
struct FGetTimeSeconds
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	double ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMaterialLibrary.GetScalarParameterValue
struct FGetScalarParameterValue
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct UMaterialParameterCollection* Collection;  // 0x8 (0x8)
	struct FName ParameterName;  // 0x10 (0x10)
	float ReturnValue;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)


}; 
 
 // Function Engine.KismetRenderingLibrary.BeginDrawCanvasToRenderTarget
struct FBeginDrawCanvasToRenderTarget
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct UTextureRenderTarget2D* TextureRenderTarget;  // 0x8 (0x8)
	struct UCanvas* Canvas;  // 0x10 (0x10)
	struct FVector2D Size;  // 0x18 (0x18)
	struct FDrawToRenderTargetContext Context;  // 0x28 (0x28)


}; 
 
 // Function Engine.GameplayStatics.GetUnpausedTimeSeconds
struct FGetUnpausedTimeSeconds
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	double ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.GameplayStatics.GrassOverlappingSphereCount
struct FGrassOverlappingSphereCount
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct UStaticMesh* StaticMesh;  // 0x8 (0x8)
	struct FVector CenterPosition;  // 0x10 (0x10)
	float Radius;  // 0x28 (0x28)
	int32_t ReturnValue;  // 0x2C (0x2C)


}; 
 
 // Function Engine.KismetMathLibrary.Matrix_TransformPosition
struct FMatrix_TransformPosition
{
	struct FMatrix M;  // 0x0 (0x0)
	struct FVector V;  // 0x80 (0x80)
	char pad_152[8];  // 0x98 (0x98)
	struct FVector4 ReturnValue;  // 0xA0 (0xA0)


}; 
 
 // Function Engine.GameplayStatics.ObjectIsA
struct FObjectIsA
{
	struct UObject* Object;  // 0x0 (0x0)
	UObject* ObjectClass;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.GameplayStatics.OpenLevel
struct FOpenLevel
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FName LevelName;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool bAbsolute : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)
	struct FString Options;  // 0x18 (0x18)


}; 
 
 // Function Engine.GameplayStatics.OpenLevelBySoftObjectPtr
struct FOpenLevelBySoftObjectPtr
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct TSoftObjectPtr<UWorld> Level;  // 0x8 (0x8)
	char pad_56_1 : 7;  // 0x38 (0x38)
	bool bAbsolute : 1;  // 0x38 (0x38)
	char pad_57[7];  // 0x39 (0x39)
	struct FString Options;  // 0x40 (0x40)


}; 
 
 // Function Engine.GameplayStatics.ParseOption
struct FParseOption
{
	struct FString Options;  // 0x0 (0x0)
	struct FString Key;  // 0x10 (0x10)
	struct FString ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.GameplayStatics.PlaySound2D
struct FPlaySound2D
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct USoundBase* Sound;  // 0x8 (0x8)
	float VolumeMultiplier;  // 0x10 (0x10)
	float PitchMultiplier;  // 0x14 (0x14)
	float StartTime;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)
	struct USoundConcurrency* ConcurrencySettings;  // 0x20 (0x20)
	struct AActor* OwningActor;  // 0x28 (0x28)
	char pad_48_1 : 7;  // 0x30 (0x30)
	bool bIsUISound : 1;  // 0x30 (0x30)
	char pad_49[7];  // 0x31 (0x31)


}; 
 
 // Function Engine.GameplayStatics.PrimeAllSoundsInSoundClass
struct FPrimeAllSoundsInSoundClass
{
	struct USoundClass* InSoundClass;  // 0x0 (0x0)


}; 
 
 // Function Engine.GameplayStatics.PushSoundMixModifier
struct FPushSoundMixModifier
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct USoundMix* InSoundMixModifier;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.Multiply_TimespanFloat
struct FMultiply_TimespanFloat
{
	struct FTimespan A;  // 0x0 (0x0)
	float Scalar;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)
	struct FTimespan ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_DoubleToInt64
struct FConv_DoubleToInt64
{
	double InDouble;  // 0x0 (0x0)
	int64_t ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.GameplayStatics.RemovePlayer
struct FRemovePlayer
{
	struct APlayerController* Player;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bDestroyPawn : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.KismetMathLibrary.BooleanAND
struct FBooleanAND
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool A : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool B : 1;  // 0x1 (0x1)
	char pad_2_1 : 7;  // 0x2 (0x2)
	bool ReturnValue : 1;  // 0x2 (0x2)


}; 
 
 // Function Engine.KismetInternationalizationLibrary.GetSuitableCulture
struct FGetSuitableCulture
{
	struct TArray<struct FString> AvailableCultures;  // 0x0 (0x0)
	struct FString CultureToMatch;  // 0x10 (0x10)
	struct FString FallbackCulture;  // 0x20 (0x20)
	struct FString ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.GameplayStatics.SaveGameToSlot
struct FSaveGameToSlot
{
	struct USaveGame* SaveGameObject;  // 0x0 (0x0)
	struct FString SlotName;  // 0x8 (0x8)
	int32_t UserIndex;  // 0x18 (0x18)
	char pad_28_1 : 7;  // 0x1C (0x1C)
	bool ReturnValue : 1;  // 0x1C (0x1C)
	char pad_29[3];  // 0x1D (0x1D)


}; 
 
 // Function Engine.GameplayStatics.SetEnableWorldRendering
struct FSetEnableWorldRendering
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bEnable : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.GameplayStatics.SetForceDisableSplitscreen
struct FSetForceDisableSplitscreen
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bDisable : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.GameplayStatics.SetGamePaused
struct FSetGamePaused
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bPaused : 1;  // 0x8 (0x8)
	char pad_9_1 : 7;  // 0x9 (0x9)
	bool ReturnValue : 1;  // 0x9 (0x9)
	char pad_10[6];  // 0xA (0xA)


}; 
 
 // Function Engine.KismetMathLibrary.MultiplyByPi
struct FMultiplyByPi
{
	double Value;  // 0x0 (0x0)
	double ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.SignOfInteger64
struct FSignOfInteger64
{
	int64_t A;  // 0x0 (0x0)
	int64_t ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.GameplayStatics.SetGlobalListenerFocusParameters
struct FSetGlobalListenerFocusParameters
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	float FocusAzimuthScale;  // 0x8 (0x8)
	float NonFocusAzimuthScale;  // 0xC (0xC)
	float FocusDistanceScale;  // 0x10 (0x10)
	float NonFocusDistanceScale;  // 0x14 (0x14)
	float FocusVolumeScale;  // 0x18 (0x18)
	float NonFocusVolumeScale;  // 0x1C (0x1C)
	float FocusPriorityScale;  // 0x20 (0x20)
	float NonFocusPriorityScale;  // 0x24 (0x24)


}; 
 
 // Function Engine.GameplayStatics.SetGlobalPitchModulation
struct FSetGlobalPitchModulation
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	float PitchModulation;  // 0x8 (0x8)
	float TimeSec;  // 0xC (0xC)


}; 
 
 // Function Engine.GameplayStatics.SetGlobalTimeDilation
struct FSetGlobalTimeDilation
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	float TimeDilation;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.GameplayStatics.SetPlayerControllerID
struct FSetPlayerControllerID
{
	struct APlayerController* Player;  // 0x0 (0x0)
	int32_t ControllerId;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.GameplayStatics.SetSoundMixClassOverride
struct FSetSoundMixClassOverride
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct USoundMix* InSoundMixModifier;  // 0x8 (0x8)
	struct USoundClass* InSoundClass;  // 0x10 (0x10)
	float Volume;  // 0x18 (0x18)
	float Pitch;  // 0x1C (0x1C)
	float FadeInTime;  // 0x20 (0x20)
	char pad_36_1 : 7;  // 0x24 (0x24)
	bool bApplyToChildren : 1;  // 0x24 (0x24)
	char pad_37[3];  // 0x25 (0x25)


}; 
 
 // Function Engine.GameplayStatics.SpawnDecalAtLocation
struct FSpawnDecalAtLocation
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct UMaterialInterface* DecalMaterial;  // 0x8 (0x8)
	struct FVector DecalSize;  // 0x10 (0x10)
	struct FVector Location;  // 0x28 (0x28)
	struct FRotator Rotation;  // 0x40 (0x40)
	float LifeSpan;  // 0x58 (0x58)
	char pad_92[4];  // 0x5C (0x5C)
	struct UDecalComponent* ReturnValue;  // 0x60 (0x60)


}; 
 
 // Function Engine.GameplayStatics.SpawnDecalAttached
struct FSpawnDecalAttached
{
	struct UMaterialInterface* DecalMaterial;  // 0x0 (0x0)
	struct FVector DecalSize;  // 0x8 (0x8)
	struct USceneComponent* AttachToComponent;  // 0x20 (0x20)
	struct FName AttachPointName;  // 0x28 (0x28)
	struct FVector Location;  // 0x30 (0x30)
	struct FRotator Rotation;  // 0x48 (0x48)
	enum class EAttachLocation LocationType;  // 0x60 (0x60)
	char pad_97[3];  // 0x61 (0x61)
	float LifeSpan;  // 0x64 (0x64)
	struct UDecalComponent* ReturnValue;  // 0x68 (0x68)


}; 
 
 // Function Engine.GameplayStatics.SpawnForceFeedbackAtLocation
struct FSpawnForceFeedbackAtLocation
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct UForceFeedbackEffect* ForceFeedbackEffect;  // 0x8 (0x8)
	struct FVector Location;  // 0x10 (0x10)
	struct FRotator Rotation;  // 0x28 (0x28)
	char pad_64_1 : 7;  // 0x40 (0x40)
	bool bLooping : 1;  // 0x40 (0x40)
	char pad_65[3];  // 0x41 (0x41)
	float IntensityMultiplier;  // 0x44 (0x44)
	float StartTime;  // 0x48 (0x48)
	char pad_76[4];  // 0x4C (0x4C)
	struct UForceFeedbackAttenuation* AttenuationSettings;  // 0x50 (0x50)
	char pad_88_1 : 7;  // 0x58 (0x58)
	bool bAutoDestroy : 1;  // 0x58 (0x58)
	char pad_89[7];  // 0x59 (0x59)
	struct UForceFeedbackComponent* ReturnValue;  // 0x60 (0x60)


}; 
 
 // Function Engine.KismetMathLibrary.EqualEqual_DoubleDouble
struct FEqualEqual_DoubleDouble
{
	double A;  // 0x0 (0x0)
	double B;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.GameplayStatics.SpawnForceFeedbackAttached
struct FSpawnForceFeedbackAttached
{
	struct UForceFeedbackEffect* ForceFeedbackEffect;  // 0x0 (0x0)
	struct USceneComponent* AttachToComponent;  // 0x8 (0x8)
	struct FName AttachPointName;  // 0x10 (0x10)
	struct FVector Location;  // 0x18 (0x18)
	struct FRotator Rotation;  // 0x30 (0x30)
	enum class EAttachLocation LocationType;  // 0x48 (0x48)
	char pad_73_1 : 7;  // 0x49 (0x49)
	bool bStopWhenAttachedToDestroyed : 1;  // 0x49 (0x49)
	char pad_74_1 : 7;  // 0x4A (0x4A)
	bool bLooping : 1;  // 0x4A (0x4A)
	char pad_75[1];  // 0x4B (0x4B)
	float IntensityMultiplier;  // 0x4C (0x4C)
	float StartTime;  // 0x50 (0x50)
	char pad_84[4];  // 0x54 (0x54)
	struct UForceFeedbackAttenuation* AttenuationSettings;  // 0x58 (0x58)
	char pad_96_1 : 7;  // 0x60 (0x60)
	bool bAutoDestroy : 1;  // 0x60 (0x60)
	char pad_97[7];  // 0x61 (0x61)
	struct UForceFeedbackComponent* ReturnValue;  // 0x68 (0x68)


}; 
 
 // Function Engine.GameplayStatics.SpawnObject
struct FSpawnObject
{
	UObject* ObjectClass;  // 0x0 (0x0)
	struct UObject* Outer;  // 0x8 (0x8)
	struct UObject* ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.GameplayStatics.SuggestProjectileVelocity_CustomArc
struct FSuggestProjectileVelocity_CustomArc
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector OutLaunchVelocity;  // 0x8 (0x8)
	struct FVector StartPos;  // 0x20 (0x20)
	struct FVector EndPos;  // 0x38 (0x38)
	float OverrideGravityZ;  // 0x50 (0x50)
	float ArcParam;  // 0x54 (0x54)
	char pad_88_1 : 7;  // 0x58 (0x58)
	bool ReturnValue : 1;  // 0x58 (0x58)
	char pad_89[7];  // 0x59 (0x59)


}; 
 
 // Function Engine.KismetMathLibrary.VSizeXYSquared
struct FVSizeXYSquared
{
	struct FVector A;  // 0x0 (0x0)
	double ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.GameplayStatics.UnloadStreamLevel
struct FUnloadStreamLevel
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FName LevelName;  // 0x8 (0x8)
	struct FLatentActionInfo LatentInfo;  // 0x10 (0x10)
	char pad_40_1 : 7;  // 0x28 (0x28)
	bool bShouldBlockOnUnload : 1;  // 0x28 (0x28)
	char pad_41[7];  // 0x29 (0x29)


}; 
 
 // Function Engine.GameplayStatics.UnloadStreamLevelBySoftObjectPtr
struct FUnloadStreamLevelBySoftObjectPtr
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct TSoftObjectPtr<UWorld> Level;  // 0x8 (0x8)
	struct FLatentActionInfo LatentInfo;  // 0x38 (0x38)
	char pad_80_1 : 7;  // 0x50 (0x50)
	bool bShouldBlockOnUnload : 1;  // 0x50 (0x50)
	char pad_81[7];  // 0x51 (0x51)


}; 
 
 // Function Engine.KismetArrayLibrary.Array_AddUnique
struct FArray_AddUnique
{
	struct TArray<int32_t> TargetArray;  // 0x0 (0x0)
	int32_t NewItem;  // 0x10 (0x10)
	int32_t ReturnValue;  // 0x14 (0x14)


}; 
 
 // Function Engine.KismetArrayLibrary.Array_Append
struct FArray_Append
{
	struct TArray<int32_t> TargetArray;  // 0x0 (0x0)
	struct TArray<int32_t> SourceArray;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetArrayLibrary.Array_Clear
struct FArray_Clear
{
	struct TArray<int32_t> TargetArray;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetArrayLibrary.Array_Insert
struct FArray_Insert
{
	struct TArray<int32_t> TargetArray;  // 0x0 (0x0)
	int32_t NewItem;  // 0x10 (0x10)
	int32_t Index;  // 0x14 (0x14)


}; 
 
 // Function Engine.KismetArrayLibrary.Array_IsValidIndex
struct FArray_IsValidIndex
{
	struct TArray<int32_t> TargetArray;  // 0x0 (0x0)
	int32_t IndexToTest;  // 0x10 (0x10)
	char pad_20_1 : 7;  // 0x14 (0x14)
	bool ReturnValue : 1;  // 0x14 (0x14)
	char pad_21[3];  // 0x15 (0x15)


}; 
 
 // Function Engine.KismetArrayLibrary.Array_Length
struct FArray_Length
{
	struct TArray<int32_t> TargetArray;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)


}; 
 
 // Function Engine.KismetArrayLibrary.Array_Shuffle
struct FArray_Shuffle
{
	struct TArray<int32_t> TargetArray;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetArrayLibrary.Array_Swap
struct FArray_Swap
{
	struct TArray<int32_t> TargetArray;  // 0x0 (0x0)
	int32_t FirstIndex;  // 0x10 (0x10)
	int32_t SecondIndex;  // 0x14 (0x14)


}; 
 
 // Function Engine.KismetArrayLibrary.FilterArray
struct FFilterArray
{
	struct TArray<struct AActor*> TargetArray;  // 0x0 (0x0)
	AActor* FilterClass;  // 0x10 (0x10)
	struct TArray<struct AActor*> FilteredArray;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetArrayLibrary.SetArrayPropertyByName
struct FSetArrayPropertyByName
{
	struct UObject* Object;  // 0x0 (0x0)
	struct FName PropertyName;  // 0x8 (0x8)
	struct TArray<int32_t> Value;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.SetVectorSpringStateVelocity
struct FSetVectorSpringStateVelocity
{
	struct FVectorSpringState SpringState;  // 0x0 (0x0)
	struct FVector Velocity;  // 0x38 (0x38)


}; 
 
 // Function Engine.KismetGuidLibrary.Conv_GuidToString
struct FConv_GuidToString
{
	struct FGuid InGuid;  // 0x0 (0x0)
	struct FString ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetGuidLibrary.Invalidate_Guid
struct FInvalidate_Guid
{
	struct FGuid InGuid;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetGuidLibrary.IsValid_Guid
struct FIsValid_Guid
{
	struct FGuid InGuid;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[3];  // 0x11 (0x11)


}; 
 
 // Function Engine.KismetGuidLibrary.NewGuid
struct FNewGuid
{
	struct FGuid ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetGuidLibrary.NotEqual_GuidGuid
struct FNotEqual_GuidGuid
{
	struct FGuid A;  // 0x0 (0x0)
	struct FGuid B;  // 0x10 (0x10)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[3];  // 0x21 (0x21)


}; 
 
 // Function Engine.KismetRenderingLibrary.MakeSkinWeightInfo
struct FMakeSkinWeightInfo
{
	int32_t Bone0;  // 0x0 (0x0)
	char Weight0;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)
	int32_t Bone1;  // 0x8 (0x8)
	char Weight1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)
	int32_t Bone2;  // 0x10 (0x10)
	char Weight2;  // 0x14 (0x14)
	char pad_21[3];  // 0x15 (0x15)
	int32_t Bone3;  // 0x18 (0x18)
	char Weight3;  // 0x1C (0x1C)
	char pad_29[3];  // 0x1D (0x1D)
	struct FSkelMeshSkinWeightInfo ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.InputSettings.GetAxisNames
struct FGetAxisNames
{
	struct TArray<struct FName> AxisNames;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetInputLibrary.GetKey
struct FGetKey
{
	struct FKeyEvent Input;  // 0x0 (0x0)
	struct FKey ReturnValue;  // 0x40 (0x40)


}; 
 
 // Function Engine.KismetInputLibrary.GetUserIndex
struct FGetUserIndex
{
	struct FKeyEvent Input;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x40 (0x40)
	char pad_68[4];  // 0x44 (0x44)


}; 
 
 // Function Engine.KismetInputLibrary.InputEvent_IsAltDown
struct FInputEvent_IsAltDown
{
	struct FInputEvent Input;  // 0x0 (0x0)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.KismetMathLibrary.NotEqual_IntInt
struct FNotEqual_IntInt
{
	int32_t A;  // 0x0 (0x0)
	int32_t B;  // 0x4 (0x4)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.KismetInputLibrary.InputEvent_IsCommandDown
struct FInputEvent_IsCommandDown
{
	struct FInputEvent Input;  // 0x0 (0x0)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.KismetInputLibrary.InputEvent_IsLeftCommandDown
struct FInputEvent_IsLeftCommandDown
{
	struct FInputEvent Input;  // 0x0 (0x0)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.KismetInputLibrary.InputEvent_IsRightAltDown
struct FInputEvent_IsRightAltDown
{
	struct FInputEvent Input;  // 0x0 (0x0)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInRadians
struct FRandomUnitVectorInEllipticalConeInRadians
{
	struct FVector ConeDir;  // 0x0 (0x0)
	float MaxYawInRadians;  // 0x18 (0x18)
	float MaxPitchInRadians;  // 0x1C (0x1C)
	struct FVector ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetInputLibrary.InputEvent_IsRightControlDown
struct FInputEvent_IsRightControlDown
{
	struct FInputEvent Input;  // 0x0 (0x0)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.KismetInputLibrary.Key_GetNavigationAction
struct FKey_GetNavigationAction
{
	struct FKey InKey;  // 0x0 (0x0)
	uint8_t ReturnValue;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.KismetInputLibrary.Key_IsAnalog
struct FKey_IsAnalog
{
	struct FKey Key;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool ReturnValue : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.KismetInputLibrary.Key_IsAxis1D
struct FKey_IsAxis1D
{
	struct FKey Key;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool ReturnValue : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.KismetInputLibrary.Key_IsAxis2D
struct FKey_IsAxis2D
{
	struct FKey Key;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool ReturnValue : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.KismetInputLibrary.Key_IsAxis3D
struct FKey_IsAxis3D
{
	struct FKey Key;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool ReturnValue : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.KismetInputLibrary.Key_IsButtonAxis
struct FKey_IsButtonAxis
{
	struct FKey Key;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool ReturnValue : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.KismetInputLibrary.Key_IsGamepadKey
struct FKey_IsGamepadKey
{
	struct FKey Key;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool ReturnValue : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.KismetInputLibrary.Key_IsKeyboardKey
struct FKey_IsKeyboardKey
{
	struct FKey Key;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool ReturnValue : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.LightWeightInstanceBlueprintFunctionLibrary.CreateNewLightWeightInstance
struct FCreateNewLightWeightInstance
{
	UObject* ActorClass;  // 0x0 (0x0)
	char pad_8[8];  // 0x8 (0x8)
	struct FTransform Transform;  // 0x10 (0x10)
	struct UDataLayerInstance* Layer;  // 0x70 (0x70)
	struct UWorld* World;  // 0x78 (0x78)
	struct FActorInstanceHandle ReturnValue;  // 0x80 (0x80)
	char pad_152[8];  // 0x98 (0x98)


}; 
 
 // Function Engine.KismetInputLibrary.Key_IsMouseButton
struct FKey_IsMouseButton
{
	struct FKey Key;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool ReturnValue : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.KismetInputLibrary.Key_IsVectorAxis
struct FKey_IsVectorAxis
{
	struct FKey Key;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool ReturnValue : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.KismetInputLibrary.ModifierKeysState_IsAltDown
struct FModifierKeysState_IsAltDown
{
	struct FSlateModifierKeysState KeysState;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool ReturnValue : 1;  // 0x1 (0x1)


}; 
 
 // Function Engine.KismetInputLibrary.ModifierKeysState_IsControlDown
struct FModifierKeysState_IsControlDown
{
	struct FSlateModifierKeysState KeysState;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool ReturnValue : 1;  // 0x1 (0x1)


}; 
 
 // Function Engine.KismetInputLibrary.PointerEvent_GetCursorDelta
struct FPointerEvent_GetCursorDelta
{
	struct FPointerEvent Input;  // 0x0 (0x0)
	struct FVector2D ReturnValue;  // 0x98 (0x98)


}; 
 
 // Function Engine.KismetInputLibrary.PointerEvent_GetEffectingButton
struct FPointerEvent_GetEffectingButton
{
	struct FPointerEvent Input;  // 0x0 (0x0)
	struct FKey ReturnValue;  // 0x98 (0x98)


}; 
 
 // Function Engine.KismetInputLibrary.PointerEvent_GetGestureDelta
struct FPointerEvent_GetGestureDelta
{
	struct FPointerEvent Input;  // 0x0 (0x0)
	struct FVector2D ReturnValue;  // 0x98 (0x98)


}; 
 
 // Function Engine.KismetMathLibrary.ToDirectionAndLength2D
struct FToDirectionAndLength2D
{
	struct FVector2D A;  // 0x0 (0x0)
	struct FVector2D OutDir;  // 0x10 (0x10)
	double OutLength;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetInputLibrary.PointerEvent_GetGestureType
struct FPointerEvent_GetGestureType
{
	struct FPointerEvent Input;  // 0x0 (0x0)
	uint8_t ReturnValue;  // 0x98 (0x98)
	char pad_153[7];  // 0x99 (0x99)


}; 
 
 // Function Engine.KismetInputLibrary.PointerEvent_GetScreenSpacePosition
struct FPointerEvent_GetScreenSpacePosition
{
	struct FPointerEvent Input;  // 0x0 (0x0)
	struct FVector2D ReturnValue;  // 0x98 (0x98)


}; 
 
 // Function Engine.KismetInputLibrary.PointerEvent_GetWheelDelta
struct FPointerEvent_GetWheelDelta
{
	struct FPointerEvent Input;  // 0x0 (0x0)
	float ReturnValue;  // 0x98 (0x98)
	char pad_156[4];  // 0x9C (0x9C)


}; 
 
 // Function Engine.KismetMathLibrary.MinInt64
struct FMinInt64
{
	int64_t A;  // 0x0 (0x0)
	int64_t B;  // 0x8 (0x8)
	int64_t ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetInputLibrary.PointerEvent_IsTouchEvent
struct FPointerEvent_IsTouchEvent
{
	struct FPointerEvent Input;  // 0x0 (0x0)
	char pad_152_1 : 7;  // 0x98 (0x98)
	bool ReturnValue : 1;  // 0x98 (0x98)
	char pad_153[7];  // 0x99 (0x99)


}; 
 
 // Function Engine.KismetInternationalizationLibrary.GetCultureDisplayName
struct FGetCultureDisplayName
{
	struct FString culture;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool Localized : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)
	struct FString ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetInternationalizationLibrary.GetCurrentLanguage
struct FGetCurrentLanguage
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetNodeHelperLibrary.GetEnumeratorUserFriendlyName
struct FGetEnumeratorUserFriendlyName
{
	struct UEnum* Enum;  // 0x0 (0x0)
	char EnumeratorValue;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)
	struct FString ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetInternationalizationLibrary.GetCurrentLocale
struct FGetCurrentLocale
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetInternationalizationLibrary.GetLocalizedCultures
struct FGetLocalizedCultures
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool IncludeGame : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool IncludeEngine : 1;  // 0x1 (0x1)
	char pad_2_1 : 7;  // 0x2 (0x2)
	bool IncludeEditor : 1;  // 0x2 (0x2)
	char pad_3_1 : 7;  // 0x3 (0x3)
	bool IncludeAdditional : 1;  // 0x3 (0x3)
	char pad_4[4];  // 0x4 (0x4)
	struct TArray<struct FString> ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetInternationalizationLibrary.GetNativeCulture
struct FGetNativeCulture
{
	uint8_t TextCategory;  // 0x0 (0x0)
	char pad_1[7];  // 0x1 (0x1)
	struct FString ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_ByteToInt
struct FConv_ByteToInt
{
	char InByte;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	int32_t ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.KismetMaterialLibrary.GetVectorParameterValue
struct FGetVectorParameterValue
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct UMaterialParameterCollection* Collection;  // 0x8 (0x8)
	struct FName ParameterName;  // 0x10 (0x10)
	struct FLinearColor ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.MaterialInstanceDynamic.SetScalarParameterValue
struct FSetScalarParameterValue
{
	struct FName ParameterName;  // 0x0 (0x0)
	float Value;  // 0x8 (0x8)


}; 
 
 // Function Engine.MaterialInstanceDynamic.SetVectorParameterValue
struct FSetVectorParameterValue
{
	struct FName ParameterName;  // 0x0 (0x0)
	struct FLinearColor Value;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.Abs_Int
struct FAbs_Int
{
	int32_t A;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.KismetMathLibrary.Abs_Int64
struct FAbs_Int64
{
	int64_t A;  // 0x0 (0x0)
	int64_t ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.Acos
struct FAcos
{
	double A;  // 0x0 (0x0)
	double ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.Add_DateTimeDateTime
struct FAdd_DateTimeDateTime
{
	struct FDateTime A;  // 0x0 (0x0)
	struct FDateTime B;  // 0x8 (0x8)
	struct FDateTime ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.Add_DateTimeTimespan
struct FAdd_DateTimeTimespan
{
	struct FDateTime A;  // 0x0 (0x0)
	struct FTimespan B;  // 0x8 (0x8)
	struct FDateTime ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.SkeletalMesh.SetMorphTargets
struct FSetMorphTargets
{
	struct TArray<struct UMorphTarget*> InMorphTargets;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Add_IntInt
struct FAdd_IntInt
{
	int32_t A;  // 0x0 (0x0)
	int32_t B;  // 0x4 (0x4)
	int32_t ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.Add_IntPointInt
struct FAdd_IntPointInt
{
	struct FIntPoint A;  // 0x0 (0x0)
	int32_t B;  // 0x8 (0x8)
	struct FIntPoint ReturnValue;  // 0xC (0xC)


}; 
 
 // Function Engine.KismetMathLibrary.Add_IntPointIntPoint
struct FAdd_IntPointIntPoint
{
	struct FIntPoint A;  // 0x0 (0x0)
	struct FIntPoint B;  // 0x8 (0x8)
	struct FIntPoint ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.Add_MatrixMatrix
struct FAdd_MatrixMatrix
{
	struct FMatrix A;  // 0x0 (0x0)
	struct FMatrix B;  // 0x80 (0x80)
	struct FMatrix ReturnValue;  // 0x100 (0x100)


}; 
 
 // Function Engine.MaterialInstanceDynamic.SetRuntimeVirtualTextureParameterValueByInfo
struct FSetRuntimeVirtualTextureParameterValueByInfo
{
	struct FMaterialParameterInfo ParameterInfo;  // 0x0 (0x0)
	struct URuntimeVirtualTexture* Value;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.Add_Vector2DFloat
struct FAdd_Vector2DFloat
{
	struct FVector2D A;  // 0x0 (0x0)
	double B;  // 0x10 (0x10)
	struct FVector2D ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetMathLibrary.Add_Vector2DVector2D
struct FAdd_Vector2DVector2D
{
	struct FVector2D A;  // 0x0 (0x0)
	struct FVector2D B;  // 0x10 (0x10)
	struct FVector2D ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetMathLibrary.Add_VectorInt
struct FAdd_VectorInt
{
	struct FVector A;  // 0x0 (0x0)
	int32_t B;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)
	struct FVector ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetMathLibrary.NotEqual_ClassClass
struct FNotEqual_ClassClass
{
	UObject* A;  // 0x0 (0x0)
	UObject* B;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.KismetMathLibrary.Min
struct FMin
{
	int32_t A;  // 0x0 (0x0)
	int32_t B;  // 0x4 (0x4)
	int32_t ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.Atan2
struct FAtan2
{
	double Y;  // 0x0 (0x0)
	double X;  // 0x8 (0x8)
	double ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.BMax
struct FBMax
{
	char A;  // 0x0 (0x0)
	char B;  // 0x1 (0x1)
	char ReturnValue;  // 0x2 (0x2)


}; 
 
 // Function Engine.BlueprintPathsLibrary.GetGameLocalizationPaths
struct FGetGameLocalizationPaths
{
	struct TArray<struct FString> ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.BooleanNAND
struct FBooleanNAND
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool A : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool B : 1;  // 0x1 (0x1)
	char pad_2_1 : 7;  // 0x2 (0x2)
	bool ReturnValue : 1;  // 0x2 (0x2)


}; 
 
 // Function Engine.KismetMathLibrary.BooleanXOR
struct FBooleanXOR
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool A : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool B : 1;  // 0x1 (0x1)
	char pad_2_1 : 7;  // 0x2 (0x2)
	bool ReturnValue : 1;  // 0x2 (0x2)


}; 
 
 // Function Engine.KismetMathLibrary.BreakColor
struct FBreakColor
{
	struct FLinearColor InColor;  // 0x0 (0x0)
	float R;  // 0x10 (0x10)
	float G;  // 0x14 (0x14)
	float B;  // 0x18 (0x18)
	float A;  // 0x1C (0x1C)


}; 
 
 // Function Engine.KismetMathLibrary.BreakDateTime
struct FBreakDateTime
{
	struct FDateTime InDateTime;  // 0x0 (0x0)
	int32_t Year;  // 0x8 (0x8)
	int32_t Month;  // 0xC (0xC)
	int32_t Day;  // 0x10 (0x10)
	int32_t Hour;  // 0x14 (0x14)
	int32_t Minute;  // 0x18 (0x18)
	int32_t Second;  // 0x1C (0x1C)
	int32_t Millisecond;  // 0x20 (0x20)
	char pad_36[4];  // 0x24 (0x24)


}; 
 
 // Function Engine.KismetMathLibrary.BreakFrameRate
struct FBreakFrameRate
{
	struct FFrameRate InFrameRate;  // 0x0 (0x0)
	int32_t Numerator;  // 0x8 (0x8)
	int32_t Denominator;  // 0xC (0xC)


}; 
 
 // Function Engine.KismetMathLibrary.BreakQualifiedFrameTime
struct FBreakQualifiedFrameTime
{
	struct FQualifiedFrameTime InFrameTime;  // 0x0 (0x0)
	struct FFrameNumber Frame;  // 0x10 (0x10)
	struct FFrameRate FrameRate;  // 0x14 (0x14)
	float SubFrame;  // 0x1C (0x1C)


}; 
 
 // Function Engine.MeshVertexPainterKismetLibrary.PaintVerticesSingleColor
struct FPaintVerticesSingleColor
{
	struct UStaticMeshComponent* StaticMeshComponent;  // 0x0 (0x0)
	struct FLinearColor FillColor;  // 0x8 (0x8)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool bConvertToSRGB : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.KismetMathLibrary.BreakRandomStream
struct FBreakRandomStream
{
	struct FRandomStream InRandomStream;  // 0x0 (0x0)
	int32_t InitialSeed;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.BreakTransform
struct FBreakTransform
{
	struct FTransform InTransform;  // 0x0 (0x0)
	struct FVector Location;  // 0x60 (0x60)
	struct FRotator Rotation;  // 0x78 (0x78)
	struct FVector Scale;  // 0x90 (0x90)
	char pad_168[8];  // 0xA8 (0xA8)


}; 
 
 // Function Engine.KismetMathLibrary.BreakVector2D
struct FBreakVector2D
{
	struct FVector2D InVec;  // 0x0 (0x0)
	double X;  // 0x10 (0x10)
	double Y;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetMathLibrary.BreakVector_NetQuantize
struct FBreakVector_NetQuantize
{
	struct FVector_NetQuantize InVec;  // 0x0 (0x0)
	double X;  // 0x18 (0x18)
	double Y;  // 0x20 (0x20)
	double Z;  // 0x28 (0x28)


}; 
 
 // Function Engine.KismetMathLibrary.LinearColor_Red
struct FLinearColor_Red
{
	struct FLinearColor ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.BreakVector_NetQuantizeNormal
struct FBreakVector_NetQuantizeNormal
{
	struct FVector_NetQuantizeNormal InVec;  // 0x0 (0x0)
	double X;  // 0x18 (0x18)
	double Y;  // 0x20 (0x20)
	double Z;  // 0x28 (0x28)


}; 
 
 // Function Engine.KismetMathLibrary.ClampAngle
struct FClampAngle
{
	double AngleDegrees;  // 0x0 (0x0)
	double MinAngleDegrees;  // 0x8 (0x8)
	double MaxAngleDegrees;  // 0x10 (0x10)
	double ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetMathLibrary.ClampAxis
struct FClampAxis
{
	float Angle;  // 0x0 (0x0)
	float ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.KismetMathLibrary.ComposeTransforms
struct FComposeTransforms
{
	struct FTransform A;  // 0x0 (0x0)
	struct FTransform B;  // 0x60 (0x60)
	struct FTransform ReturnValue;  // 0xC0 (0xC0)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_BoolToInt
struct FConv_BoolToInt
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool InBool : 1;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	int32_t ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_ByteToDouble
struct FConv_ByteToDouble
{
	char InByte;  // 0x0 (0x0)
	char pad_1[7];  // 0x1 (0x1)
	double ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_ColorToLinearColor
struct FConv_ColorToLinearColor
{
	struct FColor InColor;  // 0x0 (0x0)
	struct FLinearColor ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_FloatToLinearColor
struct FConv_FloatToLinearColor
{
	float InFloat;  // 0x0 (0x0)
	struct FLinearColor ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_FloatToVector
struct FConv_FloatToVector
{
	float InFloat;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FVector ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_IntToDouble
struct FConv_IntToDouble
{
	int32_t inInt;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	double ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_RotatorToVector
struct FConv_RotatorToVector
{
	struct FRotator InRot;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetMathLibrary.Or_IntInt
struct FOr_IntInt
{
	int32_t A;  // 0x0 (0x0)
	int32_t B;  // 0x4 (0x4)
	int32_t ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_IntToInt64
struct FConv_IntToInt64
{
	int32_t inInt;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	int64_t ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.GetRotated2D
struct FGetRotated2D
{
	struct FVector2D A;  // 0x0 (0x0)
	float AngleDeg;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)
	struct FVector2D ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetMathLibrary.GreaterEqual_IntInt
struct FGreaterEqual_IntInt
{
	int32_t A;  // 0x0 (0x0)
	int32_t B;  // 0x4 (0x4)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_IntToIntVector
struct FConv_IntToIntVector
{
	int32_t inInt;  // 0x0 (0x0)
	struct FIntVector ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_IntVectorToVector
struct FConv_IntVectorToVector
{
	struct FIntVector InIntVector;  // 0x0 (0x0)
	char pad_12[4];  // 0xC (0xC)
	struct FVector ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.BlueprintPathsLibrary.DirectoryExists
struct FDirectoryExists
{
	struct FString InPath;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_LinearColorToColor
struct FConv_LinearColorToColor
{
	struct FLinearColor InLinearColor;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool InUseSRGB : 1;  // 0x10 (0x10)
	char pad_17[3];  // 0x11 (0x11)
	struct FColor ReturnValue;  // 0x14 (0x14)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_LinearColorToVector
struct FConv_LinearColorToVector
{
	struct FLinearColor InLinearColor;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_MatrixToTransform
struct FConv_MatrixToTransform
{
	struct FMatrix InMatrix;  // 0x0 (0x0)
	struct FTransform ReturnValue;  // 0x80 (0x80)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_RotatorToTransform
struct FConv_RotatorToTransform
{
	struct FRotator InRotator;  // 0x0 (0x0)
	char pad_24[8];  // 0x18 (0x18)
	struct FTransform ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_Vector4ToRotator
struct FConv_Vector4ToRotator
{
	struct FVector4 InVec;  // 0x0 (0x0)
	struct FRotator ReturnValue;  // 0x20 (0x20)
	char pad_56[8];  // 0x38 (0x38)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_VectorToLinearColor
struct FConv_VectorToLinearColor
{
	struct FVector InVec;  // 0x0 (0x0)
	struct FLinearColor ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetMathLibrary.Conv_VectorToQuaternion
struct FConv_VectorToQuaternion
{
	struct FVector InVec;  // 0x0 (0x0)
	char pad_24[8];  // 0x18 (0x18)
	struct FQuat ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetMathLibrary.ConvertTransformToRelative
struct FConvertTransformToRelative
{
	struct FTransform Transform;  // 0x0 (0x0)
	struct FTransform ParentTransform;  // 0x60 (0x60)
	struct FTransform ReturnValue;  // 0xC0 (0xC0)


}; 
 
 // Function Engine.KismetMathLibrary.CrossProduct2D
struct FCrossProduct2D
{
	struct FVector2D A;  // 0x0 (0x0)
	struct FVector2D B;  // 0x10 (0x10)
	double ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetMathLibrary.Exp
struct FExp
{
	double A;  // 0x0 (0x0)
	double ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.DateTimeFromIsoString
struct FDateTimeFromIsoString
{
	struct FString IsoString;  // 0x0 (0x0)
	struct FDateTime Result;  // 0x10 (0x10)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool ReturnValue : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.KismetMathLibrary.DateTimeFromString
struct FDateTimeFromString
{
	struct FString DateTimeString;  // 0x0 (0x0)
	struct FDateTime Result;  // 0x10 (0x10)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool ReturnValue : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.BlueprintPathsLibrary.EngineSourceDir
struct FEngineSourceDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.DateTimeMinValue
struct FDateTimeMinValue
{
	struct FDateTime ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.DaysInMonth
struct FDaysInMonth
{
	int32_t Year;  // 0x0 (0x0)
	int32_t Month;  // 0x4 (0x4)
	int32_t ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.DegAtan2
struct FDegAtan2
{
	double Y;  // 0x0 (0x0)
	double X;  // 0x8 (0x8)
	double ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.DegCos
struct FDegCos
{
	double A;  // 0x0 (0x0)
	double ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.LinearColorLerp
struct FLinearColorLerp
{
	struct FLinearColor A;  // 0x0 (0x0)
	struct FLinearColor B;  // 0x10 (0x10)
	float Alpha;  // 0x20 (0x20)
	struct FLinearColor ReturnValue;  // 0x24 (0x24)


}; 
 
 // Function Engine.KismetMathLibrary.Multiply_ByteByte
struct FMultiply_ByteByte
{
	char A;  // 0x0 (0x0)
	char B;  // 0x1 (0x1)
	char ReturnValue;  // 0x2 (0x2)


}; 
 
 // Function Engine.KismetMathLibrary.DegreesToRadians
struct FDegreesToRadians
{
	double A;  // 0x0 (0x0)
	double ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.DistanceSquared2D
struct FDistanceSquared2D
{
	struct FVector2D v1;  // 0x0 (0x0)
	struct FVector2D v2;  // 0x10 (0x10)
	double ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetMathLibrary.Divide_IntInt
struct FDivide_IntInt
{
	int32_t A;  // 0x0 (0x0)
	int32_t B;  // 0x4 (0x4)
	int32_t ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.Divide_Vector2DFloat
struct FDivide_Vector2DFloat
{
	struct FVector2D A;  // 0x0 (0x0)
	double B;  // 0x10 (0x10)
	struct FVector2D ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetMathLibrary.Vector4_NormalUnsafe3
struct FVector4_NormalUnsafe3
{
	struct FVector4 A;  // 0x0 (0x0)
	struct FVector4 ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetMathLibrary.Divide_Vector4Vector4
struct FDivide_Vector4Vector4
{
	struct FVector4 A;  // 0x0 (0x0)
	struct FVector4 B;  // 0x20 (0x20)
	struct FVector4 ReturnValue;  // 0x40 (0x40)


}; 
 
 // Function Engine.KismetMathLibrary.DynamicWeightedMovingAverage_Float
struct FDynamicWeightedMovingAverage_Float
{
	float CurrentSample;  // 0x0 (0x0)
	float PreviousSample;  // 0x4 (0x4)
	float MaxDistance;  // 0x8 (0x8)
	float MinWeight;  // 0xC (0xC)
	float MaxWeight;  // 0x10 (0x10)
	float ReturnValue;  // 0x14 (0x14)


}; 
 
 // Function Engine.KismetMathLibrary.LinearColor_GetMin
struct FLinearColor_GetMin
{
	struct FLinearColor InColor;  // 0x0 (0x0)
	float ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.Equal_IntPointIntPoint
struct FEqual_IntPointIntPoint
{
	struct FIntPoint A;  // 0x0 (0x0)
	struct FIntPoint B;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[3];  // 0x11 (0x11)


}; 
 
 // Function Engine.KismetMathLibrary.EqualEqual_BoolBool
struct FEqualEqual_BoolBool
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool A : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool B : 1;  // 0x1 (0x1)
	char pad_2_1 : 7;  // 0x2 (0x2)
	bool ReturnValue : 1;  // 0x2 (0x2)


}; 
 
 // Function Engine.KismetMathLibrary.EqualEqual_MatrixMatrix
struct FEqualEqual_MatrixMatrix
{
	struct FMatrix A;  // 0x0 (0x0)
	struct FMatrix B;  // 0x80 (0x80)
	float Tolerance;  // 0x100 (0x100)
	char pad_260_1 : 7;  // 0x104 (0x104)
	bool ReturnValue : 1;  // 0x104 (0x104)
	char pad_261[11];  // 0x105 (0x105)


}; 
 
 // Function Engine.KismetMathLibrary.EqualEqual_NameName
struct FEqualEqual_NameName
{
	struct FName A;  // 0x0 (0x0)
	struct FName B;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[3];  // 0x11 (0x11)


}; 
 
 // Function Engine.KismetMathLibrary.EqualEqual_ObjectObject
struct FEqualEqual_ObjectObject
{
	struct UObject* A;  // 0x0 (0x0)
	struct UObject* B;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.KismetMathLibrary.EqualEqual_QuatQuat
struct FEqualEqual_QuatQuat
{
	struct FQuat A;  // 0x0 (0x0)
	struct FQuat B;  // 0x20 (0x20)
	float Tolerance;  // 0x40 (0x40)
	char pad_68_1 : 7;  // 0x44 (0x44)
	bool ReturnValue : 1;  // 0x44 (0x44)
	char pad_69[11];  // 0x45 (0x45)


}; 
 
 // Function Engine.KismetMathLibrary.EqualEqual_RotatorRotator
struct FEqualEqual_RotatorRotator
{
	struct FRotator A;  // 0x0 (0x0)
	struct FRotator B;  // 0x18 (0x18)
	float ErrorTolerance;  // 0x30 (0x30)
	char pad_52_1 : 7;  // 0x34 (0x34)
	bool ReturnValue : 1;  // 0x34 (0x34)
	char pad_53[3];  // 0x35 (0x35)


}; 
 
 // Function Engine.KismetMathLibrary.EqualEqual_TransformTransform
struct FEqualEqual_TransformTransform
{
	struct FTransform A;  // 0x0 (0x0)
	struct FTransform B;  // 0x60 (0x60)
	char pad_192_1 : 7;  // 0xC0 (0xC0)
	bool ReturnValue : 1;  // 0xC0 (0xC0)
	char pad_193[15];  // 0xC1 (0xC1)


}; 
 
 // Function Engine.KismetMathLibrary.EqualEqual_Vector2DVector2D
struct FEqualEqual_Vector2DVector2D
{
	struct FVector2D A;  // 0x0 (0x0)
	struct FVector2D B;  // 0x10 (0x10)
	float ErrorTolerance;  // 0x20 (0x20)
	char pad_36_1 : 7;  // 0x24 (0x24)
	bool ReturnValue : 1;  // 0x24 (0x24)
	char pad_37[3];  // 0x25 (0x25)


}; 
 
 // Function Engine.KismetMathLibrary.EqualEqual_VectorVector
struct FEqualEqual_VectorVector
{
	struct FVector A;  // 0x0 (0x0)
	struct FVector B;  // 0x18 (0x18)
	float ErrorTolerance;  // 0x30 (0x30)
	char pad_52_1 : 7;  // 0x34 (0x34)
	bool ReturnValue : 1;  // 0x34 (0x34)
	char pad_53[3];  // 0x35 (0x35)


}; 
 
 // Function Engine.KismetMathLibrary.FClamp
struct FFClamp
{
	double Value;  // 0x0 (0x0)
	double Min;  // 0x8 (0x8)
	double Max;  // 0x10 (0x10)
	double ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetMathLibrary.Multiply_IntPointInt
struct FMultiply_IntPointInt
{
	struct FIntPoint A;  // 0x0 (0x0)
	int32_t B;  // 0x8 (0x8)
	struct FIntPoint ReturnValue;  // 0xC (0xC)


}; 
 
 // Function Engine.KismetMathLibrary.FindClosestPointOnSegment
struct FFindClosestPointOnSegment
{
	struct FVector Point;  // 0x0 (0x0)
	struct FVector SegmentStart;  // 0x18 (0x18)
	struct FVector SegmentEnd;  // 0x30 (0x30)
	struct FVector ReturnValue;  // 0x48 (0x48)


}; 
 
 // Function Engine.KismetMathLibrary.FMin
struct FFMin
{
	double A;  // 0x0 (0x0)
	double B;  // 0x8 (0x8)
	double ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.Fraction
struct FFraction
{
	double A;  // 0x0 (0x0)
	double ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.FromHours
struct FFromHours
{
	float Hours;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FTimespan ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.FromMilliseconds
struct FFromMilliseconds
{
	float Milliseconds;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FTimespan ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.FromMinutes
struct FFromMinutes
{
	float Minutes;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FTimespan ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.FTrunc64
struct FFTrunc64
{
	double A;  // 0x0 (0x0)
	int64_t ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.FWrap
struct FFWrap
{
	double Value;  // 0x0 (0x0)
	double Min;  // 0x8 (0x8)
	double Max;  // 0x10 (0x10)
	double ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetMathLibrary.GetAxes
struct FGetAxes
{
	struct FRotator A;  // 0x0 (0x0)
	struct FVector X;  // 0x18 (0x18)
	struct FVector Y;  // 0x30 (0x30)
	struct FVector Z;  // 0x48 (0x48)


}; 
 
 // Function Engine.KismetMathLibrary.Matrix_GetDeterminant
struct FMatrix_GetDeterminant
{
	struct FMatrix M;  // 0x0 (0x0)
	float ReturnValue;  // 0x80 (0x80)
	char pad_132[12];  // 0x84 (0x84)


}; 
 
 // Function Engine.KismetMathLibrary.GetDate
struct FGetDate
{
	struct FDateTime A;  // 0x0 (0x0)
	struct FDateTime ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.GetDays
struct FGetDays
{
	struct FTimespan A;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.KismetNodeHelperLibrary.GetValidValue
struct FGetValidValue
{
	struct UEnum* Enum;  // 0x0 (0x0)
	char EnumeratorValue;  // 0x8 (0x8)
	char ReturnValue;  // 0x9 (0x9)
	char pad_10[6];  // 0xA (0xA)


}; 
 
 // Function Engine.KismetMathLibrary.GetDirectionUnitVector
struct FGetDirectionUnitVector
{
	struct FVector From;  // 0x0 (0x0)
	struct FVector To;  // 0x18 (0x18)
	struct FVector ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.KismetMathLibrary.GetHour
struct FGetHour
{
	struct FDateTime A;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.KismetMathLibrary.GetHour12
struct FGetHour12
{
	struct FDateTime A;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.KismetMathLibrary.GetHours
struct FGetHours
{
	struct FTimespan A;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.BlueprintPathsLibrary.EngineIntermediateDir
struct FEngineIntermediateDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.GetMax2D
struct FGetMax2D
{
	struct FVector2D A;  // 0x0 (0x0)
	double ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.Multiply_RotatorInt
struct FMultiply_RotatorInt
{
	struct FRotator A;  // 0x0 (0x0)
	int32_t B;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)
	struct FRotator ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetMathLibrary.GetMillisecond
struct FGetMillisecond
{
	struct FDateTime A;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.KismetMathLibrary.GetMinElement
struct FGetMinElement
{
	struct FVector A;  // 0x0 (0x0)
	double ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_HeadingAngle
struct FVector_HeadingAngle
{
	struct FVector A;  // 0x0 (0x0)
	double ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetMathLibrary.GetPointDistanceToSegment
struct FGetPointDistanceToSegment
{
	struct FVector Point;  // 0x0 (0x0)
	struct FVector SegmentStart;  // 0x18 (0x18)
	struct FVector SegmentEnd;  // 0x30 (0x30)
	float ReturnValue;  // 0x48 (0x48)
	char pad_76[4];  // 0x4C (0x4C)


}; 
 
 // Function Engine.KismetMathLibrary.GetSecond
struct FGetSecond
{
	struct FDateTime A;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.KismetMathLibrary.Matrix_Identity
struct FMatrix_Identity
{
	struct FMatrix ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.GetSlopeDegreeAngles
struct FGetSlopeDegreeAngles
{
	struct FVector MyRightYAxis;  // 0x0 (0x0)
	struct FVector FloorNormal;  // 0x18 (0x18)
	struct FVector UpVector;  // 0x30 (0x30)
	float OutSlopePitchDegreeAngle;  // 0x48 (0x48)
	float OutSlopeRollDegreeAngle;  // 0x4C (0x4C)


}; 
 
 // Function Engine.KismetMathLibrary.GetTimeOfDay
struct FGetTimeOfDay
{
	struct FDateTime A;  // 0x0 (0x0)
	struct FTimespan ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_ToDegrees
struct FVector_ToDegrees
{
	struct FVector A;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetMathLibrary.GetTotalMinutes
struct FGetTotalMinutes
{
	struct FTimespan A;  // 0x0 (0x0)
	float ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.KismetMathLibrary.GetTotalSeconds
struct FGetTotalSeconds
{
	struct FTimespan A;  // 0x0 (0x0)
	float ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.DataLayerInstance.IsEffectiveVisible
struct FIsEffectiveVisible
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.GetVectorArrayAverage
struct FGetVectorArrayAverage
{
	struct TArray<struct FVector> Vectors;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.GetYawPitchFromVector
struct FGetYawPitchFromVector
{
	struct FVector InVec;  // 0x0 (0x0)
	float Yaw;  // 0x18 (0x18)
	float Pitch;  // 0x1C (0x1C)


}; 
 
 // Function Engine.KismetMathLibrary.Greater_ByteByte
struct FGreater_ByteByte
{
	char A;  // 0x0 (0x0)
	char B;  // 0x1 (0x1)
	char pad_2_1 : 7;  // 0x2 (0x2)
	bool ReturnValue : 1;  // 0x2 (0x2)


}; 
 
 // Function Engine.KismetMathLibrary.Greater_IntInt
struct FGreater_IntInt
{
	int32_t A;  // 0x0 (0x0)
	int32_t B;  // 0x4 (0x4)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.KismetMathLibrary.MakeVector
struct FMakeVector
{
	double X;  // 0x0 (0x0)
	double Y;  // 0x8 (0x8)
	double Z;  // 0x10 (0x10)
	struct FVector ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetMathLibrary.Greater_TimespanTimespan
struct FGreater_TimespanTimespan
{
	struct FTimespan A;  // 0x0 (0x0)
	struct FTimespan B;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.KismetMathLibrary.GreaterEqual_DateTimeDateTime
struct FGreaterEqual_DateTimeDateTime
{
	struct FDateTime A;  // 0x0 (0x0)
	struct FDateTime B;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.ConstraintInstanceBlueprintLibrary.GetLinearPositionTarget
struct FGetLinearPositionTarget
{
	struct FConstraintInstanceAccessor Accessor;  // 0x0 (0x0)
	char pad_12[4];  // 0xC (0xC)
	struct FVector OutPosTarget;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.GreaterEqual_TimespanTimespan
struct FGreaterEqual_TimespanTimespan
{
	struct FTimespan A;  // 0x0 (0x0)
	struct FTimespan B;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.KismetMathLibrary.HSVToRGB
struct FHSVToRGB
{
	float H;  // 0x0 (0x0)
	float S;  // 0x4 (0x4)
	float V;  // 0x8 (0x8)
	float A;  // 0xC (0xC)
	struct FLinearColor ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.Hypotenuse
struct FHypotenuse
{
	double Width;  // 0x0 (0x0)
	double Height;  // 0x8 (0x8)
	double ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.IntPoint_Right
struct FIntPoint_Right
{
	struct FIntPoint ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.LinearColor_Set
struct FLinearColor_Set
{
	struct FLinearColor InOutColor;  // 0x0 (0x0)
	struct FLinearColor InColor;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.SelectString
struct FSelectString
{
	struct FString A;  // 0x0 (0x0)
	struct FString B;  // 0x10 (0x10)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool bPickA : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)
	struct FString ReturnValue;  // 0x28 (0x28)


}; 
 
 // Function Engine.KismetMathLibrary.IntPoint_Up
struct FIntPoint_Up
{
	struct FIntPoint ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.InverseTransformLocation
struct FInverseTransformLocation
{
	struct FTransform T;  // 0x0 (0x0)
	struct FVector Location;  // 0x60 (0x60)
	struct FVector ReturnValue;  // 0x78 (0x78)


}; 
 
 // Function Engine.KismetMathLibrary.InvertTransform
struct FInvertTransform
{
	struct FTransform T;  // 0x0 (0x0)
	struct FTransform ReturnValue;  // 0x60 (0x60)


}; 
 
 // Function Engine.KismetMathLibrary.IsAfternoon
struct FIsAfternoon
{
	struct FDateTime A;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.KismetMathLibrary.IsNearlyZero2D
struct FIsNearlyZero2D
{
	struct FVector2D A;  // 0x0 (0x0)
	float Tolerance;  // 0x10 (0x10)
	char pad_20_1 : 7;  // 0x14 (0x14)
	bool ReturnValue : 1;  // 0x14 (0x14)
	char pad_21[3];  // 0x15 (0x15)


}; 
 
 // Function Engine.KismetMathLibrary.IsPointInBox_Box
struct FIsPointInBox_Box
{
	struct FVector Point;  // 0x0 (0x0)
	struct FBox Box;  // 0x18 (0x18)
	char pad_80_1 : 7;  // 0x50 (0x50)
	bool ReturnValue : 1;  // 0x50 (0x50)
	char pad_81[7];  // 0x51 (0x51)


}; 
 
 // Function Engine.KismetMathLibrary.IsPointInBoxWithTransform
struct FIsPointInBoxWithTransform
{
	struct FVector Point;  // 0x0 (0x0)
	char pad_24[8];  // 0x18 (0x18)
	struct FTransform BoxWorldTransform;  // 0x20 (0x20)
	struct FVector BoxExtent;  // 0x80 (0x80)
	char pad_152_1 : 7;  // 0x98 (0x98)
	bool ReturnValue : 1;  // 0x98 (0x98)
	char pad_153[7];  // 0x99 (0x99)


}; 
 
 // Function Engine.KismetMathLibrary.Lerp
struct FLerp
{
	double A;  // 0x0 (0x0)
	double B;  // 0x8 (0x8)
	double Alpha;  // 0x10 (0x10)
	double ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetMathLibrary.Less_ByteByte
struct FLess_ByteByte
{
	char A;  // 0x0 (0x0)
	char B;  // 0x1 (0x1)
	char pad_2_1 : 7;  // 0x2 (0x2)
	bool ReturnValue : 1;  // 0x2 (0x2)


}; 
 
 // Function Engine.KismetMathLibrary.Quat_VectorUp
struct FQuat_VectorUp
{
	struct FQuat Q;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x20 (0x20)
	char pad_56[8];  // 0x38 (0x38)


}; 
 
 // Function Engine.KismetMathLibrary.Less_DateTimeDateTime
struct FLess_DateTimeDateTime
{
	struct FDateTime A;  // 0x0 (0x0)
	struct FDateTime B;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.KismetMathLibrary.Less_DoubleDouble
struct FLess_DoubleDouble
{
	double A;  // 0x0 (0x0)
	double B;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.KismetMathLibrary.LessEqual_ByteByte
struct FLessEqual_ByteByte
{
	char A;  // 0x0 (0x0)
	char B;  // 0x1 (0x1)
	char pad_2_1 : 7;  // 0x2 (0x2)
	bool ReturnValue : 1;  // 0x2 (0x2)


}; 
 
 // Function Engine.KismetMathLibrary.LessEqual_DoubleDouble
struct FLessEqual_DoubleDouble
{
	double A;  // 0x0 (0x0)
	double B;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.KismetMathLibrary.LessEqual_TimespanTimespan
struct FLessEqual_TimespanTimespan
{
	struct FTimespan A;  // 0x0 (0x0)
	struct FTimespan B;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.KismetMathLibrary.LessLess_VectorRotator
struct FLessLess_VectorRotator
{
	struct FVector A;  // 0x0 (0x0)
	struct FRotator B;  // 0x18 (0x18)
	struct FVector ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.KismetMathLibrary.LinearColor_Black
struct FLinearColor_Black
{
	struct FLinearColor ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.LinearColor_Blue
struct FLinearColor_Blue
{
	struct FLinearColor ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.LinearColor_Desaturated
struct FLinearColor_Desaturated
{
	struct FLinearColor InColor;  // 0x0 (0x0)
	float InDesaturation;  // 0x10 (0x10)
	struct FLinearColor ReturnValue;  // 0x14 (0x14)


}; 
 
 // Function Engine.KismetMathLibrary.LinearColor_GetMax
struct FLinearColor_GetMax
{
	struct FLinearColor InColor;  // 0x0 (0x0)
	float ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.LinearColor_Quantize
struct FLinearColor_Quantize
{
	struct FLinearColor InColor;  // 0x0 (0x0)
	struct FColor ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.LinearColor_Green
struct FLinearColor_Green
{
	struct FLinearColor ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.LinePlaneIntersection_OriginNormal
struct FLinePlaneIntersection_OriginNormal
{
	struct FVector LineStart;  // 0x0 (0x0)
	struct FVector LineEnd;  // 0x18 (0x18)
	struct FVector PlaneOrigin;  // 0x30 (0x30)
	struct FVector PlaneNormal;  // 0x48 (0x48)
	float T;  // 0x60 (0x60)
	char pad_100[4];  // 0x64 (0x64)
	struct FVector Intersection;  // 0x68 (0x68)
	char pad_128_1 : 7;  // 0x80 (0x80)
	bool ReturnValue : 1;  // 0x80 (0x80)
	char pad_129[7];  // 0x81 (0x81)


}; 
 
 // Function Engine.KismetMathLibrary.LinearColor_IsNearEqual
struct FLinearColor_IsNearEqual
{
	struct FLinearColor A;  // 0x0 (0x0)
	struct FLinearColor B;  // 0x10 (0x10)
	float Tolerance;  // 0x20 (0x20)
	char pad_36_1 : 7;  // 0x24 (0x24)
	bool ReturnValue : 1;  // 0x24 (0x24)
	char pad_37[3];  // 0x25 (0x25)


}; 
 
 // Function Engine.KismetMathLibrary.LinearColor_SetFromSRGB
struct FLinearColor_SetFromSRGB
{
	struct FLinearColor InOutColor;  // 0x0 (0x0)
	struct FColor InSRGB;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.RandomFloatFromStream
struct FRandomFloatFromStream
{
	struct FRandomStream Stream;  // 0x0 (0x0)
	float ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.LinearColor_SetRandomHue
struct FLinearColor_SetRandomHue
{
	struct FLinearColor InOutColor;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPathsLibrary.EngineContentDir
struct FEngineContentDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.LinearColorLerpUsingHSV
struct FLinearColorLerpUsingHSV
{
	struct FLinearColor A;  // 0x0 (0x0)
	struct FLinearColor B;  // 0x10 (0x10)
	float Alpha;  // 0x20 (0x20)
	struct FLinearColor ReturnValue;  // 0x24 (0x24)


}; 
 
 // Function Engine.KismetMathLibrary.Loge
struct FLoge
{
	double A;  // 0x0 (0x0)
	double ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.MakeBox
struct FMakeBox
{
	struct FVector Min;  // 0x0 (0x0)
	struct FVector Max;  // 0x18 (0x18)
	struct FBox ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.KismetMathLibrary.MakeColor
struct FMakeColor
{
	float R;  // 0x0 (0x0)
	float G;  // 0x4 (0x4)
	float B;  // 0x8 (0x8)
	float A;  // 0xC (0xC)
	struct FLinearColor ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.MakeFrameRate
struct FMakeFrameRate
{
	int32_t Numerator;  // 0x0 (0x0)
	int32_t Denominator;  // 0x4 (0x4)
	struct FFrameRate ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.MakeQuat
struct FMakeQuat
{
	float X;  // 0x0 (0x0)
	float Y;  // 0x4 (0x4)
	float Z;  // 0x8 (0x8)
	float W;  // 0xC (0xC)
	struct FQuat ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.MakeRelativeTransform
struct FMakeRelativeTransform
{
	struct FTransform A;  // 0x0 (0x0)
	struct FTransform RelativeTo;  // 0x60 (0x60)
	struct FTransform ReturnValue;  // 0xC0 (0xC0)


}; 
 
 // Function Engine.KismetMathLibrary.MakeRotationFromAxes
struct FMakeRotationFromAxes
{
	struct FVector Forward;  // 0x0 (0x0)
	struct FVector Right;  // 0x18 (0x18)
	struct FVector Up;  // 0x30 (0x30)
	struct FRotator ReturnValue;  // 0x48 (0x48)


}; 
 
 // Function Engine.KismetMathLibrary.MakeRotator
struct FMakeRotator
{
	float Roll;  // 0x0 (0x0)
	float Pitch;  // 0x4 (0x4)
	float Yaw;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)
	struct FRotator ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.MakeRotFromXZ
struct FMakeRotFromXZ
{
	struct FVector X;  // 0x0 (0x0)
	struct FVector Z;  // 0x18 (0x18)
	struct FRotator ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.KismetMathLibrary.MakeRotFromYX
struct FMakeRotFromYX
{
	struct FVector Y;  // 0x0 (0x0)
	struct FVector X;  // 0x18 (0x18)
	struct FRotator ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.KismetMathLibrary.MakeRotFromZ
struct FMakeRotFromZ
{
	struct FVector Z;  // 0x0 (0x0)
	struct FRotator ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetMathLibrary.MakeRotFromZX
struct FMakeRotFromZX
{
	struct FVector Z;  // 0x0 (0x0)
	struct FVector X;  // 0x18 (0x18)
	struct FRotator ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.KismetMathLibrary.MakeTimespan2
struct FMakeTimespan2
{
	int32_t Days;  // 0x0 (0x0)
	int32_t Hours;  // 0x4 (0x4)
	int32_t Minutes;  // 0x8 (0x8)
	int32_t Seconds;  // 0xC (0xC)
	int32_t FractionNano;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)
	struct FTimespan ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetMathLibrary.MakeVector4
struct FMakeVector4
{
	double X;  // 0x0 (0x0)
	double Y;  // 0x8 (0x8)
	double Z;  // 0x10 (0x10)
	double W;  // 0x18 (0x18)
	struct FVector4 ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetMathLibrary.MakeVector_NetQuantize100
struct FMakeVector_NetQuantize100
{
	double X;  // 0x0 (0x0)
	double Y;  // 0x8 (0x8)
	double Z;  // 0x10 (0x10)
	struct FVector_NetQuantize100 ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetMathLibrary.MapRangeClamped
struct FMapRangeClamped
{
	double Value;  // 0x0 (0x0)
	double InRangeA;  // 0x8 (0x8)
	double InRangeB;  // 0x10 (0x10)
	double OutRangeA;  // 0x18 (0x18)
	double OutRangeB;  // 0x20 (0x20)
	double ReturnValue;  // 0x28 (0x28)


}; 
 
 // Function Engine.KismetMathLibrary.MapRangeUnclamped
struct FMapRangeUnclamped
{
	double Value;  // 0x0 (0x0)
	double InRangeA;  // 0x8 (0x8)
	double InRangeB;  // 0x10 (0x10)
	double OutRangeA;  // 0x18 (0x18)
	double OutRangeB;  // 0x20 (0x20)
	double ReturnValue;  // 0x28 (0x28)


}; 
 
 // Function Engine.LevelScriptActor.RemoteEvent
struct FRemoteEvent
{
	struct FName EventName;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.KismetMathLibrary.Matrix_ContainsNaN
struct FMatrix_ContainsNaN
{
	struct FMatrix M;  // 0x0 (0x0)
	char pad_128_1 : 7;  // 0x80 (0x80)
	bool ReturnValue : 1;  // 0x80 (0x80)
	char pad_129[15];  // 0x81 (0x81)


}; 
 
 // Function Engine.KismetMathLibrary.RandomUnitVectorInConeInDegreesFromStream
struct FRandomUnitVectorInConeInDegreesFromStream
{
	struct FVector ConeDir;  // 0x0 (0x0)
	float ConeHalfAngleInDegrees;  // 0x18 (0x18)
	struct FRandomStream Stream;  // 0x1C (0x1C)
	char pad_36[4];  // 0x24 (0x24)
	struct FVector ReturnValue;  // 0x28 (0x28)


}; 
 
 // Function Engine.KismetMathLibrary.Matrix_GetFrustumFarPlane
struct FMatrix_GetFrustumFarPlane
{
	struct FMatrix M;  // 0x0 (0x0)
	struct FPlane OutPlane;  // 0x80 (0x80)
	char pad_160_1 : 7;  // 0xA0 (0xA0)
	bool ReturnValue : 1;  // 0xA0 (0xA0)
	char pad_161[15];  // 0xA1 (0xA1)


}; 
 
 // Function Engine.KismetMathLibrary.Matrix_GetFrustumLeftPlane
struct FMatrix_GetFrustumLeftPlane
{
	struct FMatrix M;  // 0x0 (0x0)
	struct FPlane OutPlane;  // 0x80 (0x80)
	char pad_160_1 : 7;  // 0xA0 (0xA0)
	bool ReturnValue : 1;  // 0xA0 (0xA0)
	char pad_161[15];  // 0xA1 (0xA1)


}; 
 
 // Function Engine.KismetMathLibrary.Matrix_GetFrustumTopPlane
struct FMatrix_GetFrustumTopPlane
{
	struct FMatrix M;  // 0x0 (0x0)
	struct FPlane OutPlane;  // 0x80 (0x80)
	char pad_160_1 : 7;  // 0xA0 (0xA0)
	bool ReturnValue : 1;  // 0xA0 (0xA0)
	char pad_161[15];  // 0xA1 (0xA1)


}; 
 
 // Function Engine.KismetMathLibrary.Matrix_GetMatrixWithoutScale
struct FMatrix_GetMatrixWithoutScale
{
	struct FMatrix M;  // 0x0 (0x0)
	float Tolerance;  // 0x80 (0x80)
	char pad_132[12];  // 0x84 (0x84)
	struct FMatrix ReturnValue;  // 0x90 (0x90)


}; 
 
 // Function Engine.SkeletalMesh.GetNodeMappingData
struct FGetNodeMappingData
{
	struct TArray<struct UNodeMappingContainer*> ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Matrix_GetRotDeterminant
struct FMatrix_GetRotDeterminant
{
	struct FMatrix M;  // 0x0 (0x0)
	float ReturnValue;  // 0x80 (0x80)
	char pad_132[12];  // 0x84 (0x84)


}; 
 
 // Function Engine.KismetMathLibrary.Matrix_GetTransposeAdjoint
struct FMatrix_GetTransposeAdjoint
{
	struct FMatrix M;  // 0x0 (0x0)
	struct FMatrix ReturnValue;  // 0x80 (0x80)


}; 
 
 // Function Engine.KismetMathLibrary.Matrix_GetUnitAxes
struct FMatrix_GetUnitAxes
{
	struct FMatrix M;  // 0x0 (0x0)
	struct FVector X;  // 0x80 (0x80)
	struct FVector Y;  // 0x98 (0x98)
	struct FVector Z;  // 0xB0 (0xB0)
	char pad_200[8];  // 0xC8 (0xC8)


}; 
 
 // Function Engine.WorldPartitionBlueprintLibrary.UnloadActors
struct FUnloadActors
{
	struct TArray<struct FGuid> InActorsToLoad;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Matrix_GetUnitAxis
struct FMatrix_GetUnitAxis
{
	struct FMatrix M;  // 0x0 (0x0)
	enum class EAxis Axis;  // 0x80 (0x80)
	char pad_129[7];  // 0x81 (0x81)
	struct FVector ReturnValue;  // 0x88 (0x88)


}; 
 
 // Function Engine.KismetMathLibrary.Matrix_Mirror
struct FMatrix_Mirror
{
	struct FMatrix M;  // 0x0 (0x0)
	enum class EAxis MirrorAxis;  // 0x80 (0x80)
	enum class EAxis FlipAxis;  // 0x81 (0x81)
	char pad_130[14];  // 0x82 (0x82)
	struct FMatrix ReturnValue;  // 0x90 (0x90)


}; 
 
 // Function Engine.KismetMathLibrary.Matrix_ScaleTranslation
struct FMatrix_ScaleTranslation
{
	struct FMatrix M;  // 0x0 (0x0)
	struct FVector Scale3D;  // 0x80 (0x80)
	char pad_152[8];  // 0x98 (0x98)
	struct FMatrix ReturnValue;  // 0xA0 (0xA0)


}; 
 
 // Function Engine.KismetMathLibrary.Matrix_SetAxis
struct FMatrix_SetAxis
{
	struct FMatrix M;  // 0x0 (0x0)
	enum class EAxis Axis;  // 0x80 (0x80)
	char pad_129[7];  // 0x81 (0x81)
	struct FVector AxisVector;  // 0x88 (0x88)


}; 
 
 // Function Engine.KismetMathLibrary.Matrix_SetColumn
struct FMatrix_SetColumn
{
	struct FMatrix M;  // 0x0 (0x0)
	enum class EMatrixColumns column;  // 0x80 (0x80)
	char pad_129[7];  // 0x81 (0x81)
	struct FVector Value;  // 0x88 (0x88)


}; 
 
 // Function Engine.KismetMathLibrary.Matrix_SetOrigin
struct FMatrix_SetOrigin
{
	struct FMatrix M;  // 0x0 (0x0)
	struct FVector NewOrigin;  // 0x80 (0x80)
	char pad_152[8];  // 0x98 (0x98)


}; 
 
 // Function Engine.KismetMathLibrary.MedianOfIntArray
struct FMedianOfIntArray
{
	struct TArray<int32_t> IntArray;  // 0x0 (0x0)
	float MedianValue;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)


}; 
 
 // Function Engine.BlueprintTypeConversions.ConvertFPlane4fToFPlane4d
struct FConvertFPlane4fToFPlane4d
{
	int32_t InFromData;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.KismetMathLibrary.MinAreaRectangle
struct FMinAreaRectangle
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct TArray<struct FVector> InPoints;  // 0x8 (0x8)
	struct FVector SampleSurfaceNormal;  // 0x18 (0x18)
	struct FVector OutRectCenter;  // 0x30 (0x30)
	struct FRotator OutRectRotation;  // 0x48 (0x48)
	float OutRectLengthX;  // 0x60 (0x60)
	float OutRectLengthY;  // 0x64 (0x64)
	char pad_104_1 : 7;  // 0x68 (0x68)
	bool bDebugDraw : 1;  // 0x68 (0x68)
	char pad_105[7];  // 0x69 (0x69)


}; 
 
 // Function Engine.KismetMathLibrary.MinOfByteArray
struct FMinOfByteArray
{
	struct TArray<char> ByteArray;  // 0x0 (0x0)
	int32_t IndexOfMinValue;  // 0x10 (0x10)
	char MinValue;  // 0x14 (0x14)
	char pad_21[3];  // 0x15 (0x15)


}; 
 
 // Function Engine.KismetMathLibrary.Multiply_DoubleDouble
struct FMultiply_DoubleDouble
{
	double A;  // 0x0 (0x0)
	double B;  // 0x8 (0x8)
	double ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.Multiply_IntFloat
struct FMultiply_IntFloat
{
	int32_t A;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	double B;  // 0x8 (0x8)
	double ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.Multiply_IntInt
struct FMultiply_IntInt
{
	int32_t A;  // 0x0 (0x0)
	int32_t B;  // 0x4 (0x4)
	int32_t ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.Multiply_IntPointIntPoint
struct FMultiply_IntPointIntPoint
{
	struct FIntPoint A;  // 0x0 (0x0)
	struct FIntPoint B;  // 0x8 (0x8)
	struct FIntPoint ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.Multiply_LinearColorFloat
struct FMultiply_LinearColorFloat
{
	struct FLinearColor A;  // 0x0 (0x0)
	float B;  // 0x10 (0x10)
	struct FLinearColor ReturnValue;  // 0x14 (0x14)


}; 
 
 // Function Engine.KismetMathLibrary.Multiply_LinearColorLinearColor
struct FMultiply_LinearColorLinearColor
{
	struct FLinearColor A;  // 0x0 (0x0)
	struct FLinearColor B;  // 0x10 (0x10)
	struct FLinearColor ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetMathLibrary.Multiply_MatrixFloat
struct FMultiply_MatrixFloat
{
	struct FMatrix A;  // 0x0 (0x0)
	double B;  // 0x80 (0x80)
	char pad_136[8];  // 0x88 (0x88)
	struct FMatrix ReturnValue;  // 0x90 (0x90)


}; 
 
 // Function Engine.KismetMathLibrary.Multiply_QuatQuat
struct FMultiply_QuatQuat
{
	struct FQuat A;  // 0x0 (0x0)
	struct FQuat B;  // 0x20 (0x20)
	struct FQuat ReturnValue;  // 0x40 (0x40)


}; 
 
 // Function Engine.KismetMathLibrary.Multiply_Vector4Vector4
struct FMultiply_Vector4Vector4
{
	struct FVector4 A;  // 0x0 (0x0)
	struct FVector4 B;  // 0x20 (0x20)
	struct FVector4 ReturnValue;  // 0x40 (0x40)


}; 
 
 // Function Engine.KismetMathLibrary.Multiply_VectorFloat
struct FMultiply_VectorFloat
{
	struct FVector A;  // 0x0 (0x0)
	double B;  // 0x18 (0x18)
	struct FVector ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetMathLibrary.NormalizeToRange
struct FNormalizeToRange
{
	double Value;  // 0x0 (0x0)
	double RangeMin;  // 0x8 (0x8)
	double RangeMax;  // 0x10 (0x10)
	double ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetMathLibrary.NormalSafe2D
struct FNormalSafe2D
{
	struct FVector2D A;  // 0x0 (0x0)
	float Tolerance;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)
	struct FVector2D ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetMathLibrary.Not_Int64
struct FNot_Int64
{
	int64_t A;  // 0x0 (0x0)
	int64_t ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.NotEqual_DoubleDouble
struct FNotEqual_DoubleDouble
{
	double A;  // 0x0 (0x0)
	double B;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.KismetMathLibrary.NotEqual_Int64Int64
struct FNotEqual_Int64Int64
{
	int64_t A;  // 0x0 (0x0)
	int64_t B;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_Right
struct FVector_Right
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.NotEqual_LinearColorLinearColor
struct FNotEqual_LinearColorLinearColor
{
	struct FLinearColor A;  // 0x0 (0x0)
	struct FLinearColor B;  // 0x10 (0x10)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[3];  // 0x21 (0x21)


}; 
 
 // Function Engine.KismetMathLibrary.NotEqual_MatrixMatrix
struct FNotEqual_MatrixMatrix
{
	struct FMatrix A;  // 0x0 (0x0)
	struct FMatrix B;  // 0x80 (0x80)
	float Tolerance;  // 0x100 (0x100)
	char pad_260_1 : 7;  // 0x104 (0x104)
	bool ReturnValue : 1;  // 0x104 (0x104)
	char pad_261[11];  // 0x105 (0x105)


}; 
 
 // Function Engine.KismetMathLibrary.NotEqual_ObjectObject
struct FNotEqual_ObjectObject
{
	struct UObject* A;  // 0x0 (0x0)
	struct UObject* B;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.KismetMathLibrary.NotEqual_RotatorRotator
struct FNotEqual_RotatorRotator
{
	struct FRotator A;  // 0x0 (0x0)
	struct FRotator B;  // 0x18 (0x18)
	float ErrorTolerance;  // 0x30 (0x30)
	char pad_52_1 : 7;  // 0x34 (0x34)
	bool ReturnValue : 1;  // 0x34 (0x34)
	char pad_53[3];  // 0x35 (0x35)


}; 
 
 // Function Engine.KismetMathLibrary.NotEqual_Vector4Vector4
struct FNotEqual_Vector4Vector4
{
	struct FVector4 A;  // 0x0 (0x0)
	struct FVector4 B;  // 0x20 (0x20)
	float ErrorTolerance;  // 0x40 (0x40)
	char pad_68_1 : 7;  // 0x44 (0x44)
	bool ReturnValue : 1;  // 0x44 (0x44)
	char pad_69[11];  // 0x45 (0x45)


}; 
 
 // Function Engine.KismetMathLibrary.NotEqual_VectorVector
struct FNotEqual_VectorVector
{
	struct FVector A;  // 0x0 (0x0)
	struct FVector B;  // 0x18 (0x18)
	float ErrorTolerance;  // 0x30 (0x30)
	char pad_52_1 : 7;  // 0x34 (0x34)
	bool ReturnValue : 1;  // 0x34 (0x34)
	char pad_53[3];  // 0x35 (0x35)


}; 
 
 // Function Engine.KismetMathLibrary.NotEqualExactly_Vector4Vector4
struct FNotEqualExactly_Vector4Vector4
{
	struct FVector4 A;  // 0x0 (0x0)
	struct FVector4 B;  // 0x20 (0x20)
	char pad_64_1 : 7;  // 0x40 (0x40)
	bool ReturnValue : 1;  // 0x40 (0x40)
	char pad_65[15];  // 0x41 (0x41)


}; 
 
 // Function Engine.KismetMathLibrary.Now
struct FNow
{
	struct FDateTime ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Percent_ByteByte
struct FPercent_ByteByte
{
	char A;  // 0x0 (0x0)
	char B;  // 0x1 (0x1)
	char ReturnValue;  // 0x2 (0x2)


}; 
 
 // Function Engine.KismetMathLibrary.Percent_Int64Int64
struct FPercent_Int64Int64
{
	int64_t A;  // 0x0 (0x0)
	int64_t B;  // 0x8 (0x8)
	int64_t ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.Quat_AngularDistance
struct FQuat_AngularDistance
{
	struct FQuat A;  // 0x0 (0x0)
	struct FQuat B;  // 0x20 (0x20)
	float ReturnValue;  // 0x40 (0x40)
	char pad_68[12];  // 0x44 (0x44)


}; 
 
 // Function Engine.KismetMathLibrary.Quat_EnforceShortestArcWith
struct FQuat_EnforceShortestArcWith
{
	struct FQuat A;  // 0x0 (0x0)
	struct FQuat B;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetMathLibrary.Quat_Euler
struct FQuat_Euler
{
	struct FQuat Q;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x20 (0x20)
	char pad_56[8];  // 0x38 (0x38)


}; 
 
 // Function Engine.KismetMathLibrary.Quat_GetAngle
struct FQuat_GetAngle
{
	struct FQuat Q;  // 0x0 (0x0)
	float ReturnValue;  // 0x20 (0x20)
	char pad_36[12];  // 0x24 (0x24)


}; 
 
 // Function Engine.KismetMathLibrary.Quat_GetAxisX
struct FQuat_GetAxisX
{
	struct FQuat Q;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x20 (0x20)
	char pad_56[8];  // 0x38 (0x38)


}; 
 
 // Function Engine.KismetMathLibrary.Quat_GetAxisY
struct FQuat_GetAxisY
{
	struct FQuat Q;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x20 (0x20)
	char pad_56[8];  // 0x38 (0x38)


}; 
 
 // Function Engine.KismetMathLibrary.Quat_GetRotationAxis
struct FQuat_GetRotationAxis
{
	struct FQuat Q;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x20 (0x20)
	char pad_56[8];  // 0x38 (0x38)


}; 
 
 // Function Engine.KismetMathLibrary.Quat_IsFinite
struct FQuat_IsFinite
{
	struct FQuat Q;  // 0x0 (0x0)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[15];  // 0x21 (0x21)


}; 
 
 // Function Engine.KismetMathLibrary.Quat_IsNonFinite
struct FQuat_IsNonFinite
{
	struct FQuat Q;  // 0x0 (0x0)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[15];  // 0x21 (0x21)


}; 
 
 // Function Engine.KismetMathLibrary.Quat_Log
struct FQuat_Log
{
	struct FQuat Q;  // 0x0 (0x0)
	struct FQuat ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetMathLibrary.Quat_RotateVector
struct FQuat_RotateVector
{
	struct FQuat Q;  // 0x0 (0x0)
	struct FVector V;  // 0x20 (0x20)
	struct FVector ReturnValue;  // 0x38 (0x38)


}; 
 
 // Function Engine.KismetMathLibrary.Quat_SizeSquared
struct FQuat_SizeSquared
{
	struct FQuat Q;  // 0x0 (0x0)
	float ReturnValue;  // 0x20 (0x20)
	char pad_36[12];  // 0x24 (0x24)


}; 
 
 // Function Engine.KismetMathLibrary.Quat_VectorForward
struct FQuat_VectorForward
{
	struct FQuat Q;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x20 (0x20)
	char pad_56[8];  // 0x38 (0x38)


}; 
 
 // Function Engine.KismetMathLibrary.RandomBoolFromStream
struct FRandomBoolFromStream
{
	struct FRandomStream Stream;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.KismetMathLibrary.RandomFloat
struct FRandomFloat
{
	double ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.RandomInteger
struct FRandomInteger
{
	int32_t Max;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.KismetMathLibrary.RandomInteger64InRange
struct FRandomInteger64InRange
{
	int64_t Min;  // 0x0 (0x0)
	int64_t Max;  // 0x8 (0x8)
	int64_t ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.RandomIntegerInRange
struct FRandomIntegerInRange
{
	int32_t Min;  // 0x0 (0x0)
	int32_t Max;  // 0x4 (0x4)
	int32_t ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.Subtract_Vector4Vector4
struct FSubtract_Vector4Vector4
{
	struct FVector4 A;  // 0x0 (0x0)
	struct FVector4 B;  // 0x20 (0x20)
	struct FVector4 ReturnValue;  // 0x40 (0x40)


}; 
 
 // Function Engine.KismetMathLibrary.RandomPointInBoundingBox_Box
struct FRandomPointInBoundingBox_Box
{
	struct FBox Box;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x38 (0x38)


}; 
 
 // Function Engine.KismetMathLibrary.RandomPointInBoundingBoxFromStream_Box
struct FRandomPointInBoundingBoxFromStream_Box
{
	struct FBox Box;  // 0x0 (0x0)
	struct FRandomStream Stream;  // 0x38 (0x38)
	struct FVector ReturnValue;  // 0x40 (0x40)


}; 
 
 // Function Engine.BlueprintPlatformLibrary.GetAllowedDeviceOrientation
struct FGetAllowedDeviceOrientation
{
	enum class EScreenOrientation ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.VSize2DSquared
struct FVSize2DSquared
{
	struct FVector2D A;  // 0x0 (0x0)
	double ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.RandomRotator
struct FRandomRotator
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bRoll : 1;  // 0x0 (0x0)
	char pad_1[7];  // 0x1 (0x1)
	struct FRotator ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.RandomUnitVector
struct FRandomUnitVector
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.RandomUnitVectorInConeInDegrees
struct FRandomUnitVectorInConeInDegrees
{
	struct FVector ConeDir;  // 0x0 (0x0)
	float ConeHalfAngleInDegrees;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)
	struct FVector ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetMathLibrary.Subtract_QuatQuat
struct FSubtract_QuatQuat
{
	struct FQuat A;  // 0x0 (0x0)
	struct FQuat B;  // 0x20 (0x20)
	struct FQuat ReturnValue;  // 0x40 (0x40)


}; 
 
 // Function Engine.KismetMathLibrary.RandomUnitVectorInConeInRadiansFromStream
struct FRandomUnitVectorInConeInRadiansFromStream
{
	struct FVector ConeDir;  // 0x0 (0x0)
	float ConeHalfAngleInRadians;  // 0x18 (0x18)
	struct FRandomStream Stream;  // 0x1C (0x1C)
	char pad_36[4];  // 0x24 (0x24)
	struct FVector ReturnValue;  // 0x28 (0x28)


}; 
 
 // Function Engine.KismetMathLibrary.REase
struct FREase
{
	struct FRotator A;  // 0x0 (0x0)
	struct FRotator B;  // 0x18 (0x18)
	float Alpha;  // 0x30 (0x30)
	char pad_52_1 : 7;  // 0x34 (0x34)
	bool bShortestPath : 1;  // 0x34 (0x34)
	enum class EEasingFunc EasingFunc;  // 0x35 (0x35)
	char pad_54[2];  // 0x36 (0x36)
	float BlendExp;  // 0x38 (0x38)
	int32_t Steps;  // 0x3C (0x3C)
	struct FRotator ReturnValue;  // 0x40 (0x40)


}; 
 
 // Function Engine.KismetMathLibrary.ResetQuaternionSpringState
struct FResetQuaternionSpringState
{
	struct FQuaternionSpringState SpringState;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetStringLibrary.Conv_MatrixToString
struct FConv_MatrixToString
{
	struct FMatrix InMatrix;  // 0x0 (0x0)
	struct FString ReturnValue;  // 0x80 (0x80)


}; 
 
 // Function Engine.KismetMathLibrary.RGBLinearToHSV
struct FRGBLinearToHSV
{
	struct FLinearColor RGB;  // 0x0 (0x0)
	struct FLinearColor ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetStringLibrary.CullArray
struct FCullArray
{
	struct FString SourceString;  // 0x0 (0x0)
	struct TArray<struct FString> inArray;  // 0x10 (0x10)
	int32_t ReturnValue;  // 0x20 (0x20)
	char pad_36[4];  // 0x24 (0x24)


}; 
 
 // Function Engine.KismetMathLibrary.RInterpTo
struct FRInterpTo
{
	struct FRotator Current;  // 0x0 (0x0)
	struct FRotator Target;  // 0x18 (0x18)
	float DeltaTime;  // 0x30 (0x30)
	float InterpSpeed;  // 0x34 (0x34)
	struct FRotator ReturnValue;  // 0x38 (0x38)


}; 
 
 // Function Engine.KismetMathLibrary.RInterpTo_Constant
struct FRInterpTo_Constant
{
	struct FRotator Current;  // 0x0 (0x0)
	struct FRotator Target;  // 0x18 (0x18)
	float DeltaTime;  // 0x30 (0x30)
	float InterpSpeed;  // 0x34 (0x34)
	struct FRotator ReturnValue;  // 0x38 (0x38)


}; 
 
 // Function Engine.KismetMathLibrary.RLerp
struct FRLerp
{
	struct FRotator A;  // 0x0 (0x0)
	struct FRotator B;  // 0x18 (0x18)
	float Alpha;  // 0x30 (0x30)
	char pad_52_1 : 7;  // 0x34 (0x34)
	bool bShortestPath : 1;  // 0x34 (0x34)
	char pad_53[3];  // 0x35 (0x35)
	struct FRotator ReturnValue;  // 0x38 (0x38)


}; 
 
 // Function Engine.KismetMathLibrary.Round
struct FRound
{
	double A;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.KismetMathLibrary.SafeDivide
struct FSafeDivide
{
	double A;  // 0x0 (0x0)
	double B;  // 0x8 (0x8)
	double ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.SelectClass
struct FSelectClass
{
	UObject* A;  // 0x0 (0x0)
	UObject* B;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool bSelectA : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)
	UObject* ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetMathLibrary.SelectFloat
struct FSelectFloat
{
	double A;  // 0x0 (0x0)
	double B;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool bPickA : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)
	double ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetMathLibrary.SelectObject
struct FSelectObject
{
	struct UObject* A;  // 0x0 (0x0)
	struct UObject* B;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool bSelectA : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)
	struct UObject* ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetMathLibrary.SelectTransform
struct FSelectTransform
{
	struct FTransform A;  // 0x0 (0x0)
	struct FTransform B;  // 0x60 (0x60)
	char pad_192_1 : 7;  // 0xC0 (0xC0)
	bool bPickA : 1;  // 0xC0 (0xC0)
	char pad_193[15];  // 0xC1 (0xC1)
	struct FTransform ReturnValue;  // 0xD0 (0xD0)


}; 
 
 // Function Engine.KismetMathLibrary.SelectVector
struct FSelectVector
{
	struct FVector A;  // 0x0 (0x0)
	struct FVector B;  // 0x18 (0x18)
	char pad_48_1 : 7;  // 0x30 (0x30)
	bool bPickA : 1;  // 0x30 (0x30)
	char pad_49[7];  // 0x31 (0x31)
	struct FVector ReturnValue;  // 0x38 (0x38)


}; 
 
 // Function Engine.KismetMathLibrary.SetFloatSpringStateVelocity
struct FSetFloatSpringStateVelocity
{
	struct FFloatSpringState SpringState;  // 0x0 (0x0)
	float Velocity;  // 0xC (0xC)


}; 
 
 // Function Engine.KismetMathLibrary.SetRandomStreamSeed
struct FSetRandomStreamSeed
{
	struct FRandomStream Stream;  // 0x0 (0x0)
	int32_t NewSeed;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.TEase
struct FTEase
{
	struct FTransform A;  // 0x0 (0x0)
	struct FTransform B;  // 0x60 (0x60)
	float Alpha;  // 0xC0 (0xC0)
	enum class EEasingFunc EasingFunc;  // 0xC4 (0xC4)
	char pad_197[3];  // 0xC5 (0xC5)
	float BlendExp;  // 0xC8 (0xC8)
	int32_t Steps;  // 0xCC (0xCC)
	struct FTransform ReturnValue;  // 0xD0 (0xD0)


}; 
 
 // Function Engine.KismetMathLibrary.SignOfInteger
struct FSignOfInteger
{
	int32_t A;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.KismetMathLibrary.Spherical2DToUnitCartesian
struct FSpherical2DToUnitCartesian
{
	struct FVector2D A;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.Square
struct FSquare
{
	double A;  // 0x0 (0x0)
	double ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.Subtract_ByteByte
struct FSubtract_ByteByte
{
	char A;  // 0x0 (0x0)
	char B;  // 0x1 (0x1)
	char ReturnValue;  // 0x2 (0x2)


}; 
 
 // Function Engine.KismetMathLibrary.Subtract_DateTimeTimespan
struct FSubtract_DateTimeTimespan
{
	struct FDateTime A;  // 0x0 (0x0)
	struct FTimespan B;  // 0x8 (0x8)
	struct FDateTime ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.Subtract_DoubleDouble
struct FSubtract_DoubleDouble
{
	double A;  // 0x0 (0x0)
	double B;  // 0x8 (0x8)
	double ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.Subtract_IntInt
struct FSubtract_IntInt
{
	int32_t A;  // 0x0 (0x0)
	int32_t B;  // 0x4 (0x4)
	int32_t ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetMathLibrary.Subtract_IntPointIntPoint
struct FSubtract_IntPointIntPoint
{
	struct FIntPoint A;  // 0x0 (0x0)
	struct FIntPoint B;  // 0x8 (0x8)
	struct FIntPoint ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.Subtract_Vector2DFloat
struct FSubtract_Vector2DFloat
{
	struct FVector2D A;  // 0x0 (0x0)
	double B;  // 0x10 (0x10)
	struct FVector2D ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetMathLibrary.Subtract_VectorFloat
struct FSubtract_VectorFloat
{
	struct FVector A;  // 0x0 (0x0)
	double B;  // 0x18 (0x18)
	struct FVector ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetMathLibrary.TimespanFromString
struct FTimespanFromString
{
	struct FString TimespanString;  // 0x0 (0x0)
	struct FTimespan Result;  // 0x10 (0x10)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool ReturnValue : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.KismetMathLibrary.TimespanMinValue
struct FTimespanMinValue
{
	struct FTimespan ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.TLerp
struct FTLerp
{
	struct FTransform A;  // 0x0 (0x0)
	struct FTransform B;  // 0x60 (0x60)
	float Alpha;  // 0xC0 (0xC0)
	enum class ELerpInterpolationMode InterpMode;  // 0xC4 (0xC4)
	char pad_197[11];  // 0xC5 (0xC5)
	struct FTransform ReturnValue;  // 0xD0 (0xD0)


}; 
 
 // Function Engine.KismetMathLibrary.Today
struct FToday
{
	struct FDateTime ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.RuntimeVirtualTexture.GetTileBorderSize
struct FGetTileBorderSize
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.TransformLocation
struct FTransformLocation
{
	struct FTransform T;  // 0x0 (0x0)
	struct FVector Location;  // 0x60 (0x60)
	struct FVector ReturnValue;  // 0x78 (0x78)


}; 
 
 // Function Engine.KismetMathLibrary.TransformVector4
struct FTransformVector4
{
	struct FMatrix Matrix;  // 0x0 (0x0)
	struct FVector4 Vec4;  // 0x80 (0x80)
	struct FVector4 ReturnValue;  // 0xA0 (0xA0)


}; 
 
 // Function Engine.KismetMathLibrary.Vector2D_One
struct FVector2D_One
{
	struct FVector2D ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Vector2DInterpTo_Constant
struct FVector2DInterpTo_Constant
{
	struct FVector2D Current;  // 0x0 (0x0)
	struct FVector2D Target;  // 0x10 (0x10)
	float DeltaTime;  // 0x20 (0x20)
	float InterpSpeed;  // 0x24 (0x24)
	struct FVector2D ReturnValue;  // 0x28 (0x28)


}; 
 
 // Function Engine.KismetMathLibrary.Vector4_Assign
struct FVector4_Assign
{
	struct FVector4 A;  // 0x0 (0x0)
	struct FVector4 InVector;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetMathLibrary.Vector4_CrossProduct3
struct FVector4_CrossProduct3
{
	struct FVector4 A;  // 0x0 (0x0)
	struct FVector4 B;  // 0x20 (0x20)
	struct FVector4 ReturnValue;  // 0x40 (0x40)


}; 
 
 // Function Engine.KismetMathLibrary.Vector4_DotProduct3
struct FVector4_DotProduct3
{
	struct FVector4 A;  // 0x0 (0x0)
	struct FVector4 B;  // 0x20 (0x20)
	double ReturnValue;  // 0x40 (0x40)
	char pad_72[8];  // 0x48 (0x48)


}; 
 
 // Function Engine.KismetMathLibrary.Vector4_MirrorByVector3
struct FVector4_MirrorByVector3
{
	struct FVector4 Direction;  // 0x0 (0x0)
	struct FVector4 SurfaceNormal;  // 0x20 (0x20)
	struct FVector4 ReturnValue;  // 0x40 (0x40)


}; 
 
 // Function Engine.KismetMathLibrary.Vector4_Normal3
struct FVector4_Normal3
{
	struct FVector4 A;  // 0x0 (0x0)
	float Tolerance;  // 0x20 (0x20)
	char pad_36[12];  // 0x24 (0x24)
	struct FVector4 ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.KismetMathLibrary.Vector4_Size
struct FVector4_Size
{
	struct FVector4 A;  // 0x0 (0x0)
	double ReturnValue;  // 0x20 (0x20)
	char pad_40[8];  // 0x28 (0x28)


}; 
 
 // Function Engine.KismetMathLibrary.Vector4_SizeSquared3
struct FVector4_SizeSquared3
{
	struct FVector4 A;  // 0x0 (0x0)
	double ReturnValue;  // 0x20 (0x20)
	char pad_40[8];  // 0x28 (0x28)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_Assign
struct FVector_Assign
{
	struct FVector A;  // 0x0 (0x0)
	struct FVector InVector;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_Backward
struct FVector_Backward
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_ClampSizeMax
struct FVector_ClampSizeMax
{
	struct FVector A;  // 0x0 (0x0)
	double Max;  // 0x18 (0x18)
	struct FVector ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_Distance
struct FVector_Distance
{
	struct FVector v1;  // 0x0 (0x0)
	struct FVector v2;  // 0x18 (0x18)
	double ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_Distance2DSquared
struct FVector_Distance2DSquared
{
	struct FVector v1;  // 0x0 (0x0)
	struct FVector v2;  // 0x18 (0x18)
	double ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_Down
struct FVector_Down
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_Forward
struct FVector_Forward
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_GetSignVector
struct FVector_GetSignVector
{
	struct FVector A;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_IsNormal
struct FVector_IsNormal
{
	struct FVector A;  // 0x0 (0x0)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool ReturnValue : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_IsUniform
struct FVector_IsUniform
{
	struct FVector A;  // 0x0 (0x0)
	float Tolerance;  // 0x18 (0x18)
	char pad_28_1 : 7;  // 0x1C (0x1C)
	bool ReturnValue : 1;  // 0x1C (0x1C)
	char pad_29[3];  // 0x1D (0x1D)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_MirrorByPlane
struct FVector_MirrorByPlane
{
	struct FVector A;  // 0x0 (0x0)
	char pad_24[8];  // 0x18 (0x18)
	struct FPlane InPlane;  // 0x20 (0x20)
	struct FVector ReturnValue;  // 0x40 (0x40)
	char pad_88[8];  // 0x58 (0x58)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_Normal2D
struct FVector_Normal2D
{
	struct FVector A;  // 0x0 (0x0)
	float Tolerance;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)
	struct FVector ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_NormalUnsafe
struct FVector_NormalUnsafe
{
	struct FVector A;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_Reciprocal
struct FVector_Reciprocal
{
	struct FVector A;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_ToRadians
struct FVector_ToRadians
{
	struct FVector A;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_Up
struct FVector_Up
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.Vector_Zero
struct FVector_Zero
{
	struct FVector ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetMathLibrary.VectorSpringInterp
struct FVectorSpringInterp
{
	struct FVector Current;  // 0x0 (0x0)
	struct FVector Target;  // 0x18 (0x18)
	struct FVectorSpringState SpringState;  // 0x30 (0x30)
	float Stiffness;  // 0x68 (0x68)
	float CriticalDampingFactor;  // 0x6C (0x6C)
	float DeltaTime;  // 0x70 (0x70)
	float Mass;  // 0x74 (0x74)
	float TargetVelocityAmount;  // 0x78 (0x78)
	char pad_124_1 : 7;  // 0x7C (0x7C)
	bool bClamp : 1;  // 0x7C (0x7C)
	char pad_125[3];  // 0x7D (0x7D)
	struct FVector MinValue;  // 0x80 (0x80)
	struct FVector MaxValue;  // 0x98 (0x98)
	char pad_176_1 : 7;  // 0xB0 (0xB0)
	bool bInitializeFromTarget : 1;  // 0xB0 (0xB0)
	char pad_177[7];  // 0xB1 (0xB1)
	struct FVector ReturnValue;  // 0xB8 (0xB8)


}; 
 
 // Function Engine.KismetMathLibrary.VInterpTo
struct FVInterpTo
{
	struct FVector Current;  // 0x0 (0x0)
	struct FVector Target;  // 0x18 (0x18)
	float DeltaTime;  // 0x30 (0x30)
	float InterpSpeed;  // 0x34 (0x34)
	struct FVector ReturnValue;  // 0x38 (0x38)


}; 
 
 // Function Engine.KismetMathLibrary.VInterpTo_Constant
struct FVInterpTo_Constant
{
	struct FVector Current;  // 0x0 (0x0)
	struct FVector Target;  // 0x18 (0x18)
	float DeltaTime;  // 0x30 (0x30)
	float InterpSpeed;  // 0x34 (0x34)
	struct FVector ReturnValue;  // 0x38 (0x38)


}; 
 
 // Function Engine.KismetMathLibrary.VSize2D
struct FVSize2D
{
	struct FVector2D A;  // 0x0 (0x0)
	double ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetMathLibrary.WeightedMovingAverage_FRotator
struct FWeightedMovingAverage_FRotator
{
	struct FRotator CurrentSample;  // 0x0 (0x0)
	struct FRotator PreviousSample;  // 0x18 (0x18)
	float Weight;  // 0x30 (0x30)
	char pad_52[4];  // 0x34 (0x34)
	struct FRotator ReturnValue;  // 0x38 (0x38)


}; 
 
 // Function Engine.KismetNodeHelperLibrary.ClearAllBits
struct FClearAllBits
{
	int32_t Data;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetNodeHelperLibrary.ClearBit
struct FClearBit
{
	int32_t Data;  // 0x0 (0x0)
	int32_t Index;  // 0x4 (0x4)


}; 
 
 // Function Engine.KismetNodeHelperLibrary.GetEnumeratorValueFromIndex
struct FGetEnumeratorValueFromIndex
{
	struct UEnum* Enum;  // 0x0 (0x0)
	char EnumeratorIndex;  // 0x8 (0x8)
	char ReturnValue;  // 0x9 (0x9)
	char pad_10[6];  // 0xA (0xA)


}; 
 
 // Function Engine.KismetNodeHelperLibrary.GetFirstUnmarkedBit
struct FGetFirstUnmarkedBit
{
	int32_t Data;  // 0x0 (0x0)
	int32_t StartIdx;  // 0x4 (0x4)
	int32_t NumBits;  // 0x8 (0x8)
	int32_t ReturnValue;  // 0xC (0xC)


}; 
 
 // Function Engine.BlueprintPathsLibrary.GameDevelopersDir
struct FGameDevelopersDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetNodeHelperLibrary.GetUnmarkedBit
struct FGetUnmarkedBit
{
	int32_t Data;  // 0x0 (0x0)
	int32_t StartIdx;  // 0x4 (0x4)
	int32_t NumBits;  // 0x8 (0x8)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bRandom : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)
	int32_t ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetNodeHelperLibrary.HasUnmarkedBit
struct FHasUnmarkedBit
{
	int32_t Data;  // 0x0 (0x0)
	int32_t NumBits;  // 0x4 (0x4)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.KismetRenderingLibrary.ClearRenderTarget2D
struct FClearRenderTarget2D
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct UTextureRenderTarget2D* TextureRenderTarget;  // 0x8 (0x8)
	struct FLinearColor ClearColor;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetRenderingLibrary.CreateRenderTarget2D
struct FCreateRenderTarget2D
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	int32_t Width;  // 0x8 (0x8)
	int32_t Height;  // 0xC (0xC)
	enum class ETextureRenderTargetFormat Format;  // 0x10 (0x10)
	char pad_17[3];  // 0x11 (0x11)
	struct FLinearColor ClearColor;  // 0x14 (0x14)
	char pad_36_1 : 7;  // 0x24 (0x24)
	bool bAutoGenerateMipMaps : 1;  // 0x24 (0x24)
	char pad_37[3];  // 0x25 (0x25)
	struct UTextureRenderTarget2D* ReturnValue;  // 0x28 (0x28)


}; 
 
 // Function Engine.KismetRenderingLibrary.CreateRenderTargetVolume
struct FCreateRenderTargetVolume
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	int32_t Width;  // 0x8 (0x8)
	int32_t Height;  // 0xC (0xC)
	int32_t Depth;  // 0x10 (0x10)
	enum class ETextureRenderTargetFormat Format;  // 0x14 (0x14)
	char pad_21[3];  // 0x15 (0x15)
	struct FLinearColor ClearColor;  // 0x18 (0x18)
	char pad_40_1 : 7;  // 0x28 (0x28)
	bool bAutoGenerateMipMaps : 1;  // 0x28 (0x28)
	char pad_41[7];  // 0x29 (0x29)
	struct UTextureRenderTargetVolume* ReturnValue;  // 0x30 (0x30)


}; 
 
 // Function Engine.KismetRenderingLibrary.DrawMaterialToRenderTarget
struct FDrawMaterialToRenderTarget
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct UTextureRenderTarget2D* TextureRenderTarget;  // 0x8 (0x8)
	struct UMaterialInterface* Material;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetRenderingLibrary.EndDrawCanvasToRenderTarget
struct FEndDrawCanvasToRenderTarget
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FDrawToRenderTargetContext Context;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetRenderingLibrary.ExportTexture2D
struct FExportTexture2D
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct UTexture2D* Texture;  // 0x8 (0x8)
	struct FString FilePath;  // 0x10 (0x10)
	struct FString Filename;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetRenderingLibrary.ImportFileAsTexture2D
struct FImportFileAsTexture2D
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FString Filename;  // 0x8 (0x8)
	struct UTexture2D* ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetRenderingLibrary.ReadRenderTarget
struct FReadRenderTarget
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct UTextureRenderTarget2D* TextureRenderTarget;  // 0x8 (0x8)
	struct TArray<struct FColor> OutSamples;  // 0x10 (0x10)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool bNormalize : 1;  // 0x20 (0x20)
	char pad_33_1 : 7;  // 0x21 (0x21)
	bool ReturnValue : 1;  // 0x21 (0x21)
	char pad_34[6];  // 0x22 (0x22)


}; 
 
 // Function Engine.KismetRenderingLibrary.ReleaseRenderTarget2D
struct FReleaseRenderTarget2D
{
	struct UTextureRenderTarget2D* TextureRenderTarget;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetRenderingLibrary.ResizeRenderTarget2D
struct FResizeRenderTarget2D
{
	struct UTextureRenderTarget2D* TextureRenderTarget;  // 0x0 (0x0)
	int32_t Width;  // 0x8 (0x8)
	int32_t Height;  // 0xC (0xC)


}; 
 
 // Function Engine.KismetStringLibrary.BuildString_Color
struct FBuildString_Color
{
	struct FString AppendTo;  // 0x0 (0x0)
	struct FString Prefix;  // 0x10 (0x10)
	struct FLinearColor InColor;  // 0x20 (0x20)
	struct FString Suffix;  // 0x30 (0x30)
	struct FString ReturnValue;  // 0x40 (0x40)


}; 
 
 // Function Engine.KismetStringLibrary.BuildString_IntVector
struct FBuildString_IntVector
{
	struct FString AppendTo;  // 0x0 (0x0)
	struct FString Prefix;  // 0x10 (0x10)
	struct FIntVector InIntVector;  // 0x20 (0x20)
	char pad_44[4];  // 0x2C (0x2C)
	struct FString Suffix;  // 0x30 (0x30)
	struct FString ReturnValue;  // 0x40 (0x40)


}; 
 
 // Function Engine.KismetStringLibrary.BuildString_Object
struct FBuildString_Object
{
	struct FString AppendTo;  // 0x0 (0x0)
	struct FString Prefix;  // 0x10 (0x10)
	struct UObject* InObj;  // 0x20 (0x20)
	struct FString Suffix;  // 0x28 (0x28)
	struct FString ReturnValue;  // 0x38 (0x38)


}; 
 
 // Function Engine.KismetStringLibrary.BuildString_Vector
struct FBuildString_Vector
{
	struct FString AppendTo;  // 0x0 (0x0)
	struct FString Prefix;  // 0x10 (0x10)
	struct FVector InVector;  // 0x20 (0x20)
	struct FString Suffix;  // 0x38 (0x38)
	struct FString ReturnValue;  // 0x48 (0x48)


}; 
 
 // Function Engine.KismetStringLibrary.BuildString_Vector2d
struct FBuildString_Vector2d
{
	struct FString AppendTo;  // 0x0 (0x0)
	struct FString Prefix;  // 0x10 (0x10)
	struct FVector2D InVector2D;  // 0x20 (0x20)
	struct FString Suffix;  // 0x30 (0x30)
	struct FString ReturnValue;  // 0x40 (0x40)


}; 
 
 // Function Engine.KismetStringLibrary.Contains
struct FContains
{
	struct FString SearchIn;  // 0x0 (0x0)
	struct FString Substring;  // 0x10 (0x10)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool bUseCase : 1;  // 0x20 (0x20)
	char pad_33_1 : 7;  // 0x21 (0x21)
	bool bSearchFromEnd : 1;  // 0x21 (0x21)
	char pad_34_1 : 7;  // 0x22 (0x22)
	bool ReturnValue : 1;  // 0x22 (0x22)
	char pad_35[5];  // 0x23 (0x23)


}; 
 
 // Function Engine.KismetStringLibrary.Conv_BoolToString
struct FConv_BoolToString
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool InBool : 1;  // 0x0 (0x0)
	char pad_1[7];  // 0x1 (0x1)
	struct FString ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetStringLibrary.Conv_ByteToString
struct FConv_ByteToString
{
	char InByte;  // 0x0 (0x0)
	char pad_1[7];  // 0x1 (0x1)
	struct FString ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetStringLibrary.Conv_ColorToString
struct FConv_ColorToString
{
	struct FLinearColor InColor;  // 0x0 (0x0)
	struct FString ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetStringLibrary.Conv_DoubleToString
struct FConv_DoubleToString
{
	double InDouble;  // 0x0 (0x0)
	struct FString ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetStringLibrary.Conv_Int64ToString
struct FConv_Int64ToString
{
	int64_t inInt;  // 0x0 (0x0)
	struct FString ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.SoundSubmix.StopRecordingOutput
struct FStopRecordingOutput
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	uint8_t ExportType;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)
	struct FString Name;  // 0x10 (0x10)
	struct FString Path;  // 0x20 (0x20)
	struct USoundWave* ExistingSoundWaveToOverwrite;  // 0x30 (0x30)


}; 
 
 // Function Engine.KismetStringLibrary.Conv_IntToString
struct FConv_IntToString
{
	int32_t inInt;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FString ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetStringLibrary.Conv_IntVectorToString
struct FConv_IntVectorToString
{
	struct FIntVector InIntVec;  // 0x0 (0x0)
	char pad_12[4];  // 0xC (0xC)
	struct FString ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetStringLibrary.Conv_PlatformUserIdToString
struct FConv_PlatformUserIdToString
{
	struct FPlatformUserId InPlatformUserId;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FString ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetStringLibrary.Conv_RotatorToString
struct FConv_RotatorToString
{
	struct FRotator InRot;  // 0x0 (0x0)
	struct FString ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetStringLibrary.Conv_StringToColor
struct FConv_StringToColor
{
	struct FString InString;  // 0x0 (0x0)
	struct FLinearColor OutConvertedColor;  // 0x10 (0x10)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool OutIsValid : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.KismetStringLibrary.Conv_StringToDouble
struct FConv_StringToDouble
{
	struct FString InString;  // 0x0 (0x0)
	double ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetStringLibrary.Conv_StringToInt
struct FConv_StringToInt
{
	struct FString InString;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)


}; 
 
 // Function Engine.KismetStringLibrary.Conv_StringToInt64
struct FConv_StringToInt64
{
	struct FString InString;  // 0x0 (0x0)
	int64_t ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetStringLibrary.Conv_StringToName
struct FConv_StringToName
{
	struct FString InString;  // 0x0 (0x0)
	struct FName ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetStringLibrary.Conv_StringToRotator
struct FConv_StringToRotator
{
	struct FString InString;  // 0x0 (0x0)
	struct FRotator OutConvertedRotator;  // 0x10 (0x10)
	char pad_40_1 : 7;  // 0x28 (0x28)
	bool OutIsValid : 1;  // 0x28 (0x28)
	char pad_41[7];  // 0x29 (0x29)


}; 
 
 // Function Engine.KismetStringLibrary.Conv_StringToVector
struct FConv_StringToVector
{
	struct FString InString;  // 0x0 (0x0)
	struct FVector OutConvertedVector;  // 0x10 (0x10)
	char pad_40_1 : 7;  // 0x28 (0x28)
	bool OutIsValid : 1;  // 0x28 (0x28)
	char pad_41[7];  // 0x29 (0x29)


}; 
 
 // Function Engine.KismetStringLibrary.Conv_StringToVector3f
struct FConv_StringToVector3f
{
	struct FString InString;  // 0x0 (0x0)
	struct FVector3f OutConvertedVector;  // 0x10 (0x10)
	char pad_28_1 : 7;  // 0x1C (0x1C)
	bool OutIsValid : 1;  // 0x1C (0x1C)
	char pad_29[3];  // 0x1D (0x1D)


}; 
 
 // Function Engine.KismetStringLibrary.Conv_TransformToString
struct FConv_TransformToString
{
	struct FTransform InTrans;  // 0x0 (0x0)
	struct FString ReturnValue;  // 0x60 (0x60)


}; 
 
 // Function Engine.KismetStringLibrary.Conv_Vector3fToString
struct FConv_Vector3fToString
{
	struct FVector3f InVec;  // 0x0 (0x0)
	char pad_12[4];  // 0xC (0xC)
	struct FString ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetStringLibrary.Conv_VectorToString
struct FConv_VectorToString
{
	struct FVector InVec;  // 0x0 (0x0)
	struct FString ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetStringLibrary.EndsWith
struct FEndsWith
{
	struct FString SourceString;  // 0x0 (0x0)
	struct FString InSuffix;  // 0x10 (0x10)
	enum class ESearchCase SearchCase;  // 0x20 (0x20)
	char pad_33_1 : 7;  // 0x21 (0x21)
	bool ReturnValue : 1;  // 0x21 (0x21)
	char pad_34[6];  // 0x22 (0x22)


}; 
 
 // Function Engine.KismetStringLibrary.EqualEqual_StriStri
struct FEqualEqual_StriStri
{
	struct FString A;  // 0x0 (0x0)
	struct FString B;  // 0x10 (0x10)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.ConstraintInstanceBlueprintLibrary.SetAngularSoftSwingLimitParams
struct FSetAngularSoftSwingLimitParams
{
	struct FConstraintInstanceAccessor Accessor;  // 0x0 (0x0)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bSoftSwingLimit : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)
	float SwingLimitStiffness;  // 0x10 (0x10)
	float SwingLimitDamping;  // 0x14 (0x14)
	float SwingLimitRestitution;  // 0x18 (0x18)
	float SwingLimitContactDistance;  // 0x1C (0x1C)


}; 
 
 // Function Engine.KismetStringLibrary.EqualEqual_StrStr
struct FEqualEqual_StrStr
{
	struct FString A;  // 0x0 (0x0)
	struct FString B;  // 0x10 (0x10)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.KismetStringLibrary.GetSubstring
struct FGetSubstring
{
	struct FString SourceString;  // 0x0 (0x0)
	int32_t StartIndex;  // 0x10 (0x10)
	int32_t Length;  // 0x14 (0x14)
	struct FString ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetStringLibrary.IsNumeric
struct FIsNumeric
{
	struct FString SourceString;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.KismetStringLibrary.JoinStringArray
struct FJoinStringArray
{
	struct TArray<struct FString> SourceArray;  // 0x0 (0x0)
	struct FString Separator;  // 0x10 (0x10)
	struct FString ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.KismetStringLibrary.Left
struct FLeft
{
	struct FString SourceString;  // 0x0 (0x0)
	int32_t Count;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)
	struct FString ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetStringLibrary.LeftChop
struct FLeftChop
{
	struct FString SourceString;  // 0x0 (0x0)
	int32_t Count;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)
	struct FString ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetStringLibrary.Len
struct FLen
{
	struct FString S;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)


}; 
 
 // Function Engine.SkeletalMesh.GetMorphTargetsPtrConv
struct FGetMorphTargetsPtrConv
{
	struct TArray<struct UMorphTarget*> ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetStringLibrary.Mid
struct FMid
{
	struct FString SourceString;  // 0x0 (0x0)
	int32_t Start;  // 0x10 (0x10)
	int32_t Count;  // 0x14 (0x14)
	struct FString ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetStringLibrary.NotEqual_StriStri
struct FNotEqual_StriStri
{
	struct FString A;  // 0x0 (0x0)
	struct FString B;  // 0x10 (0x10)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.BlueprintPathsLibrary.VideoCaptureDir
struct FVideoCaptureDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.KismetStringLibrary.NotEqual_StrStr
struct FNotEqual_StrStr
{
	struct FString A;  // 0x0 (0x0)
	struct FString B;  // 0x10 (0x10)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.KismetStringLibrary.ParseIntoArray
struct FParseIntoArray
{
	struct FString SourceString;  // 0x0 (0x0)
	struct FString Delimiter;  // 0x10 (0x10)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool CullEmptyStrings : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)
	struct TArray<struct FString> ReturnValue;  // 0x28 (0x28)


}; 
 
 // Function Engine.KismetStringLibrary.Replace
struct FReplace
{
	struct FString SourceString;  // 0x0 (0x0)
	struct FString From;  // 0x10 (0x10)
	struct FString To;  // 0x20 (0x20)
	enum class ESearchCase SearchCase;  // 0x30 (0x30)
	char pad_49[7];  // 0x31 (0x31)
	struct FString ReturnValue;  // 0x38 (0x38)


}; 
 
 // Function Engine.KismetStringLibrary.ReplaceInline
struct FReplaceInline
{
	struct FString SourceString;  // 0x0 (0x0)
	struct FString SearchText;  // 0x10 (0x10)
	struct FString ReplacementText;  // 0x20 (0x20)
	enum class ESearchCase SearchCase;  // 0x30 (0x30)
	char pad_49[3];  // 0x31 (0x31)
	int32_t ReturnValue;  // 0x34 (0x34)


}; 
 
 // Function Engine.BlueprintPathsLibrary.Split
struct FSplit
{
	struct FString InPath;  // 0x0 (0x0)
	struct FString PathPart;  // 0x10 (0x10)
	struct FString FilenamePart;  // 0x20 (0x20)
	struct FString ExtensionPart;  // 0x30 (0x30)


}; 
 
 // Function Engine.KismetStringLibrary.StartsWith
struct FStartsWith
{
	struct FString SourceString;  // 0x0 (0x0)
	struct FString InPrefix;  // 0x10 (0x10)
	enum class ESearchCase SearchCase;  // 0x20 (0x20)
	char pad_33_1 : 7;  // 0x21 (0x21)
	bool ReturnValue : 1;  // 0x21 (0x21)
	char pad_34[6];  // 0x22 (0x22)


}; 
 
 // Function Engine.KismetStringLibrary.TimeSecondsToString
struct FTimeSecondsToString
{
	float InSeconds;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct FString ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.KismetStringLibrary.ToLower
struct FToLower
{
	struct FString SourceString;  // 0x0 (0x0)
	struct FString ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetStringLibrary.ToUpper
struct FToUpper
{
	struct FString SourceString;  // 0x0 (0x0)
	struct FString ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetStringLibrary.Trim
struct FTrim
{
	struct FString SourceString;  // 0x0 (0x0)
	struct FString ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetStringLibrary.TrimTrailing
struct FTrimTrailing
{
	struct FString SourceString;  // 0x0 (0x0)
	struct FString ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.KismetStringTableLibrary.GetTableEntrySourceString
struct FGetTableEntrySourceString
{
	struct FName TableId;  // 0x0 (0x0)
	struct FString Key;  // 0x8 (0x8)
	struct FString ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.KismetStringTableLibrary.IsRegisteredTableEntry
struct FIsRegisteredTableEntry
{
	struct FName TableId;  // 0x0 (0x0)
	struct FString Key;  // 0x8 (0x8)
	char pad_24_1 : 7;  // 0x18 (0x18)
	bool ReturnValue : 1;  // 0x18 (0x18)
	char pad_25[7];  // 0x19 (0x19)


}; 
 
 // Function Engine.KismetStringTableLibrary.IsRegisteredTableId
struct FIsRegisteredTableId
{
	struct FName TableId;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.BlueprintPathsLibrary.CollapseRelativeDirectories
struct FCollapseRelativeDirectories
{
	struct FString InPath;  // 0x0 (0x0)
	struct FString OutPath;  // 0x10 (0x10)
	char pad_32_1 : 7;  // 0x20 (0x20)
	bool ReturnValue : 1;  // 0x20 (0x20)
	char pad_33[7];  // 0x21 (0x21)


}; 
 
 // Function Engine.BlueprintPathsLibrary.AutomationDir
struct FAutomationDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPathsLibrary.AutomationLogDir
struct FAutomationLogDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPathsLibrary.BugItDir
struct FBugItDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPathsLibrary.Combine
struct FCombine
{
	struct TArray<struct FString> InPaths;  // 0x0 (0x0)
	struct FString ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.BlueprintPathsLibrary.ConvertFromSandboxPath
struct FConvertFromSandboxPath
{
	struct FString InPath;  // 0x0 (0x0)
	struct FString InSandboxName;  // 0x10 (0x10)
	struct FString ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.BlueprintPathsLibrary.ConvertRelativePathToFull
struct FConvertRelativePathToFull
{
	struct FString InPath;  // 0x0 (0x0)
	struct FString InBasePath;  // 0x10 (0x10)
	struct FString ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.BlueprintPathsLibrary.ConvertToSandboxPath
struct FConvertToSandboxPath
{
	struct FString InPath;  // 0x0 (0x0)
	struct FString InSandboxName;  // 0x10 (0x10)
	struct FString ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.BlueprintPathsLibrary.DiffDir
struct FDiffDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPathsLibrary.EngineConfigDir
struct FEngineConfigDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPathsLibrary.EngineDir
struct FEngineDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPathsLibrary.EngineUserDir
struct FEngineUserDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPathsLibrary.EngineVersionAgnosticUserDir
struct FEngineVersionAgnosticUserDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPathsLibrary.EnterpriseDir
struct FEnterpriseDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPathsLibrary.FeaturePackDir
struct FFeaturePackDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPathsLibrary.FileExists
struct FFileExists
{
	struct FString InPath;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.BlueprintPathsLibrary.GameAgnosticSavedDir
struct FGameAgnosticSavedDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPathsLibrary.GameSourceDir
struct FGameSourceDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPathsLibrary.GameUserDeveloperDir
struct FGameUserDeveloperDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPathsLibrary.GetCleanFilename
struct FGetCleanFilename
{
	struct FString InPath;  // 0x0 (0x0)
	struct FString ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.BlueprintPathsLibrary.GetEngineLocalizationPaths
struct FGetEngineLocalizationPaths
{
	struct TArray<struct FString> ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPathsLibrary.GetExtension
struct FGetExtension
{
	struct FString InPath;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool bIncludeDot : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)
	struct FString ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.BlueprintPathsLibrary.GetInvalidFileSystemChars
struct FGetInvalidFileSystemChars
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPathsLibrary.GetPath
struct FGetPath
{
	struct FString InPath;  // 0x0 (0x0)
	struct FString ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.BlueprintPathsLibrary.GetProjectFilePath
struct FGetProjectFilePath
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPathsLibrary.GetPropertyNameLocalizationPaths
struct FGetPropertyNameLocalizationPaths
{
	struct TArray<struct FString> ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPathsLibrary.GetToolTipLocalizationPaths
struct FGetToolTipLocalizationPaths
{
	struct TArray<struct FString> ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPathsLibrary.ProjectUserDir
struct FProjectUserDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPathsLibrary.HasProjectPersistentDownloadDir
struct FHasProjectPersistentDownloadDir
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPathsLibrary.IsDrive
struct FIsDrive
{
	struct FString InPath;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.BlueprintPathsLibrary.IsProjectFilePathSet
struct FIsProjectFilePathSet
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPathsLibrary.IsRelative
struct FIsRelative
{
	struct FString InPath;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.BlueprintPathsLibrary.IsRestrictedPath
struct FIsRestrictedPath
{
	struct FString InPath;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.BlueprintPathsLibrary.LaunchDir
struct FLaunchDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPathsLibrary.MakePathRelativeTo
struct FMakePathRelativeTo
{
	struct FString InPath;  // 0x0 (0x0)
	struct FString InRelativeTo;  // 0x10 (0x10)
	struct FString OutPath;  // 0x20 (0x20)
	char pad_48_1 : 7;  // 0x30 (0x30)
	bool ReturnValue : 1;  // 0x30 (0x30)
	char pad_49[7];  // 0x31 (0x31)


}; 
 
 // Function Engine.BlueprintPathsLibrary.MakeStandardFilename
struct FMakeStandardFilename
{
	struct FString InPath;  // 0x0 (0x0)
	struct FString OutPath;  // 0x10 (0x10)


}; 
 
 // Function Engine.BlueprintPathsLibrary.MakeValidFileName
struct FMakeValidFileName
{
	struct FString InString;  // 0x0 (0x0)
	struct FString InReplacementChar;  // 0x10 (0x10)
	struct FString ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.BlueprintPathsLibrary.NormalizeDirectoryName
struct FNormalizeDirectoryName
{
	struct FString InPath;  // 0x0 (0x0)
	struct FString OutPath;  // 0x10 (0x10)


}; 
 
 // Function Engine.BlueprintPathsLibrary.ProjectContentDir
struct FProjectContentDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PhysicsConstraintComponent.SetAngularTwistLimit
struct FSetAngularTwistLimit
{
	enum class EAngularConstraintMotion ConstraintType;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	float TwistLimitAngle;  // 0x4 (0x4)


}; 
 
 // Function Engine.BlueprintPathsLibrary.ProjectDir
struct FProjectDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPathsLibrary.ProjectIntermediateDir
struct FProjectIntermediateDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPathsLibrary.ProjectLogDir
struct FProjectLogDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPathsLibrary.ProjectModsDir
struct FProjectModsDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPathsLibrary.ProjectSavedDir
struct FProjectSavedDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPathsLibrary.RemoveDuplicateSlashes
struct FRemoveDuplicateSlashes
{
	struct FString InPath;  // 0x0 (0x0)
	struct FString OutPath;  // 0x10 (0x10)


}; 
 
 // Function Engine.BlueprintPathsLibrary.SandboxesDir
struct FSandboxesDir
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPathsLibrary.SetExtension
struct FSetExtension
{
	struct FString InPath;  // 0x0 (0x0)
	struct FString InNewExtension;  // 0x10 (0x10)
	struct FString ReturnValue;  // 0x20 (0x20)


}; 
 
 // Function Engine.BlueprintPathsLibrary.SetProjectFilePath
struct FSetProjectFilePath
{
	struct FString NewGameProjectFilePath;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPlatformLibrary.CancelLocalNotification
struct FCancelLocalNotification
{
	struct FString ActivationEvent;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPlatformLibrary.CancelLocalNotificationById
struct FCancelLocalNotificationById
{
	int32_t NotificationId;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPlatformLibrary.GetDeviceOrientation
struct FGetDeviceOrientation
{
	enum class EScreenOrientation ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintPlatformLibrary.SetAllowedDeviceOrientation
struct FSetAllowedDeviceOrientation
{
	enum class EScreenOrientation NewAllowedDeviceOrientation;  // 0x0 (0x0)


}; 
 
 // Function Engine.BlueprintTypeConversions.ConvertArrayType
struct FConvertArrayType
{
	struct TArray<int32_t> inArray;  // 0x0 (0x0)
	struct TArray<int32_t> ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.BlueprintTypeConversions.ConvertFBox2dToFBox2f
struct FConvertFBox2dToFBox2f
{
	int32_t InFromData;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.BlueprintTypeConversions.ConvertFBox2fToFBox2d
struct FConvertFBox2fToFBox2d
{
	int32_t InFromData;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.BlueprintTypeConversions.ConvertFMatrix44dToFMatrix44f
struct FConvertFMatrix44dToFMatrix44f
{
	int32_t InFromData;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.BlueprintTypeConversions.ConvertFMatrix44fToFMatrix44d
struct FConvertFMatrix44fToFMatrix44d
{
	int32_t InFromData;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.BlueprintTypeConversions.ConvertFPlane4dToFPlane4f
struct FConvertFPlane4dToFPlane4f
{
	int32_t InFromData;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.BlueprintTypeConversions.ConvertFQuat4dToFQuat4f
struct FConvertFQuat4dToFQuat4f
{
	int32_t InFromData;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.BlueprintTypeConversions.ConvertFQuat4fToFQuat4d
struct FConvertFQuat4fToFQuat4d
{
	int32_t InFromData;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.BlueprintTypeConversions.ConvertFRotator3fToFRotator3d
struct FConvertFRotator3fToFRotator3d
{
	int32_t InFromData;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.BlueprintTypeConversions.ConvertFTransform3fToFTransform3d
struct FConvertFTransform3fToFTransform3d
{
	int32_t InFromData;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.BlueprintTypeConversions.ConvertFVector2dToFVector2f
struct FConvertFVector2dToFVector2f
{
	int32_t InFromData;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.BlueprintTypeConversions.ConvertFVector2fToFVector2d
struct FConvertFVector2fToFVector2d
{
	int32_t InFromData;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.BlueprintTypeConversions.ConvertFVector3dToFVector3f
struct FConvertFVector3dToFVector3f
{
	int32_t InFromData;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.BlueprintTypeConversions.ConvertFVector3fToFVector3d
struct FConvertFVector3fToFVector3d
{
	int32_t InFromData;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.BlueprintTypeConversions.ConvertFVector4dToFVector4f
struct FConvertFVector4dToFVector4f
{
	int32_t InFromData;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.BlueprintTypeConversions.ConvertFVector4fToFVector4d
struct FConvertFVector4fToFVector4d
{
	int32_t InFromData;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.BlueprintTypeConversions.ConvertMapType
struct FConvertMapType
{
	struct TMap<int32_t, int32_t> InMap;  // 0x0 (0x0)
	struct TMap<int32_t, int32_t> ReturnValue;  // 0x50 (0x50)


}; 
 
 // Function Engine.ImportanceSamplingLibrary.BreakImportanceTexture
struct FBreakImportanceTexture
{
	struct FImportanceTexture ImportanceTexture;  // 0x0 (0x0)
	struct UTexture2D* Texture;  // 0x50 (0x50)
	enum class EImportanceWeight WeightingFunc;  // 0x58 (0x58)
	char pad_89[7];  // 0x59 (0x59)


}; 
 
 // Function Engine.ImportanceSamplingLibrary.NextSobolCell2D
struct FNextSobolCell2D
{
	int32_t Index;  // 0x0 (0x0)
	int32_t NumCells;  // 0x4 (0x4)
	struct FVector2D PreviousValue;  // 0x8 (0x8)
	struct FVector2D ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.ImportanceSamplingLibrary.RandomSobolCell2D
struct FRandomSobolCell2D
{
	int32_t Index;  // 0x0 (0x0)
	int32_t NumCells;  // 0x4 (0x4)
	struct FVector2D Cell;  // 0x8 (0x8)
	struct FVector2D Seed;  // 0x18 (0x18)
	struct FVector2D ReturnValue;  // 0x28 (0x28)


}; 
 
 // Function Engine.ImportanceSamplingLibrary.RandomSobolCell3D
struct FRandomSobolCell3D
{
	int32_t Index;  // 0x0 (0x0)
	int32_t NumCells;  // 0x4 (0x4)
	struct FVector Cell;  // 0x8 (0x8)
	struct FVector Seed;  // 0x20 (0x20)
	struct FVector ReturnValue;  // 0x38 (0x38)


}; 
 
 // Function Engine.ImportanceSamplingLibrary.RandomSobolFloat
struct FRandomSobolFloat
{
	int32_t Index;  // 0x0 (0x0)
	int32_t Dimension;  // 0x4 (0x4)
	float Seed;  // 0x8 (0x8)
	float ReturnValue;  // 0xC (0xC)


}; 
 
 // Function Engine.LevelScriptActor.WorldOriginLocationChanged
struct FWorldOriginLocationChanged
{
	struct FIntVector OldOriginLocation;  // 0x0 (0x0)
	struct FIntVector NewOriginLocation;  // 0xC (0xC)


}; 
 
 // Function Engine.LightWeightInstanceBlueprintFunctionLibrary.ConvertActorToLightWeightInstance
struct FConvertActorToLightWeightInstance
{
	struct AActor* Actor;  // 0x0 (0x0)
	struct FActorInstanceHandle ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.MaterialInstanceDynamic.CopyInterpParameters
struct FCopyInterpParameters
{
	struct UMaterialInstance* Source;  // 0x0 (0x0)


}; 
 
 // Function Engine.MaterialInstanceDynamic.K2_CopyMaterialInstanceParameters
struct FK2_CopyMaterialInstanceParameters
{
	struct UMaterialInterface* Source;  // 0x0 (0x0)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool bQuickParametersOnly : 1;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.MaterialInstanceDynamic.K2_GetScalarParameterValueByInfo
struct FK2_GetScalarParameterValueByInfo
{
	struct FMaterialParameterInfo ParameterInfo;  // 0x0 (0x0)
	float ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.MaterialInstanceDynamic.K2_GetTextureParameterValueByInfo
struct FK2_GetTextureParameterValueByInfo
{
	struct FMaterialParameterInfo ParameterInfo;  // 0x0 (0x0)
	struct UTexture* ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.MaterialInstanceDynamic.K2_GetVectorParameterValueByInfo
struct FK2_GetVectorParameterValueByInfo
{
	struct FMaterialParameterInfo ParameterInfo;  // 0x0 (0x0)
	struct FLinearColor ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.MaterialInstanceDynamic.SetRuntimeVirtualTextureParameterValue
struct FSetRuntimeVirtualTextureParameterValue
{
	struct FName ParameterName;  // 0x0 (0x0)
	struct URuntimeVirtualTexture* Value;  // 0x8 (0x8)


}; 
 
 // Function Engine.MaterialInstanceDynamic.SetScalarParameterByIndex
struct FSetScalarParameterByIndex
{
	int32_t ParameterIndex;  // 0x0 (0x0)
	float Value;  // 0x4 (0x4)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.MaterialInstanceDynamic.SetScalarParameterValueByInfo
struct FSetScalarParameterValueByInfo
{
	struct FMaterialParameterInfo ParameterInfo;  // 0x0 (0x0)
	float Value;  // 0x10 (0x10)


}; 
 
 // Function Engine.MaterialInstanceDynamic.SetTextureParameterValue
struct FSetTextureParameterValue
{
	struct FName ParameterName;  // 0x0 (0x0)
	struct UTexture* Value;  // 0x8 (0x8)


}; 
 
 // Function Engine.MaterialInstanceDynamic.SetTextureParameterValueByInfo
struct FSetTextureParameterValueByInfo
{
	struct FMaterialParameterInfo ParameterInfo;  // 0x0 (0x0)
	struct UTexture* Value;  // 0x10 (0x10)


}; 
 
 // Function Engine.MeshVertexPainterKismetLibrary.PaintVerticesLerpAlongAxis
struct FPaintVerticesLerpAlongAxis
{
	struct UStaticMeshComponent* StaticMeshComponent;  // 0x0 (0x0)
	struct FLinearColor StartColor;  // 0x8 (0x8)
	struct FLinearColor EndColor;  // 0x18 (0x18)
	uint8_t Axis;  // 0x28 (0x28)
	char pad_41_1 : 7;  // 0x29 (0x29)
	bool bConvertToSRGB : 1;  // 0x29 (0x29)
	char pad_42[6];  // 0x2A (0x2A)


}; 
 
 // Function Engine.MeshVertexPainterKismetLibrary.RemovePaintedVertices
struct FRemovePaintedVertices
{
	struct UStaticMeshComponent* StaticMeshComponent;  // 0x0 (0x0)


}; 
 
 // Function Engine.NetPushModelHelpers.MarkPropertyDirtyFromRepIndex
struct FMarkPropertyDirtyFromRepIndex
{
	struct UObject* Object;  // 0x0 (0x0)
	int32_t RepIndex;  // 0x8 (0x8)
	struct FName PropertyName;  // 0xC (0xC)
	char pad_20[4];  // 0x14 (0x14)


}; 
 
 // Function Engine.AsyncPhysicsInputComponent.GetDataToConsume
struct FGetDataToConsume
{
	struct UAsyncPhysicsData* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.AsyncPhysicsInputComponent.ServerRPCBufferInput
struct FServerRPCBufferInput
{
	struct UAsyncPhysicsData* AsyncPhysicsData;  // 0x0 (0x0)


}; 
 
 // Function Engine.ConstraintInstanceBlueprintLibrary.GetAngularDriveMode
struct FGetAngularDriveMode
{
	struct FConstraintInstanceAccessor Accessor;  // 0x0 (0x0)
	enum class EAngularDriveMode OutDriveMode;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)


}; 
 
 // Function Engine.PhysicsConstraintComponent.SetAngularPlasticity
struct FSetAngularPlasticity
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bAngularPlasticity : 1;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	float AngularPlasticityThreshold;  // 0x4 (0x4)


}; 
 
 // Function Engine.ConstraintInstanceBlueprintLibrary.GetAngularLimits
struct FGetAngularLimits
{
	struct FConstraintInstanceAccessor Accessor;  // 0x0 (0x0)
	enum class EAngularConstraintMotion Swing1MotionType;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)
	float Swing1LimitAngle;  // 0x10 (0x10)
	enum class EAngularConstraintMotion Swing2MotionType;  // 0x14 (0x14)
	char pad_21[3];  // 0x15 (0x15)
	float Swing2LimitAngle;  // 0x18 (0x18)
	enum class EAngularConstraintMotion TwistMotionType;  // 0x1C (0x1C)
	char pad_29[3];  // 0x1D (0x1D)
	float TwistLimitAngle;  // 0x20 (0x20)


}; 
 
 // Function Engine.ConstraintInstanceBlueprintLibrary.GetAngularPlasticity
struct FGetAngularPlasticity
{
	struct FConstraintInstanceAccessor Accessor;  // 0x0 (0x0)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bAngularPlasticity : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)
	float AngularPlasticityThreshold;  // 0x10 (0x10)


}; 
 
 // Function Engine.ConstraintInstanceBlueprintLibrary.GetAngularSoftSwingLimitParams
struct FGetAngularSoftSwingLimitParams
{
	struct FConstraintInstanceAccessor Accessor;  // 0x0 (0x0)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bSoftSwingLimit : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)
	float SwingLimitStiffness;  // 0x10 (0x10)
	float SwingLimitDamping;  // 0x14 (0x14)
	float SwingLimitRestitution;  // 0x18 (0x18)
	float SwingLimitContactDistance;  // 0x1C (0x1C)


}; 
 
 // Function Engine.ConstraintInstanceBlueprintLibrary.GetAngularSoftTwistLimitParams
struct FGetAngularSoftTwistLimitParams
{
	struct FConstraintInstanceAccessor Accessor;  // 0x0 (0x0)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bSoftTwistLimit : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)
	float TwistLimitStiffness;  // 0x10 (0x10)
	float TwistLimitDamping;  // 0x14 (0x14)
	float TwistLimitRestitution;  // 0x18 (0x18)
	float TwistLimitContactDistance;  // 0x1C (0x1C)


}; 
 
 // Function Engine.ConstraintInstanceBlueprintLibrary.GetAngularVelocityDriveSLERP
struct FGetAngularVelocityDriveSLERP
{
	struct FConstraintInstanceAccessor Accessor;  // 0x0 (0x0)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bOutEnableSLERP : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)


}; 
 
 // Function Engine.ConstraintInstanceBlueprintLibrary.GetAngularVelocityDriveTwistAndSwing
struct FGetAngularVelocityDriveTwistAndSwing
{
	struct FConstraintInstanceAccessor Accessor;  // 0x0 (0x0)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bOutEnableTwistDrive : 1;  // 0xC (0xC)
	char pad_13_1 : 7;  // 0xD (0xD)
	bool bOutEnableSwingDrive : 1;  // 0xD (0xD)
	char pad_14[2];  // 0xE (0xE)


}; 
 
 // Function Engine.ConstraintInstanceBlueprintLibrary.GetAttachedBodyNames
struct FGetAttachedBodyNames
{
	struct FConstraintInstanceAccessor Accessor;  // 0x0 (0x0)
	struct FName ParentBody;  // 0xC (0xC)
	struct FName ChildBody;  // 0x14 (0x14)


}; 
 
 // Function Engine.ConstraintInstanceBlueprintLibrary.GetContactTransferScale
struct FGetContactTransferScale
{
	struct FConstraintInstanceAccessor Accessor;  // 0x0 (0x0)
	float ContactTransferScale;  // 0xC (0xC)


}; 
 
 // Function Engine.ConstraintInstanceBlueprintLibrary.GetLinearBreakable
struct FGetLinearBreakable
{
	struct FConstraintInstanceAccessor Accessor;  // 0x0 (0x0)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bLinearBreakable : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)
	float LinearBreakThreshold;  // 0x10 (0x10)


}; 
 
 // Function Engine.ConstraintInstanceBlueprintLibrary.GetLinearDriveParams
struct FGetLinearDriveParams
{
	struct FConstraintInstanceAccessor Accessor;  // 0x0 (0x0)
	float OutPositionStrength;  // 0xC (0xC)
	float OutVelocityStrength;  // 0x10 (0x10)
	float OutForceLimit;  // 0x14 (0x14)


}; 
 
 // Function Engine.ConstraintInstanceBlueprintLibrary.GetLinearLimits
struct FGetLinearLimits
{
	struct FConstraintInstanceAccessor Accessor;  // 0x0 (0x0)
	enum class ELinearConstraintMotion XMotion;  // 0xC (0xC)
	enum class ELinearConstraintMotion YMotion;  // 0xD (0xD)
	enum class ELinearConstraintMotion ZMotion;  // 0xE (0xE)
	char pad_15[1];  // 0xF (0xF)
	float Limit;  // 0x10 (0x10)


}; 
 
 // Function Engine.ConstraintInstanceBlueprintLibrary.GetLinearPositionDrive
struct FGetLinearPositionDrive
{
	struct FConstraintInstanceAccessor Accessor;  // 0x0 (0x0)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bOutEnableDriveX : 1;  // 0xC (0xC)
	char pad_13_1 : 7;  // 0xD (0xD)
	bool bOutEnableDriveY : 1;  // 0xD (0xD)
	char pad_14_1 : 7;  // 0xE (0xE)
	bool bOutEnableDriveZ : 1;  // 0xE (0xE)
	char pad_15[1];  // 0xF (0xF)


}; 
 
 // Function Engine.ConstraintInstanceBlueprintLibrary.GetLinearSoftLimitParams
struct FGetLinearSoftLimitParams
{
	struct FConstraintInstanceAccessor Accessor;  // 0x0 (0x0)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bSoftLinearLimit : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)
	float LinearLimitStiffness;  // 0x10 (0x10)
	float LinearLimitDamping;  // 0x14 (0x14)
	float LinearLimitRestitution;  // 0x18 (0x18)
	float LinearLimitContactDistance;  // 0x1C (0x1C)


}; 
 
 // Function Engine.ConstraintInstanceBlueprintLibrary.GetLinearVelocityTarget
struct FGetLinearVelocityTarget
{
	struct FConstraintInstanceAccessor Accessor;  // 0x0 (0x0)
	char pad_12[4];  // 0xC (0xC)
	struct FVector OutVelTarget;  // 0x10 (0x10)


}; 
 
 // Function Engine.ConstraintInstanceBlueprintLibrary.GetParentDominates
struct FGetParentDominates
{
	struct FConstraintInstanceAccessor Accessor;  // 0x0 (0x0)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool ReturnValue : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)


}; 
 
 // Function Engine.ConstraintInstanceBlueprintLibrary.GetProjectionParams
struct FGetProjectionParams
{
	struct FConstraintInstanceAccessor Accessor;  // 0x0 (0x0)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bEnableProjection : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)
	float ProjectionLinearAlpha;  // 0x10 (0x10)
	float ProjectionAngularAlpha;  // 0x14 (0x14)


}; 
 
 // Function Engine.PhysicsConstraintComponent.SetAngularDriveParams
struct FSetAngularDriveParams
{
	float PositionStrength;  // 0x0 (0x0)
	float VelocityStrength;  // 0x4 (0x4)
	float InForceLimit;  // 0x8 (0x8)


}; 
 
 // Function Engine.PhysicsConstraintComponent.SetAngularOrientationTarget
struct FSetAngularOrientationTarget
{
	struct FRotator InPosTarget;  // 0x0 (0x0)


}; 
 
 // Function Engine.PhysicsConstraintComponent.SetAngularVelocityDriveTwistAndSwing
struct FSetAngularVelocityDriveTwistAndSwing
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bEnableTwistDrive : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool bEnableSwingDrive : 1;  // 0x1 (0x1)


}; 
 
 // Function Engine.PhysicsConstraintComponent.SetAngularVelocityTarget
struct FSetAngularVelocityTarget
{
	struct FVector InVelTarget;  // 0x0 (0x0)


}; 
 
 // Function Engine.PhysicsConstraintComponent.SetContactTransferScale
struct FSetContactTransferScale
{
	float ContactTransferScale;  // 0x0 (0x0)


}; 
 
 // Function Engine.PhysicsConstraintComponent.SetDisableCollision
struct FSetDisableCollision
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bDisableCollision : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.PhysicsConstraintComponent.SetLinearPositionDrive
struct FSetLinearPositionDrive
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bEnableDriveX : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool bEnableDriveY : 1;  // 0x1 (0x1)
	char pad_2_1 : 7;  // 0x2 (0x2)
	bool bEnableDriveZ : 1;  // 0x2 (0x2)


}; 
 
 // Function Engine.PhysicsConstraintComponent.SetLinearPositionTarget
struct FSetLinearPositionTarget
{
	struct FVector InPosTarget;  // 0x0 (0x0)


}; 
 
 // Function Engine.PhysicsConstraintComponent.SetLinearVelocityDrive
struct FSetLinearVelocityDrive
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bEnableDriveX : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool bEnableDriveY : 1;  // 0x1 (0x1)
	char pad_2_1 : 7;  // 0x2 (0x2)
	bool bEnableDriveZ : 1;  // 0x2 (0x2)


}; 
 
 // Function Engine.PhysicsConstraintComponent.SetLinearVelocityTarget
struct FSetLinearVelocityTarget
{
	struct FVector InVelTarget;  // 0x0 (0x0)


}; 
 
 // Function Engine.PhysicsConstraintComponent.SetOrientationDriveSLERP
struct FSetOrientationDriveSLERP
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bEnableSLERP : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.PhysicsConstraintComponent.SetOrientationDriveTwistAndSwing
struct FSetOrientationDriveTwistAndSwing
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bEnableTwistDrive : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool bEnableSwingDrive : 1;  // 0x1 (0x1)


}; 
 
 // Function Engine.ConstraintInstanceBlueprintLibrary.SetParentDominates
struct FSetParentDominates
{
	struct FConstraintInstanceAccessor Accessor;  // 0x0 (0x0)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bParentDominates : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)


}; 
 
 // Function Engine.ConstraintInstanceBlueprintLibrary.SetProjectionParams
struct FSetProjectionParams
{
	struct FConstraintInstanceAccessor Accessor;  // 0x0 (0x0)
	char pad_12_1 : 7;  // 0xC (0xC)
	bool bEnableProjection : 1;  // 0xC (0xC)
	char pad_13[3];  // 0xD (0xD)
	float ProjectionLinearAlpha;  // 0x10 (0x10)
	float ProjectionAngularAlpha;  // 0x14 (0x14)


}; 
 
 // Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationProfileBelow
struct FApplyPhysicalAnimationProfileBelow
{
	struct FName BodyName;  // 0x0 (0x0)
	struct FName ProfileName;  // 0x8 (0x8)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool bIncludeSelf : 1;  // 0x10 (0x10)
	char pad_17_1 : 7;  // 0x11 (0x11)
	bool bClearNotFound : 1;  // 0x11 (0x11)
	char pad_18[2];  // 0x12 (0x12)


}; 
 
 // Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettings
struct FApplyPhysicalAnimationSettings
{
	struct FName BodyName;  // 0x0 (0x0)
	struct FPhysicalAnimationData PhysicalAnimationData;  // 0x8 (0x8)


}; 
 
 // Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettingsBelow
struct FApplyPhysicalAnimationSettingsBelow
{
	struct FName BodyName;  // 0x0 (0x0)
	struct FPhysicalAnimationData PhysicalAnimationData;  // 0x8 (0x8)
	char pad_44_1 : 7;  // 0x2C (0x2C)
	bool bIncludeSelf : 1;  // 0x2C (0x2C)
	char pad_45[3];  // 0x2D (0x2D)


}; 
 
 // Function Engine.PhysicalAnimationComponent.GetBodyTargetTransform
struct FGetBodyTargetTransform
{
	struct FName BodyName;  // 0x0 (0x0)
	char pad_8[8];  // 0x8 (0x8)
	struct FTransform ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.PhysicalAnimationComponent.SetSkeletalMeshComponent
struct FSetSkeletalMeshComponent
{
	struct USkeletalMeshComponent* InSkeletalMeshComponent;  // 0x0 (0x0)


}; 
 
 // Function Engine.PhysicalAnimationComponent.SetStrengthMultiplyer
struct FSetStrengthMultiplyer
{
	float InStrengthMultiplyer;  // 0x0 (0x0)


}; 
 
 // Function Engine.PhysicsConstraintComponent.GetConstraint
struct FGetConstraint
{
	struct FConstraintInstanceAccessor ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PhysicsConstraintComponent.GetConstraintForce
struct FGetConstraintForce
{
	struct FVector OutLinearForce;  // 0x0 (0x0)
	struct FVector OutAngularForce;  // 0x18 (0x18)


}; 
 
 // Function Engine.PhysicsConstraintComponent.GetCurrentSwing1
struct FGetCurrentSwing1
{
	float ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PhysicsConstraintComponent.IsBroken
struct FIsBroken
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.PhysicsConstraintComponent.SetAngularOrientationDrive
struct FSetAngularOrientationDrive
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bEnableSwingDrive : 1;  // 0x0 (0x0)
	char pad_1_1 : 7;  // 0x1 (0x1)
	bool bEnableTwistDrive : 1;  // 0x1 (0x1)


}; 
 
 // Function Engine.PhysicsConstraintComponent.SetAngularSwing1Limit
struct FSetAngularSwing1Limit
{
	enum class EAngularConstraintMotion MotionType;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	float Swing1LimitAngle;  // 0x4 (0x4)


}; 
 
 // Function Engine.PhysicsConstraintComponent.SetAngularSwing2Limit
struct FSetAngularSwing2Limit
{
	enum class EAngularConstraintMotion MotionType;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	float Swing2LimitAngle;  // 0x4 (0x4)


}; 
 
 // Function Engine.PhysicsConstraintComponent.SetConstrainedComponents
struct FSetConstrainedComponents
{
	struct UPrimitiveComponent* Component1;  // 0x0 (0x0)
	struct FName BoneName1;  // 0x8 (0x8)
	struct UPrimitiveComponent* Component2;  // 0x10 (0x10)
	struct FName BoneName2;  // 0x18 (0x18)


}; 
 
 // Function Engine.PhysicsConstraintComponent.SetConstraintReferencePosition
struct FSetConstraintReferencePosition
{
	enum class EConstraintFrame Frame;  // 0x0 (0x0)
	char pad_1[7];  // 0x1 (0x1)
	struct FVector RefPosition;  // 0x8 (0x8)


}; 
 
 // Function Engine.PhysicsConstraintComponent.SetLinearXLimit
struct FSetLinearXLimit
{
	enum class ELinearConstraintMotion ConstraintType;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	float LimitSize;  // 0x4 (0x4)


}; 
 
 // Function Engine.PhysicsConstraintComponent.SetLinearYLimit
struct FSetLinearYLimit
{
	enum class ELinearConstraintMotion ConstraintType;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	float LimitSize;  // 0x4 (0x4)


}; 
 
 // Function Engine.PhysicsConstraintComponent.SetLinearZLimit
struct FSetLinearZLimit
{
	enum class ELinearConstraintMotion ConstraintType;  // 0x0 (0x0)
	char pad_1[3];  // 0x1 (0x1)
	float LimitSize;  // 0x4 (0x4)


}; 
 
 // Function Engine.PhysicsHandleComponent.GetGrabbedComponent
struct FGetGrabbedComponent
{
	struct UPrimitiveComponent* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PhysicsHandleComponent.GrabComponent
struct FGrabComponent
{
	struct UPrimitiveComponent* Component;  // 0x0 (0x0)
	struct FName InBoneName;  // 0x8 (0x8)
	struct FVector GrabLocation;  // 0x10 (0x10)
	char pad_40_1 : 7;  // 0x28 (0x28)
	bool bConstrainRotation : 1;  // 0x28 (0x28)
	char pad_41[7];  // 0x29 (0x29)


}; 
 
 // Function Engine.PhysicsHandleComponent.GrabComponentAtLocation
struct FGrabComponentAtLocation
{
	struct UPrimitiveComponent* Component;  // 0x0 (0x0)
	struct FName InBoneName;  // 0x8 (0x8)
	struct FVector GrabLocation;  // 0x10 (0x10)


}; 
 
 // Function Engine.PhysicsHandleComponent.GrabComponentAtLocationWithRotation
struct FGrabComponentAtLocationWithRotation
{
	struct UPrimitiveComponent* Component;  // 0x0 (0x0)
	struct FName InBoneName;  // 0x8 (0x8)
	struct FVector Location;  // 0x10 (0x10)
	struct FRotator Rotation;  // 0x28 (0x28)


}; 
 
 // Function Engine.PhysicsHandleComponent.SetLinearStiffness
struct FSetLinearStiffness
{
	float NewLinearStiffness;  // 0x0 (0x0)


}; 
 
 // Function Engine.PhysicsHandleComponent.SetTargetLocation
struct FSetTargetLocation
{
	struct FVector NewLocation;  // 0x0 (0x0)


}; 
 
 // Function Engine.PhysicsHandleComponent.SetTargetRotation
struct FSetTargetRotation
{
	struct FRotator NewRotation;  // 0x0 (0x0)


}; 
 
 // Function Engine.RadialForceComponent.AddObjectTypeToAffect
struct FAddObjectTypeToAffect
{
	enum class EObjectTypeQuery ObjectType;  // 0x0 (0x0)


}; 
 
 // Function Engine.PhysicsFieldStatics.EvalPhysicsIntegerField
struct FEvalPhysicsIntegerField
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FVector WorldPosition;  // 0x8 (0x8)
	enum class EFieldIntegerType IntegerType;  // 0x20 (0x20)
	char pad_33[3];  // 0x21 (0x21)
	int32_t ReturnValue;  // 0x24 (0x24)


}; 
 
 // Function Engine.PlatformInputDeviceMapperLibrary.EqualEqual_InputDeviceId
struct FEqualEqual_InputDeviceId
{
	struct FInputDeviceId A;  // 0x0 (0x0)
	struct FInputDeviceId B;  // 0x4 (0x4)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.PlatformInputDeviceMapperLibrary.EqualEqual_PlatformUserId
struct FEqualEqual_PlatformUserId
{
	struct FPlatformUserId A;  // 0x0 (0x0)
	struct FPlatformUserId B;  // 0x4 (0x4)
	char pad_8_1 : 7;  // 0x8 (0x8)
	bool ReturnValue : 1;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.PlatformInputDeviceMapperLibrary.GetAllConnectedInputDevices
struct FGetAllConnectedInputDevices
{
	struct TArray<struct FInputDeviceId> OutInputDevices;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x10 (0x10)
	char pad_20[4];  // [x14 ([x14)


}; 
 
 // Function Engine.PlatformInputDeviceMapperLibrary.GetAllInputDevices
struct FGetAllInputDevices
{
	struct TArray<struct FInputDeviceId> OutInputDevices;  // 0x0 (0x0)
	int32_t ReturnValue;  // 0x10 (0x10)
	char pad_20[4];  // 0x14 (0x14)


}; 
 
 // Function Engine.PlatformInputDeviceMapperLibrary.GetAllInputDevicesForUser
struct FGetAllInputDevicesForUser
{
	struct FPlatformUserId userID;  // 0x0 (0x0)
	char pad_4[4];  // 0x4 (0x4)
	struct TArray<struct FInputDeviceId> OutInputDevices;  // 0x8 (0x8)
	int32_t ReturnValue;  // 0x18 (0x18)
	char pad_28[4];  // 0x1C (0x1C)


}; 
 
 // Function Engine.PlatformInputDeviceMapperLibrary.GetDefaultInputDevice
struct FGetDefaultInputDevice
{
	struct FInputDeviceId ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlatformInputDeviceMapperLibrary.GetPrimaryInputDeviceForUser
struct FGetPrimaryInputDeviceForUser
{
	struct FPlatformUserId userID;  // 0x0 (0x0)
	struct FInputDeviceId ReturnValue;  // 0x4 (0x4)


}; 
 
 // Function Engine.PlatformInputDeviceMapperLibrary.GetUserForUnpairedInputDevices
struct FGetUserForUnpairedInputDevices
{
	struct FPlatformUserId ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlatformInputDeviceMapperLibrary.InputDeviceId_None
struct FInputDeviceId_None
{
	struct FInputDeviceId ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.PlatformInputDeviceMapperLibrary.IsUnpairedUserId
struct FIsUnpairedUserId
{
	struct FPlatformUserId PlatformId;  // 0x0 (0x0)
	char pad_4_1 : 7;  // 0x4 (0x4)
	bool ReturnValue : 1;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)


}; 
 
 // Function Engine.PlatformInputDeviceMapperLibrary.IsValidInputDevice
struct FIsValidInputDevice
{
	struct FInputDeviceId DeviceID;  // 0x0 (0x0)
	char pad_4_1 : 7;  // 0x4 (0x4)
	bool ReturnValue : 1;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)


}; 
 
 // Function Engine.PlatformInputDeviceMapperLibrary.IsValidPlatformId
struct FIsValidPlatformId
{
	struct FPlatformUserId userID;  // 0x0 (0x0)
	char pad_4_1 : 7;  // 0x4 (0x4)
	bool ReturnValue : 1;  // 0x4 (0x4)
	char pad_5[3];  // 0x5 (0x5)


}; 
 
 // Function Engine.PlatformInputDeviceMapperLibrary.PlatformUserId_None
struct FPlatformUserId_None
{
	struct FPlatformUserId ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.ReplaySubsystem.GetActiveReplayName
struct FGetActiveReplayName
{
	struct FString ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.ReplaySubsystem.IsRecording
struct FIsRecording
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMesh.GetImportedBounds
struct FGetImportedBounds
{
	struct FBoxSphereBounds ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMesh.GetLODSettings
struct FGetLODSettings
{
	struct USkeletalMeshLODSettings* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMesh.GetMeshClothingAssets
struct FGetMeshClothingAssets
{
	struct TArray<struct UClothingAssetBase*> ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMesh.GetNodeMappingContainer
struct FGetNodeMappingContainer
{
	struct UBlueprint* SourceAsset;  // 0x0 (0x0)
	struct UNodeMappingContainer* ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.SkeletalMesh.GetPhysicsAsset
struct FGetPhysicsAsset
{
	struct UPhysicsAsset* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMesh.GetShadowPhysicsAsset
struct FGetShadowPhysicsAsset
{
	struct UPhysicsAsset* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMesh.GetSkeleton
struct FGetSkeleton
{
	struct USkeleton* ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMesh.IsSectionUsingCloth
struct FIsSectionUsingCloth
{
	int32_t InSectionIndex;  // 0x0 (0x0)
	char pad_4_1 : 7;  // 0x4 (0x4)
	bool bCheckCorrespondingSections : 1;  // 0x4 (0x4)
	char pad_5_1 : 7;  // 0x5 (0x5)
	bool ReturnValue : 1;  // 0x5 (0x5)
	char pad_6[2];  // 0x6 (0x6)


}; 
 
 // Function Engine.SkeletalMesh.NumSockets
struct FNumSockets
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMesh.SetLODSettings
struct FSetLODSettings
{
	struct USkeletalMeshLODSettings* InLODSettings;  // 0x0 (0x0)


}; 
 
 // Function Engine.SkeletalMesh.SetMeshClothingAssets
struct FSetMeshClothingAssets
{
	struct TArray<struct UClothingAssetBase*> InMeshClothingAssets;  // 0x0 (0x0)


}; 
 
 // Function Engine.SoundSubmix.RemoveSpectralAnalysisDelegate
struct FRemoveSpectralAnalysisDelegate
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	struct FDelegate OnSubmixSpectralAnalysisBP;  // 0x8 (0x8)


}; 
 
 // Function Engine.SoundSubmix.SetSubmixDryLevel
struct FSetSubmixDryLevel
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	float InDryLevel;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.SoundSubmix.SetSubmixWetLevel
struct FSetSubmixWetLevel
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	float InWetLevel;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.SoundSubmix.StartRecordingOutput
struct FStartRecordingOutput
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	float ExpectedDuration;  // 0x8 (0x8)
	char pad_12[4];  // 0xC (0xC)


}; 
 
 // Function Engine.SoundSubmix.StartSpectralAnalysis
struct FStartSpectralAnalysis
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)
	uint8_t FFTSize;  // 0x8 (0x8)
	uint8_t InterpolationMethod;  // 0x9 (0x9)
	uint8_t WindowType;  // 0xA (0xA)
	char pad_11[1];  // 0xB (0xB)
	float HopSize;  // 0xC (0xC)
	uint8_t SpectrumType;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.SoundSubmix.StopEnvelopeFollowing
struct FStopEnvelopeFollowing
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)


}; 
 
 // Function Engine.SoundSubmix.StopSpectralAnalysis
struct FStopSpectralAnalysis
{
	struct UObject* WorldContextObject;  // 0x0 (0x0)


}; 
 
 // Function Engine.StereoLayerFunctionLibrary.EnableAutoLoadingSplashScreen
struct FEnableAutoLoadingSplashScreen
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool InAutoShowEnabled : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.StereoLayerFunctionLibrary.SetSplashScreen
struct FSetSplashScreen
{
	struct UTexture* Texture;  // 0x0 (0x0)
	struct FVector2D Scale;  // 0x8 (0x8)
	struct FVector Offset;  // 0x18 (0x18)
	char pad_48_1 : 7;  // 0x30 (0x30)
	bool bShowLoadingMovie : 1;  // 0x30 (0x30)
	char pad_49_1 : 7;  // 0x31 (0x31)
	bool bShowOnSet : 1;  // 0x31 (0x31)
	char pad_50[6];  // 0x32 (0x32)


}; 
 
 // Function Engine.SubsystemBlueprintLibrary.GetAudioEngineSubsystem
struct FGetAudioEngineSubsystem
{
	struct UObject* ContextObject;  // 0x0 (0x0)
	UAudioEngineSubsystem* Class;  // 0x8 (0x8)
	struct UAudioEngineSubsystem* ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.SubsystemBlueprintLibrary.GetLocalPlayerSubsystem
struct FGetLocalPlayerSubsystem
{
	struct UObject* ContextObject;  // 0x0 (0x0)
	ULocalPlayerSubsystem* Class;  // 0x8 (0x8)
	struct ULocalPlayerSubsystem* ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.SubsystemBlueprintLibrary.GetLocalPlayerSubSystemFromPlayerController
struct FGetLocalPlayerSubSystemFromPlayerController
{
	struct APlayerController* PlayerController;  // 0x0 (0x0)
	ULocalPlayerSubsystem* Class;  // 0x8 (0x8)
	struct ULocalPlayerSubsystem* ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.SubsystemBlueprintLibrary.GetWorldSubsystem
struct FGetWorldSubsystem
{
	struct UObject* ContextObject;  // 0x0 (0x0)
	UWorldSubsystem* Class;  // 0x8 (0x8)
	struct UWorldSubsystem* ReturnValue;  // 0x10 (0x10)


}; 
 
 // Function Engine.Canvas.K2_Deproject
struct FK2_Deproject
{
	struct FVector2D ScreenPosition;  // 0x0 (0x0)
	struct FVector WorldOrigin;  // 0x10 (0x10)
	struct FVector WorldDirection;  // 0x28 (0x28)


}; 
 
 // Function Engine.Canvas.K2_DrawBorder
struct FK2_DrawBorder
{
	struct UTexture* BorderTexture;  // 0x0 (0x0)
	struct UTexture* BackgroundTexture;  // 0x8 (0x8)
	struct UTexture* LeftBorderTexture;  // 0x10 (0x10)
	struct UTexture* RightBorderTexture;  // 0x18 (0x18)
	struct UTexture* TopBorderTexture;  // 0x20 (0x20)
	struct UTexture* BottomBorderTexture;  // 0x28 (0x28)
	struct FVector2D ScreenPosition;  // 0x30 (0x30)
	struct FVector2D ScreenSize;  // 0x40 (0x40)
	struct FVector2D CoordinatePosition;  // 0x50 (0x50)
	struct FVector2D CoordinateSize;  // 0x60 (0x60)
	struct FLinearColor RenderColor;  // 0x70 (0x70)
	struct FVector2D BorderScale;  // 0x80 (0x80)
	struct FVector2D BackgroundScale;  // 0x90 (0x90)
	float Rotation;  // 0xA0 (0xA0)
	char pad_164[4];  // 0xA4 (0xA4)
	struct FVector2D PivotPoint;  // 0xA8 (0xA8)
	struct FVector2D CornerSize;  // 0xB8 (0xB8)


}; 
 
 // Function Engine.Canvas.K2_DrawBox
struct FK2_DrawBox
{
	struct FVector2D ScreenPosition;  // 0x0 (0x0)
	struct FVector2D ScreenSize;  // 0x10 (0x10)
	float Thickness;  // 0x20 (0x20)
	struct FLinearColor RenderColor;  // 0x24 (0x24)
	char pad_52[4];  // 0x34 (0x34)


}; 
 
 // Function Engine.Canvas.K2_DrawLine
struct FK2_DrawLine
{
	struct FVector2D ScreenPositionA;  // 0x0 (0x0)
	struct FVector2D ScreenPositionB;  // 0x10 (0x10)
	float Thickness;  // 0x20 (0x20)
	struct FLinearColor RenderColor;  // 0x24 (0x24)
	char pad_52[4];  // 0x34 (0x34)


}; 
 
 // Function Engine.Canvas.K2_DrawMaterialTriangle
struct FK2_DrawMaterialTriangle
{
	struct UMaterialInterface* RenderMaterial;  // 0x0 (0x0)
	struct TArray<struct FCanvasUVTri> Triangles;  // 0x8 (0x8)


}; 
 
 // Function Engine.Canvas.K2_DrawText
struct FK2_DrawText
{
	struct UFont* RenderFont;  // 0x0 (0x0)
	struct FString RenderText;  // 0x8 (0x8)
	struct FVector2D ScreenPosition;  // 0x18 (0x18)
	struct FVector2D Scale;  // 0x28 (0x28)
	struct FLinearColor RenderColor;  // 0x38 (0x38)
	float Kerning;  // 0x48 (0x48)
	struct FLinearColor ShadowColor;  // 0x4C (0x4C)
	char pad_92[4];  // 0x5C (0x5C)
	struct FVector2D ShadowOffset;  // 0x60 (0x60)
	char pad_112_1 : 7;  // 0x70 (0x70)
	bool bCentreX : 1;  // 0x70 (0x70)
	char pad_113_1 : 7;  // 0x71 (0x71)
	bool bCentreY : 1;  // 0x71 (0x71)
	char pad_114_1 : 7;  // 0x72 (0x72)
	bool bOutlined : 1;  // 0x72 (0x72)
	char pad_115[1];  // 0x73 (0x73)
	struct FLinearColor OutlineColor;  // 0x74 (0x74)
	char pad_132[4];  // 0x84 (0x84)


}; 
 
 // Function Engine.Canvas.K2_Project
struct FK2_Project
{
	struct FVector WorldLocation;  // 0x0 (0x0)
	struct FVector ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.Canvas.K2_StrLen
struct FK2_StrLen
{
	struct UFont* RenderFont;  // 0x0 (0x0)
	struct FString RenderText;  // 0x8 (0x8)
	struct FVector2D ReturnValue;  // 0x18 (0x18)


}; 
 
 // Function Engine.Canvas.K2_TextSize
struct FK2_TextSize
{
	struct UFont* RenderFont;  // 0x0 (0x0)
	struct FString RenderText;  // 0x8 (0x8)
	struct FVector2D Scale;  // 0x18 (0x18)
	struct FVector2D ReturnValue;  // 0x28 (0x28)


}; 
 
 // Function Engine.InputSettings.AddActionMapping
struct FAddActionMapping
{
	struct FInputActionKeyMapping KeyMapping;  // 0x0 (0x0)
	char pad_40_1 : 7;  // 0x28 (0x28)
	bool bForceRebuildKeymaps : 1;  // 0x28 (0x28)
	char pad_41[7];  // 0x29 (0x29)


}; 
 
 // Function Engine.InputSettings.AddAxisMapping
struct FAddAxisMapping
{
	struct FInputAxisKeyMapping KeyMapping;  // 0x0 (0x0)
	char pad_40_1 : 7;  // 0x28 (0x28)
	bool bForceRebuildKeymaps : 1;  // 0x28 (0x28)
	char pad_41[7];  // 0x29 (0x29)


}; 
 
 // Function Engine.InputSettings.GetAxisMappingByName
struct FGetAxisMappingByName
{
	struct FName InAxisName;  // 0x0 (0x0)
	struct TArray<struct FInputAxisKeyMapping> OutMappings;  // 0x8 (0x8)


}; 
 
 // Function Engine.InputSettings.RemoveAxisMapping
struct FRemoveAxisMapping
{
	struct FInputAxisKeyMapping KeyMapping;  // 0x0 (0x0)
	char pad_40_1 : 7;  // 0x28 (0x28)
	bool bForceRebuildKeymaps : 1;  // 0x28 (0x28)
	char pad_41[7];  // 0x29 (0x29)


}; 
 
 // Function Engine.VisualLoggerKismetLibrary.EnableRecording
struct FEnableRecording
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool bEnabled : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.VisualLoggerKismetLibrary.RedirectVislog
struct FRedirectVislog
{
	struct UObject* SourceOwner;  // 0x0 (0x0)
	struct UObject* DestinationOwner;  // 0x8 (0x8)


}; 
 
 // Function Engine.VOIPTalker.BPOnTalkingBegin
struct FBPOnTalkingBegin
{
	struct UAudioComponent* AudioComponent;  // 0x0 (0x0)


}; 
 
 // Function Engine.VOIPTalker.RegisterWithPlayerState
struct FRegisterWithPlayerState
{
	struct APlayerState* OwningState;  // 0x0 (0x0)


}; 
 
 // Function Engine.VOIPStatics.SetMicThreshold
struct FSetMicThreshold
{
	float InThreshold;  // 0x0 (0x0)


}; 
 
 // Function Engine.RuntimeVirtualTexture.GetPageTableSize
struct FGetPageTableSize
{
	int32_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.WorldPartitionBlueprintLibrary.GetActorDescs
struct FGetActorDescs
{
	struct TArray<struct FActorDesc> OutActorDescs;  // 0x0 (0x0)
	char pad_16_1 : 7;  // 0x10 (0x10)
	bool ReturnValue : 1;  // 0x10 (0x10)
	char pad_17[7];  // 0x11 (0x11)


}; 
 
 // Function Engine.WorldPartitionBlueprintLibrary.GetRuntimeWorldBounds
struct FGetRuntimeWorldBounds
{
	struct FBox ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.DataLayer.GetInitialState
struct FGetInitialState
{
	uint8_t ReturnValue;  // 0x0 (0x0)


}; 
 
 // Function Engine.DataLayer.IsDynamicallyLoaded
struct FIsDynamicallyLoaded
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.DataLayerInstance.IsInitiallyVisible
struct FIsInitiallyVisible
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 // Function Engine.DataLayerSubsystem.GetDataLayer
struct FGetDataLayer
{
	struct FActorDataLayer InDataLayer;  // 0x0 (0x0)
	struct UDataLayerInstance* ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.DataLayerSubsystem.GetDataLayerEffectiveRuntimeStateByLabel
struct FGetDataLayerEffectiveRuntimeStateByLabel
{
	struct FName InDataLayerLabel;  // 0x0 (0x0)
	uint8_t ReturnValue;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.DataLayerSubsystem.GetDataLayerFromLabel
struct FGetDataLayerFromLabel
{
	struct FName InDataLayerLabel;  // 0x0 (0x0)
	struct UDataLayerInstance* ReturnValue;  // 0x8 (0x8)


}; 
 
 // Function Engine.DataLayerSubsystem.GetDataLayerInstanceRuntimeState
struct FGetDataLayerInstanceRuntimeState
{
	struct UDataLayerAsset* InDataLayerAsset;  // 0x0 (0x0)
	uint8_t ReturnValue;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.DataLayerSubsystem.GetDataLayerRuntimeState
struct FGetDataLayerRuntimeState
{
	struct FActorDataLayer InDataLayer;  // 0x0 (0x0)
	uint8_t ReturnValue;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.DataLayerSubsystem.GetDataLayerState
struct FGetDataLayerState
{
	struct FActorDataLayer InDataLayer;  // 0x0 (0x0)
	uint8_t ReturnValue;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.DataLayerSubsystem.SetDataLayerInstanceRuntimeState
struct FSetDataLayerInstanceRuntimeState
{
	struct UDataLayerAsset* InDataLayerAsset;  // 0x0 (0x0)
	uint8_t InState;  // 0x8 (0x8)
	char pad_9_1 : 7;  // 0x9 (0x9)
	bool bInIsRecursive : 1;  // 0x9 (0x9)
	char pad_10[6];  // 0xA (0xA)


}; 
 
 // Function Engine.DataLayerSubsystem.SetDataLayerRuntimeState
struct FSetDataLayerRuntimeState
{
	struct FActorDataLayer InDataLayer;  // 0x0 (0x0)
	uint8_t InState;  // 0x8 (0x8)
	char pad_9_1 : 7;  // 0x9 (0x9)
	bool bInIsRecursive : 1;  // 0x9 (0x9)
	char pad_10[2];  // 0xA (0xA)


}; 
 
 // Function Engine.DataLayerSubsystem.SetDataLayerRuntimeStateByLabel
struct FSetDataLayerRuntimeStateByLabel
{
	struct FName InDataLayerLabel;  // 0x0 (0x0)
	uint8_t InState;  // 0x8 (0x8)
	char pad_9_1 : 7;  // 0x9 (0x9)
	bool bInIsRecursive : 1;  // 0x9 (0x9)
	char pad_10[2];  // 0xA (0xA)


}; 
 
 // Function Engine.DataLayerSubsystem.SetDataLayerState
struct FSetDataLayerState
{
	struct FActorDataLayer InDataLayer;  // 0x0 (0x0)
	uint8_t InState;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.DataLayerSubsystem.SetDataLayerStateByLabel
struct FSetDataLayerStateByLabel
{
	struct FName InDataLayerLabel;  // 0x0 (0x0)
	uint8_t InState;  // 0x8 (0x8)
	char pad_9[3];  // 0x9 (0x9)


}; 
 
 // Function Engine.WorldDataLayers.OnDataLayerRuntimeStateChanged
struct FOnDataLayerRuntimeStateChanged
{
	struct UDataLayerInstance* InDataLayer;  // 0x0 (0x0)
	uint8_t InState;  // 0x8 (0x8)
	char pad_9[7];  // 0x9 (0x9)


}; 
 
 // Function Engine.WorldPartitionSubsystem.IsAllStreamingCompleted
struct FIsAllStreamingCompleted
{
	char pad_0_1 : 7;  // 0x0 (0x0)
	bool ReturnValue : 1;  // 0x0 (0x0)


}; 
 
 